parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - task: NodeTool@0
    displayName: Use Node 8.x
    inputs:
      versionSpec: 8.x
      checkLatest: true

  - ${{ if eq(parameters.name, 'Windows') }}:
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
      displayName: 'Run CredScan'
      inputs:
        verboseOutput: true
        debugMode: false
      continueOnError: true

  - task: Npm@1
    displayName: npm install
    inputs:
      command: custom
      customCommand: install --unsafe-perms
      verbose: false

  - ${{ if eq(parameters.name, 'Linux') }}:
    - script: |
        cd '$(Build.SourcesDirectory)'

        export npm_package_engines_vscode='^1.19.0'
        node ./node_modules/vscode/bin/install

  - task: Npm@1
    displayName: npm build
    inputs:
      command: custom
      verbose: false
      customCommand: 'run build'

  - task: Npm@1
    displayName: npm test
    inputs:
      command: custom
      verbose: false
      customCommand: test

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      ignoreDirectories: 'testdata'

  # - task: Npm@1
  #   displayName: npm intTest
  #   inputs:
  #     command: custom
  #     verbose: false
  #     customCommand: 'run intTest'

  - ${{ if eq(parameters.name, 'Windows') }}:
    - task: Npm@1
      condition: false
      displayName: npm frameworkTest
      inputs:
        command: custom
        verbose: false
        customCommand: 'run frameworkTest'

  - task: Npm@1
    displayName: npm lint
    inputs:
      command: custom
      verbose: false
      customCommand: 'run lint'

  - ${{ if eq(parameters.name, 'Windows') }}:
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
      displayName: 'TSA upload to Codebase: vscode-chrome-debug_master Version: TsaV2'
      inputs:
        tsaVersion: TsaV2
        codebase: NewOrUpdate
        codeBaseName: 'vscode-chrome-debug_master'
        notificationAlias: 'webdiag-extensions@microsoft.com'
        instanceUrlForTsaV2: DEVDIV
        projectNameDEVDIV: DevDiv
        areaPath: 'DevDiv\Client Platform\HTML Experiences\Diagnostics\Debugger'
        uploadAPIScan: false
        uploadBinSkim: false
        uploadFortifySCA: false
        uploadFxCop: false
        uploadModernCop: false
        uploadPoliCheck: false
        uploadPREfast: false
        uploadRoslyn: false
        uploadTSLint: false

  - ${{ if eq(parameters.name, 'Windows') }}:
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
      displayName: 'Publish Security Analysis Logs'

   # Publish Test Results
  - ${{ if eq(parameters.name, 'Windows') }}:
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: '**/test-*.xml'

