"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateHeading = exports.generateLinkReferences = exports.LINK_REFERENCE_DEFINITION_FOOTER = exports.LINK_REFERENCE_DEFINITION_HEADER = void 0;
const range_1 = require("../model/range");
const markdown_provider_1 = require("../services/markdown-provider");
const utils_1 = require("../utils");
exports.LINK_REFERENCE_DEFINITION_HEADER = `[//begin]: # "Autogenerated link references for markdown compatibility"`;
exports.LINK_REFERENCE_DEFINITION_FOOTER = `[//end]: # "Autogenerated link references"`;
exports.generateLinkReferences = (note, workspace, includeExtensions) => {
    if (!note) {
        return null;
    }
    const markdownReferences = markdown_provider_1.createMarkdownReferences(workspace, note.uri, includeExtensions);
    const newReferences = markdownReferences.length === 0
        ? ''
        : [
            exports.LINK_REFERENCE_DEFINITION_HEADER,
            ...markdownReferences.map(markdown_provider_1.stringifyMarkdownLinkReferenceDefinition),
            exports.LINK_REFERENCE_DEFINITION_FOOTER,
        ].join(note.source.eol);
    if (note.definitions.length === 0) {
        if (newReferences.length === 0) {
            return null;
        }
        const padding = note.source.end.character === 0
            ? note.source.eol
            : `${note.source.eol}${note.source.eol}`;
        return {
            newText: `${padding}${newReferences}`,
            range: range_1.Range.createFromPosition(note.source.end, note.source.end),
        };
    }
    else {
        const first = note.definitions[0];
        const last = note.definitions[note.definitions.length - 1];
        let nonGeneratedReferenceDefinitions = note.definitions;
        // if we have more definitions then referenced pages AND the page refers to a page
        // we expect non-generated link definitions to be present
        // Collect all non-generated definitions, by removing the generated ones
        if (note.definitions.length > markdownReferences.length &&
            markdownReferences.length > 0) {
            // remove all autogenerated definitions
            const beginIndex = note.definitions.findIndex(({ label }) => label === '//begin');
            const endIndex = note.definitions.findIndex(({ label }) => label === '//end');
            const generatedDefinitions = [...note.definitions].splice(beginIndex, endIndex - beginIndex + 1);
            nonGeneratedReferenceDefinitions = note.definitions.filter(x => !generatedDefinitions.includes(x));
        }
        // When we only have explicitly defined link definitions &&
        // no indication of previously defined generated links &&
        // there is no reference to another page, return null
        if (nonGeneratedReferenceDefinitions.length > 0 &&
            note.definitions.findIndex(({ label }) => label === '//begin') < 0 &&
            markdownReferences.length === 0) {
            return null;
        }
        // Format link definitions for non-generated links
        const nonGeneratedReferences = nonGeneratedReferenceDefinitions
            .map(markdown_provider_1.stringifyMarkdownLinkReferenceDefinition)
            .join(note.source.eol);
        const oldReferences = note.definitions
            .map(markdown_provider_1.stringifyMarkdownLinkReferenceDefinition)
            .join(note.source.eol);
        // When the newly formatted references match the old ones, OR
        // when non-generated references are present, but no new ones are generated
        // return null
        if (oldReferences === newReferences ||
            (nonGeneratedReferenceDefinitions.length > 0 &&
                newReferences === '' &&
                markdownReferences.length > 0)) {
            return null;
        }
        let fullReferences = `${newReferences}`;
        // If there are any non-generated definitions, add those to the output as well
        if (nonGeneratedReferenceDefinitions.length > 0 &&
            markdownReferences.length > 0) {
            fullReferences = `${nonGeneratedReferences}${note.source.eol}${newReferences}`;
        }
        return {
            // @todo: do we need to ensure new lines?
            newText: `${fullReferences}`,
            range: range_1.Range.createFromPosition(first.range.start, last.range.end),
        };
    }
};
exports.generateHeading = (note) => {
    if (!note) {
        return null;
    }
    // TODO now the note.title defaults to file name at parsing time, so this check
    // doesn't work anymore. Decide:
    // - whether do we actually want to continue generate the headings
    // - whether it should be under a config option
    // A possible approach would be around having a `sections` field in the note, and inspect
    // it to see if there is an h1 title. Alternatively parse directly the markdown in this function.
    if (note.title) {
        return null;
    }
    const frontmatterExists = note.source.contentStart.line !== 1;
    let newLineExistsAfterFrontmatter = false;
    if (frontmatterExists) {
        const lines = note.source.text.split(note.source.eol);
        const index = note.source.contentStart.line - 1;
        const line = lines[index];
        newLineExistsAfterFrontmatter = line === '';
    }
    const paddingStart = frontmatterExists ? note.source.eol : '';
    const paddingEnd = newLineExistsAfterFrontmatter
        ? note.source.eol
        : `${note.source.eol}${note.source.eol}`;
    return {
        newText: `${paddingStart}# ${utils_1.getHeadingFromFileName(note.uri.getName())}${paddingEnd}`,
        range: range_1.Range.createFromPosition(note.source.contentStart, note.source.contentStart),
    };
};
//# sourceMappingURL=index.js.map