#!/usr/bin/env node
const fs = require('fs');
const assert = require('assert');
const { default: ShortUniqueId } = require('short-unique-id');

const [,, ...args] = process.argv;

const {options} = require('./getopts').create([
  ['l' , 'length=ARG', 'character length of the uid to generate.'],
  [''  , 'dictionaryJson=ARG', 'json file with dictionary array.'],
])
.bindHelp()
.parseSystem();

const uidOps = {};

if ('length' in options) {
  const oLength = options.length;

  if (!((/^\d+$/).test(oLength) && parseInt(oLength, 10) > 0)) {
    throw new Error('only positive integers allowed for --length (-l) property');
  }

  uidOps.length = parseInt(oLength, 10);
}

if ('dictionaryJson' in options) {
  const oDictJson = options.dictionaryJson;

  fs.statSync(oDictJson);

  const dictJson = JSON.parse(fs.readFileSync(oDictJson));

  try {
    assert(
      Array.isArray(dictJson)
      && dictJson.length > 1
      && dictJson.reduce((a, b) => a && (b.length === 1), true)
    );
  } catch(e) {
    throw new Error('JSON file can only contain an array of two or more single character strings');
  }

  uidOps.dictionary = dictJson;
}

const uid = new ShortUniqueId(uidOps);

console.log(uid());
