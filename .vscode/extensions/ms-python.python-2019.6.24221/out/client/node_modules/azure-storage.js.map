{"version":3,"sources":["../../webpack/bootstrap","../../external \"util\"","../.././node_modules/validator/lib/util/assertString.js","../.././node_modules/assert-plus/assert.js","../../external \"crypto\"","../../external \"stream\"","../.././node_modules/sshpk/lib/utils.js","../../external \"fs\"","../.././node_modules/sshpk/lib/key.js","../.././node_modules/sshpk/lib/algs.js","../.././node_modules/sshpk/lib/private-key.js","../../external \"url\"","../.././node_modules/azure-storage/lib/common/common.core.js","../../external \"buffer\"","../.././node_modules/azure-storage/lib/common/util/constants.js","../../external \"events\"","../.././node_modules/sshpk/lib/errors.js","../.././node_modules/sshpk/lib/signature.js","../.././node_modules/tweetnacl/nacl-fast.js","../.././node_modules/asn1/lib/index.js","../../external \"http\"","../.././node_modules/underscore/underscore.js","../.././node_modules/jsbn/index.js","../.././node_modules/sshpk/lib/formats/pem.js","../../external \"zlib\"","../../external \"path\"","../.././node_modules/sshpk/lib/formats/rfc4253.js","../.././node_modules/azure-storage/lib/common/util/util.js","../../external \"https\"","../.././node_modules/ajv/lib/compile/util.js","../../external \"querystring\"","../.././node_modules/safe-buffer/index.js","../../external \"assert\"","../.././node_modules/sshpk/lib/fingerprint.js","../.././node_modules/sshpk/lib/certificate.js","../.././node_modules/ecc-jsbn/lib/ec.js","../.././node_modules/sshpk/lib/formats/pkcs8.js","../.././node_modules/sshpk/lib/ssh-buffer.js","../.././node_modules/sshpk/lib/identity.js","../../external \"string_decoder\"","../../external \"net\"","../.././node_modules/azure-storage/lib/common/util/sr.js","../.././node_modules/http-signature/lib/utils.js","../.././node_modules/sshpk/lib/formats/ssh-private.js","../.././node_modules/co/index.js","../.././node_modules/azure-storage/node_modules/extend/index.js","../.././node_modules/azure-storage/lib/common/errors/errors.js","../../external \"tls\"","../.././node_modules/azure-storage/lib/common/md5-wrapper/md5.node.js","../.././node_modules/sshpk/lib/index.js","../.././node_modules/sshpk/lib/dhe.js","../.././node_modules/asn1/lib/ber/errors.js","../.././node_modules/asn1/lib/ber/types.js","../.././node_modules/sshpk/lib/formats/pkcs1.js","../.././node_modules/sshpk/lib/formats/dnssec.js","../.././node_modules/caseless/index.js","../.././node_modules/ajv/lib/compile/resolve.js","../.././node_modules/fast-deep-equal/index.js","../.././node_modules/ajv/lib/compile/error_classes.js","../.././node_modules/uuid/index.js","../.././node_modules/validator/lib/util/merge.js","../.././node_modules/json-schema-traverse/index.js","../../external \"punycode\"","../.././node_modules/ecc-jsbn/index.js","../.././node_modules/sshpk/lib/ed-compat.js","../.././node_modules/sshpk/lib/formats/auto.js","../.././node_modules/bcrypt-pbkdf/index.js","../.././node_modules/sshpk/lib/formats/ssh.js","../.././node_modules/sshpk/lib/formats/x509.js","../.././node_modules/extsprintf/lib/extsprintf.js","../.././node_modules/combined-stream/lib/combined_stream.js","../.././node_modules/asynckit/lib/iterate.js","../.././node_modules/asynckit/lib/async.js","../.././node_modules/asynckit/lib/abort.js","../.././node_modules/asynckit/lib/state.js","../.././node_modules/asynckit/lib/terminator.js","../.././node_modules/asynckit/serialOrdered.js","../.././node_modules/isstream/isstream.js","../.././node_modules/qs/lib/index.js","../.././node_modules/qs/lib/utils.js","../.././node_modules/qs/lib/formats.js","../.././node_modules/ajv/lib/compile/schema_obj.js","../.././node_modules/fast-json-stable-stringify/index.js","../.././node_modules/ajv/lib/dotjs/validate.js","../.././node_modules/ajv/lib/dotjs/_limit.js","../.././node_modules/ajv/lib/dotjs/_limitItems.js","../.././node_modules/ajv/lib/dotjs/_limitLength.js","../.././node_modules/ajv/lib/dotjs/_limitProperties.js","../.././node_modules/uuid/lib/rng.js","../.././node_modules/uuid/lib/bytesToUuid.js","../.././node_modules/azure-storage/lib/services/blob/blobutilities.js","../.././node_modules/azure-storage/lib/services/table/tableutilities.js","../.././node_modules/azure-storage/lib/common/util/storageutilities.js","../.././node_modules/mime-types/index.js","../../external \"os\"","../.././node_modules/validator/lib/alpha.js","../.././node_modules/azure-storage/node_modules/xmlbuilder/lib/index.js","../.././node_modules/azure-storage/lib/common/diagnostics/logger.js","../.././node_modules/azure-storage/node_modules/request/node_modules/extend/index.js","../.././node_modules/azure-storage/node_modules/request/lib/helpers.js","../.././node_modules/json-stringify-safe/stringify.js","../.././node_modules/aws-sign2/index.js","../.././node_modules/http-signature/lib/index.js","../.././node_modules/http-signature/lib/parser.js","../.././node_modules/ecc-jsbn/lib/sec.js","../.././node_modules/asn1/lib/ber/index.js","../.././node_modules/asn1/lib/ber/reader.js","../.././node_modules/asn1/lib/ber/writer.js","../.././node_modules/sshpk/lib/formats/openssh-cert.js","../.././node_modules/sshpk/lib/formats/x509-pem.js","../.././node_modules/http-signature/lib/signer.js","../.././node_modules/jsprim/lib/jsprim.js","../.././node_modules/verror/lib/verror.js","../.././node_modules/core-util-is/lib/util.js","../.././node_modules/json-schema/lib/validate.js","../.././node_modules/http-signature/lib/verify.js","../.././node_modules/forever-agent/index.js","../.././node_modules/form-data/lib/form_data.js","../.././node_modules/delayed-stream/lib/delayed_stream.js","../.././node_modules/combined-stream/lib/defer.js","../.././node_modules/mime-db/index.js","../.././node_modules/asynckit/index.js","../.././node_modules/asynckit/parallel.js","../.././node_modules/asynckit/lib/defer.js","../.././node_modules/asynckit/serial.js","../.././node_modules/form-data/lib/populate.js","../.././node_modules/is-typedarray/index.js","../.././node_modules/qs/lib/stringify.js","../.././node_modules/qs/lib/parse.js","../.././node_modules/ajv/lib/ajv.js","../.././node_modules/ajv/lib/compile/index.js","../.././node_modules/ajv/lib/compile/ucs2length.js","../.././node_modules/ajv/lib/cache.js","../.././node_modules/ajv/lib/compile/formats.js","../.././node_modules/ajv/lib/compile/rules.js","../.././node_modules/ajv/lib/compile/_rules.js","../.././node_modules/ajv/lib/dotjs/ref.js","../.././node_modules/ajv/lib/dotjs/allOf.js","../.././node_modules/ajv/lib/dotjs/anyOf.js","../.././node_modules/ajv/lib/dotjs/const.js","../.././node_modules/ajv/lib/dotjs/contains.js","../.././node_modules/ajv/lib/dotjs/dependencies.js","../.././node_modules/ajv/lib/dotjs/enum.js","../.././node_modules/ajv/lib/dotjs/format.js","../.././node_modules/ajv/lib/dotjs/items.js","../.././node_modules/ajv/lib/dotjs/multipleOf.js","../.././node_modules/ajv/lib/dotjs/not.js","../.././node_modules/ajv/lib/dotjs/oneOf.js","../.././node_modules/ajv/lib/dotjs/pattern.js","../.././node_modules/ajv/lib/dotjs/properties.js","../.././node_modules/ajv/lib/dotjs/propertyNames.js","../.././node_modules/ajv/lib/dotjs/required.js","../.././node_modules/ajv/lib/dotjs/uniqueItems.js","../.././node_modules/ajv/lib/$data.js","../.././node_modules/ajv/lib/patternGroups.js","../.././node_modules/ajv/lib/compile/async.js","../.././node_modules/ajv/lib/keyword.js","../.././node_modules/ajv/lib/dotjs/custom.js","../.././node_modules/har-schema/lib/index.js","../.././node_modules/azure-storage/node_modules/request/node_modules/uuid/v4.js","../.././node_modules/tunnel-agent/index.js","../.././node_modules/performance-now/lib/performance-now.js","../.././node_modules/uuid/v1.js","../.././node_modules/uuid/v4.js","../.././node_modules/azure-storage/lib/common/util/validate.js","../.././node_modules/validator/lib/toDate.js","../.././node_modules/validator/lib/util/toString.js","../.././node_modules/validator/lib/isFQDN.js","../.././node_modules/azure-storage/lib/common/filters/retrypolicyfilter.js","../.././node_modules/azure-storage/lib/services/table/models/entityresult.js","../.././node_modules/azure-storage/lib/common/common.node.js","../.././node_modules/azure-storage/lib/common/streams/rangestream.js","../.././node_modules/azure-storage/node_modules/xmlbuilder/lib/XMLBuilder.js","../.././node_modules/azure-storage/node_modules/xml2js/lib/xml2js.js","../.././node_modules/azure-storage/lib/common/http/webresource.js","../.././node_modules/azure-storage/node_modules/request/lib/cookies.js","../.././node_modules/azure-storage/node_modules/tough-cookie/lib/pubsuffix-psl.js","../.././node_modules/azure-storage/node_modules/tough-cookie/lib/store.js","../.././node_modules/azure-storage/node_modules/tough-cookie/lib/permuteDomain.js","../.././node_modules/azure-storage/node_modules/tough-cookie/lib/pathMatch.js","../.././node_modules/azure-storage/lib/services/file/fileutilities.js","../.././node_modules/validator/index.js","../.././node_modules/validator/lib/toFloat.js","../.././node_modules/validator/lib/isByteLength.js","../.././node_modules/validator/lib/isIP.js","../.././node_modules/validator/lib/isInt.js","../.././node_modules/validator/lib/isFullWidth.js","../.././node_modules/validator/lib/isHalfWidth.js","../.././node_modules/validator/lib/isHexadecimal.js","../.././node_modules/validator/lib/ltrim.js","../.././node_modules/validator/lib/rtrim.js","../.././node_modules/validator/lib/blacklist.js","../.././node_modules/azure-storage/lib/common/streams/bufferstream.js","../.././node_modules/azure-storage/lib/common/services/servicesettings.js","../.././node_modules/azure-storage/lib/common/models/tokencredential.js","../.././node_modules/azure-storage/lib/common/models/servicepropertiesresult.js","../.././node_modules/azure-storage/lib/common/signing/sharedkey.js","../.././node_modules/azure-storage/lib/common/signing/hmacsha256sign.js","../.././node_modules/azure-storage/lib/common/signing/sharedaccesssignature.js","../.././node_modules/azure-storage/lib/common/util/iso8061date.js","../.././node_modules/azure-storage/lib/common/streams/chunkstream.js","../.././node_modules/azure-storage/lib/services/table/internal/requesthandler.js","../.././node_modules/azure-storage/lib/services/table/internal/odatahandler.js","../.././node_modules/azure-storage/lib/services/table/internal/edmhandler.js","../.././node_modules/azure-storage/lib/services/table/tablequery.js","../.././node_modules/azure-storage/lib/services/queue/queuemessageencoder.js","../.././node_modules/azure-storage/lib/azure-storage.js","../.././node_modules/azure-storage/lib/services/table/tableservice.js","../.././node_modules/azure-storage/lib/common/util/patch-xmlbuilder.js","../.././node_modules/azure-storage/node_modules/xmlbuilder/lib/XMLFragment.js","../.././node_modules/azure-storage/node_modules/sax/lib/sax.js","../.././node_modules/azure-storage/lib/common/services/storageserviceclient.js","../.././node_modules/azure-storage/lib/common/request-wrapper/request.node.js","../.././node_modules/azure-storage/node_modules/request/index.js","../.././node_modules/azure-storage/node_modules/tough-cookie/lib/cookie.js","../.././node_modules/psl/index.js","../.././node_modules/azure-storage/node_modules/tough-cookie/lib/memstore.js","../.././node_modules/azure-storage/node_modules/request/request.js","../.././node_modules/azure-storage/node_modules/aws4/aws4.js","../.././node_modules/azure-storage/node_modules/aws4/lru.js","../.././node_modules/azure-storage/node_modules/mime-types/index.js","../.././node_modules/azure-storage/node_modules/mime-db/index.js","../.././node_modules/azure-storage/node_modules/request/lib/getProxyFromURI.js","../.././node_modules/azure-storage/node_modules/request/lib/querystring.js","../.././node_modules/azure-storage/node_modules/request/lib/har.js","../.././node_modules/azure-storage/node_modules/har-validator/lib/promise.js","../.././node_modules/azure-storage/node_modules/har-validator/lib/error.js","../.././node_modules/azure-storage/node_modules/request/lib/auth.js","../.././node_modules/azure-storage/node_modules/request/node_modules/uuid/lib/rng.js","../.././node_modules/azure-storage/node_modules/request/node_modules/uuid/lib/bytesToUuid.js","../.././node_modules/azure-storage/node_modules/request/lib/oauth.js","../.././node_modules/azure-storage/node_modules/oauth-sign/index.js","../.././node_modules/azure-storage/node_modules/request/lib/hawk.js","../.././node_modules/azure-storage/node_modules/request/lib/multipart.js","../.././node_modules/azure-storage/node_modules/request/lib/redirect.js","../.././node_modules/azure-storage/node_modules/request/lib/tunnel.js","../.././node_modules/json-edm-parser/parser.js","../.././node_modules/jsonparse/jsonparse.js","../.././node_modules/validator/lib/toInt.js","../.././node_modules/validator/lib/toBoolean.js","../.././node_modules/validator/lib/equals.js","../.././node_modules/validator/lib/contains.js","../.././node_modules/validator/lib/matches.js","../.././node_modules/validator/lib/isEmail.js","../.././node_modules/validator/lib/isURL.js","../.././node_modules/validator/lib/isMACAddress.js","../.././node_modules/validator/lib/isBoolean.js","../.././node_modules/validator/lib/isAlpha.js","../.././node_modules/validator/lib/isAlphanumeric.js","../.././node_modules/validator/lib/isNumeric.js","../.././node_modules/validator/lib/isPort.js","../.././node_modules/validator/lib/isLowercase.js","../.././node_modules/validator/lib/isUppercase.js","../.././node_modules/validator/lib/isAscii.js","../.././node_modules/validator/lib/isVariableWidth.js","../.././node_modules/validator/lib/isMultibyte.js","../.././node_modules/validator/lib/isSurrogatePair.js","../.././node_modules/validator/lib/isFloat.js","../.././node_modules/validator/lib/isDecimal.js","../.././node_modules/validator/lib/isDivisibleBy.js","../.././node_modules/validator/lib/isHexColor.js","../.././node_modules/validator/lib/isISRC.js","../.././node_modules/validator/lib/isMD5.js","../.././node_modules/validator/lib/isHash.js","../.././node_modules/validator/lib/isJSON.js","../.././node_modules/validator/lib/isEmpty.js","../.././node_modules/validator/lib/isLength.js","../.././node_modules/validator/lib/isUUID.js","../.././node_modules/validator/lib/isMongoId.js","../.././node_modules/validator/lib/isAfter.js","../.././node_modules/validator/lib/isBefore.js","../.././node_modules/validator/lib/isIn.js","../.././node_modules/validator/lib/isCreditCard.js","../.././node_modules/validator/lib/isISIN.js","../.././node_modules/validator/lib/isISBN.js","../.././node_modules/validator/lib/isISSN.js","../.././node_modules/validator/lib/isMobilePhone.js","../.././node_modules/validator/lib/isCurrency.js","../.././node_modules/validator/lib/isISO8601.js","../.././node_modules/validator/lib/isISO31661Alpha2.js","../.././node_modules/validator/lib/isBase64.js","../.././node_modules/validator/lib/isDataURI.js","../.././node_modules/validator/lib/isMimeType.js","../.././node_modules/validator/lib/isLatLong.js","../.././node_modules/validator/lib/isPostalCode.js","../.././node_modules/validator/lib/trim.js","../.././node_modules/validator/lib/escape.js","../.././node_modules/validator/lib/unescape.js","../.././node_modules/validator/lib/stripLow.js","../.././node_modules/validator/lib/whitelist.js","../.././node_modules/validator/lib/isWhitelisted.js","../.././node_modules/validator/lib/normalizeEmail.js","../.././node_modules/azure-storage/lib/common/services/storageservicesettings.js","../.././node_modules/azure-storage/lib/common/signing/tokensigner.js","../.././node_modules/azure-storage/lib/common/models/servicestatsparser.js","../.././node_modules/azure-storage/lib/common/models/aclresult.js","../.././node_modules/azure-storage/lib/common/filters/linearretrypolicyfilter.js","../.././node_modules/azure-storage/lib/common/filters/exponentialretrypolicyfilter.js","../.././node_modules/azure-storage/lib/common/streams/batchoperation.js","../.././node_modules/azure-storage/lib/common/streams/chunkallocator.js","../.././node_modules/azure-storage/lib/common/streams/chunkstreamwithstream.js","../.././node_modules/azure-storage/lib/common/streams/speedsummary.js","../.././node_modules/azure-storage/lib/common/util/date.js","../.././node_modules/azure-storage/lib/common/util/accesscondition.js","../.././node_modules/azure-storage/lib/services/table/internal/sharedkeytable.js","../.././node_modules/azure-storage/lib/services/table/models/tableresult.js","../.././node_modules/azure-storage/lib/services/table/models/batchresult.js","../.././node_modules/azure-storage/lib/services/table/tablebatch.js","../.././node_modules/azure-storage/lib/services/blob/blobservice.node.js","../.././node_modules/azure-storage/lib/common/streams/filereadstream.js","../.././node_modules/azure-storage/lib/services/blob/blobservice.core.js","../.././node_modules/azure-storage/lib/services/blob/internal/blockrangestream.js","../.././node_modules/azure-storage/lib/services/blob/internal/pagerangestream.js","../.././node_modules/azure-storage/lib/common/models/accountpropertiesresult.js","../.././node_modules/azure-storage/lib/services/blob/models/blocklistresult.js","../.././node_modules/azure-storage/lib/services/blob/models/blobresult.js","../.././node_modules/azure-storage/lib/services/blob/models/containerresult.js","../.././node_modules/azure-storage/lib/services/blob/models/leaseresult.js","../.././node_modules/browserify-mime/browserify-mime.js","../.././node_modules/azure-storage/lib/services/file/fileservice.node.js","../.././node_modules/azure-storage/lib/services/file/fileservice.core.js","../.././node_modules/azure-storage/lib/services/file/internal/filerangestream.js","../.././node_modules/azure-storage/lib/services/file/models/shareresult.js","../.././node_modules/azure-storage/lib/services/file/models/directoryresult.js","../.././node_modules/azure-storage/lib/services/file/models/fileresult.js","../.././node_modules/azure-storage/lib/services/queue/queueservice.js","../.././node_modules/azure-storage/lib/services/queue/models/queueresult.js","../.././node_modules/azure-storage/lib/services/queue/models/queuemessageresult.js","../.././node_modules/azure-storage/lib/services/queue/queueutilities.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","default","input","String","TypeError","assert","Stream","util","UUID_REGEXP","_capitalize","str","charAt","toUpperCase","slice","_toss","expected","oper","arg","actual","AssertionError","message","format","undefined","operator","stackStartFunction","caller","_getClass","toString","noop","types","bool","check","func","string","number","isNaN","finite","isFinite","buffer","Buffer","isBuffer","array","Array","isArray","stream","date","Date","regexp","RegExp","uuid","test","_setExports","ndebug","out","keys","process","env","NODE_NDEBUG","msg","forEach","k","type","length","bufferSplit","buf","chr","parts","lastPart","matches","charCodeAt","newPart","push","addRSAMissing","assertCompatible","PrivateKey","bigInt","BigInteger","e","Error","part","data","dmodp","mod","subtract","bigintToMpBuf","dmodq","q","calculateDSAPublic","g","x","modPow","calculateED25519Public","nacl","kp","sign","keyPair","fromSeed","Uint8Array","publicKey","calculateX25519Public","box","mpNormalize","mpDenormalize","ecNormalize","addZero","b","copy","countZeros","obit","mask","isCompatible","obj","klass","needVer","_sshpkApiVersion","proto","getPrototypeOf","depth","constructor","MAX_CLASS_DEPTH","ver","_oldVersionDetect","opensslKeyDeriv","cipher","salt","passphrase","count","D","D_prev","bufs","clen","CIPHER_LEN","PKCS5_SALT_LEN","material","iv","concat","j","crypto","createHash","update","digest","opensshCipherInfo","inf","keySize","blockSize","opensslName","publicFromPrivateECDSA","curveName","priv","ec","jsbn","params","algs","curves","a","curve","ECCurveFp","G","decodePointHex","pub","multiply","encodePointHex","Key","zeroPadToLength","len","equal","writeBitString","der","tag","asn1","Ber","BitString","writeBuffer","readBitString","readString","strictEqual","ok","des-ede3-cbc","aes-128-cbc","bigint","toByteArray","edCompat","Fingerprint","Signature","DiffieHellman","errs","utils","InvalidAlgorithmError","KeyParseError","formats","opts","arrayOfObject","optionalString","comment","algInfo","info","sz","partLookup","this","source","_rfc4253Cache","_hashCache","size","szPart","sizePart","toBuffer","options","optionalObject","write","hash","algo","toLowerCase","hashAlgs","fingerprint","algorithm","defaultHashAlgorithm","hashAlgo","createVerify","Verifier","v","nm","err","match","oldVerify","verify","self","signature","fmt","isSignature","hashAlgorithm","createDiffieHellman","createDH","parse","filename","read","toPublic","isKey","dsa","rsa","ecdsa","ed25519","algPrivInfo","nistp256","pkcs8oid","replace","nistp384","nistp521","privInfo","md5","sha1","sha256","sha384","sha512","dhe","generateECDSA","generateED25519","KeyEncryptedError","_pubCache","inherits","pubParts","derive","newType","pair","fromSecretKey","createSign","Signer","oldSign","sig","isPrivateKey","generate","azureutil","nodeVersion","getNodeVersion","major","minor","patch","xmlbuilder","xml2js","Logger","WebResource","StorageServiceClient","ServicePropertiesResult","ServiceStatsParser","AclResult","TokenCredential","LinearRetryPolicyFilter","ExponentialRetryPolicyFilter","RetryPolicyFilter","SharedAccessSignature","SharedKey","BatchOperation","ChunkAllocator","ChunkStream","ChunkStreamWithStream","SpeedSummary","BufferStream","Constants","SR","ISO8061Date","validate","StorageUtilities","AccessCondition","storageDnsSuffix","AZURE_STORAGE_DNS_SUFFIX","USER_AGENT_PRODUCT_NAME","USER_AGENT_PRODUCT_VERSION","DEFAULT_PARALLEL_OPERATION_THREAD_COUNT","DEFAULT_ENABLE_REUSE_SOCKET","KB","MB","GB","HTTP","HTTPS","DEFAULT_HTTP_PORT","DEFAULT_HTTPS_PORT","DEFAULT_CLIENT_REQUEST_TIMEOUT_IN_MS","XML_METADATA_MARKER","XML_VALUE_MARKER","ServiceType","Blob","Queue","Table","File","RequestLocationMode","PRIMARY_ONLY","SECONDARY_ONLY","PRIMARY_OR_SECONDARY","StorageLocation","PRIMARY","SECONDARY","AccountSasConstants","Permissions","READ","ADD","CREATE","UPDATE","PROCESS","WRITE","DELETE","LIST","Services","BLOB","FILE","QUEUE","TABLE","Resources","SERVICE","CONTAINER","OBJECT","Protocols","HTTPSONLY","HTTPSORHTTP","AclConstants","ACCESS_POLICY","EXPIRY","ID","PERMISSION","SIGNED_IDENTIFIER_ELEMENT","SIGNED_IDENTIFIERS_ELEMENT","START","ServicePropertiesConstants","STORAGE_SERVICE_PROPERTIES_ELEMENT","DEFAULT_ANALYTICS_VERSION","LOGGING_ELEMENT","VERSION_ELEMENT","DELETE_ELEMENT","READ_ELEMENT","WRITE_ELEMENT","RETENTION_POLICY_ELEMENT","ENABLED_ELEMENT","DAYS_ELEMENT","HOUR_METRICS_ELEMENT","MINUTE_METRICS_ELEMENT","CORS_ELEMENT","CORS_RULE_ELEMENT","ALLOWED_ORIGINS_ELEMENT","ALLOWED_METHODS_ELEMENT","MAX_AGE_IN_SECONDS_ELEMENT","EXPOSED_HEADERS_ELEMENT","ALLOWED_HEADERS_ELEMENT","INCLUDE_APIS_ELEMENT","DEFAULT_SERVICE_VERSION_ELEMENT","DEFAULT_DELETE_RETENTION_POLICY_ELEMENT","DEFAULT_STATIC_WEBSITE_ELEMENT","DEFAULT_INDEX_DOCUMENT_ELEMENT","DEFAULT_ERROR_DOCUMENT_404_PATH_ELEMENT","BlobConstants","LATEST_ELEMENT","UNCOMMITTED_ELEMENT","BLOCK_LIST_ELEMENT","COMMITTED_ELEMENT","DEFAULT_WRITE_PAGE_SIZE_IN_BYTES","MIN_WRITE_PAGE_SIZE_IN_BYTES","DEFAULT_SINGLE_BLOB_PUT_THRESHOLD_IN_BYTES","DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES","DEFAULT_CRITICAL_MEMORY_LIMITATION_32_IN_BYTES","DEFAULT_CRITICAL_MEMORY_LIMITATION_BROWSER_IN_BYTES","DEFAULT_MINIMUM_MEMORY_USAGE_BROWSER_IN_BYTES","MAX_BLOCK_BLOB_BLOCK_SIZE","MAX_APPEND_BLOB_BLOCK_SIZE","MAX_SINGLE_UPLOAD_BLOB_SIZE_IN_BYTES","MAX_RANGE_GET_SIZE_WITH_MD5","MAX_UPDATE_PAGE_SIZE","MAX_QUEUED_WRITE_DISK_BUFFER_SIZE","MAX_SINGLE_GET_PAGE_RANGE_SIZE","PAGE_SIZE","ResourceTypes","ListBlobTypes","Directory","PageWriteOptions","CLEAR","BlobTypes","BLOCK","PAGE","APPEND","LeaseOperation","ACQUIRE","RENEW","CHANGE","RELEASE","BREAK","FileConstants","DEFAULT_WRITE_SIZE_IN_BYTES","MAX_UPDATE_FILE_SIZE","DEFAULT_SINGLE_FILE_GET_THRESHOLD_IN_BYTES","MIN_WRITE_FILE_SIZE_IN_BYTES","RangeWriteOptions","SHARE","QueueConstants","QUEUE_MESSAGE_ELEMENT","MESSAGE_TEXT_ELEMENT","TableConstants","CHANGESET_DELIMITER","BATCH_DELIMITER","CONTINUATION_NEXT_ROW_KEY","CONTINUATION_NEXT_PARTITION_KEY","CONTINUATION_NEXT_TABLE_NAME","NEXT_ROW_KEY","NEXT_PARTITION_KEY","NEXT_TABLE_NAME","ODATA_PREFIX","ODATA_TYPE_SUFFIX","ODATA_METADATA_MARKER","ODATA_VALUE_MARKER","ODATA_TYPE_MARKER","DEFAULT_DATA_SERVICE_VERSION","TABLE_NAME","TABLE_SERVICE_TABLE_NAME","Operations","RETRIEVE","INSERT","REPLACE","MERGE","INSERT_OR_REPLACE","INSERT_OR_MERGE","HeaderConstants","ACCEPT_RANGES","CONTENT_TRANSFER_ENCODING","TRANSFER_ENCODING","SERVER","LOCATION","LAST_MODIFIED","CREATION_TIME","DATA_SERVICE_VERSION","MAX_DATA_SERVICE_VERSION","PREFIX_FOR_STORAGE","CLIENT_REQUEST_ID","APPROXIMATE_MESSAGES_COUNT","AUTHORIZATION","FORCE_NO_CACHE_IN_BROWSER","BLOB_PUBLIC_ACCESS","HAS_IMMUTABILITY_POLICY","HAS_LEGAL_HOLD","BLOB_TYPE","TYPE","BLOCK_BLOB","CACHE_CONTROL","BLOB_CACHE_CONTROL","FILE_CACHE_CONTROL","COPY_STATUS","COPY_COMPLETION_TIME","COPY_STATUS_DESCRIPTION","COPY_ID","COPY_PROGRESS","COPY_ACTION","INCREMENTAL_COPY","COPY_DESTINATION_SNAPSHOT","CONTENT_ID","CONTENT_ENCODING","BLOB_CONTENT_ENCODING","FILE_CONTENT_ENCODING","CONTENT_LANGUAGE","BLOB_CONTENT_LANGUAGE","FILE_CONTENT_LANGUAGE","CONTENT_LENGTH","BLOB_CONTENT_LENGTH","FILE_CONTENT_LENGTH","CONTENT_DISPOSITION","BLOB_CONTENT_DISPOSITION","FILE_CONTENT_DISPOSITION","CONTENT_MD5","BLOB_CONTENT_MD5","FILE_CONTENT_MD5","CONTENT_RANGE","CONTENT_TYPE","BLOB_CONTENT_TYPE","FILE_CONTENT_TYPE","COPY_SOURCE","DATE","MS_DATE","DELETE_SNAPSHOT","ETAG","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_UNMODIFIED_SINCE","INCLUDE_SNAPSHOTS_VALUE","JSON_CONTENT_TYPE_VALUE","SKU_NAME","ACCOUNT_KIND","LEASE_ID","LEASE_BREAK_PERIOD","PROPOSED_LEASE_ID","LEASE_DURATION","SOURCE_LEASE_ID","LEASE_TIME","LEASE_STATUS","LEASE_STATE","PAGE_BLOB","PAGE_WRITE","FILE_WRITE","PREFER","PREFER_CONTENT","PREFER_NO_CONTENT","PREFIX_FOR_STORAGE_METADATA","PREFIX_FOR_STORAGE_PROPERTIES","RANGE","SOURCE_RANGE","RANGE_GET_CONTENT_MD5","RANGE_HEADER_FORMAT","REQUEST_ID","SEQUENCE_NUMBER","SEQUENCE_NUMBER_EQUAL","SEQUENCE_NUMBER_LESS_THAN","SEQUENCE_NUMBER_LESS_THAN_OR_EQUAL","SEQUENCE_NUMBER_ACTION","SIZE","SNAPSHOT","SNAPSHOTS_ONLY_VALUE","SOURCE_IF_MATCH","SOURCE_IF_MODIFIED_SINCE","SOURCE_IF_NONE_MATCH","SOURCE_IF_UNMODIFIED_SINCE","STORAGE_RANGE","STORAGE_VERSION","TARGET_STORAGE_VERSION","USER_AGENT","POP_RECEIPT","TIME_NEXT_VISIBLE","APPROXIMATE_MESSAGE_COUNT","LEASE_ACTION","ACCEPT","ACCEPT_CHARSET","HOST","CORRELATION_ID","GROUP_ID","SHARE_QUOTA","BLOB_CONDITION_MAX_SIZE","BLOB_CONDITION_APPEND_POSITION","BLOB_APPEND_OFFSET","BLOB_COMMITTED_BLOCK_COUNT","REQUEST_SERVER_ENCRYPTED","SERVER_ENCRYPTED","ACCESS_TIER","ACCESS_TIER_CHANGE_TIME","ACCESS_TIER_INFERRED","ARCHIVE_STATUS","QueryStringConstants","API_VERSION","COMP","RESTYPE","SHARE_SNAPSHOT","PREV_SNAPSHOT","TIMEOUT","SIGNED_START","SIGNED_EXPIRY","SIGNED_RESOURCE","SIGNED_PERMISSIONS","SIGNED_SERVICES","SIGNED_RESOURCE_TYPES","SIGNED_IP","SIGNED_PROTOCOL","SIGNED_IDENTIFIER","SIGNATURE","SIGNED_VERSION","BLOCK_ID","BLOCK_LIST_TYPE","PREFIX","MARKER","MAX_RESULTS","DELIMITER","INCLUDE","PEEK_ONLY","NUM_OF_MESSAGES","VISIBILITY_TIMEOUT","MESSAGE_TTL","SELECT","FILTER","TOP","SKIP","LOCK_ID","TABLENAME","STARTPK","STARTRK","ENDPK","ENDRK","StorageServiceClientConstants","DEFAULT_PROTOCOL","EnvironmentVariables","AZURE_STORAGE_ACCOUNT","AZURE_STORAGE_ACCESS_KEY","AZURE_STORAGE_CONNECTION_STRING","HTTP_PROXY","HTTPS_PROXY","EMULATED","DEVSTORE_STORAGE_ACCOUNT","DEVSTORE_STORAGE_ACCESS_KEY","DEV_STORE_URI","DEVSTORE_DEFAULT_PROTOCOL","DEVSTORE_BLOB_HOST","DEVSTORE_QUEUE_HOST","DEVSTORE_TABLE_HOST","CLOUD_BLOB_HOST","CLOUD_QUEUE_HOST","CLOUD_TABLE_HOST","CLOUD_FILE_HOST","HttpConstants","HttpVerbs","PUT","GET","POST","HEAD","HttpResponseCodes","Ok","Created","Accepted","NoContent","PartialContent","BadRequest","Unauthorized","Forbidden","NotFound","Conflict","LengthRequired","PreconditionFailed","CompatibleVersionConstants","AUGUST_2013","FEBRUARY_2012","BlobErrorCodeStrings","INVALID_BLOCK_ID","BLOB_NOT_FOUND","BLOB_ALREADY_EXISTS","CONTAINER_ALREADY_EXISTS","CONTAINER_NOT_FOUND","INVALID_BLOB_OR_BLOCK","INVALID_BLOCK_LIST","FileErrorCodeStrings","SHARE_ALREADY_EXISTS","SHARE_NOT_FOUND","FILE_NOT_FOUND","QueueErrorCodeStrings","QUEUE_NOT_FOUND","QUEUE_DISABLED","QUEUE_ALREADY_EXISTS","QUEUE_NOT_EMPTY","QUEUE_BEING_DELETED","POP_RECEIPT_MISMATCH","INVALID_PARAMETER","MESSAGE_NOT_FOUND","MESSAGE_TOO_LARGE","INVALID_MARKER","StorageErrorCodeStrings","CONDITION_NOT_MET","MISSING_REQUIRED_HEADER","MISSING_REQUIRED_XML_NODE","UNSUPPORTED_HEADER","UNSUPPORTED_XML_NODE","INVALID_HEADER_VALUE","INVALID_XML_NODE_VALUE","MISSING_REQUIRED_QUERY_PARAMETER","UNSUPPORTED_QUERY_PARAMETER","INVALID_QUERY_PARAMETER_VALUE","OUT_OF_RANGE_QUERY_PARAMETER_VALUE","REQUEST_URL_FAILED_TO_PARSE","INVALID_URI","INVALID_HTTP_VERB","EMPTY_METADATA_KEY","INVALID_XML_DOCUMENT","MD5_MISMATCH","INVALID_MD5","OUT_OF_RANGE_INPUT","INVALID_AUTHENTICATION_INFO","INVALID_INPUT","INVALID_METADATA","INVALID_RESOURCE_NAME","METADATA_TOO_LARGE","CONDITION_HEADER_NOT_SUPPORTED","MULTIPLE_CONDITION_HEADER_NOT_SUPPORTED","AUTHENTICATION_FAILED","INSUFFICIENT_ACCOUNT_PERMISSIONS","RESOURCE_NOT_FOUND","ACCOUNT_IS_DISABLED","UNSUPPORTED_HTTP_VERB","ACCOUNT_ALREADY_EXISTS","ACCOUNT_BEING_CREATED","RESOURCE_ALREADY_EXISTS","RESOURCE_TYPE_MISMATCH","MISSING_CONTENT_LENGTH_HEADER","REQUEST_BODY_TOO_LARGE","INVALID_RANGE","INTERNAL_ERROR","OPERATION_TIMED_OUT","SERVER_BUSY","UPDATE_CONDITION_NOT_SATISFIED","CONTAINER_DISABLED","CONTAINER_BEING_DELETED","TableErrorCodeStrings","XMETHOD_NOT_USING_POST","XMETHOD_INCORRECT_VALUE","XMETHOD_INCORRECT_COUNT","TABLE_HAS_NO_PROPERTIES","DUPLICATE_PROPERTIES_SPECIFIED","TABLE_HAS_NO_SUCH_PROPERTY","DUPLICATE_KEY_PROPERTY_SPECIFIED","TABLE_ALREADY_EXISTS","TABLE_NOT_FOUND","ENTITY_NOT_FOUND","ENTITY_ALREADY_EXISTS","PARTITION_KEY_NOT_SPECIFIED","OPERATOR_INVALID","PROPERTIES_NEED_VALUE","PARTITION_KEY_PROPERTY_CANNOT_BE_UPDATED","TOO_MANY_PROPERTIES","ENTITY_TOO_LARGE","PROPERTY_VALUE_TOO_LARGE","INVALID_VALUE_TYPE","TABLE_BEING_DELETED","TABLE_SERVER_OUT_OF_MEMORY","PRIMARY_KEY_PROPERTY_IS_INVALID_TYPE","PROPERTY_NAME_TOO_LONG","PROPERTY_NAME_INVALID","BATCH_OPERATION_NOT_SUPPORTED","JSON_FORMAT_NOT_SUPPORTED","METHOD_NOT_ALLOWED","NOT_IMPLEMENTED","ConnectionStringKeys","USE_DEVELOPMENT_STORAGE_NAME","DEVELOPMENT_STORAGE_PROXY_URI_NAME","DEFAULT_ENDPOINTS_PROTOCOL_NAME","ACCOUNT_NAME_NAME","ACCOUNT_KEY_NAME","BLOB_ENDPOINT_NAME","FILE_ENDPOINT_NAME","QUEUE_ENDPOINT_NAME","TABLE_ENDPOINT_NAME","SHARED_ACCESS_SIGNATURE_NAME","ENDPOINT_SUFFIX_NAME","BLOB_BASE_DNS_NAME","FILE_BASE_DNS_NAME","QUEUE_BASE_DNS_NAME","TABLE_BASE_DNS_NAME","FingerprintFormatError","fp","captureStackTrace","alg","innerErr","keyName","SignatureParseError","CertificateParseError","certName","SSHBuffer","parseOneNum","head","readPart","atEnd","stype","writeString","writePart","BerWriter","startSequence","Integer","endSequence","inner","BerReader","readSequence","readBuffer","split","gf","init","Float64Array","randombytes","_0","_9","gf0","gf1","_121665","D2","X","Y","I","ts64","h","vn","xi","y","yi","crypto_verify_16","crypto_verify_32","crypto_core_salsa20","inp","u","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","core_salsa20","crypto_core_hsalsa20","core_hsalsa20","sigma","crypto_stream_salsa20_xor","cpos","mpos","z","crypto_stream_salsa20","crypto_stream","sn","crypto_stream_xor","poly1305","t0","t1","t2","t3","t4","t5","t6","t7","Uint16Array","pad","leftover","fin","crypto_onetimeauth","outpos","finish","crypto_onetimeauth_verify","hpos","crypto_secretbox","crypto_secretbox_open","set25519","car25519","Math","floor","sel25519","pack25519","neq25519","par25519","unpack25519","A","Z","M","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","S","inv25519","crypto_scalarmult","f","x32","subarray","x16","crypto_scalarmult_base","crypto_box_keypair","crypto_box_beforenm","blocks","bytes","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","hibit","h0","h1","h2","h3","h4","h5","h6","h7","h8","h9","r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","mac","macpos","want","crypto_box_afternm","crypto_box_open_afternm","K","crypto_hashblocks_hl","hh","hl","bh0","bh1","bh2","bh3","bh4","bh5","bh6","bh7","bl0","bl1","bl2","bl3","bl4","bl5","bl6","bl7","th","tl","wh","Int32Array","wl","ah0","ah1","ah2","ah3","ah4","ah5","ah6","ah7","al0","al1","al2","al3","al4","al5","al6","al7","pos","crypto_hash","add","cswap","pack","tx","ty","zi","scalarmult","scalarbase","crypto_sign_keypair","pk","sk","seeded","L","modL","carry","reduce","crypto_sign","sm","smlen","unpackneg","chk","num","den","den2","den4","den6","pow2523","crypto_sign_open","crypto_secretbox_KEYBYTES","crypto_secretbox_NONCEBYTES","crypto_box_PUBLICKEYBYTES","crypto_box_SECRETKEYBYTES","crypto_box_NONCEBYTES","checkLengths","checkArrayTypes","arguments","cleanup","arr","lowlevel","crypto_box","crypto_box_open","crypto_secretbox_ZEROBYTES","crypto_secretbox_BOXZEROBYTES","crypto_scalarmult_BYTES","crypto_scalarmult_SCALARBYTES","crypto_box_BEFORENMBYTES","crypto_box_ZEROBYTES","crypto_box_BOXZEROBYTES","crypto_sign_BYTES","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","crypto_sign_SEEDBYTES","crypto_hash_BYTES","decodeUTF8","encodeUTF8","encodeBase64","decodeBase64","randomBytes","secretbox","nonce","open","keyLength","nonceLength","overheadLength","scalarMult","base","scalarLength","groupElementLength","secretKey","before","checkBoxLengths","after","publicKeyLength","secretKeyLength","sharedKeyLength","signedMsg","tmp","mlen","detached","seed","seedLength","signatureLength","hashLength","setPRNG","fn","msCrypto","getRandomValues","min","Reader","Writer","__WEBPACK_AMD_DEFINE_RESULT__","root","previousUnderscore","_","ArrayProto","ObjProto","FuncProto","Function","nativeIsArray","nativeKeys","nativeBind","nativeCreate","Ctor","_wrapped","VERSION","optimizeCb","context","argCount","other","index","collection","accumulator","apply","cb","identity","isFunction","isObject","matcher","iteratee","Infinity","createAssigner","keysFunc","undefinedOnly","baseCreate","result","MAX_ARRAY_INDEX","pow","getLength","isArrayLike","createReduce","dir","memo","currentKey","iterator","each","map","collect","results","foldl","inject","reduceRight","foldr","find","detect","predicate","findIndex","findKey","filter","select","list","reject","negate","every","all","some","any","contains","includes","include","item","fromIndex","guard","values","indexOf","invoke","method","args","isFunc","pluck","where","attrs","findWhere","max","computed","lastComputed","shuffle","rand","set","shuffled","random","sample","sortBy","criteria","sort","left","right","group","behavior","groupBy","has","indexBy","countBy","toArray","partition","pass","fail","first","take","initial","last","rest","tail","drop","compact","flatten","shallow","strict","startIndex","output","idx","isArguments","createPredicateIndexFinder","createIndexFinder","predicateFind","sortedIndex","without","difference","uniq","unique","isSorted","isBoolean","seen","union","intersection","argsLength","zip","unzip","findLastIndex","low","high","mid","lastIndexOf","range","start","stop","step","ceil","executeBound","sourceFunc","boundFunc","callingContext","bound","partial","boundArgs","position","bindAll","memoize","hasher","cache","address","delay","wait","setTimeout","defer","throttle","timeout","previous","later","leading","now","remaining","clearTimeout","trailing","debounce","immediate","timestamp","callNow","wrap","wrapper","compose","times","once","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","collectNonEnumProps","nonEnumIdx","prop","allKeys","mapObject","pairs","invert","functions","methods","names","extend","extendOwn","assign","pick","oiteratee","omit","defaults","props","clone","tap","interceptor","isMatch","eq","aStack","bStack","className","areArrays","aCtor","bCtor","pop","isEqual","isEmpty","isString","isElement","nodeType","Int8Array","parseFloat","isNumber","isNull","isUndefined","noConflict","constant","propertyOf","accum","getTime","escapeMap","&","<",">","\"","'","`","unescapeMap","createEscaper","escaper","join","testRegexp","replaceRegexp","escape","unescape","fallback","idCounter","uniqueId","prefix","id","templateSettings","evaluate","interpolate","noMatch","escapes","\\","\r","\n"," "," ","escapeChar","template","text","settings","oldSettings","offset","variable","render","argument","chain","instance","_chain","mixin","valueOf","toJSON","dbits","fromNumber","fromString","nbi","inBrowser","navigator","appName","am","w","xl","xh","DB","DM","DV","FV","F1","F2","rr","vv","BI_RM","BI_RC","int2char","intAt","nbv","fromInt","nbits","Classic","Montgomery","mp","invDigit","mpl","mph","um","mt2","op_and","op_or","op_xor","op_andnot","lbit","cbit","NullExp","nNop","Barrett","q3","ONE","dlShiftTo","mu","divide","convert","compareTo","revert","divRemTo","mulTo","multiplyTo","sqrTo","squareTo","abs","ZERO","subTo","copyTo","u0","clamp","drShiftTo","fromRadix","mi","sh","lShiftTo","bs","cbs","bm","ds","rShiftTo","pm","pt","ts","ms","nsh","ys","y0","yt","qd","isEven","exp","toRadix","km","bitLength","modPowInt","multiplyUpperTo","multiplyLowerTo","dAddOffset","rng_state","rng_pool","rng_pptr","lowprimes","lplim","rng_seed_time","rng_psize","chunkSize","LN2","log","signum","cs","intValue","substr","dMultiply","testBit","bitwiseTo","shiftLeft","isProbablePrime","nextBytes","op","changeBit","addTo","modInt","millerRabin","n1","getLowestSetBit","shiftRight","byteValue","shortValue","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","remainder","divideAndRemainder","k1","g2","is1","modInverse","ac","gcd","square","window","ua","appVersion","rng_get_byte","Arcfour","next","SecureRandom","ba","forceType","lines","trim","m2","headers","errors","chunk","cipherStream","createDecipheriv","chunks","end","sshpriv","readSSHPrivate","rfc4253","readType","originalInput","pkcs1","readPkcs1","pkcs8","readPkcs8","header","writePkcs8","writePkcs1","limit","keyTypeToAlg","normalize","readPartial","readInternal","algToKeyType","sshbuf","partCount","Constructor","res","exec","normalized","nd","consumed","_offset","url","Md5Wrapper","trimPortFromUri","uri","protocol","port","host","hostname","objectKeysLength","isBrowser","isIE","userAgent","msie","trident","is32","arch","objectIsNull","objectIsEmpty","objectIsInt","parseInt","objectIsNaN","objectIsString","objectIsFunction","zeroPaddingString","paddingStr","stringIsEmpty","IsNullOrEmptyOrUndefinedOrWhiteSpace","stringFormat","stringStartsWith","stringEndsWith","suffix","removeBOM","substring","merge","inArrayInsensitive","needle","haystack","tryGetValueInsensitive","defaultValue","tryGetValueChain","shift","setObjectInnerPropertyValue","propertyChainKeys","truncatedISO8061Date","dateString","toISOString","normalizeArgs","optionsOrCallback","callback","parsedVersion","version","calculateMD5","readStream","bufferLength","internalBuff","internalHash","createMd5Hash","on","copyLength","emit","endEmitted","contentMD5","isBufferAllZero","zeroBuffer","writeZerosToStream","md5Hash","progressCallback","defaultBufferSize","bufferSize","fill","getContentMd5","content","encoding","getNextLocation","lastLocation","locationMode","LocationMode","PRIMARY_THEN_SECONDARY","SECONDARY_THEN_PRIMARY","RangeError","ARGUMENT_OUT_OF_RANGE_ERROR","getNextListingLocationMode","token","targetLocation","isStreamPaused","_paused","_readableState","flowing","parseCopyProgress","progress","progressInfo","bytesCopied","totalBytes","normalizePropertyNameExceptionList","x-ms-blob-sequence-number","content-Type","content-Encoding","content-Language","cache-Control","content-Disposition","content-MD5","leaseId","leaseStatus","leaseDuration","leaseState","copyId","copyStatus","copySource","copyProgress","copyCompletionTime","copyStatusDescription","copyDestinationSnapshot","publicAccess","incrementalCopy","normalizePropertyNameFromXML","propertyName","setPropertyValueFromXML","xmlNode","toNormalize","subPropertyName","propertyChain","filterOutNonReservedProperties","reserved","nonReservedProperties","isReserved","checkDataType","dataType","EQUAL","AND","OK","NOT","to","checkDataTypes","dataTypes","code","toHash","null","integer","coerceToTypes","optionCoerceTypes","COERCE_TO_TYPES","getProperty","escapeQuotes","ucs2length","varOccurences","dataVar","varReplace","expr","cleanUpCode","EMPTY_ELSE","EMPTY_IF_NO_ELSE","EMPTY_IF_WITH_ELSE","finalCleanUpCode","async","ERRORS_REGEXP","REMOVE_ERRORS_ASYNC","RETURN_ASYNC","RETURN_DATA_ASYNC","REMOVE_ERRORS","RETURN_VALID","RETURN_TRUE","ROOTDATA_REGEXP","REMOVE_ROOTDATA","schemaHasRules","schema","rules","schemaHasRulesExcept","exceptKeyword","toQuotedString","getPathExpr","currentPath","jsonPointers","joinPaths","getPath","path","escapeJsonPointer","getData","$data","lvl","paths","up","jsonPointer","JSON_POINTER","RELATIVE_JSON_POINTER","segments","segment","unescapeJsonPointer","unescapeFragment","decodeURIComponent","escapeFragment","encodeURIComponent","IDENTIFIER","SINGLE_QUOTE","copyProps","src","dst","SafeBuffer","encodingOrOffset","from","alloc","allocUnsafe","allocUnsafeSlow","SlowBuffer","Certificate","theirHash","theirHash2","hash2","enAlgs","optionalArrayOfString","isFingerprint","Identity","subjects","subjectKey","issuer","issuerKey","signatures","serial","validFrom","validUntil","purposes","isExpired","when","isSignedBy","issuerCert","isSignedByKey","valid","signWith","fmts","didOne","createSelfSigned","subjectOrSubjects","subject","optionalNumber","lifetime","setTime","optionalBuffer","hostSubjects","userSubjects","cert","ca","isCertificate","ECFieldElementFp","ECPointFp","zinv","fromBigInteger","infinity","reducer","toBigInteger","getX","getY","isInfinity","twice","getInfinity","THREE","y1","v2","v3","x1v2","zu2","y3","z3","y1z1","y1sqz1","neg","R","hBit","multiplyTwo","both","getQ","getA","getB","xHex","yHex","oLen","yIsEven","beta","sqrt","betaValue","encodeCompressedPointHex","getR","modMult","modReduce","qLen","qMinusOne","legendreExponent","U","V","Q","fourQ","modDouble","P","lucasSequence","Uh","Vl","TWO","Vh","Ql","Qh","pem","peek","oid","readOID","readByte","readMPInt","OctetString","iqmp","readECDSACurve","sillyInt","writeOID","writeNull","writePkcs8RSAPrivate","writeByte","writePkcs8RSAPublic","writePkcs8DSAPrivate","writePkcs8DSAPublic","writeECDSACurve","writePkcs8ECDSAPrivate","writePkcs8ECDSAPublic","writePkcs8EdDSAPublic","curveNames","cd","OID","fieldTypeOid","ks","writeUInt8","_size","_buffer","skip","expand","readUInt32BE","readCString","readInt","readInt64","readChar","writeUInt32BE","writeCString","writeInt","writeInt64","lead","writeChar","DNS_NAME_RE","oids","cn","ou","dc","uid","mail","unoids","components","componentLookup","email","NOT_PRINTABLE","NOT_IA5","globMatch","aParts","bParts","toAsn1","Set","asn1type","Utf8String","IA5String","PrintableString","isIdentity","forHost","forUser","forEmail","parseDN","dn","eqPos","parseAsn1","top","T61String","CharacterString","BMPString","ANONYMOUS_ACCESS_BLOBSERVICE_ONLY","ARGUMENT_NULL_OR_EMPTY","ARGUMENT_NULL_OR_UNDEFINED","BATCH_ONE_PARTITION_KEY","BATCH_ONE_RETRIEVE","BATCH_TOO_LARGE","BLOB_INVALID_SEQUENCE_NUMBER","BLOB_TYPE_MISMATCH","CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY","CONTENT_LENGTH_MISMATCH","CONTENT_TYPE_MISSING","EMPTY_BATCH","EXCEEDED_SIZE_LIMITATION","HASH_MISMATCH","INCORRECT_ENTITY_KEYS","INVALID_BLOB_LENGTH","INVALID_CONNECTION_STRING","INVALID_CONNECTION_STRING_BAD_KEY","INVALID_CONNECTION_STRING_DUPLICATE_KEY","INVALID_CONNECTION_STRING_EMPTY_KEY","INVALID_DELETE_SNAPSHOT_OPTION","INVALID_EDM_TYPE","INVALID_FILE_LENGTH","INVALID_FILE_RANGE_FOR_UPDATE","INVALID_HEADERS","INVALID_MESSAGE_ID","INVALID_PAGE_BLOB_LENGTH","INVALID_PAGE_END_OFFSET","INVALID_PAGE_RANGE_FOR_UPDATE","INVALID_PAGE_START_OFFSET","INVALID_POP_RECEIPT","INVALID_PROPERTY_RESOLVER","INVALID_RANGE_FOR_MD5","INVALID_SAS_VERSION","INVALID_SAS_TOKEN","INVALID_SIGNED_IDENTIFIERS","INVALID_STREAM_LENGTH","INVALID_STRING_ERROR","INVALID_TABLE_OPERATION","INVALID_TEXT_LENGTH","MAXIMUM_EXECUTION_TIMEOUT_EXCEPTION","MD5_NOT_POSSIBLE","MD5_NOT_PRESENT_ERROR","METADATA_KEY_INVALID","METADATA_VALUE_INVALID","NO_CREDENTIALS_PROVIDED","PRIMARY_ONLY_COMMAND","QUERY_OPERATOR_REQUIRES_WHERE","SECONDARY_ONLY_COMMAND","STORAGE_HOST_LOCATION_REQUIRED","STORAGE_HOST_MISSING_LOCATION","TYPE_NOT_SUPPORTED","MAX_BLOB_SIZE_CONDITION_NOT_MEET","sshpk","HASH_ALGOS","PK_ALGOS","HttpSignatureError","validateAlgorithm","sshKeyToPEM","parseKey","pemToRsaSSHKey","magic","MAGIC","kdf","kdfOpts","pubKey","privKeyBlob","kdfOptsBuf","rounds","cinf","bcrypt","salti","pbkdf","ckey","setAutoPadding","checkInt1","checkInt2","ret","privBuf","kdfopts","checkInt","kdfssh","createCipheriv","co","gen","ctx","Promise","resolve","onFulfilled","onRejected","throw","done","toPromise","isPromise","then","displayName","isGenerator","isGeneratorFunction","promises","promise","createPromise","__generatorFunction__","hasOwn","isPlainObject","setInterval","has_own_constructor","has_is_property_of_method","copyIsArray","target","deep","targetObject","constructorOpt","ArgumentError","argumentName","ArgumentNullError","StorageError","properties","TimeoutError","parseFingerprint","parseSignature","parsePrivateKey","generatePrivateKey","parseCertificate","createSelfSignedCertificate","createCertificate","identityFromDN","identityForHost","identityForUser","identityForEmail","CRYPTO_HAVE_ECDH","osCurve","dh","createECDH","generateKeys","getPublicKey","getPrivateKey","ecdh","ecParams","X9ECParameters","getN","cByteLen","getG","getCurve","_isPriv","_algo","_curve","_key","_dh","_p","_g","setPrivateKey","setPublicKey","_ecParams","_priv","ECPrivate","ECPublic","_params","_pub","getKey","_keyCheck","isPub","deepEqual","setKey","computeSecret","otherpk","deriveSharedSecret","secret","generateKey","getH","newInvalidAsn1Error","EOC","Boolean","Null","ObjectDescriptor","External","Real","Enumeration","PDV","RelativeOID","Sequence","NumericString","VideotexString","UTCTime","GeneralizedTime","GraphicString","VisibleString","GeneralString","UniversalString","Context","readUInt8","curveOid","writePkcs1RSAPrivate","writePkcs1RSAPublic","writePkcs1DSAPrivate","writePkcs1DSAPublic","writePkcs1ECDSAPrivate","writePkcs1ECDSAPublic","writePkcs1EdDSAPrivate","writePkcs1EdDSAPublic","algElems","algoNum","algoName","supportedAlgosById","elements","rsaParams","element","elementToBuf","ecdsaKey","line","keyString","elems","base64key","keyBuffer","publicExponentLen","publicExponent","modulus","rsaKey","rsaAlgFromOptions","dnssecTimestamp","base64Key","supportedAlgos","rsa-sha1","rsa-sha256","rsa-sha512","ecdsa-p256-sha256","ecdsa-p384-sha384","timestampStr","getFullYear","getMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","Caseless","dict","clobber","swap","del","httpify","resp","setHeader","hasHeader","getHeader","removeHeader","SchemaObject","traverse","compile","ref","refVal","_refs","_schemas","inlineRef","_opts","inlineRefs","_compile","baseId","resolveSchema","refPath","_getFullPath","getFullPath","_getId","normalizeId","parsedRef","resolveUrl","getJsonPointer","fullPath","ids","schemaId","baseIds","","fullPaths","localRefs","sch","jsonPtr","rootSchema","parentJsonPtr","parentKeyword","parentSchema","keyIndex","PREVENT_SCOPE_CHANGE","$ref","SIMPLE_INLINED","checkNoRef","countKeys","protocolSeparator","href","TRAILING_SLASH_HASH","keyList","hasProp","arrA","arrB","dateA","dateB","regexpA","regexpB","MissingRefError","missingRef","missingSchema","errorSubclass","Subclass","Validation","ajv","validation","MissingRef","v1","v4","_traverse","arrayKeywords","propsKeywords","keywords","skipKeywords","additionalItems","items","additionalProperties","propertyNames","allOf","anyOf","oneOf","definitions","patternProperties","dependencies","enum","const","required","maximum","minimum","exclusiveMaximum","exclusiveMinimum","multipleOf","maxLength","minLength","pattern","maxItems","minItems","uniqueItems","maxProperties","minProperties","unstupid","hex","ECCurves","ECKey","isPublic","PublicKey","Writable","_write","enc","sigBuf","sigObj","ssh","findDNSSECHeader","dnssec","findPEMHeader","findSSHHeader","DNSSEC_PRIVKEY_HEADER_PREFIX","crypto_hash_sha512","BLF_J","Blowfish","Uint32Array","F","stream2word","databytes","temp","encipher","byteOffset","decipher","expand0state","keybytes","expandstate","dec","BCRYPT_BLOCKS","BCRYPT_HASHSIZE","bcrypt_hash","sha2pass","sha2salt","state","cdata","ciphertext","byteLength","BLOCKS","HASHSIZE","passlen","saltlen","keylen","amt","stride","dest","tmpout","countsalt","origkeylen","trimmed","SSHKEY_RE","SSHKEY_RE2","kbuf","realOffset","padding","trailer","remain","tbsStart","sigOffset","tbsEnd","Local","x509","extras","certAlgOid","SIGN_ALGS","readDate","issuerUniqueID","subjectUniqueID","extEnd","readExtension","sigAlgOid","sigAlg","sigData","algParts","blob","writeTBSCert","verifier","signer","signAsync","_ensure","_buf","rsa-md5","rsa-sha384","dsa-sha1","dsa-sha256","ecdsa-sha1","ecdsa-sha256","ecdsa-sha384","ecdsa-sha512","ed25519-sha512","EXTS","issuerKeyId","altName","basicConstraints","keyUsage","extKeyUsage","UTCTIME_RE","thisYear","getUTCFullYear","century","year","setUTCFullYear","setUTCHours","setUTCSeconds","GTIME_RE","ALTNAME","OtherName","RFC822Name","DNSName","X400Address","DirectoryName","EDIPartyName","URI","IPAddress","EXTPURPOSE","serverAuth","clientAuth","codeSigning","joyentDocker","joyentCmon","EXTPURPOSE_REV","KEYUSEBITS","critical","extId","exts","readBoolean","bcEnd","bc","pathLen","ekEnd","ide","bits","bitIndex","bitLen","setBits","byteN","bit","bitVal","readBitField","aeEnd","zeroPad","dateToUTCTime","getUTCMonth","altNames","writeBoolean","purpose","writeBitField","blen","unused","mod_assert","mod_util","jsSprintf","flags","width","precision","conversion","regex","re","argn","doPad","inspect","dumpException","jsFprintf","ex","stack","cause","cex","sprintf","printf","unshift","stdout","fprintf","DelayedStream","CombinedStream","writable","readable","dataSize","maxDataSize","pauseStreams","_released","_streams","_currentStream","combinedStream","option","isStreamLike","append","newStream","pauseStream","_checkDataSize","_handleErrors","pause","pipe","resume","_getNext","_pipeNext","_emitError","_reset","destroy","_updateDataSize","abort","jobs","aborter","runJob","error","isAsync","sortMethod","isNamedList","initState","keyedList","iterate","terminator","ascending","iteratorHandler","descending","isStream","isReadable","_read","isWritable","_writableState","isDuplex","stringify","hexTable","arrayToObject","plainObjects","acc","queue","refs","val","compacted","compactQueue","decode","encode","isRegExp","allowPrototypes","mergeTarget","percentTwenties","formatters","RFC1738","RFC3986","cmp","cycles","node","aobj","bobj","JSON","seenIndex","splice","it","$keyword","$ruleType","$async","$refKeywords","RULES","$id","isTop","$es7","yieldAwait","sourceCode","processCode","$lvl","level","$dataLvl","dataLevel","$schema","$schemaPath","schemaPath","$errSchemaPath","errSchemaPath","$breakOnError","allErrors","$valid","$$outStack","createErrors","messages","verbose","__err","compositeRule","$top","rootId","dataPathArr","$closingBraces1","$closingBraces2","$typeSchema","$typeIsArray","extendRefs","logger","warn","coerceTypes","$coerceToTypes","$rulesGroup","$shouldUseGroup","$method","$dataType","$coerced","$bracesCoercion","arr1","$type","$i","l1","$parentData","v5","patternGroups","arr2","i2","l2","useDefaults","arr3","$propertyKey","i3","l3","$sch","$passData","useDefault","arr4","l4","arr5","$rule","i5","l5","$shouldUseRule","$code","keyword","implements","impl","$ruleImplementsSomeKeyword","$schemaValue","$isData","$isMax","$exclusiveKeyword","$schemaExcl","$op","$notOp","$errorKeyword","$schemaValueExcl","$exclusive","$exclType","$exclIsNumber","$opStr","$opExpr","unicode","byteToHex","bth","SharedAccessPermissions","BlobListingDetails","SNAPSHOTS","METADATA","UNCOMMITTED_BLOBS","COPY","DELETED","SnapshotDeleteOptions","SNAPSHOTS_ONLY","BLOB_AND_SNAPSHOTS","BlockListFilter","ALL","COMMITTED","UNCOMMITTED","BlobContainerPublicAccessType","OFF","SequenceNumberAction","MAX","INCREMENT","BlobTier","PremiumPageBlobTier","P4","P6","P10","P20","P30","P40","P50","P60","StandardBlobTier","HOT","COOL","ARCHIVE","EntityProperty","TableUtilities","QUERY","PayloadFormat","FULL_METADATA","MINIMAL_METADATA","NO_METADATA","TableOperators","OR","QueryComparisons","NOT_EQUAL","GREATER_THAN","GREATER_THAN_OR_EQUAL","LESS_THAN","LESS_THAN_OR_EQUAL","EdmType","STRING","BINARY","INT64","INT32","DOUBLE","DATETIME","GUID","BOOLEAN","entityGenerator","entityProperty","Int32","Int64","Binary","Guid","Double","DateTime","extensions","preference","db","extname","EXTRACT_TYPE_REGEXP","TEXT_TYPE_REGEXP","charset","mime","charsets","lookup","contentType","extension","locale","alpha","en-US","bg-BG","cs-CZ","da-DK","de-DE","el-GR","es-ES","fr-FR","it-IT","nb-NO","nl-NL","nn-NO","hu-HU","pl-PL","pt-PT","ru-RU","sk-SK","sr-RS@latin","sr-RS","sv-SE","tr-TR","uk-UA","ar","alphanumeric","decimal","englishLocales","_locale","arabicLocales","_i","dotDecimal","commaDecimal","_i2","_i3","XMLBuilder","xmldec","doctype","loggerFunction","defaultLoggerFunction","LogLevels","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFO","DEBUG","logPriority","emergency","alert","notice","debug","logLevel","currentLevelIndex","logLevelIndex","timeStamp","console","toStr","gOPD","getOwnPropertyDescriptor","hasOwnConstructor","hasIsPrototypeOf","setProperty","configurable","newValue","jsonSafeStringify","setImmediate","nextTick","paramsHaveRequestBody","body","requestBodyStream","json","multipart","safeStringify","replacer","isReadStream","rs","toBase64","numbers","serializer","cycleReplacer","thisPos","spaces","getSerialize","authorization","hmacSha1","createHmac","stringToSign","amazonHeaders","verb","toUTCString","resource","queryStringToSign","signQuery","canonicalizeHeaders","fields","field","canonicalizeResource","pathname","query","parser","parseRequest","signRequest","createSigner","isSigner","sshKeyFingerprint","verifySignature","verifyHMAC","State","ParamsState","ExpiredRequestError","InvalidHeaderError","InvalidParamsError","MissingHeaderError","StrictParsingError","request","arrayOfString","optionalFinite","clockSkew","authzHeaderName","authorizationHeaderName","substate","tmpName","tmpValue","parsed","scheme","signingString","authz","Number","keyId","httpVersion","skew","hdr","algorithms","fromHex","secp128r1","secp160k1","secp160r1","secp192k1","secp192r1","secp224r1","secp256r1","ASN1","_len","readLength","lenB","seq","_readTag","readEnumeration","retbuf","byte","fb","DEFAULT_OPTS","growthFactor","getOwnPropertyNames","_options","_seq","InvalidAsn1Error","writeEnumeration","writeLength","writeStringArray","strings","octet","encodeOctet","InvalidAsn1ERror","_shift","fromBuffer","openssh","getCertType","TYPES","user","ECDSA_ALGO","innerAlgo","certType","getAlg","principals","pbuf","psshbuf","pr","int64ToDate","signingKeyBuf","sourceInt64","dateToInt64","round","upper","lower","noSig","notStrictEqual","sub","dbuf","jsprim","AUTHZ_FMT","RequestSigner","rs_alg","rs_signFunc","rs_keyId","rs_signer","rs_key","rs_headers","rs_lines","writeHeader","writeDateHeader","rfc1123","writeTarget","_stringToSign","hmac","mod_extsprintf","mod_verror","mod_jsonschema","hasKey","deepCopy","marker","obj1","obj2","forEachKey","pluckv","key1","flattenObject","rv","flattenIter","doFlattenIter","validateJsonObject","validateJsonObjectJS","randElt","extraProperties","allowed","mergeObjects","startsWith","endsWith","parseInteger","uopts","baseOverride","PI_DEFAULTS","allowSign","allowPrefix","allowTrailing","allowImprecise","trimWhitespace","leadingZeroIsOctal","pbase","mult","isSpace","CP_b","CP_B","CP_o","CP_O","CP_t","CP_T","CP_x","CP_X","prefixToBase","translateDigit","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","iso8601","getUTCMilliseconds","RFC1123_DAYS","getUTCDay","RFC1123_MONTHS","parseDateTime","numeric","hrtimediff","hrtimeDiff","hrtimeAccum","hrtimeAdd","assertHrtime","hrtimeNanosec","hrtimeMicrosec","hrtimeMillisec","CP_0","CP_9","CP_A","CP_Z","CP_a","CP_z","PI_CONV_DEC","PI_CONV_UC","PI_CONV_LC","report","propname","reason","VError","jsv_details","provided","overrides","mod_assertplus","mod_isError","isError","parseConstructorArguments","argv","sprintf_args","shortmessage","ctor","jse_shortmsg","jse_cause","skipCauseMessage","jse_info","SError","MultiError","ase_errors","WError","findCauseByName","hasCauseWithName","fullStack","errorFromList","errorForEach","objectToString","isNullOrUndefined","isSymbol","isDate","isPrimitive","primitiveConstructors","changing","checkPropertyChange","_validate","_changing","getType","checkProp","addError","checkType","unionErrors","priorErrors","theseErrors","readonly","disallow","itemsIsArray","propDef","coerce","objTypeDef","additionalProp","existingOnly","requires","checkObj","found","enumer","maxDecimal","mustBeValid","factory","parsedSignature","pubkey","hashAlg","ForeverAgent","SSL","ForeverAgentSSL","Agent","net","tls","AgentSSL","getConnectionName","localAddress","requests","sockets","freeSockets","maxSockets","defaultMaxSockets","minSockets","defaultMinSockets","socket","onSocket","onIdleError","_onIdleError","createConnection","addRequestNoreuse","addRequest","req","useChunkedEncodingByDefault","idleSocket","removeListener","_reusedSocket","removeSocket","createSocket","connect","http","https","parseUrl","fs","asynckit","populate","FormData","_overheadLength","_valueLength","_valuesToMeasure","LINE_BREAK","DEFAULT_CONTENT_TYPE","_error","_multiPartHeader","footer","_multiPartFooter","_trackLength","valueLength","knownLength","_lengthRetriever","stat","fileSize","response","contentDisposition","_getContentDisposition","_getContentType","contents","Content-Disposition","Content-Type","getBoundary","filepath","basename","client","_httpMessage","_lastBoundary","getHeaders","userHeaders","formHeaders","content-type","_boundary","_generateBoundary","boundary","getLengthSync","hasKnownLength","parallel","submit","_maxDataSizeExceeded","_bufferedEvents","delayedStream","realEmit","_handleEmit","setEncoding","release","_checkIfMaxDataSizeExceeded","serialOrdered","isTypedArray","isStrictTypedArray","loose","isLooseTypedArray","[object Int8Array]","[object Int16Array]","[object Int32Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Uint16Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]","Int16Array","Uint8ClampedArray","Float32Array","arrayPrefixGenerators","brackets","indices","repeat","toISO","delimiter","encoder","encodeValuesOnly","serializeDate","skipNulls","strictNullHandling","generateArrayPrefix","allowDots","formatter","objKeys","arrayFormat","joined","addQueryPrefix","arrayLimit","decoder","parameterLimit","parseKeys","givenKey","child","parent","leaf","cleanRoot","parseArrays","parseObject","ignoreQueryPrefix","tempObj","cleanStr","bracketEqualsPos","parseValues","newObj","compileSchema","Cache","stableStringify","$dataMetaSchema","Ajv","schemaKeyRef","getSchema","schemaObj","_addSchema","_meta","addSchema","_skipValidation","checkUnique","addMetaSchema","skipValidation","validateSchema","throwOrLogError","defaultMeta","meta","META_SCHEMA_ID","currentUriFormat","_formats","_schemaUriFormatFunc","_schemaUriFormat","errorsText","keyRef","_getSchemaObj","_fragments","fragment","_getSchemaFragment","removeSchema","_removeAllSchemas","_cache","clear","cacheKey","serialize","addFormat","separator","dataPath","shouldAddSchema","cached","addUsedSchema","recursiveMeta","willValidate","put","compiling","callValidate","currentOpts","_metaOpts","compileAsync","customKeyword","addKeyword","getKeyword","removeKeyword","remove","errorClasses","ValidationError","META_IGNORE_OPTIONS","META_SUPPORT_DATA","setLogger","schemaUriFormat","_loadingSchemas","_compilations","_get$Id","_get$IdOrId","chooseGetId","loopRequired","errorDataPath","_errorDataPathProperty","metaOpts","getMetaSchemaOptions","addInitialFormats","$dataSchema","metaSchema","addDraft6MetaSchema","optsSchemas","schemas","addInitialSchemas","validateGenerator","compIndex","patternCode","patterns","defaultCode","refValCode","customRuleCode","vars","statement","patternsHash","defaultsHash","customRules","compilation","localCompile","cv","_schema","_root","isRoot","errorPath","resolveRef","usePattern","useCustomRule","makeValidate","_refVal","refCode","refIndex","resolvedRef","rootRefId","addLocalRef","localSchema","refId","replaceLocalRef","removeLocalRef","inline","regexStr","valueStr","rule","definition","macro","DAYS","TIME","HOSTNAME","URITEMPLATE","URL","UUID","month","day","time","full","hour","minute","second","timeZone","fast","date-time","uri-reference","uri-template","ipv4","ipv6","json-pointer","relative-json-pointer","dateTime","DATE_TIME_SEPARATOR","NOT_URI_FRAGMENT","Z_ANCHOR","ruleModules","implKeywords","custom","$refCode","$refVal","$message","missingRefs","$it","$nextValid","passContext","__callValidate","$closingBraces","$currentBaseId","$allSchemasEmpty","$errs","$wasComposite","$idx","$dataNxt","$nextData","$nonEmptySchema","$schemaDeps","$propertyDeps","$ownProperties","ownProperties","$property","$deps","$currentErrorPath","$useData","$prop","$propertyPath","$missingProperty","$vSchema","$unknownFormats","unknownFormats","$allowUnknown","$format","$isObject","$formatType","$formatRef","$additionalItems","$currErrSchemaPath","multipleOfPrecision","$allErrorsOption","$key","$dataProperties","$schemaKeys","$pProperties","$pPropertyKeys","$aProperties","$someProperties","$noAdditional","$additionalIsSchema","$removeAdditional","removeAdditional","$checkAdditional","$required","$requiredHash","$pgProperties","$pgPropertyKeys","i1","$pProperty","$pgProperty","$additionalProperty","$useDefaults","i4","$hasDefault","arr6","i6","l6","$pgSchema","$pgMin","$pgMax","$limit","$reason","$moreOrLess","$invalidName","$propertySch","$loopRequired","KEYWORDS","keywordsJsonPointers","metaSchemaRef","loadSchema","loadMetaSchemaOf","_compileAsync","loadMissingSchema","added","schemaPromise","removePromise","_addRule","ruleGroup","rg","$compile","$inline","$macro","$ruleValidate","$validateCode","$definition","$rDef","$validateSchema","$ruleErrs","$ruleErr","$asyncKeyword","statements","$parentDataProperty","def_callRuleValidate","modifying","def_customError","afterRequest","beforeRequest","browser","cookie","creator","entry","har","page","pageTimings","postData","timings","rng","bytesToUuid","rnds","ii","events","TunnelingAgent","proxyOptions","proxy","pending","createSecureSocket","secureSocket","mergeOptions","servername","keyLen","httpOverHttp","agent","httpsOverHttp","defaultPort","httpOverHttps","httpsOverHttps","EventEmitter","onFree","onCloseOrRemove","placeholder","connectOptions","proxyAuth","connectReq","onConnect","removeAllListeners","statusCode","upgrade","NODE_DEBUG","getNanoSeconds","hrtime","loadTime","moduleLoadTime","nodeLoadTime","upTime","performance","hr","uptime","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","msecs","nsecs","dt","tmh","blobConstants","BlobUtilities","FileUtilities","initCallback","callbackParam","resultsCb","isValidEnumValue","current","isValidUri","isURL","require_tld","URIError","isValidHost","storageHost","primaryHost","secondaryHost","isValidUuid","SyntaxError","isBase64Encoded","isValidFunction","functionObject","functionName","getNameError","typeName","throwMissingArgument","ArgumentValidator","containerNameIsValid","containerName","nameError","blobNameIsValid","blobName","blobTierNameIsValid","blobTier","shareNameIsValid","shareName","queueNameIsValid","queueName","tableNameIsValid","table","browserFileIsValid","browserFile","pageRangesAreValid","rangeStart","rangeEnd","writeBlockSizeInBytes","blobTypeIsValid","getEnumValues","shareACLIsValid","SharePublicAccessType","shareQuotaIsValid","quota","exists","stringAllowEmpty","function","nonEmptyArray","validateArgs","validationRules","_assertString2","_assertString","_typeof","_merge2","default_fqdn_options","allow_trailing_dot","tld","allow_underscores","_interopRequireDefault","_extend","retryCount","retryInterval","DEFAULT_CLIENT_RETRY_COUNT","DEFAULT_CLIENT_RETRY_INTERVAL","handle","requestOptions","_handle","lastPrimaryAttempt","lastSecondaryAttempt","retryRequestOptions","retryContext","currentLocation","operation","returnObject","finalCallback","nextPostCallback","innerError","secondaryNotFound","notExceedMaxRetryCount","retryInfo","shouldRetry","ignore","outputStreamSent","retryable","operationEndTime","lastAttemptTime","sinceLastAttempt","_shouldRetryOnError","absorbConditionalErrorsOnRetry","lastServerError","odataHandler","entity","serializeJson","parseQuery","autoResolveProperties","propertyResolver","entityResolver","parseJsonEntities","parseEntity","parseJsonSingleEntity","etag","getEtag","azureCommon","FileReadStream","RangeStream","serviceClient","container","_emitter","_emittedAll","_emittedRangeIndex","_rangelist","_resourcePath","_isEmitting","_rangeStreamEnded","_lengthHeader","_minRangeSize","_maxRangeSize","_startOffset","_dataOffset","_endOffset","MAX_VALUE","singleRangeSize","_listFunc","_defaultListFunc","callArguments","ranges","totalSize","endOffset","resizeAndSaveRanges","_emitRange","rangeList","holdingRange","readingRange","mergeRanges","splitAndSaveRanges","putZeroRange","startOffset","zeroDataRange","rangeSize","limitedSize","newRange","getBlobProperties","contentLength","event","listener","XMLFragment","__bind","me","att","_ref","assertLegalChar","children","rootObject","is","allowSurrogateChars","standalone","ext","begin","documentObject","clas","chars","sax","__hasProp","__extends","__super__","thing","0.1","explicitCharkey","normalizeTags","attrkey","charkey","explicitArray","ignoreAttrs","mergeAttrs","explicitRoot","validator","xmlns","explicitChildren","childkey","charsAsChildren","0.2","_super","Parser","parseString","reset","xmlnskey","ontext","_this","saxParser","onerror","EXPLICIT_CHARKEY","resultObject","onopentag","attributes","local","onclosetag","emptyStr","nodeName","old","xpath","emptyTag","_results","oncdata","encodeSpecialCharacters","rawResponse","queryString","webResource","post","withProperty","withRawResponse","withHeadersOnly","headersOnly","withQueryOption","withQueryOptions","withHeader","withBody","withHeaders","addOptionalMetadataHeaders","metadata","metadataKey","metadataHeaderName","existingMetadataHeaderName","headerName","validResponse","pipeInput","inputStream","destStream","tough","Cookie","CookieJar","RequestJar","store","_jar","looseMode","setCookie","cookieOrStr","setCookieSync","getCookieString","getCookieStringSync","getCookies","getCookiesSync","jar","psl","getPublicSuffix","domain","Store","synchronous","findCookie","findCookies","putCookie","updateCookie","oldCookie","newCookie","removeCookie","removeCookies","getAllCookies","pubsuffix","permuteDomain","pubSuf","reverse","cur","permutations","pathMatch","reqPath","cookiePath","ListingDetails","ShareSnapshotDeleteOptions","SHARE_AND_SNAPSHOTS","_toDate2","_toFloat2","_toInt2","_toBoolean2","_equals2","_contains2","_matches2","_isEmail2","_isURL2","_isMACAddress2","_isIP2","_isFQDN2","_isBoolean2","_isAlpha2","_isAlphanumeric2","_isNumeric2","_isPort2","_isLowercase2","_isUppercase2","_isAscii2","_isFullWidth2","_isHalfWidth2","_isVariableWidth2","_isMultibyte2","_isSurrogatePair2","_isInt2","_isFloat2","_isDecimal2","_isHexadecimal2","_isDivisibleBy2","_isHexColor2","_isISRC2","_isMD2","_isHash2","_isJSON2","_isEmpty2","_isLength2","_isByteLength2","_isUUID2","_isMongoId2","_isAfter2","_isBefore2","_isIn2","_isCreditCard2","_isISIN2","_isISBN2","_isISSN2","_isMobilePhone2","_isCurrency2","_isISO2","_isISO31661Alpha2","_isBase2","_isDataURI2","_isMimeType2","_isLatLong2","_isPostalCode2","_ltrim2","_rtrim2","_trim2","_escape2","_unescape2","_stripLow2","_whitelist2","_blacklist2","_isWhitelisted2","_normalizeEmail2","_toString2","toDate","toFloat","toInt","toBoolean","isEmail","isMACAddress","isIP","isFQDN","isAlpha","isAlphanumeric","isNumeric","isPort","isLowercase","isUppercase","isAscii","isFullWidth","isHalfWidth","isVariableWidth","isMultibyte","isSurrogatePair","isInt","isFloat","isDecimal","isHexadecimal","isDivisibleBy","isHexColor","isISRC","isMD5","isHash","isJSON","isLength","isByteLength","isUUID","isMongoId","isAfter","isBefore","isIn","isCreditCard","isISIN","isISBN","isISSN","isMobilePhone","isPostalCode","isCurrency","isISO8601","isISO31661Alpha2","isBase64","isDataURI","isMimeType","isLatLong","ltrim","rtrim","stripLow","whitelist","blacklist","isWhitelisted","normalizeEmail","encodeURI","ipv4Maybe","foundOmissionBlock","foundIPv4TransitionBlock","expectedNumberOfBlocks","ipv6Block","allow_leading_zeroes","int","intLeadingZeroes","minCheckPassed","maxCheckPassed","ltCheckPassed","lt","gtCheckPassed","gt","fullWidth","halfWidth","hexadecimal","Readable","_chunkSize","_bufferSize","_readNextChunk","azureUtil","NoMatchError","constr","noMatchConnectionString","connectionString","noMatchSettings","parseAndValidateKeys","validKeys","parsedConnectionString","equalDex","getValidator","requirements","isRequired","atLeastOne","userSettings","oneFound","requirement","settingName","SettingName","validationFunc","SettingConstraint","setting","validValues","settingWithFunc","settingValue","validValuesString","allSettings","optional","optionalSettings","allRequired","requiredSettings","matchedSpecification","constraints","constraint","remainingSettings","serializeRetentionPolicy","doc","policy","ele","Enabled","txt","Days","serializeMetrics","metrics","Version","IncludeAPIs","RetentionPolicy","parseRetentionPolicy","policyXml","parseMetrics","metricsXml","servicePropertiesJs","Logging","logging","Delete","Read","Write","serializeLogging","HourMetrics","MinuteMetrics","Cors","AllowedMethods","AllowedOrigins","AllowedHeaders","ExposedHeaders","MaxAgeInSeconds","serializeCorsRules","CorsRule","DefaultServiceVersion","DeleteRetentionPolicy","serializeDeleteRetentionPolicy","StaticWebsite","staticWebsite","IndexDocument","ErrorDocument404Path","serializeStaticWebsite","servicePropertiesXml","loggingXml","deleteRetentionPolicyXml","deleteRetentionPolicy","staticWebsiteXml","serviceProperties","corsXml","cors","rulesXml","ruleXml","parseCors","qs","HmacSha256Sign","storageAccount","storageAccessKey","usePathStyleUri","generateAccountSignedQueryString","sharedAccessPolicy","accessPolicy","addIfNotNull","AccessPolicy","Start","Expiry","IPAddressOrRange","_generateAccountSharedAccessSignature","getvalueToAppend","noNewLine","returnValue","_getCanonicalizedHeaders","_getCanonicalizedResource","canonicalizedResource","queryStringValues","paramNames","canonicalizedHeaders","canonicalizedHeadersArray","headerItem","canonicalized","original","localeCompare","currentHeaderItem","generateSignedQueryString","serviceType","sasVersion","resourceType","tableName","StartPk","EndPk","StartRk","EndRk","validatedSASVersionString","validateVersion","Id","cacheControl","contentEncoding","contentLanguage","_generateSignature","accessKey","_accessKey","_decodedAccessKey","sasToken","stringDateTime","ymd","hms","UTC","currentN","rightPad","_highWaterMark","highWaterMark","_isStreamOpened","_allocator","allocator","_streamEnded","_md5hash","_internalBufferSize","_outputLengthLimit","_md5sum","calcContentMd5","setMemoryAllocator","setOutputLength","_flushInternalBuffer","_buildChunk","dataOffset","targetSize","_copyToInternalBuffer","canReleaseInnerStreamBuffer","_stream","releaseBuffer","_popInternalBuffer","copySize","_emitBufferData","newOffset","_allocateNewBuffer","copied","getBuffer","entityResult","constructEntityWebResource","entityDescriptor","entitySerializedDescriptor","echoContent","partitionKey","rowKey","getEntityPath","PartitionKey","RowKey","setTableRequestHeadersAndBody","payloadFormat","acceptType","edmHandler","prefixLength","suffixLength","normalizeEntityProperty","propertyType","propName","serializeValue","isTypeRequired","POSITIVE_INFINITY","NEGATIVE_INFINITY","parseJsonTables","TableName","rawEntity","rawEntityProperties","entityPropertyTypes","Timestamp","odataMetadata","entityPropertyName","timestampString","entityPropertyType","deserializeValueFromJson","guid","guessNumberType","unparse","serializeQueryValue","TableQuery","_fields","_where","_top","condition","_encodeConditionString","int32Filter","_concatFilterString","int64Filter","doubleFilter","booleanFilter","dateFilter","guidFilter","binaryFilter","stringFilter","combineFilters","filterA","operatorString","filterB","toQueryObject","encodedCondition","_replaceOperators","sections","_getEdmType","whereClause","encodedWhereClause","QueueMessageEncoder","TextBase64QueueMessageEncoder","BinaryBase64QueueMessageEncoder","TextXmlQueueMessageEncoder","textToBeDecoded","textToDecode","generateDevelopmentStorageCredentials","proxyUri","devStore","TableService","TableBatch","createTableService","storageAccountOrConnectionString","createTableServiceWithSas","hostUri","BlobService","createBlobService","createBlobServiceWithSas","createBlobServiceWithTokenCredential","tokenCredential","createBlobServiceAnonymous","FileService","createFileService","createFileServiceWithSas","QueueService","QueueUtilities","createQueueService","createQueueServiceWithSas","createQueueServiceWithTokenCredential","generateAccountSharedAccessSignature","sharedAccessAccountPolicy","storageSettings","getStorageSettings","_name","Validate","SharedKeyTable","RequestHandler","TableResult","BatchResult","endpointSuffix","storageServiceSettings","_tableEndpoint","_usePathStyleUri","_sasToken","anonymous","storageCredentials","defaultPayloadFormat","getServiceStats","userOptions","requestLocationMode","performRequest","responseObject","serviceStatsResult","StorageServiceStats","getServiceProperties","getAccountServiceProperties","setServiceProperties","setAccountServiceProperties","listTablesSegmented","currentToken","listTablesSegmentedWithPrefix","nextTableName","$filter","maxResults","listTablesResult","entries","continuationToken","getTableAcl","tableResult","signedIdentifiers","setTableAcl","policies","generateSharedAccessSignature","lowerCasedTableName","doesTableExist","_doesTableExist","createTable","tableDescriptor","tableResponse","isSuccessful","createTableIfNotExists","created","createError","createResult","deleteTable","deleteTableIfExists","deleteError","deleteResponse","deleted","queryEntities","tableQuery","queryStringName","nextPartitionKey","nextRowKey","queryEntitiesResult","retrieveEntity","$","_performEntityOperation","insertEntity","insertOrReplaceEntity","replaceEntity","mergeEntity","insertOrMergeEntity","deleteEntity","executeBatch","batch","hasOperations","batchResult","operations","constructWebResource","responseObjects","noError","operationResponses","primaryOnly","entityResponse","getUrl","primary","_getUrl","_ref1","raw","insertBefore","insertAfter","document","prev","clonedSelf","clonedChild","importXMLBuilder","clonedRoot","attribute","removeAttribute","attName","attValue","indent","newline","pretty","space","dat","com","opt","SAXParser","SAXStream","createStream","MAX_BUFFER_LENGTH","buffers","clearBuffers","bufferCheckPosition","lowercase","lowercasetags","looseCase","tags","closed","closedRoot","sawRoot","noscript","BEGIN","ENTITIES","attribList","rootNS","trackPosition","column","EVENTS","__proto__","OPEN_WAKA","startTagPosition","whitespace","strictFail","textNode","TEXT","starti","TEXT_ENTITY","SCRIPT","SCRIPT_ENDING","script","CLOSE_TAG","SGML_DECL","sgmlDecl","nameStart","OPEN_TAG","tagName","PROC_INST","procInstName","procInstBody","CDATA","emitNode","COMMENT","DOCTYPE","quote","SGML_DECL_QUOTED","DOCTYPE_DTD","DOCTYPE_QUOTED","DOCTYPE_DTD_QUOTED","COMMENT_ENDING","COMMENT_ENDED","textopts","CDATA_ENDING","CDATA_ENDING_2","PROC_INST_ENDING","PROC_INST_BODY","nameBody","newTag","openTag","OPEN_TAG_SLASH","ATTRIB","closeTag","attribName","attribValue","ATTRIB_NAME","ATTRIB_VALUE","attrib","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_CLOSED","attribEnd","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG_SAW_WHITE","returnState","maxAllowed","maxActual","closeText","checkBufferLength","close","flush","streamWraps","ev","_parser","onend","er","_decoder","SD","StringDecoder","handler","letter","XML_NAMESPACE","XMLNS_NAMESPACE","xml","charClass","charclass","STATE","COMMENT_STARTING","amp","quot","apos","AElig","Aacute","Acirc","Agrave","Aring","Atilde","Auml","Ccedil","ETH","Eacute","Ecirc","Egrave","Euml","Iacute","Icirc","Igrave","Iuml","Ntilde","Oacute","Ocirc","Ograve","Oslash","Otilde","Ouml","THORN","Uacute","Ucirc","Ugrave","Uuml","Yacute","aacute","acirc","aelig","agrave","aring","atilde","auml","ccedil","eacute","ecirc","egrave","eth","euml","iacute","icirc","igrave","iuml","ntilde","oacute","ocirc","ograve","oslash","otilde","ouml","szlig","thorn","uacute","ucirc","ugrave","uuml","yacute","yuml","reg","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","ordf","laquo","shy","macr","deg","plusmn","sup1","sup2","sup3","acute","micro","para","middot","cedil","ordm","raquo","frac14","frac12","frac34","iquest","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","nu","omicron","pi","rho","sigmaf","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","cap","cup","there4","sim","cong","asymp","ne","equiv","le","ge","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","fromCharCode","qname","qualName","qn","selfClosing","nv","isSelfClosing","closeTo","entityLC","numStr","os","ServiceSettings","StorageServiceSettings","TokenSigner","defaultRequestLocationMode","sas","setHost","apiVersion","_initDefaultFilter","_setDefaultProxy","xml2jsSettings","_getDefaultXml2jsSettings","defaultLocationMode","parseHost","parsedHost","outputData","_performRequest","performRequestOutputStream","outputStream","performRequestInputStream","clientRequestId","userAgentComment","useNagleAlgorithm","_initializeLocation","_setOperationExpiryTime","_validateLocation","_buildRequestOptions","finalRequestOptions","_maximumExecutionTimeExceeded","operationExpiryTime","endResponse","processResponseCallback","_processResponse","buildRequest","requestStream","requestWithDefaults","responseLength","disableContentMD5Validation","errorMessageBuffer","httpRequest","setNoDelay","oldEnd","sendStream","concatBuf","postFiltersRequestOptions","timeoutIntervalInMs","defaultTimeoutIntervalInMs","clientRequestTimeoutInMs","defaultClientRequestTimeoutInMs","accessConditions","EtagMatch","DateModifedSince","EtagNonMatch","DateUnModifiedSince","SequenceNumberEqual","SequenceNumberLessThan","SequenceNumberLessThanOrEqual","MaxBlobSize","MaxAppendPosition","sourceAccessConditions","enableGlobalHttpAgent","_setRequestUrl","targetUrl","responseEncoding","forever","rsp","_buildResponse","rawHeaders","convertRawHeadersToHeaders","_parseResponse","errorBody","_normalizeError","withFilter","newFilter","derived","parentFilter","mergedFilter","originalRequestOptions","parentFilterNext","postRequestOptions","newFilterCallback","postPostRequestOptions","parentFilterCallback","responseCallback","postResponseObject","requestServerEncrypted","parseXml","parsedBody","xmlError","onValue","createExplicitly","createFromEnvironment","createFromConnectionString","originalPath","_getPath","nextPreCallback","parseMetadataHeaders","servicePropertiesResult","StorageServiceProperties","normalizedError","errorProperties","requestId","setProxy","proxyUrl","_loadEnvironmentProxyValue","parsedUrl","_invalidLocationMode","currentTime","expiryTime","maximumExecutionTimeInMs","defaultMaximumExecutionTimeInMs","cookies","initParams","Request","verbFunc","wrapRequestMethod","requester","pool","agentOptions","optionsArg","punycode","urlParse","MemoryCookieStore","COOKIE_OCTETS","CONTROL_CHARS","TERMINATORS","PATH_VALUE","DATE_DELIM","MONTH_TO_NUM","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","NUM_TO_MONTH","NUM_TO_DAY","MAX_TIME","parseDigits","minDigits","maxDigits","trailingOK","parseTime","parseMonth","parseDate","tokens","dayOfMonth","formatDate","canonicalDomain","toASCII","domainMatch","domStr","canonicalize","defaultPath","rightSlash","parseCookiePair","cookiePair","cookieName","cookieValue","firstEq","terminatorIdx","trimTerminator","firstSemi","unparsed","cookie_avs","av","av_key","av_value","av_sep","expires","setMaxAge","secure","httpOnly","jsonParse","fromJSON","serializableProperties","cookieCompare","aPathLen","creation","creationIndex","getCookieContext","decodeURI","cookiesCreated","rejectPublicSuffixes","enableLooseMode","maxAge","hostOnly","pathIsDefault","lastAccessed","cdomain","setExpires","age","cookieString","TTL","relativeTo","expiryDate","millisec","isPersistent","canonicalizedDomain","CAN_BE_SYNC","ignoreError","expireCheck","expire","allPaths","matchingCookie","getSetCookieStrings","serialized","storeType","serializeSync","_importCookies","putNext","deserialize","strOrObj","deserializeSync","_importCookiesSync","newStore","syncErr","syncResult","syncWrap","permutePath","lindex","Punycode","internals","punySuffix","wildcard","exception","findRule","punyDomain","errorCodes","DOMAIN_TOO_SHORT","DOMAIN_TOO_LONG","LABEL_STARTS_WITH_DASH","LABEL_ENDS_WITH_DASH","LABEL_TOO_LONG","LABEL_TOO_SHORT","LABEL_INVALID_CHARS","ascii","label","labels","sld","subdomain","listed","domainParts","handlePunycode","tldParts","privateParts","isValid","pathMatcher","domainIndex","pathIndex","curPath","domains","curDomain","zlib","aws2","aws4","httpSignature","caseless","isstream","helpers","getProxyFromURI","Querystring","Har","Auth","OAuth","hawk","Multipart","Redirect","Tunnel","globalCookieJar","globalPool","requestToJSON","responseToJSON","_har","nonReserved","filterForNonReserved","filterOutReservedFunctions","explicitMethod","_qs","_auth","_oauth","_multipart","_redirect","_tunnel","dests","__isRequestRequest","_callback","_callbackCalled","baseUrl","baseUrlEndsWithSlash","uriStartsWithSlash","enableUnixSocket","strictSSL","rejectUnauthorized","isUnix","tunnel","isEnabled","setup","onRequest","hostHeaderName","originalHostHeaderName","form","formData","requestForm","appendFormValue","formKey","formValue","search","aws","auth","username","password","sendImmediately","bearer","gzip","uriAuthPieces","proxyAuthPieces","authHeader","setContentLength","timing","elapsedTime","oauth","defaultModules","http:","https:","httpModules","httpModule","agentClass","keepAlive","getNewAgent","ntick","_started","_json","_aborted","_form","hasAuth","sentAuth","chunked","ciphers","secureProtocol","secureOptions","pfx","poolKey","globalAgent","startTime","startTimeNow","_aws","reqOptions","timeoutTimer","onRequestResponse","onRequestError","isConnecting","_connecting","connecting","onLookupTiming","onConnectTiming","setReqTimeout","onReqSockConnect","timingStart","timingPhases","dns","tcp","firstByte","download","total","authorized","originalHost","targetCookieJar","addCookie","_disableCookies","onResponse","_ended","responseContent","zlibOptions","Z_SYNC_FLUSH","finishFlush","createGunzip","createInflate","pipeDest","responseStarted","responseStartTime","_destdata","readResponseBody","sslErr","authorizationError","_jsonReviver","headersSent","ctname","clname","pipefilter","rfc3986","jsonReplacer","_jsonReplacer","jsonReviver","unixParts","socketPath","sign_version","service","signRes","accessKeyId","secretAccessKey","sessionToken","session","Authorization","bucket","redirectsFollowed","originalCookieHeader","urihref","defaultProxyHeaderWhiteList","defaultProxyHeaderExclusiveList","querystring","credentialsCache","lru","encodeRfc3986","urlEncodedString","credentials","hostParts","matchHost","Host","defaultCredentials","region","createHost","isCodeCommitGit","isSingleRegion","prepareRequest","parsePath","parsedPath","datetime","getDateTime","credentialString","signedHeaders","doNotModifyHeaders","formatPath","getDate","kDate","kRegion","kService","kCredentials","canonicalString","bodyHash","pathStr","queryStr","normalizePath","decodePath","doNotEncodePath","decodeSlashesInPath","firstValOnly","piece","canonicalHeaders","AWS_ACCESS_KEY_ID","AWS_ACCESS_KEY","AWS_SECRET_ACCESS_KEY","AWS_SECRET_KEY","AWS_SESSION_TOKEN","queryIx","LruCache","capacity","DoublyLinkedList","firstNode","lastNode","DoublyLinkedNode","used","prune","moveToFront","formatHostname","parseNoProxyZone","zone","zoneParts","hasPort","noProxy","NO_PROXY","no_proxy","noProxyZone","isMatchedAt","hostnameMatched","uriInNoProxy","http_proxy","https_proxy","lib","useQuerystring","parseOptions","stringifyOptions","qsParseOptions","qsStringifyOptions","prep","queryObj","headersObj","jsonObj","paramsObj","mimeType","bodySize","headersSize","param","attachment","fileName","createReadStream","HARError","bearerToken","basic","challenge","qop","nc","cnonce","ha1","realm","ha1Compute","ha2","digestResponse","authValues","opaque","authVerb","buildParams","qsLib","oa","oauth_version","oauth_timestamp","oauth_nonce","oauth_signature_method","consumer_secret_or_private_key","oauth_consumer_secret","oauth_private_key","token_secret","oauth_token_secret","oauth_realm","oauth_transport_method","baseurl","oauth_signature","buildBodyHash","signature_method","shasum","concatParams","formContentType","transport","transport_method","body_hash","sha","compare","generateBase","httpMethod","base_uri","hmacsign","consumer_secret","hmacsign256","rsasign","private_key","plaintext","signMethod","skipArgs","calculateMac","app","dlg","localtimeOffsetMsec","payload","artifacts","hasExt","isChunked","setHeaders","build","preambleCRLF","preamble","postambleCRLF","isUrl","followRedirect","followRedirects","followAllRedirects","followOriginalHttpMethod","allowRedirect","maxRedirects","redirects","removeRefererHeader","redirectTo","location","uriPrev","redirectUri","proxyHeaderWhiteList","proxyHeaderExclusiveList","tunnelOverride","uriObject","proxyHost","proxyHeaders","whiteList","constructProxyHeaderWhiteList","tunnelFn","tunnelFnName","constructTunnelFnName","getTunnelFn","tunnelOptions","constructTunnelOptions","JsonParser","internalParser","originalOnToken","onToken","additionalKey","additionalValue","oldKey","emitString","C","NUMBER","TRUE","FALSE","NULL","ARRAY","typeKey","LEFT_BRACE","RIGHT_BRACE","LEFT_BRACKET","RIGHT_BRACKET","COLON","COMMA","STOP","TRUE1","TRUE2","TRUE3","FALSE1","FALSE2","FALSE3","FALSE4","NULL1","NULL2","NULL3","NUMBER1","NUMBER3","STRING1","STRING2","STRING3","STRING4","STRING5","STRING6","VALUE","KEY","tState","bytes_remaining","bytes_in_sequence","temp_buffs","2","3","4","toknam","onError","charError","parseError","radix","comparison","elem","modifiers","default_email_options","require_display_name","allow_display_name","display_email","lower_domain","allow_utf8_local_part","quotedEmailUserUtf8","quotedEmailUser","emailUserUtf8Part","emailUserPart","user_parts","default_url_options","port_str","require_valid_protocol","protocols","require_protocol","allow_protocol_relative_urls","require_host","ipv6_match","wrapped_ipv6","host_whitelist","checkHost","host_blacklist","macAddress","_alpha","_isInt","_isFullWidth","_isHalfWidth","multibyte","surrogatePair","float","default_decimal_options","decimal_digits","force_decimal","decimalRegExp","hexcolor","isrc","lengths","md4","ripemd128","ripemd160","tiger128","tiger160","tiger192","crc32","crc32b","surrogatePairs","5","sanitized","creditCard","digit","tmpNum","shouldDouble","checksumStr","character","checksum","isbn10Maybe","isbn13Maybe","factor","testIssn","issn","require_hyphen","case_sensitive","issnDigits","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","digitValue","return","strictMode","phones","phone","ar-AE","ar-DZ","ar-EG","ar-JO","ar-SA","ar-SY","be-BY","en-AU","en-GB","en-HK","en-IN","en-KE","en-NG","en-NZ","en-PK","en-RW","en-SG","en-TZ","en-UG","en-ZA","en-ZM","et-EE","fa-IR","fi-FI","fo-FO","he-IL","id-ID","ja-JP","kk-KZ","kl-GL","ko-KR","lt-LT","ms-MY","nl-BE","pt-BR","ro-RO","th-TH","vi-VN","zh-CN","zh-TW","digits_after_decimal","symbol","require_symbol","whole_dollar_amount_with_sep","thousands_separator","whole_dollar_amount","decimal_amount","decimal_separator","require_decimal","allow_decimal","allow_negatives","parens_for_negatives","negative_sign_after_digits","negative_sign_before_digits","allow_negative_sign_placeholder","allow_space_after_symbol","allow_space_after_digits","symbol_after_digits","currencyRegex","default_currency_options","validISO31661Alpha2CountriesCodes","notBase64","firstPaddingChar","schemeAndMediaType","mediaType","validMediaType","validAttribute","validData","mimeTypeSimple","mimeTypeText","mimeTypeMultipart","lat","long","locales","fourDigit","fiveDigit","sixDigit","AT","AU","BE","BG","CA","CH","CZ","DE","DK","DZ","ES","FI","FR","GR","IL","IN","IS","IT","JP","KE","LI","MX","NL","NO","PL","PT","RO","RU","SA","SE","TW","US","ZA","ZM","keep_new_lines","default_normalize_email_options","raw_parts","gmail_remove_subaddress","gmail_remove_dots","all_lowercase","gmail_lowercase","gmail_convert_googlemaildotcom","icloud_domains","icloud_remove_subaddress","icloud_lowercase","outlookdotcom_domains","outlookdotcom_remove_subaddress","outlookdotcom_lowercase","yahoo_domains","yahoo_remove_subaddress","yahoo_lowercase","_merge","useDevelopmentStorageSetting","developmentStorageProxyUriSetting","defaultEndpointsProtocolSetting","accountNameSetting","accountKeySetting","sasSetting","tokenSetting","blobEndpointSetting","queueEndpointSetting","tableEndpointSetting","fileEndpointSetting","endpointSuffixSetting","blobEndpoint","queueEndpoint","tableEndpoint","fileEndpoint","_blobEndpoint","_queueEndpoint","_fileEndpoint","_token","tokenizedSettings","createFromSettings","addIfNotNullOrEmpty","getDevelopmentStorageAccountSettings","matchedSpecs","_createStorageServiceSettings","parsedUri","standardizeHost","accountName","accountKey","serviceStatsXml","serviceStats","GeoReplication","Status","LastSyncTime","signedIdentifiersJs","startIsoString","expiryIsoString","signedIdentifiersXml","signedIdentifier","Permission","minRetryInterval","maxRetryInterval","DEFAULT_CLIENT_MIN_RETRY_INTERVAL","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","retryData","incrementDelta","DEFAULT_OPERATION_MEMORY_USAGE","DEFAULT_GLOBAL_CONCURRENCY","SystemTotalMemory","totalmem","CriticalFreeMemory","operationMemoryUsage","callbackInOrder","callInOrder","_currentOperationId","concurrency","enableReuseSocket","_enableComplete","_totalOperation","_activeOperation","_queuedOperation","_operations","OperationState","INITED","QUEUED","RUNNING","COMPLETE","CALLBACK","setConcurrency","IsWorkloadHeavy","sharedRequest","_isLowMemory","_getApproximateMemoryUsage","memoryUsage","rss","approximateMemoryUsage","freemem","addOperation","status","operationId","_runOperation","enableComplete","_tryEmitEndEvent","_fireOperationUserCallback","getBatchOperationCallback","run","_callbackArguments","_tryEmitDrainEvent","_getCallbackOperationIndex","_userCallback","_fireUserCallback","noOperation","RestOperation","Inited","sliceEnd","operationArguments","CommonOperation","operationFunc","sliceStart","maxCount","_pool","_inuse","_maxCount","_extendMemoryPool","_getBufferFromPool","increment","_startTime","_timeWindowInSeconds","_timeWindow","_totalWindowSize","_speedTracks","_speedTrackPtr","completeSize","toHumanReadableSize","toFixed","getElapsedSeconds","humanReadable","seconds","getCompletePercent","getAverageSpeed","_getInternalSpeed","getSpeed","_refreshSpeedTracks","speed","_recordSpeed","that","track","timeDiff","getAutoIncrementFunction","retValue","doneSize","getTotalSize","getCompleteSize","daysFromNow","days","setDate","hoursFromNow","hours","setHours","getHours","minutesFromNow","minutes","setMinutes","getMinutes","secondsFromNow","setSeconds","getSeconds","generateEmptyCondition","generateIfNotExistsCondition","accessCondition","generateIfExistsCondition","generateIfNoneMatchCondition","generateIfMatchCondition","generateIfModifiedSinceCondition","generateIfNotModifiedSinceCondition","generateSequenceNumberEqualCondition","sequenceNumber","generateSequenceNumberLessThanCondition","generateSequenceNumberLessThanOrEqualCondition","tableService","batchBoundary","_getBoundary","changesetBoundary","_serializeOperation","responses","rawResponses","httpLocation","_parseOperation","responseLines","isBody","headerSplit","retrieve","operationType","copiedOptions","getOperation","removeOperation","getBlobToLocalFile","localFileName","_getBlobToLocalFile","createPageBlobFromLocalFile","_createBlobFromLocalFile","createBlockBlobFromLocalFile","createAppendBlobFromLocalFile","appendFromLocalFile","speedSummary","storeBlobContentMD5","_uploadBlobFromStream","appendError","blobType","creationCallback","createBlob","createResponse","_createBlob","writeStream","createWriteStream","getBlobToStream","responseBlob","existsSync","bytesWritten","unlinkSync","_destroyed","_fd","_fileName","_open","fd","_emitData","_getBuffer","_releaseBuffer","bytesRead","previousState","BlockRangeStream","PageRangeStream","AccountPropertiesResult","BlockListResult","BlobResult","ContainerResult","LeaseResult","defaultEnableReuseSocket","singleBlobPutThresholdInBytes","parallelOperationThreadCount","createResourceName","forSAS","getAccountProperties","accountPropertiesResult","setBlobTier","resourceName","listContainersSegmented","listContainersSegmentedWithPrefix","nextMarker","listContainersResult","containers","EnumerationResults","Containers","Container","currentContainer","containerResult","NextMarker","doesContainerExist","_doesContainerExist","createContainer","publicAccessLevel","getPropertiesFromHeaders","createContainerIfNotExists","getContainerProperties","getContainerMetadata","setContainerMetadata","getContainerAcl","setContainerAcl","deleteContainer","deleteContainerIfExists","statuscode","listBlobDirectoriesSegmented","listBlobDirectoriesSegmentedWithPrefix","_listBlobsOrDircotriesSegmentedWithPrefix","listBlobsSegmented","listBlobsSegmentedWithPrefix","acquireLease","_leaseImpl","renewLease","changeLease","proposedLeaseId","releaseLease","breakLease","snapshotId","setHeadersFromBlob","blobResult","getBlobMetadata","setBlobProperties","contentSettings","setPropertiesFromBlob","_setBlobPropertiesHelper","setBlobMetadata","propertiesRequestOptions","skipSizeCheck","_getBlobToStream","_getBlobToRangeStream","getBlobToText","_setRangeContentMD5Header","_validateLengthAndMD5","deleteBlob","deleteSnapshots","undeleteBlob","doesBlobExist","_doesBlobExist","deleteBlobIfExists","existsResult","createBlobSnapshot","startCopyBlob","sourceUri","targetContainer","targetBlob","targetResourceName","isIncrementalCopy","sourceLeaseId","abortCopyBlob","createPageBlob","createPageBlobFromStream","streamLength","_createBlobFromStream","createWriteStreamToExistingPageBlob","_createWriteStreamToBlob","createWriteStreamToNewPageBlob","createPagesFromStream","transactionalContentMD5","useTransactionalMD5","_createPages","listPageRanges","pageRanges","PageList","PageRange","pageRange","End","getPageRangesDiff","previousSnapshotTime","pageRangesDiff","updatedPageRanges","isCleared","ClearRange","clearedPageRanges","clearPageRange","_updatePageBlobPagesImpl","resizePageBlob","setPageBlobSequenceNumber","sequenceNumberAction","createBlockBlobFromStream","createBlockBlobFromText","_createBlobFromText","createWriteStreamToBlockBlob","createBlockFromStream","blockId","_createBlock","createBlockFromText","createBlockFromURL","sourceURL","sourceRangeStart","sourceRangeEnd","startCreateBlock","commitBlocks","blockList","blockListXml","listBlocks","blocklisttype","blockListResult","BlockList","generateBlockIdPrefix","getBlockId","createOrReplaceAppendBlob","createAppendBlobFromStream","createAppendBlobFromText","createWriteStreamToNewAppendBlob","createWriteStreamToExistingAppendBlob","appendFromStream","appendFromText","_uploadBlobFromText","appendBlockFromStream","_appendBlock","appendBlockFromText","createNewBlob","sizeLimitation","createCallback","isNewBlob","startUpload","chunkStream","_uploadContentFromChunkStream","_putBlockBlob","appendPosition","startAppendBlock","maxBlobSize","leaseAction","leaseBreakPeriod","leaseResult","writeMethod","apiName","isBlockBlobUpload","isPageBlobUpload","isAppendBlobUpload","originalContentMD5","minBlockSize","fileReadStreamAllocator","batchOperations","rangeOptions","initialAppendPosition","blockIdPrefix","blockCount","blockIds","autoIncrement","checkLengthLimit","uploadBlockBlobChunk","currentBlob","uploadAppendBlobChunk","UncommittedBlocks","blobProperties","storedMD5","rangeEndHeader","rangeStream","isPageBlobDownload","checkMD5sum","savedBlobResult","savedBlobResponse","writeZeroOperation","bufferAvailable","clientSideContentMD5","listOptions","blockListFilter","listBlobType","listBlobsResult","Blobs","BlobPrefix","blobServiceClient","_emittedRangeType","blocklist","CommittedBlocks","Name","Size","_emitBlockList","_getTypeList","typeStart","blockType","_emitBlockRange","indexStart","blockIndex","minRangeSize","maxRangeSize","SkuName","AccountKind","blockListJs","blockListDoc","LatestBlocks","block","Block","blobXml","resultPropertyName","accessTierInferred","remainingRetentionDays","headersForProperties","lastModified","creationTime","blobContentLength","contentRange","committedBlockCount","serverEncrypted","blobRange","acceptRanges","appendOffset","accessTier","accessTierChangeTime","archiveStatus","contentSettings.contentType","contentSettings.contentEncoding","contentSettings.contentLanguage","contentSettings.cacheControl","contentSettings.contentDisposition","contentSettings.contentMD5","lease.id","lease.status","lease.duration","lease.state","copy.id","copy.status","copy.source","copy.progress","copy.completionTime","copy.statusDescription","copy.destinationSnapshot","setBlobPropertyFromHeaders","blobProperty","headerProperty","setHeaderPropertyFromBlob","blobPropertyValue","sourceRange","propertyValue","containerXml","hasImmutabilityPolicy","hasLegalHold","setContainerPropertyFromHeaders","containerProperty","default_type","123","ez","aw","atom","atomcat","atomsvc","ccxml","cdmia","cdmic","cdmid","cdmio","cdmiq","cu","davmount","dbk","dssc","xdssc","ecma","emma","epub","exi","pfr","gml","gpx","gxf","stk","ink","inkml","ipfix","ser","class","js","jsonml","lostxml","hqx","cpt","mads","mrc","mrcx","ma","nb","mb","mathml","mbox","mscml","metalink","meta4","mets","mods","m21","mp21","mp4s","dot","mxf","bin","dms","lrf","so","dist","distz","pkg","bpk","dump","elc","deploy","oda","opf","ogx","omdoc","onetoc","onetoc2","onetmp","onepkg","oxps","xer","pdf","pgp","asc","prf","p10","p7m","p7c","p7s","p8","cer","crl","pkipath","pki","pls","ai","eps","ps","cww","pskcxml","rdf","rif","rnc","rl","rld","gbr","mft","roa","rsd","rtf","sbml","scq","scs","spq","spp","sdp","setpay","setreg","shf","smi","smil","rq","srx","gram","grxml","sru","ssdl","ssml","tei","teicorpus","tfi","tsd","plb","psb","pvb","tcap","pwn","aso","imp","acu","atc","acutc","air","fcdt","fxp","fxpl","xdp","xfdf","ahead","azf","azs","azw","ami","apk","cii","fti","atx","mpkg","m3u8","swi","aep","mpm","bmi","rep","cdxml","mmd","cdy","cla","rp9","c4g","c4d","c4f","c4p","c4u","c11amc","c11amz","csp","cdbcmsg","cmc","clkx","clkk","clkp","clkt","clkw","wbs","pml","ppd","car","pcurl","dart","rdz","uvf","uvvf","uvd","uvvd","uvt","uvvt","uvx","uvvx","uvz","uvvz","fe_launch","dna","mlp","dpg","dfac","kpxx","ait","svc","geo","mag","nml","esf","msf","qam","slt","ssf","es3","et3","ez2","ez3","fdf","mseed","dataless","gph","ftc","fm","frame","maker","book","fnc","ltf","fsc","oas","oa2","oa3","fg5","ddd","xdw","xbd","fzs","txd","ggb","ggt","gex","gre","gxt","g2w","g3w","gmx","kml","kmz","gqf","gqs","gac","ghf","gim","grv","gtm","tpl","vcg","hal","zmm","hbci","les","hpgl","hpid","hps","jlt","pcl","pclxl","sfd-hdstx","mpy","afp","listafp","list3820","irm","sc","icc","icm","igl","ivp","ivu","igm","xpw","xpx","i2g","qbo","qfx","rcprofile","irp","xpr","fcs","jam","rms","jisp","joda","ktz","ktr","karbon","chrt","kfo","flw","kon","kpr","kpt","ksp","kwd","kwt","htke","kia","kne","knp","skp","skd","skt","skm","sse","lasxml","lbd","lbe","pre","nsf","org","scm","lwp","portpkg","mcd","mc1","cdkey","mwf","mfm","flo","igx","mif","daf","dis","mbk","mqy","msl","plc","txf","mpn","mpc","xul","cil","cab","xls","xlm","xla","xlc","xlt","xlw","xlam","xlsb","xlsm","xltm","eot","chm","ims","thmx","cat","stl","ppt","pps","pot","ppam","pptm","sldm","ppsm","potm","mpp","mpt","docm","dotm","wps","wks","wcm","wdb","wpl","xps","mseq","mus","msty","taglet","nlu","ntf","nitf","nnd","nns","nnw","ngdat","n-gage","rpst","rpss","edm","edx","odc","otc","odb","odf","odft","odg","otg","odi","oti","odp","otp","ods","ots","odt","odm","ott","oth","xo","dd2","oxt","pptx","sldx","ppsx","potx","xlsx","xltx","docx","dotx","mgp","dp","esa","pdb","pqa","oprc","paw","ei6","efif","wg","plf","pbd","mgz","qps","ptid","qxd","qxt","qwd","qwt","qxl","qxb","bed","mxl","musicxml","cryptonote","cod","rm","rmvb","link66","st","see","sema","semd","semf","ifm","itp","iif","ipk","twd","twds","mmf","teacher","sdkm","sdkd","dxp","sfs","sdc","sda","sdd","smf","sdw","vor","sgl","smzip","sxc","stc","sxd","std","sxi","sti","sxm","sxw","sxg","stw","sus","susp","svd","sis","sisx","xsm","bdm","xdm","tao","pcap","dmp","tmo","tpt","mxs","tra","ufd","ufdl","utz","umj","unityweb","uoml","vcx","vsd","vst","vss","vsw","vis","vsf","wbxml","wmlc","wmlsc","wtb","nbp","wpd","wqd","stf","xar","xfdl","hvd","hvs","hvp","osf","osfpvg","saf","spf","zir","zirz","zaz","vxml","wgt","hlp","wsdl","wspolicy","7z","abw","ace","dmg","aab","u32","vox","aam","aas","bcpio","torrent","blb","blorb","bz","bz2","boz","cbr","cba","cbt","cbz","cb7","vcd","cfs","chat","pgn","nsc","cpio","csh","deb","udeb","dgc","dcr","dxr","cst","cct","cxt","w3d","fgd","swa","wad","ncx","dtb","dvi","evy","eva","bdf","gsf","psf","otf","pcf","snf","ttf","ttc","pfa","pfb","pfm","afm","woff","arc","spl","gca","ulx","gnumeric","gramps","gtar","hdf","install","iso","jnlp","latex","lzh","lha","mie","prc","mobi","application","lnk","wmd","wmz","xbap","mdb","obd","crd","clp","exe","dll","bat","msi","mvb","m13","m14","wmf","emf","emz","mny","scd","trm","wri","cdf","nzb","p12","p7b","spc","p7r","rar","ris","shar","swf","xap","sql","sit","sitx","srt","sv4cpio","sv4crc","gam","tar","tcl","tex","tfm","texinfo","texi","ustar","crt","fig","xlf","xpi","xz","z1","z2","z4","z5","z6","z7","z8","xaml","xdf","xenc","xhtml","xht","xsl","dtd","xop","xpl","xslt","xspf","mxml","xhvml","xvml","xvm","yang","yin","adp","au","snd","midi","kar","rmi","mp4a","mpga","mp2","mp2a","mp3","m2a","m3a","oga","ogg","spx","s3m","sil","uva","uvva","eol","dra","dts","dtshd","lvp","pya","ecelp4800","ecelp7470","ecelp9600","rip","weba","aac","aif","aiff","aifc","caf","flac","mka","m3u","wax","wma","ram","ra","rmp","wav","xm","cdx","cif","cmdf","cml","csml","xyz","bmp","cgm","g3","gif","ief","jpeg","jpg","jpe","ktx","png","btif","sgi","svg","svgz","tiff","tif","psd","uvi","uvvi","uvg","uvvg","djvu","djv","dwg","dxf","fbs","fpx","fst","mmr","rlc","mdi","wdp","npx","wbmp","xif","webp","3ds","ras","cmx","fh","fhc","fh4","fh5","fh7","ico","sid","pcx","pic","pct","pnm","pbm","pgm","ppm","rgb","tga","xbm","xpm","xwd","eml","igs","iges","msh","mesh","silo","dae","dwf","gdl","gtw","mts","vtu","wrl","vrml","x3db","x3dbz","x3dv","x3dvz","x3d","x3dz","appcache","ics","ifb","css","csv","html","htm","n3","conf","def","in","dsc","rtx","sgml","sgm","tsv","tr","roff","man","ttl","uris","urls","vcard","curl","dcurl","scurl","mcurl","fly","flx","gv","3dml","spot","jad","wml","wmls","asm","cc","cxx","cpp","dic","for","f77","f90","java","opml","pas","nfo","etx","sfv","uu","vcs","vcf","3gp","3g2","h261","h263","h264","jpgv","jpm","jpgm","mj2","mjp2","mp4","mp4v","mpg4","mpeg","mpg","mpe","m1v","m2v","ogv","qt","mov","uvh","uvvh","uvm","uvvm","uvp","uvvp","uvs","uvvs","uvv","uvvv","dvb","fvt","mxu","m4u","pyv","uvu","uvvu","viv","webm","f4v","fli","flv","m4v","mkv","mk3d","mks","mng","asf","asx","vob","wm","wmv","wmx","wvx","avi","movie","smv","ice","vtt","crx","htc","manifest","m4p","m4a","event-stream","webapp","lua","luac","markdown","md","mkd","application/andrew-inset","application/applixware","application/atom+xml","application/atomcat+xml","application/atomsvc+xml","application/ccxml+xml","application/cdmi-capability","application/cdmi-container","application/cdmi-domain","application/cdmi-object","application/cdmi-queue","application/cu-seeme","application/davmount+xml","application/docbook+xml","application/dssc+der","application/dssc+xml","application/ecmascript","application/emma+xml","application/epub+zip","application/exi","application/font-tdpfr","application/gml+xml","application/gpx+xml","application/gxf","application/hyperstudio","application/inkml+xml","application/ipfix","application/java-archive","application/java-serialized-object","application/java-vm","application/javascript","application/json","application/jsonml+json","application/lost+xml","application/mac-binhex40","application/mac-compactpro","application/mads+xml","application/marc","application/marcxml+xml","application/mathematica","application/mathml+xml","application/mbox","application/mediaservercontrol+xml","application/metalink+xml","application/metalink4+xml","application/mets+xml","application/mods+xml","application/mp21","application/mp4","application/msword","application/mxf","application/octet-stream","application/oda","application/oebps-package+xml","application/ogg","application/omdoc+xml","application/onenote","application/oxps","application/patch-ops-error+xml","application/pdf","application/pgp-encrypted","application/pgp-signature","application/pics-rules","application/pkcs10","application/pkcs7-mime","application/pkcs7-signature","application/pkcs8","application/pkix-attr-cert","application/pkix-cert","application/pkix-crl","application/pkix-pkipath","application/pkixcmp","application/pls+xml","application/postscript","application/prs.cww","application/pskc+xml","application/rdf+xml","application/reginfo+xml","application/relax-ng-compact-syntax","application/resource-lists+xml","application/resource-lists-diff+xml","application/rls-services+xml","application/rpki-ghostbusters","application/rpki-manifest","application/rpki-roa","application/rsd+xml","application/rss+xml","application/rtf","application/sbml+xml","application/scvp-cv-request","application/scvp-cv-response","application/scvp-vp-request","application/scvp-vp-response","application/sdp","application/set-payment-initiation","application/set-registration-initiation","application/shf+xml","application/smil+xml","application/sparql-query","application/sparql-results+xml","application/srgs","application/srgs+xml","application/sru+xml","application/ssdl+xml","application/ssml+xml","application/tei+xml","application/thraud+xml","application/timestamped-data","application/vnd.3gpp.pic-bw-large","application/vnd.3gpp.pic-bw-small","application/vnd.3gpp.pic-bw-var","application/vnd.3gpp2.tcap","application/vnd.3m.post-it-notes","application/vnd.accpac.simply.aso","application/vnd.accpac.simply.imp","application/vnd.acucobol","application/vnd.acucorp","application/vnd.adobe.air-application-installer-package+zip","application/vnd.adobe.formscentral.fcdt","application/vnd.adobe.fxp","application/vnd.adobe.xdp+xml","application/vnd.adobe.xfdf","application/vnd.ahead.space","application/vnd.airzip.filesecure.azf","application/vnd.airzip.filesecure.azs","application/vnd.amazon.ebook","application/vnd.americandynamics.acc","application/vnd.amiga.ami","application/vnd.android.package-archive","application/vnd.anser-web-certificate-issue-initiation","application/vnd.anser-web-funds-transfer-initiation","application/vnd.antix.game-component","application/vnd.apple.installer+xml","application/vnd.apple.mpegurl","application/vnd.aristanetworks.swi","application/vnd.astraea-software.iota","application/vnd.audiograph","application/vnd.blueice.multipass","application/vnd.bmi","application/vnd.businessobjects","application/vnd.chemdraw+xml","application/vnd.chipnuts.karaoke-mmd","application/vnd.cinderella","application/vnd.claymore","application/vnd.cloanto.rp9","application/vnd.clonk.c4group","application/vnd.cluetrust.cartomobile-config","application/vnd.cluetrust.cartomobile-config-pkg","application/vnd.commonspace","application/vnd.contact.cmsg","application/vnd.cosmocaller","application/vnd.crick.clicker","application/vnd.crick.clicker.keyboard","application/vnd.crick.clicker.palette","application/vnd.crick.clicker.template","application/vnd.crick.clicker.wordbank","application/vnd.criticaltools.wbs+xml","application/vnd.ctc-posml","application/vnd.cups-ppd","application/vnd.curl.car","application/vnd.curl.pcurl","application/vnd.dart","application/vnd.data-vision.rdz","application/vnd.dece.data","application/vnd.dece.ttml+xml","application/vnd.dece.unspecified","application/vnd.dece.zip","application/vnd.denovo.fcselayout-link","application/vnd.dna","application/vnd.dolby.mlp","application/vnd.dpgraph","application/vnd.dreamfactory","application/vnd.ds-keypoint","application/vnd.dvb.ait","application/vnd.dvb.service","application/vnd.dynageo","application/vnd.ecowin.chart","application/vnd.enliven","application/vnd.epson.esf","application/vnd.epson.msf","application/vnd.epson.quickanime","application/vnd.epson.salt","application/vnd.epson.ssf","application/vnd.eszigno3+xml","application/vnd.ezpix-album","application/vnd.ezpix-package","application/vnd.fdf","application/vnd.fdsn.mseed","application/vnd.fdsn.seed","application/vnd.flographit","application/vnd.fluxtime.clip","application/vnd.framemaker","application/vnd.frogans.fnc","application/vnd.frogans.ltf","application/vnd.fsc.weblaunch","application/vnd.fujitsu.oasys","application/vnd.fujitsu.oasys2","application/vnd.fujitsu.oasys3","application/vnd.fujitsu.oasysgp","application/vnd.fujitsu.oasysprs","application/vnd.fujixerox.ddd","application/vnd.fujixerox.docuworks","application/vnd.fujixerox.docuworks.binder","application/vnd.fuzzysheet","application/vnd.genomatix.tuxedo","application/vnd.geogebra.file","application/vnd.geogebra.tool","application/vnd.geometry-explorer","application/vnd.geonext","application/vnd.geoplan","application/vnd.geospace","application/vnd.gmx","application/vnd.google-earth.kml+xml","application/vnd.google-earth.kmz","application/vnd.grafeq","application/vnd.groove-account","application/vnd.groove-help","application/vnd.groove-identity-message","application/vnd.groove-injector","application/vnd.groove-tool-message","application/vnd.groove-tool-template","application/vnd.groove-vcard","application/vnd.hal+xml","application/vnd.handheld-entertainment+xml","application/vnd.hbci","application/vnd.hhe.lesson-player","application/vnd.hp-hpgl","application/vnd.hp-hpid","application/vnd.hp-hps","application/vnd.hp-jlyt","application/vnd.hp-pcl","application/vnd.hp-pclxl","application/vnd.hydrostatix.sof-data","application/vnd.ibm.minipay","application/vnd.ibm.modcap","application/vnd.ibm.rights-management","application/vnd.ibm.secure-container","application/vnd.iccprofile","application/vnd.igloader","application/vnd.immervision-ivp","application/vnd.immervision-ivu","application/vnd.insors.igm","application/vnd.intercon.formnet","application/vnd.intergeo","application/vnd.intu.qbo","application/vnd.intu.qfx","application/vnd.ipunplugged.rcprofile","application/vnd.irepository.package+xml","application/vnd.is-xpr","application/vnd.isac.fcs","application/vnd.jam","application/vnd.jcp.javame.midlet-rms","application/vnd.jisp","application/vnd.joost.joda-archive","application/vnd.kahootz","application/vnd.kde.karbon","application/vnd.kde.kchart","application/vnd.kde.kformula","application/vnd.kde.kivio","application/vnd.kde.kontour","application/vnd.kde.kpresenter","application/vnd.kde.kspread","application/vnd.kde.kword","application/vnd.kenameaapp","application/vnd.kidspiration","application/vnd.kinar","application/vnd.koan","application/vnd.kodak-descriptor","application/vnd.las.las+xml","application/vnd.llamagraphics.life-balance.desktop","application/vnd.llamagraphics.life-balance.exchange+xml","application/vnd.lotus-1-2-3","application/vnd.lotus-approach","application/vnd.lotus-freelance","application/vnd.lotus-notes","application/vnd.lotus-organizer","application/vnd.lotus-screencam","application/vnd.lotus-wordpro","application/vnd.macports.portpkg","application/vnd.mcd","application/vnd.medcalcdata","application/vnd.mediastation.cdkey","application/vnd.mfer","application/vnd.mfmp","application/vnd.micrografx.flo","application/vnd.micrografx.igx","application/vnd.mif","application/vnd.mobius.daf","application/vnd.mobius.dis","application/vnd.mobius.mbk","application/vnd.mobius.mqy","application/vnd.mobius.msl","application/vnd.mobius.plc","application/vnd.mobius.txf","application/vnd.mophun.application","application/vnd.mophun.certificate","application/vnd.mozilla.xul+xml","application/vnd.ms-artgalry","application/vnd.ms-cab-compressed","application/vnd.ms-excel","application/vnd.ms-excel.addin.macroenabled.12","application/vnd.ms-excel.sheet.binary.macroenabled.12","application/vnd.ms-excel.sheet.macroenabled.12","application/vnd.ms-excel.template.macroenabled.12","application/vnd.ms-fontobject","application/vnd.ms-htmlhelp","application/vnd.ms-ims","application/vnd.ms-lrm","application/vnd.ms-officetheme","application/vnd.ms-pki.seccat","application/vnd.ms-pki.stl","application/vnd.ms-powerpoint","application/vnd.ms-powerpoint.addin.macroenabled.12","application/vnd.ms-powerpoint.presentation.macroenabled.12","application/vnd.ms-powerpoint.slide.macroenabled.12","application/vnd.ms-powerpoint.slideshow.macroenabled.12","application/vnd.ms-powerpoint.template.macroenabled.12","application/vnd.ms-project","application/vnd.ms-word.document.macroenabled.12","application/vnd.ms-word.template.macroenabled.12","application/vnd.ms-works","application/vnd.ms-wpl","application/vnd.ms-xpsdocument","application/vnd.mseq","application/vnd.musician","application/vnd.muvee.style","application/vnd.mynfc","application/vnd.neurolanguage.nlu","application/vnd.nitf","application/vnd.noblenet-directory","application/vnd.noblenet-sealer","application/vnd.noblenet-web","application/vnd.nokia.n-gage.data","application/vnd.nokia.n-gage.symbian.install","application/vnd.nokia.radio-preset","application/vnd.nokia.radio-presets","application/vnd.novadigm.edm","application/vnd.novadigm.edx","application/vnd.novadigm.ext","application/vnd.oasis.opendocument.chart","application/vnd.oasis.opendocument.chart-template","application/vnd.oasis.opendocument.database","application/vnd.oasis.opendocument.formula","application/vnd.oasis.opendocument.formula-template","application/vnd.oasis.opendocument.graphics","application/vnd.oasis.opendocument.graphics-template","application/vnd.oasis.opendocument.image","application/vnd.oasis.opendocument.image-template","application/vnd.oasis.opendocument.presentation","application/vnd.oasis.opendocument.presentation-template","application/vnd.oasis.opendocument.spreadsheet","application/vnd.oasis.opendocument.spreadsheet-template","application/vnd.oasis.opendocument.text","application/vnd.oasis.opendocument.text-master","application/vnd.oasis.opendocument.text-template","application/vnd.oasis.opendocument.text-web","application/vnd.olpc-sugar","application/vnd.oma.dd2+xml","application/vnd.openofficeorg.extension","application/vnd.openxmlformats-officedocument.presentationml.presentation","application/vnd.openxmlformats-officedocument.presentationml.slide","application/vnd.openxmlformats-officedocument.presentationml.slideshow","application/vnd.openxmlformats-officedocument.presentationml.template","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet","application/vnd.openxmlformats-officedocument.spreadsheetml.template","application/vnd.openxmlformats-officedocument.wordprocessingml.document","application/vnd.openxmlformats-officedocument.wordprocessingml.template","application/vnd.osgeo.mapguide.package","application/vnd.osgi.dp","application/vnd.osgi.subsystem","application/vnd.palm","application/vnd.pawaafile","application/vnd.pg.format","application/vnd.pg.osasli","application/vnd.picsel","application/vnd.pmi.widget","application/vnd.pocketlearn","application/vnd.powerbuilder6","application/vnd.previewsystems.box","application/vnd.proteus.magazine","application/vnd.publishare-delta-tree","application/vnd.pvi.ptid1","application/vnd.quark.quarkxpress","application/vnd.realvnc.bed","application/vnd.recordare.musicxml","application/vnd.recordare.musicxml+xml","application/vnd.rig.cryptonote","application/vnd.rim.cod","application/vnd.rn-realmedia","application/vnd.rn-realmedia-vbr","application/vnd.route66.link66+xml","application/vnd.sailingtracker.track","application/vnd.seemail","application/vnd.sema","application/vnd.semd","application/vnd.semf","application/vnd.shana.informed.formdata","application/vnd.shana.informed.formtemplate","application/vnd.shana.informed.interchange","application/vnd.shana.informed.package","application/vnd.simtech-mindmapper","application/vnd.smaf","application/vnd.smart.teacher","application/vnd.solent.sdkm+xml","application/vnd.spotfire.dxp","application/vnd.spotfire.sfs","application/vnd.stardivision.calc","application/vnd.stardivision.draw","application/vnd.stardivision.impress","application/vnd.stardivision.math","application/vnd.stardivision.writer","application/vnd.stardivision.writer-global","application/vnd.stepmania.package","application/vnd.stepmania.stepchart","application/vnd.sun.xml.calc","application/vnd.sun.xml.calc.template","application/vnd.sun.xml.draw","application/vnd.sun.xml.draw.template","application/vnd.sun.xml.impress","application/vnd.sun.xml.impress.template","application/vnd.sun.xml.math","application/vnd.sun.xml.writer","application/vnd.sun.xml.writer.global","application/vnd.sun.xml.writer.template","application/vnd.sus-calendar","application/vnd.svd","application/vnd.symbian.install","application/vnd.syncml+xml","application/vnd.syncml.dm+wbxml","application/vnd.syncml.dm+xml","application/vnd.tao.intent-module-archive","application/vnd.tcpdump.pcap","application/vnd.tmobile-livetv","application/vnd.trid.tpt","application/vnd.triscape.mxs","application/vnd.trueapp","application/vnd.ufdl","application/vnd.uiq.theme","application/vnd.umajin","application/vnd.unity","application/vnd.uoml+xml","application/vnd.vcx","application/vnd.visio","application/vnd.visionary","application/vnd.vsf","application/vnd.wap.wbxml","application/vnd.wap.wmlc","application/vnd.wap.wmlscriptc","application/vnd.webturbo","application/vnd.wolfram.player","application/vnd.wordperfect","application/vnd.wqd","application/vnd.wt.stf","application/vnd.xara","application/vnd.xfdl","application/vnd.yamaha.hv-dic","application/vnd.yamaha.hv-script","application/vnd.yamaha.hv-voice","application/vnd.yamaha.openscoreformat","application/vnd.yamaha.openscoreformat.osfpvg+xml","application/vnd.yamaha.smaf-audio","application/vnd.yamaha.smaf-phrase","application/vnd.yellowriver-custom-menu","application/vnd.zul","application/vnd.zzazz.deck+xml","application/voicexml+xml","application/widget","application/winhlp","application/wsdl+xml","application/wspolicy+xml","application/x-7z-compressed","application/x-abiword","application/x-ace-compressed","application/x-apple-diskimage","application/x-authorware-bin","application/x-authorware-map","application/x-authorware-seg","application/x-bcpio","application/x-bittorrent","application/x-blorb","application/x-bzip","application/x-bzip2","application/x-cbr","application/x-cdlink","application/x-cfs-compressed","application/x-chat","application/x-chess-pgn","application/x-conference","application/x-cpio","application/x-csh","application/x-debian-package","application/x-dgc-compressed","application/x-director","application/x-doom","application/x-dtbncx+xml","application/x-dtbook+xml","application/x-dtbresource+xml","application/x-dvi","application/x-envoy","application/x-eva","application/x-font-bdf","application/x-font-ghostscript","application/x-font-linux-psf","application/x-font-otf","application/x-font-pcf","application/x-font-snf","application/x-font-ttf","application/x-font-type1","application/x-font-woff","application/x-freearc","application/x-futuresplash","application/x-gca-compressed","application/x-glulx","application/x-gnumeric","application/x-gramps-xml","application/x-gtar","application/x-hdf","application/x-install-instructions","application/x-iso9660-image","application/x-java-jnlp-file","application/x-latex","application/x-lzh-compressed","application/x-mie","application/x-mobipocket-ebook","application/x-ms-application","application/x-ms-shortcut","application/x-ms-wmd","application/x-ms-wmz","application/x-ms-xbap","application/x-msaccess","application/x-msbinder","application/x-mscardfile","application/x-msclip","application/x-msdownload","application/x-msmediaview","application/x-msmetafile","application/x-msmoney","application/x-mspublisher","application/x-msschedule","application/x-msterminal","application/x-mswrite","application/x-netcdf","application/x-nzb","application/x-pkcs12","application/x-pkcs7-certificates","application/x-pkcs7-certreqresp","application/x-rar-compressed","application/x-research-info-systems","application/x-sh","application/x-shar","application/x-shockwave-flash","application/x-silverlight-app","application/x-sql","application/x-stuffit","application/x-stuffitx","application/x-subrip","application/x-sv4cpio","application/x-sv4crc","application/x-t3vm-image","application/x-tads","application/x-tar","application/x-tcl","application/x-tex","application/x-tex-tfm","application/x-texinfo","application/x-tgif","application/x-ustar","application/x-wais-source","application/x-x509-ca-cert","application/x-xfig","application/x-xliff+xml","application/x-xpinstall","application/x-xz","application/x-zmachine","application/xaml+xml","application/xcap-diff+xml","application/xenc+xml","application/xhtml+xml","application/xml","application/xml-dtd","application/xop+xml","application/xproc+xml","application/xslt+xml","application/xspf+xml","application/xv+xml","application/yang","application/yin+xml","application/zip","audio/adpcm","audio/basic","audio/midi","audio/mp4","audio/mpeg","audio/ogg","audio/s3m","audio/silk","audio/vnd.dece.audio","audio/vnd.digital-winds","audio/vnd.dra","audio/vnd.dts","audio/vnd.dts.hd","audio/vnd.lucent.voice","audio/vnd.ms-playready.media.pya","audio/vnd.nuera.ecelp4800","audio/vnd.nuera.ecelp7470","audio/vnd.nuera.ecelp9600","audio/vnd.rip","audio/webm","audio/x-aac","audio/x-aiff","audio/x-caf","audio/x-flac","audio/x-matroska","audio/x-mpegurl","audio/x-ms-wax","audio/x-ms-wma","audio/x-pn-realaudio","audio/x-pn-realaudio-plugin","audio/x-wav","audio/xm","chemical/x-cdx","chemical/x-cif","chemical/x-cmdf","chemical/x-cml","chemical/x-csml","chemical/x-xyz","image/bmp","image/cgm","image/g3fax","image/gif","image/ief","image/jpeg","image/ktx","image/png","image/prs.btif","image/sgi","image/svg+xml","image/tiff","image/vnd.adobe.photoshop","image/vnd.dece.graphic","image/vnd.dvb.subtitle","image/vnd.djvu","image/vnd.dwg","image/vnd.dxf","image/vnd.fastbidsheet","image/vnd.fpx","image/vnd.fst","image/vnd.fujixerox.edmics-mmr","image/vnd.fujixerox.edmics-rlc","image/vnd.ms-modi","image/vnd.ms-photo","image/vnd.net-fpx","image/vnd.wap.wbmp","image/vnd.xiff","image/webp","image/x-3ds","image/x-cmu-raster","image/x-cmx","image/x-freehand","image/x-icon","image/x-mrsid-image","image/x-pcx","image/x-pict","image/x-portable-anymap","image/x-portable-bitmap","image/x-portable-graymap","image/x-portable-pixmap","image/x-rgb","image/x-tga","image/x-xbitmap","image/x-xpixmap","image/x-xwindowdump","message/rfc822","model/iges","model/mesh","model/vnd.collada+xml","model/vnd.dwf","model/vnd.gdl","model/vnd.gtw","model/vnd.mts","model/vnd.vtu","model/vrml","model/x3d+binary","model/x3d+vrml","model/x3d+xml","text/cache-manifest","text/calendar","text/css","text/csv","text/html","text/n3","text/plain","text/prs.lines.tag","text/richtext","text/sgml","text/tab-separated-values","text/troff","text/turtle","text/uri-list","text/vcard","text/vnd.curl","text/vnd.curl.dcurl","text/vnd.curl.scurl","text/vnd.curl.mcurl","text/vnd.dvb.subtitle","text/vnd.fly","text/vnd.fmi.flexstor","text/vnd.graphviz","text/vnd.in3d.3dml","text/vnd.in3d.spot","text/vnd.sun.j2me.app-descriptor","text/vnd.wap.wml","text/vnd.wap.wmlscript","text/x-asm","text/x-c","text/x-fortran","text/x-java-source","text/x-opml","text/x-pascal","text/x-nfo","text/x-setext","text/x-sfv","text/x-uuencode","text/x-vcalendar","text/x-vcard","video/3gpp","video/3gpp2","video/h261","video/h263","video/h264","video/jpeg","video/jpm","video/mj2","video/mp4","video/mpeg","video/ogg","video/quicktime","video/vnd.dece.hd","video/vnd.dece.mobile","video/vnd.dece.pd","video/vnd.dece.sd","video/vnd.dece.video","video/vnd.dvb.file","video/vnd.fvt","video/vnd.mpegurl","video/vnd.ms-playready.media.pyv","video/vnd.uvvu.mp4","video/vnd.vivo","video/webm","video/x-f4v","video/x-fli","video/x-flv","video/x-m4v","video/x-matroska","video/x-mng","video/x-ms-asf","video/x-ms-vob","video/x-ms-wm","video/x-ms-wmv","video/x-ms-wmx","video/x-ms-wvx","video/x-msvideo","video/x-sgi-movie","video/x-smv","x-conference/x-cooltalk","text/vtt","application/x-chrome-extension","text/x-component","video/MP2T","text/event-stream","application/x-web-app-manifest+json","text/x-lua","application/x-lua-bytecode","text/x-markdown","define","getFileToLocalFile","share","directory","file","getFileToStream","responseFile","createFileFromLocalFile","createFile","storeFileContentMD5","_createFileFromChunkStream","FileRangeStream","ShareResult","DirectoryResult","FileResult","singleFileThresholdInBytes","listSharesSegmented","listSharesSegmentedWithPrefix","listSharesResult","shares","Shares","Share","currentShare","shareResult","doesShareExist","_doesShareExist","createShare","createShareSnapshot","createShareIfNotExists","shareSnapshotId","responseShare","getShareProperties","setShareProperties","setProperties","getShareStats","getShareMetadata","setShareMetadata","getShareAcl","setShareAcl","deleteShare","deleteShareIfExists","doesDirectoryExist","_doesDirectoryExist","createDirectory","directoryResult","createDirectoryIfNotExists","responseDirectory","getDirectoryProperties","deleteDirectory","deleteDirectoryIfExists","listFilesAndDirectoriesSegmented","listFilesAndDirectoriesSegmentedWithPrefix","listResult","files","directories","Entries","currentFile","fileResult","currentDirectory","getDirectoryMetadata","setDirectoryMetadata","getFileProperties","getFileMetadata","setFileProperties","setFileMetadata","resizeFile","doesFileExist","_doesFileExist","deleteFile","deleteFileIfExists","getFileToText","fileResponse","_getFileToStream","_getFileToRangeStream","listRanges","Ranges","Range","fileRange","clearRange","_updateFilesImpl","createRangesFromStream","requiresContentMD5","_createRanges","createFileFromText","createFileFromStream","createWriteStreamToExistingFile","createWriteStreamToNewFile","startCopyFile","targetShare","targetDirectory","targetFile","abortCopyFile","fileProperties","savedFileResult","savedFileResponse","fileServiceClient","shareXml","setSharePropertyFromHeaders","shareProperty","dirXml","setDirectoryPropertyFromHeaders","directoryProperty","entryXml","responseHeaders","contentSettings.fileContentMD5","setFilePropertyFromHeaders","fileProperty","setHeaderProperty","QueueResult","QueueMessageResult","messageEncoder","listQueuesSegmented","listQueuesSegmentedWithPrefix","listQueuesResult","queues","Queues","currentQueue","queueResult","doesQueueExist","_doesQueueExist","createQueue","createQueueIfNotExists","responseQueue","deleteQueue","deleteQueueIfExists","getQueueMetadata","setQueueMetadata","createMessage","messageText","xmlMessageDescriptor","messageTimeToLive","visibilityTimeout","queueMessageResults","QueueMessagesList","QueueMessage","queueMessageResult","getMessages","peekOnly","_getOrPeekMessages","getMessage","numOfMessages","peekMessages","peekMessage","deleteMessage","messageId","popReceipt","clearMessages","updateMessage","getQueueAcl","setQueueAcl","messageXml","queueProperty","typeConverterFunc","messageJs","dequeueCount","setmessagePropertyFromHeaders","messageProperty"],"mappings":"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IADAvqB,EAAAjE,EAAA,IACA8vB,EACArB,GAAAxqB,EAAA8rB,EACArB,GAAAzqB,EAAA+rB,EACArB,GAAA1qB,EAAAgsB,EACArB,GAAA3qB,EAAAisB,EACArB,GAAA5qB,EAAAksB,EACArB,GAAA7qB,EAAAmsB,EACArB,GAAA9qB,EAAAosB,EACArB,GAAA/qB,EAAAqsB,EACArB,GAAAhrB,EAAAssB,EACArB,GAAAjrB,EAAAusB,EACArB,GAAAlrB,EAAAwsB,EACArB,GAAAnrB,EAAAysB,EACArB,GAAAprB,EAAA0sB,EACArB,GAAArrB,EAAA2sB,EACArB,GAAAtrB,EAAA4sB,EAEApC,IADAxqB,EAAAjE,EAAA,KACA8vB,EACApB,GAAAzqB,EAAA8rB,EACApB,GAAA1qB,EAAA+rB,EACApB,GAAA3qB,EAAAgsB,EACApB,GAAA5qB,EAAAisB,EACApB,GAAA7qB,EAAAksB,EACApB,GAAA9qB,EAAAmsB,EACApB,GAAA/qB,EAAAosB,EACApB,GAAAhrB,EAAAqsB,EACApB,GAAAjrB,EAAAssB,EACApB,GAAAlrB,EAAAusB,EACApB,GAAAnrB,EAAAwsB,EACApB,GAAAprB,EAAAysB,EACApB,GAAArrB,EAAA0sB,EACApB,GAAAtrB,EAAA2sB,EACApB,GAAAvrB,EAAA4sB,EAEAnC,IADAzqB,EAAAjE,EAAA,KACA8vB,EACAnB,GAAA1qB,EAAA8rB,EACAnB,GAAA3qB,EAAA+rB,EACAnB,GAAA5qB,EAAAgsB,EACAnB,GAAA7qB,EAAAisB,EACAnB,GAAA9qB,EAAAksB,EACAnB,GAAA/qB,EAAAmsB,EACAnB,GAAAhrB,EAAAosB,EACAnB,GAAAjrB,EAAAqsB,EACAnB,GAAAlrB,EAAAssB,EACAnB,GAAAnrB,EAAAusB,EACAnB,GAAAprB,EAAAwsB,EACAnB,GAAArrB,EAAAysB,EACAnB,GAAAtrB,EAAA0sB,EACAnB,GAAAvrB,EAAA2sB,EACAnB,GAAAxrB,EAAA4sB,EAEAlC,IADA1qB,EAAAjE,EAAA,KACA8vB,EACAlB,GAAA3qB,EAAA8rB,EACAlB,GA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EAAcpjD,EAAQ,IACtBiyE,EAAajyE,EAAQ,KAErBoyE,EAAA,yBA4DA,SAAAJ,EAAA5rE,GAEA,GAAAA,EAAAF,QAAAksE,EAAAlsE,OACA,SAEA,GADAE,EAAAnD,MAAA,EAAAmvE,EAAAlsE,QACAnC,SAAA,WAAAquE,EACA,SAKA,qBACAhsE,IAAArC,SAAA,UAKA,IAHA,IAAAy+C,EAAAp8C,EAAA4tB,MAAA,MACAm1C,EAAA,EAEA3mB,EAAA2mB,GAAAj5D,MAAA,QACAi5D,IACA,QAAA3mB,EAAA2mB,GAAAplE,SAAA,SAAAmM,MAAA,iBAEAsyC,EAAA2mB,GAAAplE,SAAA,SAAAmM,MAAA,gDChGA,IAAAmiE,EAAyBryE,EAAQ,IAAW6kC,SAAAvC,YAmF5CgwC,EAAA,EAEAC,EAAA,WACA7jE,KAAAkuB,EAAA,CACA,IAAA41C,YAAA,CACA,2CACA,4CACA,0CACA,4CACA,2CACA,2CACA,2CACA,4CACA,4CACA,4CACA,0CACA,4CACA,2CACA,2CACA,2CACA,4CACA,4CACA,0CACA,2CACA,2CACA,4CACA,2CACA,2CACA,2CACA,4CACA,0CACA,2CACA,0CACA,0CACA,2CACA,0CACA,4CACA,2CACA,4CACA,2CACA,4CACA,2CACA,2CACA,2CACA,2CACA,4CACA,0CACA,4CACA,4CACA,0CACA,4CACA,4CACA,4CACA,4CACA,2CACA,2CACA,4CACA,0CACA,4CACA,4CACA,uCACA,2CACA,yCACA,2CACA,2CACA,2CACA,0CACA,4CACA,6CACA,IAAAA,YAAA,CACA,4CACA,0CACA,4CACA,2CACA,4CACA,4CACA,0CACA,2CACA,4CACA,4CACA,0CACA,2CACA,2CACA,0CACA,2CACA,0CACA,4CACA,0CACA,4CACA,2CACA,4CACA,4CACA,0CACA,yCACA,2CACA,0CACA,2CACA,4CACA,2CACA,2CACA,2CACA,yCACA,4CACA,0CACA,4CACA,2CACA,0CACA,yCACA,4CACA,4CACA,2CACA,2CACA,4CACA,0CACA,2CACA,0CACA,4CACA,2CACA,2CACA,4CACA,4CACA,4CACA,4CACA,4CACA,yCACA,yCACA,2CACA,4CACA,2CACA,4CACA,2CACA,2CACA,4CACA,6CACA,IAAAA,YAAA,CACA,4CACA,4CACA,2CACA,0CACA,4CACA,yCACA,4CACA,0CACA,2CACA,4CACA,4CACA,0CACA,0CACA,2CACA,4CACA,2CACA,4CACA,4CACA,wCACA,4CACA,2CACA,2CACA,0CACA,yCACA,0CACA,2CACA,4CACA,4CACA,0CACA,4CACA,2CACA,4CACA,4CACA,4CACA,2CACA,2CACA,2CACA,0CACA,2CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,2CACA,2CACA,4CACA,0CACA,yCACA,4CACA,2CACA,4CACA,wCACA,0CACA,4CACA,2CACA,2CACA,2CACA,2CACA,2CACA,8CACA,IAAAA,YAAA,CACA,2CACA,4CACA,4CACA,2CACA,4CACA,4CACA,2CACA,4CACA,4CACA,4CACA,2CACA,4CACA,2CACA,yCACA,0CACA,2CACA,4CACA,2CACA,4CACA,uCACA,4CACA,yCACA,0CACA,2CACA,0CACA,4CACA,4CACA,2CACA,2CACA,2CACA,2CACA,4CACA,4CACA,4CACA,yCACA,0CACA,wCACA,2CACA,2CACA,4CACA,2CACA,0CACA,2CACA,0CACA,2CACA,2CACA,0CACA,4CACA,2CACA,2CACA,2CACA,2CACA,4CACA,4CACA,4CACA,2CACA,2CACA,4CACA,yCACA,2CACA,4CACA,uCACA,4CACA,8CAEA9jE,KAAAqoD,EAAA,IAAAyb,YAAA,CACA,wCACA,0CACA,0CACA,4CACA,yBAGA,SAAAC,EAAA71C,EAAA3F,EAAA72B,GACA,OAAAw8B,EAAA,GAAA3F,EAAA72B,EAAA,IACAw8B,EAAA,GAAA3F,EAAA72B,EAAA,IACAw8B,EAAA,GAAA3F,EAAA72B,EAAA,KACAw8B,EAAA,GAAA3F,EAAA72B,IAiCA,SAAAsyE,EAAAtrE,EAAAurE,GACA,IAAAvyE,EAAAwyE,EAAA,EACA,IAAAxyE,EAAA,EAAaA,EAAA,EAAOA,IAAAkyE,IACp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AC,KAAA,IACAC,OAAA,IACAC,MAAA,IACAC,OAAA,IACAC,KAAA,IACAC,OAAA,IACAC,OAAA,IACAC,MAAA,IACAC,OAAA,IACAC,OAAA,IACAC,OAAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA,IACAC,OAAA,IACAC,MAAA,IACAC,OAAA,IACAC,KAAA,IACAC,OAAA,IACAC,KAAA,IACApwI,KAAA,IACAqwI,IAAA,IACAC,KAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,OAAA,IACAC,IAAA,IACAC,OAAA,IACAC,KAAA,IACAC,IAAA,IACAC,KAAA,IACAC,MAAA,IACA74F,IAAA,IACA84F,IAAA,IACAC,KAAA,IACAC,IAAA,IACAC,OAAA,IACAC,KAAA,IACAC,KAAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA,IACAC,KAAA,IACAC,OAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,OAAA,IACAC,OAAA,IACAC,OAAA,IACAC,OAAA,IACA3nG,MAAA,IACA8I,OAAA,IACA8+F,MAAA,IACAC,MAAA,IACAC,OAAA,IACAC,OAAA,IACAC,KAAA,IACAC,KAAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,MAAA,IACAC,QAAA,IACAC,KAAA,IACAC,IAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,OAAA,IACAC,GAAA,IACAC,GAAA,IACAC,GAAA,IACAC,QAAA,IACAC,GAAA,IACAC,IAAA,IACAC,MAAA,IACAC,IAAA,IACAC,QAAA,IACAC,IAAA,IACAC,IAAA,IACAC,IAAA,IACAC,MAAA,IACArxD,MAAA,IACA31B,KAAA,IACAinF,MAAA,IACAC,MAAA,IACAC,QAAA,IACAC,KAAA,IACAC,IAAA,IACAC,MAAA,IACAC,KAAA,IACAC,MAAA,IACAC,OAAA,IACAvhG,GAAA,IACAwhG,GAAA,IACAzoH,GAAA,IACA0oH,QAAA,IACAC,GAAA,IACAC,IAAA,IACAC,OAAA,IACAlmH,MAAA,IACAmmH,IAAA,IACAC,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","file":"node_modules/azure-storage.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 775);\n","module.exports = require(\"util\");","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = assertString;\nfunction assertString(input) {\n  var isString = typeof input === 'string' || input instanceof String;\n\n  if (!isString) {\n    throw new TypeError('This library (validator.js) validates strings only');\n  }\n}\nmodule.exports = exports['default'];","// Copyright (c) 2012, Mark Cavage. All rights reserved.\n// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert');\nvar Stream = require('stream').Stream;\nvar util = require('util');\n\n\n///--- Globals\n\n/* JSSTYLED */\nvar UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;\n\n\n///--- Internal\n\nfunction _capitalize(str) {\n    return (str.charAt(0).toUpperCase() + str.slice(1));\n}\n\nfunction _toss(name, expected, oper, arg, actual) {\n    throw new assert.AssertionError({\n        message: util.format('%s (%s) is required', name, expected),\n        actual: (actual === undefined) ? typeof (arg) : actual(arg),\n        expected: expected,\n        operator: oper || '===',\n        stackStartFunction: _toss.caller\n    });\n}\n\nfunction _getClass(arg) {\n    return (Object.prototype.toString.call(arg).slice(8, -1));\n}\n\nfunction noop() {\n    // Why even bother with asserts?\n}\n\n\n///--- Exports\n\nvar types = {\n    bool: {\n        check: function (arg) { return typeof (arg) === 'boolean'; }\n    },\n    func: {\n        check: function (arg) { return typeof (arg) === 'function'; }\n    },\n    string: {\n        check: function (arg) { return typeof (arg) === 'string'; }\n    },\n    object: {\n        check: function (arg) {\n            return typeof (arg) === 'object' && arg !== null;\n        }\n    },\n    number: {\n        check: function (arg) {\n            return typeof (arg) === 'number' && !isNaN(arg);\n        }\n    },\n    finite: {\n        check: function (arg) {\n            return typeof (arg) === 'number' && !isNaN(arg) && isFinite(arg);\n        }\n    },\n    buffer: {\n        check: function (arg) { return Buffer.isBuffer(arg); },\n        operator: 'Buffer.isBuffer'\n    },\n    array: {\n        check: function (arg) { return Array.isArray(arg); },\n        operator: 'Array.isArray'\n    },\n    stream: {\n        check: function (arg) { return arg instanceof Stream; },\n        operator: 'instanceof',\n        actual: _getClass\n    },\n    date: {\n        check: function (arg) { return arg instanceof Date; },\n        operator: 'instanceof',\n        actual: _getClass\n    },\n    regexp: {\n        check: function (arg) { return arg instanceof RegExp; },\n        operator: 'instanceof',\n        actual: _getClass\n    },\n    uuid: {\n        check: function (arg) {\n            return typeof (arg) === 'string' && UUID_REGEXP.test(arg);\n        },\n        operator: 'isUUID'\n    }\n};\n\nfunction _setExports(ndebug) {\n    var keys = Object.keys(types);\n    var out;\n\n    /* re-export standard assert */\n    if (process.env.NODE_NDEBUG) {\n        out = noop;\n    } else {\n        out = function (arg, msg) {\n            if (!arg) {\n                _toss(msg, 'true', arg);\n            }\n        };\n    }\n\n    /* standard checks */\n    keys.forEach(function (k) {\n        if (ndebug) {\n            out[k] = noop;\n            return;\n        }\n        var type = types[k];\n        out[k] = function (arg, msg) {\n            if (!type.check(arg)) {\n                _toss(msg, k, type.operator, arg, type.actual);\n            }\n        };\n    });\n\n    /* optional checks */\n    keys.forEach(function (k) {\n        var name = 'optional' + _capitalize(k);\n        if (ndebug) {\n            out[name] = noop;\n            return;\n        }\n        var type = types[k];\n        out[name] = function (arg, msg) {\n            if (arg === undefined || arg === null) {\n                return;\n            }\n            if (!type.check(arg)) {\n                _toss(msg, k, type.operator, arg, type.actual);\n            }\n        };\n    });\n\n    /* arrayOf checks */\n    keys.forEach(function (k) {\n        var name = 'arrayOf' + _capitalize(k);\n        if (ndebug) {\n            out[name] = noop;\n            return;\n        }\n        var type = types[k];\n        var expected = '[' + k + ']';\n        out[name] = function (arg, msg) {\n            if (!Array.isArray(arg)) {\n                _toss(msg, expected, type.operator, arg, type.actual);\n            }\n            var i;\n            for (i = 0; i < arg.length; i++) {\n                if (!type.check(arg[i])) {\n                    _toss(msg, expected, type.operator, arg, type.actual);\n                }\n            }\n        };\n    });\n\n    /* optionalArrayOf checks */\n    keys.forEach(function (k) {\n        var name = 'optionalArrayOf' + _capitalize(k);\n        if (ndebug) {\n            out[name] = noop;\n            return;\n        }\n        var type = types[k];\n        var expected = '[' + k + ']';\n        out[name] = function (arg, msg) {\n            if (arg === undefined || arg === null) {\n                return;\n            }\n            if (!Array.isArray(arg)) {\n                _toss(msg, expected, type.operator, arg, type.actual);\n            }\n            var i;\n            for (i = 0; i < arg.length; i++) {\n                if (!type.check(arg[i])) {\n                    _toss(msg, expected, type.operator, arg, type.actual);\n                }\n            }\n        };\n    });\n\n    /* re-export built-in assertions */\n    Object.keys(assert).forEach(function (k) {\n        if (k === 'AssertionError') {\n            out[k] = assert[k];\n            return;\n        }\n        if (ndebug) {\n            out[k] = noop;\n            return;\n        }\n        out[k] = assert[k];\n    });\n\n    /* export ourselves (for unit tests _only_) */\n    out._setExports = _setExports;\n\n    return out;\n}\n\nmodule.exports = _setExports(process.env.NODE_NDEBUG);\n","module.exports = require(\"crypto\");","module.exports = require(\"stream\");","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tbufferSplit: bufferSplit,\n\taddRSAMissing: addRSAMissing,\n\tcalculateDSAPublic: calculateDSAPublic,\n\tcalculateED25519Public: calculateED25519Public,\n\tcalculateX25519Public: calculateX25519Public,\n\tmpNormalize: mpNormalize,\n\tmpDenormalize: mpDenormalize,\n\tecNormalize: ecNormalize,\n\tcountZeros: countZeros,\n\tassertCompatible: assertCompatible,\n\tisCompatible: isCompatible,\n\topensslKeyDeriv: opensslKeyDeriv,\n\topensshCipherInfo: opensshCipherInfo,\n\tpublicFromPrivateECDSA: publicFromPrivateECDSA,\n\tzeroPadToLength: zeroPadToLength,\n\twriteBitString: writeBitString,\n\treadBitString: readBitString\n};\n\nvar assert = require('assert-plus');\nvar PrivateKey = require('./private-key');\nvar Key = require('./key');\nvar crypto = require('crypto');\nvar algs = require('./algs');\nvar asn1 = require('asn1');\n\nvar ec, jsbn;\nvar nacl;\n\nvar MAX_CLASS_DEPTH = 3;\n\nfunction isCompatible(obj, klass, needVer) {\n\tif (obj === null || typeof (obj) !== 'object')\n\t\treturn (false);\n\tif (needVer === undefined)\n\t\tneedVer = klass.prototype._sshpkApiVersion;\n\tif (obj instanceof klass &&\n\t    klass.prototype._sshpkApiVersion[0] == needVer[0])\n\t\treturn (true);\n\tvar proto = Object.getPrototypeOf(obj);\n\tvar depth = 0;\n\twhile (proto.constructor.name !== klass.name) {\n\t\tproto = Object.getPrototypeOf(proto);\n\t\tif (!proto || ++depth > MAX_CLASS_DEPTH)\n\t\t\treturn (false);\n\t}\n\tif (proto.constructor.name !== klass.name)\n\t\treturn (false);\n\tvar ver = proto._sshpkApiVersion;\n\tif (ver === undefined)\n\t\tver = klass._oldVersionDetect(obj);\n\tif (ver[0] != needVer[0] || ver[1] < needVer[1])\n\t\treturn (false);\n\treturn (true);\n}\n\nfunction assertCompatible(obj, klass, needVer, name) {\n\tif (name === undefined)\n\t\tname = 'object';\n\tassert.ok(obj, name + ' must not be null');\n\tassert.object(obj, name + ' must be an object');\n\tif (needVer === undefined)\n\t\tneedVer = klass.prototype._sshpkApiVersion;\n\tif (obj instanceof klass &&\n\t    klass.prototype._sshpkApiVersion[0] == needVer[0])\n\t\treturn;\n\tvar proto = Object.getPrototypeOf(obj);\n\tvar depth = 0;\n\twhile (proto.constructor.name !== klass.name) {\n\t\tproto = Object.getPrototypeOf(proto);\n\t\tassert.ok(proto && ++depth <= MAX_CLASS_DEPTH,\n\t\t    name + ' must be a ' + klass.name + ' instance');\n\t}\n\tassert.strictEqual(proto.constructor.name, klass.name,\n\t    name + ' must be a ' + klass.name + ' instance');\n\tvar ver = proto._sshpkApiVersion;\n\tif (ver === undefined)\n\t\tver = klass._oldVersionDetect(obj);\n\tassert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1],\n\t    name + ' must be compatible with ' + klass.name + ' klass ' +\n\t    'version ' + needVer[0] + '.' + needVer[1]);\n}\n\nvar CIPHER_LEN = {\n\t'des-ede3-cbc': { key: 7, iv: 8 },\n\t'aes-128-cbc': { key: 16, iv: 16 }\n};\nvar PKCS5_SALT_LEN = 8;\n\nfunction opensslKeyDeriv(cipher, salt, passphrase, count) {\n\tassert.buffer(salt, 'salt');\n\tassert.buffer(passphrase, 'passphrase');\n\tassert.number(count, 'iteration count');\n\n\tvar clen = CIPHER_LEN[cipher];\n\tassert.object(clen, 'supported cipher');\n\n\tsalt = salt.slice(0, PKCS5_SALT_LEN);\n\n\tvar D, D_prev, bufs;\n\tvar material = new Buffer(0);\n\twhile (material.length < clen.key + clen.iv) {\n\t\tbufs = [];\n\t\tif (D_prev)\n\t\t\tbufs.push(D_prev);\n\t\tbufs.push(passphrase);\n\t\tbufs.push(salt);\n\t\tD = Buffer.concat(bufs);\n\t\tfor (var j = 0; j < count; ++j)\n\t\t\tD = crypto.createHash('md5').update(D).digest();\n\t\tmaterial = Buffer.concat([material, D]);\n\t\tD_prev = D;\n\t}\n\n\treturn ({\n\t    key: material.slice(0, clen.key),\n\t    iv: material.slice(clen.key, clen.key + clen.iv)\n\t});\n}\n\n/* Count leading zero bits on a buffer */\nfunction countZeros(buf) {\n\tvar o = 0, obit = 8;\n\twhile (o < buf.length) {\n\t\tvar mask = (1 << obit);\n\t\tif ((buf[o] & mask) === mask)\n\t\t\tbreak;\n\t\tobit--;\n\t\tif (obit < 0) {\n\t\t\to++;\n\t\t\tobit = 8;\n\t\t}\n\t}\n\treturn (o*8 + (8 - obit) - 1);\n}\n\nfunction bufferSplit(buf, chr) {\n\tassert.buffer(buf);\n\tassert.string(chr);\n\n\tvar parts = [];\n\tvar lastPart = 0;\n\tvar matches = 0;\n\tfor (var i = 0; i < buf.length; ++i) {\n\t\tif (buf[i] === chr.charCodeAt(matches))\n\t\t\t++matches;\n\t\telse if (buf[i] === chr.charCodeAt(0))\n\t\t\tmatches = 1;\n\t\telse\n\t\t\tmatches = 0;\n\n\t\tif (matches >= chr.length) {\n\t\t\tvar newPart = i + 1;\n\t\t\tparts.push(buf.slice(lastPart, newPart - matches));\n\t\t\tlastPart = newPart;\n\t\t\tmatches = 0;\n\t\t}\n\t}\n\tif (lastPart <= buf.length)\n\t\tparts.push(buf.slice(lastPart, buf.length));\n\n\treturn (parts);\n}\n\nfunction ecNormalize(buf, addZero) {\n\tassert.buffer(buf);\n\tif (buf[0] === 0x00 && buf[1] === 0x04) {\n\t\tif (addZero)\n\t\t\treturn (buf);\n\t\treturn (buf.slice(1));\n\t} else if (buf[0] === 0x04) {\n\t\tif (!addZero)\n\t\t\treturn (buf);\n\t} else {\n\t\twhile (buf[0] === 0x00)\n\t\t\tbuf = buf.slice(1);\n\t\tif (buf[0] === 0x02 || buf[0] === 0x03)\n\t\t\tthrow (new Error('Compressed elliptic curve points ' +\n\t\t\t    'are not supported'));\n\t\tif (buf[0] !== 0x04)\n\t\t\tthrow (new Error('Not a valid elliptic curve point'));\n\t\tif (!addZero)\n\t\t\treturn (buf);\n\t}\n\tvar b = new Buffer(buf.length + 1);\n\tb[0] = 0x0;\n\tbuf.copy(b, 1);\n\treturn (b);\n}\n\nfunction readBitString(der, tag) {\n\tif (tag === undefined)\n\t\ttag = asn1.Ber.BitString;\n\tvar buf = der.readString(tag, true);\n\tassert.strictEqual(buf[0], 0x00, 'bit strings with unused bits are ' +\n\t    'not supported (0x' + buf[0].toString(16) + ')');\n\treturn (buf.slice(1));\n}\n\nfunction writeBitString(der, buf, tag) {\n\tif (tag === undefined)\n\t\ttag = asn1.Ber.BitString;\n\tvar b = new Buffer(buf.length + 1);\n\tb[0] = 0x00;\n\tbuf.copy(b, 1);\n\tder.writeBuffer(b, tag);\n}\n\nfunction mpNormalize(buf) {\n\tassert.buffer(buf);\n\twhile (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)\n\t\tbuf = buf.slice(1);\n\tif ((buf[0] & 0x80) === 0x80) {\n\t\tvar b = new Buffer(buf.length + 1);\n\t\tb[0] = 0x00;\n\t\tbuf.copy(b, 1);\n\t\tbuf = b;\n\t}\n\treturn (buf);\n}\n\nfunction mpDenormalize(buf) {\n\tassert.buffer(buf);\n\twhile (buf.length > 1 && buf[0] === 0x00)\n\t\tbuf = buf.slice(1);\n\treturn (buf);\n}\n\nfunction zeroPadToLength(buf, len) {\n\tassert.buffer(buf);\n\tassert.number(len);\n\twhile (buf.length > len) {\n\t\tassert.equal(buf[0], 0x00);\n\t\tbuf = buf.slice(1);\n\t}\n\twhile (buf.length < len) {\n\t\tvar b = new Buffer(buf.length + 1);\n\t\tb[0] = 0x00;\n\t\tbuf.copy(b, 1);\n\t\tbuf = b;\n\t}\n\treturn (buf);\n}\n\nfunction bigintToMpBuf(bigint) {\n\tvar buf = new Buffer(bigint.toByteArray());\n\tbuf = mpNormalize(buf);\n\treturn (buf);\n}\n\nfunction calculateDSAPublic(g, p, x) {\n\tassert.buffer(g);\n\tassert.buffer(p);\n\tassert.buffer(x);\n\ttry {\n\t\tvar bigInt = require('jsbn').BigInteger;\n\t} catch (e) {\n\t\tthrow (new Error('To load a PKCS#8 format DSA private key, ' +\n\t\t    'the node jsbn library is required.'));\n\t}\n\tg = new bigInt(g);\n\tp = new bigInt(p);\n\tx = new bigInt(x);\n\tvar y = g.modPow(x, p);\n\tvar ybuf = bigintToMpBuf(y);\n\treturn (ybuf);\n}\n\nfunction calculateED25519Public(k) {\n\tassert.buffer(k);\n\n\tif (nacl === undefined)\n\t\tnacl = require('tweetnacl');\n\n\tvar kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));\n\treturn (new Buffer(kp.publicKey));\n}\n\nfunction calculateX25519Public(k) {\n\tassert.buffer(k);\n\n\tif (nacl === undefined)\n\t\tnacl = require('tweetnacl');\n\n\tvar kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));\n\treturn (new Buffer(kp.publicKey));\n}\n\nfunction addRSAMissing(key) {\n\tassert.object(key);\n\tassertCompatible(key, PrivateKey, [1, 1]);\n\ttry {\n\t\tvar bigInt = require('jsbn').BigInteger;\n\t} catch (e) {\n\t\tthrow (new Error('To write a PEM private key from ' +\n\t\t    'this source, the node jsbn lib is required.'));\n\t}\n\n\tvar d = new bigInt(key.part.d.data);\n\tvar buf;\n\n\tif (!key.part.dmodp) {\n\t\tvar p = new bigInt(key.part.p.data);\n\t\tvar dmodp = d.mod(p.subtract(1));\n\n\t\tbuf = bigintToMpBuf(dmodp);\n\t\tkey.part.dmodp = {name: 'dmodp', data: buf};\n\t\tkey.parts.push(key.part.dmodp);\n\t}\n\tif (!key.part.dmodq) {\n\t\tvar q = new bigInt(key.part.q.data);\n\t\tvar dmodq = d.mod(q.subtract(1));\n\n\t\tbuf = bigintToMpBuf(dmodq);\n\t\tkey.part.dmodq = {name: 'dmodq', data: buf};\n\t\tkey.parts.push(key.part.dmodq);\n\t}\n}\n\nfunction publicFromPrivateECDSA(curveName, priv) {\n\tassert.string(curveName, 'curveName');\n\tassert.buffer(priv);\n\tif (ec === undefined)\n\t\tec = require('ecc-jsbn/lib/ec');\n\tif (jsbn === undefined)\n\t\tjsbn = require('jsbn').BigInteger;\n\tvar params = algs.curves[curveName];\n\tvar p = new jsbn(params.p);\n\tvar a = new jsbn(params.a);\n\tvar b = new jsbn(params.b);\n\tvar curve = new ec.ECCurveFp(p, a, b);\n\tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n\tvar d = new jsbn(mpNormalize(priv));\n\tvar pub = G.multiply(d);\n\tpub = new Buffer(curve.encodePointHex(pub), 'hex');\n\n\tvar parts = [];\n\tparts.push({name: 'curve', data: new Buffer(curveName)});\n\tparts.push({name: 'Q', data: pub});\n\n\tvar key = new Key({type: 'ecdsa', curve: curve, parts: parts});\n\treturn (key);\n}\n\nfunction opensshCipherInfo(cipher) {\n\tvar inf = {};\n\tswitch (cipher) {\n\tcase '3des-cbc':\n\t\tinf.keySize = 24;\n\t\tinf.blockSize = 8;\n\t\tinf.opensslName = 'des-ede3-cbc';\n\t\tbreak;\n\tcase 'blowfish-cbc':\n\t\tinf.keySize = 16;\n\t\tinf.blockSize = 8;\n\t\tinf.opensslName = 'bf-cbc';\n\t\tbreak;\n\tcase 'aes128-cbc':\n\tcase 'aes128-ctr':\n\tcase 'aes128-gcm@openssh.com':\n\t\tinf.keySize = 16;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-128-' + cipher.slice(7, 10);\n\t\tbreak;\n\tcase 'aes192-cbc':\n\tcase 'aes192-ctr':\n\tcase 'aes192-gcm@openssh.com':\n\t\tinf.keySize = 24;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-192-' + cipher.slice(7, 10);\n\t\tbreak;\n\tcase 'aes256-cbc':\n\tcase 'aes256-ctr':\n\tcase 'aes256-gcm@openssh.com':\n\t\tinf.keySize = 32;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-256-' + cipher.slice(7, 10);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error(\n\t\t    'Unsupported openssl cipher \"' + cipher + '\"'));\n\t}\n\treturn (inf);\n}\n","module.exports = require(\"fs\");","// Copyright 2017 Joyent, Inc.\n\nmodule.exports = Key;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar DiffieHellman = require('./dhe').DiffieHellman;\nvar errs = require('./errors');\nvar utils = require('./utils');\nvar PrivateKey = require('./private-key');\nvar edCompat;\n\ntry {\n\tedCompat = require('./ed-compat');\n} catch (e) {\n\t/* Just continue through, and bail out if we try to use it. */\n}\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\n\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh'] = require('./formats/ssh');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['dnssec'] = require('./formats/dnssec');\n\nfunction Key(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.parts, 'options.parts');\n\tassert.string(opts.type, 'options.type');\n\tassert.optionalString(opts.comment, 'options.comment');\n\n\tvar algInfo = algs.info[opts.type];\n\tif (typeof (algInfo) !== 'object')\n\t\tthrow (new InvalidAlgorithmError(opts.type));\n\n\tvar partLookup = {};\n\tfor (var i = 0; i < opts.parts.length; ++i) {\n\t\tvar part = opts.parts[i];\n\t\tpartLookup[part.name] = part;\n\t}\n\n\tthis.type = opts.type;\n\tthis.parts = opts.parts;\n\tthis.part = partLookup;\n\tthis.comment = undefined;\n\tthis.source = opts.source;\n\n\t/* for speeding up hashing/fingerprint operations */\n\tthis._rfc4253Cache = opts._rfc4253Cache;\n\tthis._hashCache = {};\n\n\tvar sz;\n\tthis.curve = undefined;\n\tif (this.type === 'ecdsa') {\n\t\tvar curve = this.part.curve.data.toString();\n\t\tthis.curve = curve;\n\t\tsz = algs.curves[curve].size;\n\t} else if (this.type === 'ed25519' || this.type === 'curve25519') {\n\t\tsz = 256;\n\t\tthis.curve = 'curve25519';\n\t} else {\n\t\tvar szPart = this.part[algInfo.sizePart];\n\t\tsz = szPart.data.length;\n\t\tsz = sz * 8 - utils.countZeros(szPart.data);\n\t}\n\tthis.size = sz;\n}\n\nKey.formats = formats;\n\nKey.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'ssh';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\tif (format === 'rfc4253') {\n\t\tif (this._rfc4253Cache === undefined)\n\t\t\tthis._rfc4253Cache = formats['rfc4253'].write(this);\n\t\treturn (this._rfc4253Cache);\n\t}\n\n\treturn (formats[format].write(this, options));\n};\n\nKey.prototype.toString = function (format, options) {\n\treturn (this.toBuffer(format, options).toString());\n};\n\nKey.prototype.hash = function (algo) {\n\tassert.string(algo, 'algorithm');\n\talgo = algo.toLowerCase();\n\tif (algs.hashAlgs[algo] === undefined)\n\t\tthrow (new InvalidAlgorithmError(algo));\n\n\tif (this._hashCache[algo])\n\t\treturn (this._hashCache[algo]);\n\tvar hash = crypto.createHash(algo).\n\t    update(this.toBuffer('rfc4253')).digest();\n\tthis._hashCache[algo] = hash;\n\treturn (hash);\n};\n\nKey.prototype.fingerprint = function (algo) {\n\tif (algo === undefined)\n\t\talgo = 'sha256';\n\tassert.string(algo, 'algorithm');\n\tvar opts = {\n\t\ttype: 'key',\n\t\thash: this.hash(algo),\n\t\talgorithm: algo\n\t};\n\treturn (new Fingerprint(opts));\n};\n\nKey.prototype.defaultHashAlgorithm = function () {\n\tvar hashAlgo = 'sha1';\n\tif (this.type === 'rsa')\n\t\thashAlgo = 'sha256';\n\tif (this.type === 'dsa' && this.size > 1024)\n\t\thashAlgo = 'sha256';\n\tif (this.type === 'ed25519')\n\t\thashAlgo = 'sha512';\n\tif (this.type === 'ecdsa') {\n\t\tif (this.size <= 256)\n\t\t\thashAlgo = 'sha256';\n\t\telse if (this.size <= 384)\n\t\t\thashAlgo = 'sha384';\n\t\telse\n\t\t\thashAlgo = 'sha512';\n\t}\n\treturn (hashAlgo);\n};\n\nKey.prototype.createVerify = function (hashAlgo) {\n\tif (hashAlgo === undefined)\n\t\thashAlgo = this.defaultHashAlgorithm();\n\tassert.string(hashAlgo, 'hash algorithm');\n\n\t/* ED25519 is not supported by OpenSSL, use a javascript impl. */\n\tif (this.type === 'ed25519' && edCompat !== undefined)\n\t\treturn (new edCompat.Verifier(this, hashAlgo));\n\tif (this.type === 'curve25519')\n\t\tthrow (new Error('Curve25519 keys are not suitable for ' +\n\t\t    'signing or verification'));\n\n\tvar v, nm, err;\n\ttry {\n\t\tnm = hashAlgo.toUpperCase();\n\t\tv = crypto.createVerify(nm);\n\t} catch (e) {\n\t\terr = e;\n\t}\n\tif (v === undefined || (err instanceof Error &&\n\t    err.message.match(/Unknown message digest/))) {\n\t\tnm = 'RSA-';\n\t\tnm += hashAlgo.toUpperCase();\n\t\tv = crypto.createVerify(nm);\n\t}\n\tassert.ok(v, 'failed to create verifier');\n\tvar oldVerify = v.verify.bind(v);\n\tvar key = this.toBuffer('pkcs8');\n\tvar curve = this.curve;\n\tvar self = this;\n\tv.verify = function (signature, fmt) {\n\t\tif (Signature.isSignature(signature, [2, 0])) {\n\t\t\tif (signature.type !== self.type)\n\t\t\t\treturn (false);\n\t\t\tif (signature.hashAlgorithm &&\n\t\t\t    signature.hashAlgorithm !== hashAlgo)\n\t\t\t\treturn (false);\n\t\t\tif (signature.curve && self.type === 'ecdsa' &&\n\t\t\t    signature.curve !== curve)\n\t\t\t\treturn (false);\n\t\t\treturn (oldVerify(key, signature.toBuffer('asn1')));\n\n\t\t} else if (typeof (signature) === 'string' ||\n\t\t    Buffer.isBuffer(signature)) {\n\t\t\treturn (oldVerify(key, signature, fmt));\n\n\t\t/*\n\t\t * Avoid doing this on valid arguments, walking the prototype\n\t\t * chain can be quite slow.\n\t\t */\n\t\t} else if (Signature.isSignature(signature, [1, 0])) {\n\t\t\tthrow (new Error('signature was created by too old ' +\n\t\t\t    'a version of sshpk and cannot be verified'));\n\n\t\t} else {\n\t\t\tthrow (new TypeError('signature must be a string, ' +\n\t\t\t    'Buffer, or Signature object'));\n\t\t}\n\t};\n\treturn (v);\n};\n\nKey.prototype.createDiffieHellman = function () {\n\tif (this.type === 'rsa')\n\t\tthrow (new Error('RSA keys do not support Diffie-Hellman'));\n\n\treturn (new DiffieHellman(this));\n};\nKey.prototype.createDH = Key.prototype.createDiffieHellman;\n\nKey.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\tif (k instanceof PrivateKey)\n\t\t\tk = k.toPublic();\n\t\tif (!k.comment)\n\t\t\tk.comment = options.filename;\n\t\treturn (k);\n\t} catch (e) {\n\t\tif (e.name === 'KeyEncryptedError')\n\t\t\tthrow (e);\n\t\tthrow (new KeyParseError(options.filename, format, e));\n\t}\n};\n\nKey.isKey = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Key, ver));\n};\n\n/*\n * API versions for Key:\n * [1,0] -- initial ver, may take Signature for createVerify or may not\n * [1,1] -- added pkcs1, pkcs8 formats\n * [1,2] -- added auto, ssh-private, openssh formats\n * [1,3] -- added defaultHashAlgorithm\n * [1,4] -- added ed support, createDH\n * [1,5] -- first explicitly tagged version\n * [1,6] -- changed ed25519 part names\n */\nKey.prototype._sshpkApiVersion = [1, 6];\n\nKey._oldVersionDetect = function (obj) {\n\tassert.func(obj.toBuffer);\n\tassert.func(obj.fingerprint);\n\tif (obj.createDH)\n\t\treturn ([1, 4]);\n\tif (obj.defaultHashAlgorithm)\n\t\treturn ([1, 3]);\n\tif (obj.formats['auto'])\n\t\treturn ([1, 2]);\n\tif (obj.formats['pkcs1'])\n\t\treturn ([1, 1]);\n\treturn ([1, 0]);\n};\n","// Copyright 2015 Joyent, Inc.\n\nvar algInfo = {\n\t'dsa': {\n\t\tparts: ['p', 'q', 'g', 'y'],\n\t\tsizePart: 'p'\n\t},\n\t'rsa': {\n\t\tparts: ['e', 'n'],\n\t\tsizePart: 'n'\n\t},\n\t'ecdsa': {\n\t\tparts: ['curve', 'Q'],\n\t\tsizePart: 'Q'\n\t},\n\t'ed25519': {\n\t\tparts: ['A'],\n\t\tsizePart: 'A'\n\t}\n};\nalgInfo['curve25519'] = algInfo['ed25519'];\n\nvar algPrivInfo = {\n\t'dsa': {\n\t\tparts: ['p', 'q', 'g', 'y', 'x']\n\t},\n\t'rsa': {\n\t\tparts: ['n', 'e', 'd', 'iqmp', 'p', 'q']\n\t},\n\t'ecdsa': {\n\t\tparts: ['curve', 'Q', 'd']\n\t},\n\t'ed25519': {\n\t\tparts: ['A', 'k']\n\t}\n};\nalgPrivInfo['curve25519'] = algPrivInfo['ed25519'];\n\nvar hashAlgs = {\n\t'md5': true,\n\t'sha1': true,\n\t'sha256': true,\n\t'sha384': true,\n\t'sha512': true\n};\n\n/*\n * Taken from\n * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf\n */\nvar curves = {\n\t'nistp256': {\n\t\tsize: 256,\n\t\tpkcs8oid: '1.2.840.10045.3.1.7',\n\t\tp: new Buffer(('00' +\n\t\t    'ffffffff 00000001 00000000 00000000' +\n\t\t    '00000000 ffffffff ffffffff ffffffff').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ta: new Buffer(('00' +\n\t\t    'FFFFFFFF 00000001 00000000 00000000' +\n\t\t    '00000000 FFFFFFFF FFFFFFFF FFFFFFFC').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tb: new Buffer((\n\t\t    '5ac635d8 aa3a93e7 b3ebbd55 769886bc' +\n\t\t    '651d06b0 cc53b0f6 3bce3c3e 27d2604b').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ts: new Buffer(('00' +\n\t\t    'c49d3608 86e70493 6a6678e1 139d26b7' +\n\t\t    '819f7e90').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tn: new Buffer(('00' +\n\t\t    'ffffffff 00000000 ffffffff ffffffff' +\n\t\t    'bce6faad a7179e84 f3b9cac2 fc632551').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tG: new Buffer(('04' +\n\t\t    '6b17d1f2 e12c4247 f8bce6e5 63a440f2' +\n\t\t    '77037d81 2deb33a0 f4a13945 d898c296' +\n\t\t    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16' +\n\t\t    '2bce3357 6b315ece cbb64068 37bf51f5').\n\t\t    replace(/ /g, ''), 'hex')\n\t},\n\t'nistp384': {\n\t\tsize: 384,\n\t\tpkcs8oid: '1.3.132.0.34',\n\t\tp: new Buffer(('00' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff fffffffe' +\n\t\t    'ffffffff 00000000 00000000 ffffffff').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ta: new Buffer(('00' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE' +\n\t\t    'FFFFFFFF 00000000 00000000 FFFFFFFC').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tb: new Buffer((\n\t\t    'b3312fa7 e23ee7e4 988e056b e3f82d19' +\n\t\t    '181d9c6e fe814112 0314088f 5013875a' +\n\t\t    'c656398d 8a2ed19d 2a85c8ed d3ec2aef').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ts: new Buffer(('00' +\n\t\t    'a335926a a319a27a 1d00896a 6773a482' +\n\t\t    '7acdac73').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tn: new Buffer(('00' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff c7634d81 f4372ddf' +\n\t\t    '581a0db2 48b0a77a ecec196a ccc52973').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tG: new Buffer(('04' +\n\t\t    'aa87ca22 be8b0537 8eb1c71e f320ad74' +\n\t\t    '6e1d3b62 8ba79b98 59f741e0 82542a38' +\n\t\t    '5502f25d bf55296c 3a545e38 72760ab7' +\n\t\t    '3617de4a 96262c6f 5d9e98bf 9292dc29' +\n\t\t    'f8f41dbd 289a147c e9da3113 b5f0b8c0' +\n\t\t    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f').\n\t\t    replace(/ /g, ''), 'hex')\n\t},\n\t'nistp521': {\n\t\tsize: 521,\n\t\tpkcs8oid: '1.3.132.0.35',\n\t\tp: new Buffer((\n\t\t    '01ffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffff').replace(/ /g, ''), 'hex'),\n\t\ta: new Buffer(('01FF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tb: new Buffer(('51' +\n\t\t    '953eb961 8e1c9a1f 929a21a0 b68540ee' +\n\t\t    'a2da725b 99b315f3 b8b48991 8ef109e1' +\n\t\t    '56193951 ec7e937b 1652c0bd 3bb1bf07' +\n\t\t    '3573df88 3d2c34f1 ef451fd4 6b503f00').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ts: new Buffer(('00' +\n\t\t    'd09e8800 291cb853 96cc6717 393284aa' +\n\t\t    'a0da64ba').replace(/ /g, ''), 'hex'),\n\t\tn: new Buffer(('01ff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff fffffffa' +\n\t\t    '51868783 bf2f966b 7fcc0148 f709a5d0' +\n\t\t    '3bb5c9b8 899c47ae bb6fb71e 91386409').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tG: new Buffer(('04' +\n\t\t    '00c6 858e06b7 0404e9cd 9e3ecb66 2395b442' +\n\t\t         '9c648139 053fb521 f828af60 6b4d3dba' +\n\t\t         'a14b5e77 efe75928 fe1dc127 a2ffa8de' +\n\t\t         '3348b3c1 856a429b f97e7e31 c2e5bd66' +\n\t\t    '0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9' +\n\t\t         '98f54449 579b4468 17afbd17 273e662c' +\n\t\t         '97ee7299 5ef42640 c550b901 3fad0761' +\n\t\t         '353c7086 a272c240 88be9476 9fd16650').\n\t\t    replace(/ /g, ''), 'hex')\n\t}\n};\n\nmodule.exports = {\n\tinfo: algInfo,\n\tprivInfo: algPrivInfo,\n\thashAlgs: hashAlgs,\n\tcurves: curves\n};\n","// Copyright 2017 Joyent, Inc.\n\nmodule.exports = PrivateKey;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar dhe = require('./dhe');\nvar generateECDSA = dhe.generateECDSA;\nvar generateED25519 = dhe.generateED25519;\nvar edCompat;\nvar nacl;\n\ntry {\n\tedCompat = require('./ed-compat');\n} catch (e) {\n\t/* Just continue through, and bail out if we try to use it. */\n}\n\nvar Key = require('./key');\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\n\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['ssh'] = formats['ssh-private'];\nformats['dnssec'] = require('./formats/dnssec');\n\nfunction PrivateKey(opts) {\n\tassert.object(opts, 'options');\n\tKey.call(this, opts);\n\n\tthis._pubCache = undefined;\n}\nutil.inherits(PrivateKey, Key);\n\nPrivateKey.formats = formats;\n\nPrivateKey.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'pkcs1';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\treturn (formats[format].write(this, options));\n};\n\nPrivateKey.prototype.hash = function (algo) {\n\treturn (this.toPublic().hash(algo));\n};\n\nPrivateKey.prototype.toPublic = function () {\n\tif (this._pubCache)\n\t\treturn (this._pubCache);\n\n\tvar algInfo = algs.info[this.type];\n\tvar pubParts = [];\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tvar p = algInfo.parts[i];\n\t\tpubParts.push(this.part[p]);\n\t}\n\n\tthis._pubCache = new Key({\n\t\ttype: this.type,\n\t\tsource: this,\n\t\tparts: pubParts\n\t});\n\tif (this.comment)\n\t\tthis._pubCache.comment = this.comment;\n\treturn (this._pubCache);\n};\n\nPrivateKey.prototype.derive = function (newType) {\n\tassert.string(newType, 'type');\n\tvar priv, pub, pair;\n\n\tif (this.type === 'ed25519' && newType === 'curve25519') {\n\t\tif (nacl === undefined)\n\t\t\tnacl = require('tweetnacl');\n\n\t\tpriv = this.part.k.data;\n\t\tif (priv[0] === 0x00)\n\t\t\tpriv = priv.slice(1);\n\n\t\tpair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));\n\t\tpub = new Buffer(pair.publicKey);\n\n\t\treturn (new PrivateKey({\n\t\t\ttype: 'curve25519',\n\t\t\tparts: [\n\t\t\t\t{ name: 'A', data: utils.mpNormalize(pub) },\n\t\t\t\t{ name: 'k', data: utils.mpNormalize(priv) }\n\t\t\t]\n\t\t}));\n\t} else if (this.type === 'curve25519' && newType === 'ed25519') {\n\t\tif (nacl === undefined)\n\t\t\tnacl = require('tweetnacl');\n\n\t\tpriv = this.part.k.data;\n\t\tif (priv[0] === 0x00)\n\t\t\tpriv = priv.slice(1);\n\n\t\tpair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));\n\t\tpub = new Buffer(pair.publicKey);\n\n\t\treturn (new PrivateKey({\n\t\t\ttype: 'ed25519',\n\t\t\tparts: [\n\t\t\t\t{ name: 'A', data: utils.mpNormalize(pub) },\n\t\t\t\t{ name: 'k', data: utils.mpNormalize(priv) }\n\t\t\t]\n\t\t}));\n\t}\n\tthrow (new Error('Key derivation not supported from ' + this.type +\n\t    ' to ' + newType));\n};\n\nPrivateKey.prototype.createVerify = function (hashAlgo) {\n\treturn (this.toPublic().createVerify(hashAlgo));\n};\n\nPrivateKey.prototype.createSign = function (hashAlgo) {\n\tif (hashAlgo === undefined)\n\t\thashAlgo = this.defaultHashAlgorithm();\n\tassert.string(hashAlgo, 'hash algorithm');\n\n\t/* ED25519 is not supported by OpenSSL, use a javascript impl. */\n\tif (this.type === 'ed25519' && edCompat !== undefined)\n\t\treturn (new edCompat.Signer(this, hashAlgo));\n\tif (this.type === 'curve25519')\n\t\tthrow (new Error('Curve25519 keys are not suitable for ' +\n\t\t    'signing or verification'));\n\n\tvar v, nm, err;\n\ttry {\n\t\tnm = hashAlgo.toUpperCase();\n\t\tv = crypto.createSign(nm);\n\t} catch (e) {\n\t\terr = e;\n\t}\n\tif (v === undefined || (err instanceof Error &&\n\t    err.message.match(/Unknown message digest/))) {\n\t\tnm = 'RSA-';\n\t\tnm += hashAlgo.toUpperCase();\n\t\tv = crypto.createSign(nm);\n\t}\n\tassert.ok(v, 'failed to create verifier');\n\tvar oldSign = v.sign.bind(v);\n\tvar key = this.toBuffer('pkcs1');\n\tvar type = this.type;\n\tvar curve = this.curve;\n\tv.sign = function () {\n\t\tvar sig = oldSign(key);\n\t\tif (typeof (sig) === 'string')\n\t\t\tsig = new Buffer(sig, 'binary');\n\t\tsig = Signature.parse(sig, type, 'asn1');\n\t\tsig.hashAlgorithm = hashAlgo;\n\t\tsig.curve = curve;\n\t\treturn (sig);\n\t};\n\treturn (v);\n};\n\nPrivateKey.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\tassert.ok(k instanceof PrivateKey, 'key is not a private key');\n\t\tif (!k.comment)\n\t\t\tk.comment = options.filename;\n\t\treturn (k);\n\t} catch (e) {\n\t\tif (e.name === 'KeyEncryptedError')\n\t\t\tthrow (e);\n\t\tthrow (new KeyParseError(options.filename, format, e));\n\t}\n};\n\nPrivateKey.isPrivateKey = function (obj, ver) {\n\treturn (utils.isCompatible(obj, PrivateKey, ver));\n};\n\nPrivateKey.generate = function (type, options) {\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.object(options, 'options');\n\n\tswitch (type) {\n\tcase 'ecdsa':\n\t\tif (options.curve === undefined)\n\t\t\toptions.curve = 'nistp256';\n\t\tassert.string(options.curve, 'options.curve');\n\t\treturn (generateECDSA(options.curve));\n\tcase 'ed25519':\n\t\treturn (generateED25519());\n\tdefault:\n\t\tthrow (new Error('Key generation not supported with key ' +\n\t\t    'type \"' + type + '\"'));\n\t}\n};\n\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n * [1,5] -- changed ed25519 part names and format\n */\nPrivateKey.prototype._sshpkApiVersion = [1, 5];\n\nPrivateKey._oldVersionDetect = function (obj) {\n\tassert.func(obj.toPublic);\n\tassert.func(obj.createSign);\n\tif (obj.derive)\n\t\treturn ([1, 3]);\n\tif (obj.defaultHashAlgorithm)\n\t\treturn ([1, 2]);\n\tif (obj.formats['auto'])\n\t\treturn ([1, 1]);\n\treturn ([1, 0]);\n};\n","module.exports = require(\"url\");","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar exports = module.exports;\r\n\r\nvar azureutil = require('./util/util');\r\n\r\nrequire('./util/patch-xmlbuilder');\r\n\r\nvar nodeVersion = azureutil.getNodeVersion();\r\nif (nodeVersion.major === 0 && nodeVersion.minor > 8 && !(nodeVersion.minor > 10 || (nodeVersion.minor === 10 && nodeVersion.patch >= 3))) {\r\n  throw new Error('The Microsoft Azure node SDK does not work with node versions > 0.9.0 and < 0.10.3. Please upgrade to node >= 0.10.3');\r\n}\r\n\r\nexports.xmlbuilder = require('xmlbuilder');\r\nexports.xml2js = require('xml2js');\r\n\r\nexports.Logger = require('./diagnostics/logger');\r\nexports.WebResource = require('./http/webresource');\r\n\r\n// Services\r\nexports.StorageServiceClient = require('./services/storageserviceclient');\r\n\r\n// Models\r\nexports.ServicePropertiesResult = require('./models/servicepropertiesresult');\r\nexports.ServiceStatsParser = require('./models/servicestatsparser');\r\nexports.AclResult = require('./models/aclresult');\r\nexports.TokenCredential = require('./models/tokencredential');\r\n\r\n// Filters\r\nexports.LinearRetryPolicyFilter = require('./filters/linearretrypolicyfilter');\r\nexports.ExponentialRetryPolicyFilter = require('./filters/exponentialretrypolicyfilter');\r\nexports.RetryPolicyFilter = require('./filters/retrypolicyfilter');\r\n\r\n// Signing\r\nexports.SharedAccessSignature = require('./signing/sharedaccesssignature');\r\nexports.SharedKey = require('./signing/sharedkey');\r\n\r\n// Streams\r\nexports.BatchOperation = require('./streams/batchoperation');\r\nexports.ChunkAllocator = require('./streams/chunkallocator');\r\nexports.ChunkStream = require('./streams/chunkstream');\r\nexports.ChunkStreamWithStream = require('./streams/chunkstreamwithstream');\r\nexports.SpeedSummary = require('./streams/speedsummary');\r\nexports.BufferStream = require('./streams/bufferstream');\r\n\r\n// Utilities\r\nexports.Constants = require('./util/constants');\r\nexports.SR = require('./util/sr');\r\nexports.date = require('./util/date');\r\nexports.ISO8061Date = require('./util/iso8061date');\r\nexports.util = require('./util/util');\r\nexports.validate = require('./util/validate');\r\nexports.StorageUtilities = require('./util/storageutilities');\r\nexports.AccessCondition = require('./util/accesscondition');","module.exports = require(\"buffer\");","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Expose 'Constants'.\r\nexports = module.exports;\r\n\r\nvar storageDnsSuffix = process.env.AZURE_STORAGE_DNS_SUFFIX || 'core.windows.net';\r\n\r\n/**\r\n* Defines constants.\r\n*/\r\nvar Constants = {\r\n  /*\r\n  * Specifies the value to use for UserAgent header.\r\n  *\r\n  * @const\r\n  * @type {string}\r\n  */\r\n  USER_AGENT_PRODUCT_NAME: 'Azure-Storage',\r\n\r\n  /*\r\n  * Specifies the value to use for UserAgent header.\r\n  *\r\n  * @const\r\n  * @type {string}\r\n  */\r\n  USER_AGENT_PRODUCT_VERSION: '2.10.1',\r\n\r\n  /**\r\n  * The number of default concurrent requests for parallel operation.\r\n  *\r\n  * @const\r\n  * @type {int}\r\n  */\r\n  DEFAULT_PARALLEL_OPERATION_THREAD_COUNT: 5,\r\n\r\n  /**\r\n  * The value of default socket reuse for batch operation.\r\n  *\r\n  * @const\r\n  * @type {boolean}\r\n  */\r\n  DEFAULT_ENABLE_REUSE_SOCKET: true,\r\n\r\n  /**\r\n  * Constant representing a kilobyte (Non-SI version).\r\n  *\r\n  * @const\r\n  * @type {int}\r\n  */\r\n  KB: 1024,\r\n\r\n  /**\r\n  * Constant representing a megabyte (Non-SI version).\r\n  *\r\n  * @const\r\n  * @type {int}\r\n  */\r\n  MB: 1024 * 1024,\r\n\r\n  /**\r\n  * Constant representing a gigabyte (Non-SI version).\r\n  *\r\n  * @const\r\n  * @type {int}\r\n  */\r\n  GB: 1024 * 1024 * 1024,\r\n\r\n  /**\r\n  * Specifies HTTP.\r\n  *\r\n  * @const\r\n  * @type {string}\r\n  */\r\n  HTTP: 'http:',\r\n\r\n  /**\r\n  * Specifies HTTPS.\r\n  *\r\n  * @const\r\n  * @type {string}\r\n  */\r\n  HTTPS: 'https:',\r\n  \r\n  /**\r\n  * Default HTTP port.\r\n  *\r\n  * @const\r\n  * @type {int}\r\n  */\r\n  DEFAULT_HTTP_PORT: 80,\r\n  \r\n  /**\r\n  * Default HTTPS port.\r\n  *\r\n  * @const\r\n  * @type {int}\r\n  */\r\n  DEFAULT_HTTPS_PORT: 443,\r\n\r\n  /**\r\n   * Default client request timeout in milliseconds.\r\n   * Integer containing the number of milliseconds to wait for a server to send response headers (and start the response body) before aborting the request.\r\n   * 2 minutes by default.\r\n   * \r\n   * @const\r\n   * @type {int}\r\n   */\r\n  DEFAULT_CLIENT_REQUEST_TIMEOUT_IN_MS: 120000,\r\n\r\n  /**\r\n  * Marker for atom metadata.\r\n  *\r\n  * @const\r\n  * @type {string}\r\n  */\r\n  XML_METADATA_MARKER: '$',\r\n\r\n  /**\r\n  * Marker for atom value.\r\n  *\r\n  * @const\r\n  * @type {string}\r\n  */\r\n  XML_VALUE_MARKER: '_',\r\n  \r\n  /**\r\n  * Defines the service types indicators.\r\n  * \r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  ServiceType: {\r\n    Blob: 'blob',\r\n    Queue: 'queue',\r\n    Table: 'table',\r\n    File: 'file'\r\n  },\r\n\r\n  /**\r\n  * Specifies the location used to indicate which location the operation can be performed against.\r\n  *\r\n  * @const\r\n  * @enum {int}\r\n  */\r\n  RequestLocationMode: {\r\n    PRIMARY_ONLY: 0,\r\n    SECONDARY_ONLY: 1,\r\n    PRIMARY_OR_SECONDARY: 2\r\n  },\r\n\r\n  /**\r\n  * Represents a storage service location.\r\n  *\r\n  * @const\r\n  * @enum {int}\r\n  */\r\n  StorageLocation: {\r\n    PRIMARY: 0,\r\n    SECONDARY: 1\r\n  },\r\n\r\n  /**\r\n   * Defines constants for use with account SAS.\r\n   */\r\n  AccountSasConstants:{\r\n    /**\r\n    * Permission types.\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    Permissions: {\r\n      READ: 'r',\r\n      ADD: 'a',\r\n      CREATE: 'c',\r\n      UPDATE: 'u',\r\n      PROCESS: 'p',\r\n      WRITE: 'w',\r\n      DELETE: 'd',\r\n      LIST: 'l'\r\n    },\r\n    \r\n    /**\r\n    * Services types.\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    Services: {\r\n      BLOB: 'b',\r\n      FILE: 'f',\r\n      QUEUE: 'q',\r\n      TABLE: 't'\r\n    },\r\n    \r\n    /**\r\n    * Resources types.\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    Resources: {\r\n      SERVICE: 's',\r\n      CONTAINER: 'c',\r\n      OBJECT: 'o'\r\n    },\r\n\r\n    /**\r\n     * Protocols types.\r\n     *\r\n     * @const\r\n     * @enum {string}\r\n     */\r\n    Protocols: {\r\n      HTTPSONLY: 'https',\r\n      HTTPSORHTTP: 'https,http'\r\n    }\r\n  },\r\n\r\n  /**\r\n  * Defines constants for use with shared access policies.\r\n  */\r\n  AclConstants: {\r\n    /**\r\n    * XML element for an access policy.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ACCESS_POLICY: 'AccessPolicy',\r\n\r\n    /**\r\n    * XML element for the end time of an access policy.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    EXPIRY: 'Expiry',\r\n\r\n    /**\r\n    * XML attribute for IDs.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ID: 'Id',\r\n\r\n    /**\r\n    * XML element for the permission of an access policy.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PERMISSION: 'Permission',\r\n\r\n    /**\r\n    * XML element for a signed identifier.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_IDENTIFIER_ELEMENT: 'SignedIdentifier',\r\n\r\n    /**\r\n    * XML element for signed identifiers.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_IDENTIFIERS_ELEMENT: 'SignedIdentifiers',\r\n\r\n    /**\r\n    * XML element for the start time of an access policy.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    START: 'Start'\r\n  },\r\n\r\n  /**\r\n  * Defines constants for use with service properties.\r\n  */\r\n  ServicePropertiesConstants: {\r\n    /**\r\n    * XML element for storage service properties.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    STORAGE_SERVICE_PROPERTIES_ELEMENT: 'StorageServiceProperties',\r\n\r\n    /**\r\n    * Default analytics version to send for logging, hour metrics and minute metrics.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DEFAULT_ANALYTICS_VERSION: '1.0',\r\n\r\n    /**\r\n    * XML element for logging.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LOGGING_ELEMENT: 'Logging',\r\n\r\n    /**\r\n    * XML element for version.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    VERSION_ELEMENT: 'Version',\r\n\r\n    /**\r\n    * XML element for delete.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DELETE_ELEMENT: 'Delete',\r\n\r\n    /**\r\n    * XML element for read.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    READ_ELEMENT: 'Read',\r\n\r\n    /**\r\n    * XML element for write.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    WRITE_ELEMENT: 'Write',\r\n\r\n    /**\r\n    * XML element for retention policy.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    RETENTION_POLICY_ELEMENT: 'RetentionPolicy',\r\n\r\n    /**\r\n    * XML element for enabled.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ENABLED_ELEMENT: 'Enabled',\r\n\r\n    /**\r\n    * XML element for days.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DAYS_ELEMENT: 'Days',\r\n\r\n    /**\r\n    * XML element for HourMetrics.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    HOUR_METRICS_ELEMENT: 'HourMetrics',\r\n\r\n    /**\r\n    * XML element for MinuteMetrics.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    MINUTE_METRICS_ELEMENT: 'MinuteMetrics',\r\n\r\n    /**\r\n    * XML element for Cors.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CORS_ELEMENT: 'Cors',\r\n\r\n    /**\r\n    * XML element for CorsRule.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CORS_RULE_ELEMENT: 'CorsRule',\r\n\r\n    /**\r\n    * XML element for AllowedOrigins.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ALLOWED_ORIGINS_ELEMENT: 'AllowedOrigins',\r\n\r\n    /**\r\n    * XML element for AllowedMethods.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ALLOWED_METHODS_ELEMENT: 'AllowedMethods',\r\n\r\n    /**\r\n    * XML element for MaxAgeInSeconds.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    MAX_AGE_IN_SECONDS_ELEMENT: 'MaxAgeInSeconds',\r\n\r\n    /**\r\n    * XML element for ExposedHeaders.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    EXPOSED_HEADERS_ELEMENT: 'ExposedHeaders',\r\n\r\n    /**\r\n    * XML element for AllowedHeaders.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ALLOWED_HEADERS_ELEMENT: 'AllowedHeaders',\r\n\r\n    /**\r\n    * XML element for IncludeAPIs.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    INCLUDE_APIS_ELEMENT: 'IncludeAPIs',\r\n\r\n    /**\r\n    * XML element for DefaultServiceVersion.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DEFAULT_SERVICE_VERSION_ELEMENT: 'DefaultServiceVersion',\r\n\r\n    /**\r\n    * XML element for DeleteRetentionPolicy.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DEFAULT_DELETE_RETENTION_POLICY_ELEMENT: 'DeleteRetentionPolicy',\r\n\r\n    /**\r\n    * XML element for StaticWebsite.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DEFAULT_STATIC_WEBSITE_ELEMENT: 'StaticWebsite',\r\n\r\n    /**\r\n    * XML element for StaticWebsite/IndexDocument.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DEFAULT_INDEX_DOCUMENT_ELEMENT: 'IndexDocument',\r\n\r\n    /**\r\n    * XML element for StaticWebsite/ErrorDocument404Path.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n   DEFAULT_ERROR_DOCUMENT_404_PATH_ELEMENT: 'ErrorDocument404Path'\r\n  },\r\n\r\n  /**\r\n  * Defines constants for use with blob operations.\r\n  */\r\n  BlobConstants: {\r\n    /**\r\n    * XML element for the latest.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LATEST_ELEMENT: 'Latest',\r\n\r\n    /**\r\n    * XML element for uncommitted blocks.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    UNCOMMITTED_ELEMENT: 'Uncommitted',\r\n\r\n    /**\r\n    * XML element for a block list.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOCK_LIST_ELEMENT: 'BlockList',\r\n\r\n    /**\r\n    * XML element for committed blocks.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COMMITTED_ELEMENT: 'Committed',\r\n\r\n    /**\r\n    * The default write page size, in bytes, used by blob streams.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    DEFAULT_WRITE_PAGE_SIZE_IN_BYTES: 4 * 1024 * 1024,\r\n    \r\n    /**\r\n    * The minimum write page size, in bytes, used by blob streams.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MIN_WRITE_PAGE_SIZE_IN_BYTES: 2 * 1024 * 1024,\r\n\r\n    /**\r\n    * The default maximum size, in bytes, of a blob before it must be separated into blocks.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    DEFAULT_SINGLE_BLOB_PUT_THRESHOLD_IN_BYTES: 32 * 1024 * 1024,\r\n\r\n    /**\r\n    * The default write block size, in bytes, used by blob streams.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES: 4 * 1024 * 1024,\r\n\r\n    /**\r\n    * The default critical memory limitation in 32bit Node.js environment, in bytes.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    DEFAULT_CRITICAL_MEMORY_LIMITATION_32_IN_BYTES: 800 * 1024 * 1024,\r\n\r\n   /**\r\n    * The default critical memory limitation in browser environment, in bytes.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    DEFAULT_CRITICAL_MEMORY_LIMITATION_BROWSER_IN_BYTES: 1 * 1024 * 1024 * 1024,\r\n\r\n   /**\r\n    * The default minimum memory usage in browser environment, in bytes.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    DEFAULT_MINIMUM_MEMORY_USAGE_BROWSER_IN_BYTES: 4 * 1024 * 1024,\r\n\r\n    /**\r\n    * The maximum size of a single block of block blob.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MAX_BLOCK_BLOB_BLOCK_SIZE: 100 * 1024 * 1024,\r\n\r\n    /**\r\n    * The maximum size of a single block of append blob.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MAX_APPEND_BLOB_BLOCK_SIZE: 4 * 1024 * 1024,\r\n\r\n    /**\r\n    * The maximum size, in bytes, of a blob before it must be separated into blocks.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MAX_SINGLE_UPLOAD_BLOB_SIZE_IN_BYTES: 64 * 1024 * 1024,\r\n\r\n    /**\r\n    * The maximum range get size when requesting for a contentMD5.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MAX_RANGE_GET_SIZE_WITH_MD5 : 4 * 1024 * 1024,\r\n\r\n    /**\r\n    * The maximum page range size for a page update operation.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MAX_UPDATE_PAGE_SIZE : 4 * 1024 * 1024,\r\n    \r\n    /**\r\n    * The maximum buffer size for writing a stream buffer.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MAX_QUEUED_WRITE_DISK_BUFFER_SIZE : 64 * 1024 * 1024,\r\n    \r\n    /**\r\n    * Max size for single get page range. The max value should be 150MB.\r\n    * http://blogs.msdn.com/b/windowsazurestorage/archive/2012/03/26/getting-the-page-ranges-of-a-large-page-blob-in-segments.aspx\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MAX_SINGLE_GET_PAGE_RANGE_SIZE : 37 * 4 * 1024 * 1024,\r\n\r\n    /**\r\n    * The size of a page, in bytes, in a page blob.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    PAGE_SIZE: 512,\r\n\r\n    /**\r\n    * Resource types.\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    ResourceTypes: {\r\n      CONTAINER: 'c',\r\n      BLOB: 'b'\r\n    },\r\n\r\n    /**\r\n    * List blob types.\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    ListBlobTypes: {\r\n      Blob: 'b',\r\n      Directory: 'd'\r\n    },\r\n\r\n    /**\r\n    * Put page write options\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    PageWriteOptions: {\r\n      UPDATE: 'update',\r\n      CLEAR: 'clear'\r\n    },\r\n\r\n    /**\r\n    * Blob types\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    BlobTypes: {\r\n      BLOCK: 'BlockBlob',\r\n      PAGE: 'PageBlob',\r\n      APPEND: 'AppendBlob'\r\n    },\r\n\r\n    /**\r\n    * Blob lease constants\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    LeaseOperation: {\r\n      ACQUIRE: 'acquire',\r\n      RENEW: 'renew',\r\n      CHANGE: 'change',\r\n      RELEASE: 'release',\r\n      BREAK: 'break'\r\n    }\r\n  },\r\n\r\n  /**\r\n  * Defines constants for use with file operations.\r\n  */\r\n  FileConstants: {\r\n    /**\r\n    * The default write size, in bytes, used by file streams.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    DEFAULT_WRITE_SIZE_IN_BYTES: 4 * 1024 * 1024,\r\n\r\n    /**\r\n    * The maximum range size when requesting for a contentMD5.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MAX_RANGE_GET_SIZE_WITH_MD5 : 4 * 1024 * 1024,\r\n\r\n    /**\r\n    * The maximum range size for a file update operation.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MAX_UPDATE_FILE_SIZE : 4 * 1024 * 1024,\r\n\r\n    /**\r\n    * The default minimum size, in bytes, of a file when it must be separated into ranges.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    DEFAULT_SINGLE_FILE_GET_THRESHOLD_IN_BYTES: 32 * 1024 * 1024,\r\n\r\n    /**\r\n    * The minimum write file size, in bytes, used by file streams.\r\n    *\r\n    * @const\r\n    * @type {int}\r\n    */\r\n    MIN_WRITE_FILE_SIZE_IN_BYTES: 2 * 1024 * 1024,\r\n\r\n    /**\r\n    * Put range write options\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    RangeWriteOptions: {\r\n      UPDATE: 'update',\r\n      CLEAR: 'clear'\r\n    },\r\n\r\n    /**\r\n    * Resource types.\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    ResourceTypes: {\r\n      SHARE: 's',\r\n      FILE: 'f'\r\n    }\r\n  },\r\n\r\n  /**\r\n  * Defines constants for use with queue storage.\r\n  */\r\n  QueueConstants: {\r\n    /**\r\n    * XML element for QueueMessage.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    QUEUE_MESSAGE_ELEMENT: 'QueueMessage',\r\n\r\n    /**\r\n    * XML element for MessageText.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    MESSAGE_TEXT_ELEMENT: 'MessageText'\r\n  },\r\n\r\n  /**\r\n  * Defines constants for use with table storage.\r\n  */\r\n  TableConstants: {\r\n    /**\r\n    * The changeset response delimiter.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CHANGESET_DELIMITER: '--changesetresponse_',\r\n\r\n    /**\r\n    * The batch response delimiter.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BATCH_DELIMITER: '--batchresponse_',\r\n\r\n    /**\r\n    * The next continuation row key token.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTINUATION_NEXT_ROW_KEY: 'x-ms-continuation-nextrowkey',\r\n\r\n    /**\r\n    * The next continuation partition key token.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTINUATION_NEXT_PARTITION_KEY: 'x-ms-continuation-nextpartitionkey',\r\n\r\n    /**\r\n    * The next continuation table name token.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTINUATION_NEXT_TABLE_NAME: 'x-ms-continuation-nexttablename',\r\n\r\n    /**\r\n    * The next row key query string argument.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    NEXT_ROW_KEY: 'NextRowKey',\r\n\r\n    /**\r\n    * The next partition key query string argument.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    NEXT_PARTITION_KEY: 'NextPartitionKey',\r\n\r\n    /**\r\n    * The next table name query string argument.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    NEXT_TABLE_NAME: 'NextTableName',\r\n\r\n    /**\r\n    * Prefix of the odata properties returned in a JSON query.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ODATA_PREFIX: 'odata.',\r\n\r\n    /**\r\n    * Constant representing the string following a type annotation in a JSON table query.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ODATA_TYPE_SUFFIX: '@odata.type',\r\n\r\n    /**\r\n    * Constant representing the property where the odata metadata elements are stored.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ODATA_METADATA_MARKER: '.metadata',\r\n\r\n    /**\r\n    * Constant representing the value for an entity property.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ODATA_VALUE_MARKER: '_',\r\n\r\n    /** \r\n    * Constant representing the type for an entity property.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ODATA_TYPE_MARKER: '$',\r\n\r\n    /**\r\n    * The value to set the maximum data service version header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DEFAULT_DATA_SERVICE_VERSION: '3.0;NetFx',\r\n\r\n    /**\r\n    * The name of the property that stores the table name.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    TABLE_NAME: 'TableName',\r\n\r\n    /**\r\n    * The name of the special table used to store tables.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    TABLE_SERVICE_TABLE_NAME: 'Tables',\r\n\r\n    /**\r\n    * Operations.\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    Operations: {\r\n      RETRIEVE: 'RETRIEVE',\r\n      INSERT: 'INSERT',\r\n      REPLACE: 'REPLACE',\r\n      MERGE: 'MERGE',\r\n      DELETE: 'DELETE',\r\n      INSERT_OR_REPLACE: 'INSERT_OR_REPLACE',\r\n      INSERT_OR_MERGE: 'INSERT_OR_MERGE'\r\n    }\r\n  },\r\n\r\n  /**\r\n  * Defines constants for use with HTTP headers.\r\n  */\r\n  HeaderConstants: {\r\n    /**\r\n    * The accept ranges header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ACCEPT_RANGES: 'accept_ranges',\r\n\r\n    /**\r\n    * The content transfer encoding header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_TRANSFER_ENCODING: 'content-transfer-encoding',\r\n\r\n    /**\r\n    * The transfer encoding header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    TRANSFER_ENCODING: 'transfer-encoding',\r\n\r\n    /**\r\n    * The server header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SERVER: 'server',\r\n\r\n    /**\r\n    * The location header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LOCATION: 'location',\r\n\r\n    /**\r\n    * The Last-Modified header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LAST_MODIFIED: 'Last-Modified',\r\n\r\n    /**\r\n    * The creation time header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CREATION_TIME: 'x-ms-creation-time',\r\n\r\n    /**\r\n    * The data service version.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DATA_SERVICE_VERSION: 'dataserviceversion',\r\n\r\n    /**\r\n    * The maximum data service version.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    MAX_DATA_SERVICE_VERSION: 'maxdataserviceversion',\r\n\r\n    /**\r\n    * The master Windows Azure Storage header prefix.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PREFIX_FOR_STORAGE: 'x-ms-',\r\n\r\n    /**\r\n    * The client request Id header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CLIENT_REQUEST_ID: 'x-ms-client-request-id',\r\n\r\n    /**\r\n    * The header that specifies the approximate message count of a queue.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    APPROXIMATE_MESSAGES_COUNT: 'x-ms-approximate-messages-count',\r\n\r\n    /**\r\n    * The Authorization header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    AUTHORIZATION: 'authorization',\r\n\r\n    /**\r\n    * The header that is used to avoid browser cache.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FORCE_NO_CACHE_IN_BROWSER: '_',\r\n\r\n    /**\r\n    * The header that specifies public access to blobs.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_PUBLIC_ACCESS: 'x-ms-blob-public-access',\r\n\r\n    /**\r\n    * The header that specifies container immutability policy.\r\n    *\r\n    * @const\r\n    * @type {boolean}\r\n    */\r\n    HAS_IMMUTABILITY_POLICY: 'x-ms-has-immutability-policy',\r\n\r\n    /**\r\n    * The header that specifies container has legal hold.\r\n    *\r\n    * @const\r\n    * @type {boolean}\r\n    */\r\n    HAS_LEGAL_HOLD: 'x-ms-has-legal-hold',\r\n\r\n    /**\r\n    * The header for the blob type.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_TYPE: 'x-ms-blob-type',\r\n\r\n    /**\r\n    * The header for the type.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    TYPE: 'x-ms-type',\r\n\r\n    /**\r\n    * Specifies the block blob type.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOCK_BLOB: 'blockblob',\r\n\r\n    /**\r\n    * The CacheControl header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CACHE_CONTROL: 'cache-control',\r\n\r\n    /**\r\n    * The header that specifies blob caching control.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_CACHE_CONTROL: 'x-ms-blob-cache-control',\r\n\r\n    /**\r\n    * The header that specifies caching control.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FILE_CACHE_CONTROL: 'x-ms-cache-control',\r\n\r\n    /**\r\n    * The copy status.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COPY_STATUS: 'x-ms-copy-status',\r\n\r\n    /**\r\n    * The copy completion time\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COPY_COMPLETION_TIME: 'x-ms-copy-completion-time',\r\n\r\n    /**\r\n    * The copy status message\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COPY_STATUS_DESCRIPTION: 'x-ms-copy-status-description',\r\n\r\n    /**\r\n    * The copy identifier.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COPY_ID: 'x-ms-copy-id',\r\n\r\n    /**\r\n    * Progress of any copy operation\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COPY_PROGRESS: 'x-ms-copy-progress',\r\n\r\n    /**\r\n    * The copy action.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COPY_ACTION: 'x-ms-copy-action',\r\n\r\n    /**\r\n    * Flag if the blob is incremental copy blob.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    INCREMENTAL_COPY: 'x-ms-incremental-copy',\r\n\r\n    /**\r\n    * Snapshot time of the last successful incremental copy snapshot for this blob.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COPY_DESTINATION_SNAPSHOT: 'x-ms-copy-destination-snapshot',\r\n\r\n    /**\r\n    * The ContentID header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_ID: 'content-id',\r\n\r\n    /**\r\n    * The ContentEncoding header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_ENCODING: 'content-encoding',\r\n\r\n    /**\r\n    * The header that specifies blob content encoding.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_CONTENT_ENCODING: 'x-ms-blob-content-encoding',\r\n\r\n    /**\r\n    * The header that specifies content encoding.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FILE_CONTENT_ENCODING: 'x-ms-content-encoding',\r\n\r\n    /**\r\n    * The ContentLangauge header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_LANGUAGE: 'content-language',\r\n\r\n    /**\r\n    * The header that specifies blob content language.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_CONTENT_LANGUAGE: 'x-ms-blob-content-language',\r\n\r\n    /**\r\n    * The header that specifies content language.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FILE_CONTENT_LANGUAGE: 'x-ms-content-language',\r\n\r\n    /**\r\n    * The ContentLength header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_LENGTH: 'content-length',\r\n\r\n    /**\r\n    * The header that specifies blob content length.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_CONTENT_LENGTH: 'x-ms-blob-content-length',\r\n\r\n    /**\r\n    * The header that specifies content length.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FILE_CONTENT_LENGTH: 'x-ms-content-length',\r\n\r\n    /**\r\n    * The ContentDisposition header.\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_DISPOSITION: 'content-disposition',\r\n\r\n    /**\r\n    * The header that specifies blob content disposition.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_CONTENT_DISPOSITION: 'x-ms-blob-content-disposition',\r\n\r\n    /**\r\n    * The header that specifies content disposition.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FILE_CONTENT_DISPOSITION: 'x-ms-content-disposition',\r\n\r\n    /**\r\n    * The ContentMD5 header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_MD5: 'content-md5',\r\n\r\n    /**\r\n    * The header that specifies blob content MD5.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_CONTENT_MD5: 'x-ms-blob-content-md5',\r\n\r\n    /**\r\n    * The header that specifies content MD5.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FILE_CONTENT_MD5: 'x-ms-content-md5',\r\n\r\n    /**\r\n    * The ContentRange header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_RANGE: 'cache-range',\r\n\r\n    /**\r\n    * The ContentType header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_TYPE: 'content-type',\r\n\r\n    /**\r\n    * The header that specifies blob content type.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_CONTENT_TYPE: 'x-ms-blob-content-type',\r\n\r\n    /**\r\n    * The header that specifies content type.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FILE_CONTENT_TYPE: 'x-ms-content-type',\r\n\r\n    /**\r\n    * The header for copy source.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COPY_SOURCE: 'x-ms-copy-source',\r\n\r\n    /**\r\n    * The header that specifies the date.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DATE: 'date',\r\n\r\n    /**\r\n    * The header that specifies the date.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    MS_DATE: 'x-ms-date',\r\n\r\n    /**\r\n    * The header to delete snapshots.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DELETE_SNAPSHOT: 'x-ms-delete-snapshots',\r\n\r\n    /**\r\n    * The ETag header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ETAG: 'etag',\r\n\r\n    /**\r\n    * The IfMatch header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    IF_MATCH: 'if-match',\r\n\r\n    /**\r\n    * The IfModifiedSince header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    IF_MODIFIED_SINCE: 'if-modified-since',\r\n\r\n    /**\r\n    * The IfNoneMatch header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    IF_NONE_MATCH: 'if-none-match',\r\n\r\n    /**\r\n    * The IfUnmodifiedSince header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    IF_UNMODIFIED_SINCE: 'if-unmodified-since',\r\n\r\n    /**\r\n    * Specifies snapshots are to be included.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    INCLUDE_SNAPSHOTS_VALUE: 'include',\r\n\r\n    /**\r\n    * Specifies that the content-type is JSON.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    JSON_CONTENT_TYPE_VALUE: 'application/json',\r\n\r\n    /**\r\n    * The header that specifies storage SKU, also known as account type.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SKU_NAME: 'x-ms-sku-name',\r\n\r\n    /**\r\n    * The header that describes the flavour of the storage account, also known as account kind.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ACCOUNT_KIND: 'x-ms-account-kind',\r\n\r\n    /**\r\n    * The header that specifies lease ID.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LEASE_ID: 'x-ms-lease-id',\r\n\r\n    /**\r\n    * The header that specifies the lease break period.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LEASE_BREAK_PERIOD: 'x-ms-lease-break-period',\r\n\r\n    /**\r\n    * The header that specifies the proposed lease identifier.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PROPOSED_LEASE_ID: 'x-ms-proposed-lease-id',\r\n\r\n    /**\r\n    * The header that specifies the lease duration.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LEASE_DURATION: 'x-ms-lease-duration',\r\n\r\n    /**\r\n    * The header that specifies the source lease ID.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SOURCE_LEASE_ID: 'x-ms-source-lease-id',\r\n\r\n    /**\r\n    * The header that specifies lease time.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LEASE_TIME: 'x-ms-lease-time',\r\n\r\n    /**\r\n    * The header that specifies lease status.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LEASE_STATUS: 'x-ms-lease-status',\r\n\r\n    /**\r\n    * The header that specifies lease state.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LEASE_STATE: 'x-ms-lease-state',\r\n\r\n    /**\r\n    * Specifies the page blob type.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PAGE_BLOB: 'PageBlob',\r\n\r\n    /**\r\n    * The header that specifies page write mode.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PAGE_WRITE: 'x-ms-page-write',\r\n\r\n    /**\r\n    * The header that specifies file range write mode.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FILE_WRITE: 'x-ms-write',\r\n\r\n    /**\r\n    * The header that specifies whether the response should include the inserted entity.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PREFER: 'Prefer',\r\n\r\n    /**\r\n    * The header value which specifies that the response should include the inserted entity.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PREFER_CONTENT: 'return-content',\r\n\r\n    /**\r\n    * The header value which specifies that the response should not include the inserted entity.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PREFER_NO_CONTENT: 'return-no-content',\r\n\r\n    /**\r\n    * The header prefix for metadata.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PREFIX_FOR_STORAGE_METADATA: 'x-ms-meta-',\r\n\r\n    /**\r\n    * The header prefix for properties.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PREFIX_FOR_STORAGE_PROPERTIES: 'x-ms-prop-',\r\n\r\n    /**\r\n    * The Range header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    RANGE: 'Range',\r\n\r\n    /**\r\n    * The Source Range header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SOURCE_RANGE: 'x-ms-source-range',\r\n\r\n    /**\r\n    * The header that specifies if the request will populate the ContentMD5 header for range gets.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    RANGE_GET_CONTENT_MD5: 'x-ms-range-get-content-md5',\r\n\r\n    /**\r\n    * The format string for specifying ranges.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    RANGE_HEADER_FORMAT: 'bytes:%d-%d',\r\n\r\n    /**\r\n    * The header that indicates the request ID.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    REQUEST_ID: 'x-ms-request-id',\r\n\r\n    /**\r\n    * The header for specifying the sequence number.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SEQUENCE_NUMBER: 'x-ms-blob-sequence-number',\r\n\r\n    /**\r\n    * The header for specifying the If-Sequence-Number-EQ condition.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SEQUENCE_NUMBER_EQUAL: 'x-ms-if-sequence-number-eq',\r\n\r\n    /**\r\n    * The header for specifying the If-Sequence-Number-LT condition.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SEQUENCE_NUMBER_LESS_THAN: 'x-ms-if-sequence-number-lt',\r\n\r\n    /**\r\n    * The header for specifying the If-Sequence-Number-LE condition.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SEQUENCE_NUMBER_LESS_THAN_OR_EQUAL: 'x-ms-if-sequence-number-le',\r\n\r\n    /**\r\n    * The header that specifies sequence number action.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SEQUENCE_NUMBER_ACTION: 'x-ms-sequence-number-action',\r\n\r\n    /**\r\n    * The header for the blob content length.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIZE: 'x-ms-blob-content-length',\r\n\r\n    /**\r\n    * The header for snapshots.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SNAPSHOT: 'x-ms-snapshot',\r\n\r\n    /**\r\n    * Specifies only snapshots are to be included.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SNAPSHOTS_ONLY_VALUE: 'only',\r\n\r\n    /**\r\n    * The header for the If-Match condition.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SOURCE_IF_MATCH: 'x-ms-source-if-match',\r\n\r\n    /**\r\n    * The header for the If-Modified-Since condition.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SOURCE_IF_MODIFIED_SINCE: 'x-ms-source-if-modified-since',\r\n\r\n    /**\r\n    * The header for the If-None-Match condition.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SOURCE_IF_NONE_MATCH: 'x-ms-source-if-none-match',\r\n\r\n    /**\r\n    * The header for the If-Unmodified-Since condition.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SOURCE_IF_UNMODIFIED_SINCE: 'x-ms-source-if-unmodified-since',\r\n\r\n    /**\r\n    * The header for data ranges.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    STORAGE_RANGE: 'x-ms-range',\r\n\r\n    /**\r\n    * The header for storage version.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    STORAGE_VERSION: 'x-ms-version',\r\n\r\n    /**\r\n    * The current storage version header value.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    TARGET_STORAGE_VERSION: '2018-03-28',\r\n\r\n    /**\r\n    * The UserAgent header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    USER_AGENT: 'user-agent',\r\n\r\n    /**\r\n    * The pop receipt header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    POP_RECEIPT: 'x-ms-popreceipt',\r\n\r\n    /**\r\n    * The time next visibile header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    TIME_NEXT_VISIBLE: 'x-ms-time-next-visible',\r\n\r\n    /**\r\n    * The approximate message counter header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    APPROXIMATE_MESSAGE_COUNT: 'x-ms-approximate-message-count',\r\n\r\n    /**\r\n    * The lease action header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LEASE_ACTION: 'x-ms-lease-action',\r\n\r\n    /**\r\n    * The accept header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ACCEPT: 'accept',\r\n\r\n    /**\r\n    * The accept charset header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ACCEPT_CHARSET: 'Accept-Charset',\r\n\r\n    /**\r\n    * The host header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    HOST: 'host',\r\n\r\n    /**\r\n    * The correlation identifier header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CORRELATION_ID: 'x-ms-correlation-id',\r\n\r\n    /**\r\n    * The group identifier header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    GROUP_ID: 'x-ms-group-id',\r\n\r\n    /**\r\n    * The share quota header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SHARE_QUOTA: 'x-ms-share-quota',\r\n    \r\n    /**\r\n    * The max blob size header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_CONDITION_MAX_SIZE: 'x-ms-blob-condition-maxsize',\r\n\r\n    /**\r\n    * The append blob position header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_CONDITION_APPEND_POSITION: 'x-ms-blob-condition-appendpos',\r\n\r\n    /**\r\n    * The append blob append offset header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_APPEND_OFFSET: 'x-ms-blob-append-offset',\r\n\r\n    /**\r\n    * The append blob committed block header.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOB_COMMITTED_BLOCK_COUNT: 'x-ms-blob-committed-block-count',\r\n\r\n    /**\r\n     * If the contents of the request have been successfully encrypted using the specified algorithm.\r\n     *\r\n     * @const\r\n     * @type {string}\r\n     */\r\n    REQUEST_SERVER_ENCRYPTED: 'x-ms-request-server-encrypted',\r\n\r\n    /**\r\n    * If the data and application metadata are completely encrypted using the specified algorithm.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SERVER_ENCRYPTED: 'x-ms-server-encrypted',\r\n\r\n    /**\r\n    * Header indicates the resulting tier of the blob.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ACCESS_TIER: 'x-ms-access-tier',\r\n\r\n    /**\r\n    * This is the datetime of when the last time tier was changed on the blob.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ACCESS_TIER_CHANGE_TIME: 'x-ms-access-tier-change-time',\r\n\r\n    /**\r\n    * If the access tier is not explicitly set on the blob, \r\n    * the tier is inferred based on its content length \r\n    * and this header will be returned with true value.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ACCESS_TIER_INFERRED: 'x-ms-access-tier-inferred',\r\n\r\n    /**\r\n    * For BlobStorage accounts, the header is returned if archive tier is set\r\n    * and rehydrate operation is pending for the request version is 2017-04-17 or later.\r\n    * The valid values are rehydrate-pending-to-hot or rehydrate-pending-to-cool.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ARCHIVE_STATUS: 'x-ms-archive-status'\r\n  },\r\n\r\n  QueryStringConstants: {\r\n\r\n    /**\r\n    * Query component for SAS API version.\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    API_VERSION: 'api-version',\r\n\r\n    /**\r\n    * The Comp value.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COMP: 'comp',\r\n\r\n    /**\r\n    * The Res Type.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    RESTYPE: 'restype',\r\n\r\n    /**\r\n    * The copy Id.\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    COPY_ID: 'copyid',\r\n\r\n    /**\r\n    * The snapshot value.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SNAPSHOT: 'snapshot',\r\n\r\n    /**\r\n    * The share snapshot value.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SHARE_SNAPSHOT: 'sharesnapshot',\r\n\r\n    /**\r\n    * The previous snapshot value.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PREV_SNAPSHOT: 'prevsnapshot',\r\n\r\n    /**\r\n    * The timeout value.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    TIMEOUT: 'timeout',\r\n\r\n    /**\r\n    * The signed start time query string argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_START: 'st',\r\n\r\n    /**\r\n    * The signed expiry time query string argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_EXPIRY: 'se',\r\n\r\n    /**\r\n    * The signed resource query string argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_RESOURCE: 'sr',\r\n\r\n    /**\r\n    * The signed permissions query string argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_PERMISSIONS: 'sp',\r\n    \r\n    /**\r\n    * The signed services query string argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_SERVICES: 'ss',\r\n    \r\n    /**\r\n    * The signed resource types query string argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_RESOURCE_TYPES: 'srt',\r\n    \r\n    /**\r\n    * The signed IP query string argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_IP: 'sip',\r\n    \r\n    /**\r\n    * The signed protocol query string argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_PROTOCOL: 'spr',\r\n\r\n    /**\r\n    * The signed identifier query string argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_IDENTIFIER: 'si',\r\n\r\n    /**\r\n    * The signature query string argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNATURE: 'sig',\r\n\r\n    /**\r\n    * The signed version argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SIGNED_VERSION: 'sv',\r\n\r\n    /**\r\n    * The cache control argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CACHE_CONTROL: 'rscc',\r\n\r\n    /**\r\n    * The content type argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_TYPE: 'rsct',\r\n\r\n    /**\r\n    * The content encoding argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_ENCODING: 'rsce',\r\n\r\n    /**\r\n    * The content language argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_LANGUAGE: 'rscl',\r\n\r\n    /**\r\n    * The content disposition argument for shared access signature.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    CONTENT_DISPOSITION: 'rscd',\r\n\r\n    /**\r\n    * The block identifier query string argument for blob service.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOCK_ID: 'blockid',\r\n\r\n    /**\r\n    * The block list type query string argument for blob service.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    BLOCK_LIST_TYPE: 'blocklisttype',\r\n\r\n    /**\r\n    * The prefix query string argument for listing operations.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PREFIX: 'prefix',\r\n\r\n    /**\r\n    * The marker query string argument for listing operations.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    MARKER: 'marker',\r\n\r\n    /**\r\n    * The maxresults query string argument for listing operations.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    MAX_RESULTS: 'maxresults',\r\n\r\n    /**\r\n    * The delimiter query string argument for listing operations.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DELIMITER: 'delimiter',\r\n\r\n    /**\r\n    * The include query string argument for listing operations.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    INCLUDE: 'include',\r\n\r\n    /**\r\n    * The peekonly query string argument for queue service.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    PEEK_ONLY: 'peekonly',\r\n\r\n    /**\r\n    * The numofmessages query string argument for queue service.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    NUM_OF_MESSAGES: 'numofmessages',\r\n\r\n    /**\r\n    * The popreceipt query string argument for queue service.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    POP_RECEIPT: 'popreceipt',\r\n\r\n    /**\r\n    * The visibilitytimeout query string argument for queue service.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    VISIBILITY_TIMEOUT: 'visibilitytimeout',\r\n\r\n    /**\r\n    * The messagettl query string argument for queue service.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    MESSAGE_TTL: 'messagettl',\r\n\r\n    /**\r\n    * The select query string argument.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SELECT: '$select',\r\n\r\n    /**\r\n    * The filter query string argument.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FILTER: '$filter',\r\n\r\n    /**\r\n    * The top query string argument.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    TOP: '$top',\r\n\r\n    /**\r\n    * The skip query string argument.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    SKIP: '$skip',\r\n\r\n    /**\r\n    * The next partition key query string argument for table service.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    NEXT_PARTITION_KEY: 'NextPartitionKey',\r\n\r\n    /**\r\n    * The next row key query string argument for table service.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    NEXT_ROW_KEY: 'NextRowKey',\r\n\r\n    /**\r\n    * The lock identifier for service bus messages.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    LOCK_ID: 'lockid',\r\n\r\n    /**\r\n    * The table name for table SAS URI's.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    TABLENAME: 'tn',\r\n\r\n    /**\r\n    * The starting Partition Key for tableSAS URI's.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    STARTPK: 'spk',\r\n\r\n    /**\r\n    * The starting Partition Key for tableSAS URI's.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    STARTRK: 'srk',\r\n\r\n    /**\r\n    * The ending Partition Key for tableSAS URI's.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ENDPK: 'epk',\r\n\r\n    /**\r\n    * The ending Partition Key for tableSAS URI's.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    ENDRK: 'erk'\r\n  },\r\n\r\n  StorageServiceClientConstants: {\r\n    /**\r\n    * The default protocol.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DEFAULT_PROTOCOL: 'https:',\r\n\r\n    /*\r\n    * Used environment variables.\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    EnvironmentVariables: {\r\n      AZURE_STORAGE_ACCOUNT: 'AZURE_STORAGE_ACCOUNT',\r\n      AZURE_STORAGE_ACCESS_KEY: 'AZURE_STORAGE_ACCESS_KEY',\r\n      AZURE_STORAGE_DNS_SUFFIX: 'AZURE_STORAGE_DNS_SUFFIX',\r\n      AZURE_STORAGE_CONNECTION_STRING: 'AZURE_STORAGE_CONNECTION_STRING',\r\n      HTTP_PROXY: 'HTTP_PROXY',\r\n      HTTPS_PROXY: 'HTTPS_PROXY',\r\n      EMULATED: 'EMULATED'\r\n    },\r\n\r\n    /**\r\n    * Default credentials.\r\n    */\r\n    DEVSTORE_STORAGE_ACCOUNT: 'devstoreaccount1',\r\n    DEVSTORE_STORAGE_ACCESS_KEY: 'Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==',\r\n\r\n    /**\r\n    * The development store URI.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    DEV_STORE_URI: 'http://127.0.0.1',\r\n\r\n    /**\r\n    * Development ServiceClient URLs.\r\n    */\r\n    DEVSTORE_DEFAULT_PROTOCOL: 'http://',\r\n    DEVSTORE_BLOB_HOST: '127.0.0.1:10000',\r\n    DEVSTORE_QUEUE_HOST: '127.0.0.1:10001',\r\n    DEVSTORE_TABLE_HOST: '127.0.0.1:10002',\r\n\r\n    /**\r\n    * Production ServiceClient URLs.\r\n    */\r\n    CLOUD_BLOB_HOST: 'blob.' + storageDnsSuffix,\r\n    CLOUD_QUEUE_HOST: 'queue.' + storageDnsSuffix,\r\n    CLOUD_TABLE_HOST: 'table.' + storageDnsSuffix,\r\n    CLOUD_FILE_HOST: 'file.' + storageDnsSuffix\r\n  },\r\n\r\n  HttpConstants: {\r\n    /**\r\n    * Http Verbs\r\n    *\r\n    * @const\r\n    * @enum {string}\r\n    */\r\n    HttpVerbs: {\r\n      PUT: 'PUT',\r\n      GET: 'GET',\r\n      DELETE: 'DELETE',\r\n      POST: 'POST',\r\n      MERGE: 'MERGE',\r\n      HEAD: 'HEAD'\r\n    },\r\n\r\n    /**\r\n    * Response codes.\r\n    *\r\n    * @const\r\n    * @enum {int}\r\n    */\r\n    HttpResponseCodes: {\r\n      Ok: 200,\r\n      Created: 201,\r\n      Accepted: 202,\r\n      NoContent: 204,\r\n      PartialContent: 206,\r\n      BadRequest: 400,\r\n      Unauthorized: 401,\r\n      Forbidden: 403,\r\n      NotFound: 404,\r\n      Conflict: 409,\r\n      LengthRequired: 411,\r\n      PreconditionFailed: 412\r\n    }\r\n  },\r\n\r\n  CompatibleVersionConstants: {\r\n    /**\r\n    * Constant for the 2013-08-15 version.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    AUGUST_2013: '2013-08-15',\r\n\r\n    /**\r\n    * Constant for the 2012-02-12 version.\r\n    *\r\n    * @const\r\n    * @type {string}\r\n    */\r\n    FEBRUARY_2012: '2012-02-12'\r\n  },\r\n\r\n  BlobErrorCodeStrings: {\r\n    INVALID_BLOCK_ID: 'InvalidBlockId',\r\n    BLOB_NOT_FOUND: 'BlobNotFound',\r\n    BLOB_ALREADY_EXISTS: 'BlobAlreadyExists',\r\n    CONTAINER_ALREADY_EXISTS: 'ContainerAlreadyExists',\r\n    CONTAINER_NOT_FOUND: 'ContainerNotFound',\r\n    INVALID_BLOB_OR_BLOCK: 'InvalidBlobOrBlock',\r\n    INVALID_BLOCK_LIST: 'InvalidBlockList'\r\n  },\r\n\r\n  FileErrorCodeStrings: {\r\n    SHARE_ALREADY_EXISTS: 'ShareAlreadyExists',\r\n    SHARE_NOT_FOUND: 'ShareNotFound',\r\n    FILE_NOT_FOUND: 'FileNotFound'\r\n  },\r\n\r\n  QueueErrorCodeStrings: {\r\n    QUEUE_NOT_FOUND: 'QueueNotFound',\r\n    QUEUE_DISABLED: 'QueueDisabled',\r\n    QUEUE_ALREADY_EXISTS: 'QueueAlreadyExists',\r\n    QUEUE_NOT_EMPTY: 'QueueNotEmpty',\r\n    QUEUE_BEING_DELETED: 'QueueBeingDeleted',\r\n    POP_RECEIPT_MISMATCH: 'PopReceiptMismatch',\r\n    INVALID_PARAMETER: 'InvalidParameter',\r\n    MESSAGE_NOT_FOUND: 'MessageNotFound',\r\n    MESSAGE_TOO_LARGE: 'MessageTooLarge',\r\n    INVALID_MARKER: 'InvalidMarker'\r\n  },\r\n\r\n  /**\r\n  * Constants for storage error strings\r\n  *\r\n  * More details are at: http://msdn.microsoft.com/en-us/library/azure/dd179357.aspx\r\n  */\r\n  StorageErrorCodeStrings: {\r\n    // Not Modified (304): The condition specified in the conditional header(s) was not met for a read operation.\r\n    // Precondition Failed (412): The condition specified in the conditional header(s) was not met for a write operation.\r\n    CONDITION_NOT_MET: 'ConditionNotMet', \r\n    // Bad Request (400): A required HTTP header was not specified.\r\n    MISSING_REQUIRED_HEADER: 'MissingRequiredHeader', \r\n    // Bad Request (400): A required XML node was not specified in the request body.\r\n    MISSING_REQUIRED_XML_NODE: 'MissingRequiredXmlNode', \r\n    // Bad Request (400): One of the HTTP headers specified in the request is not supported.\r\n    UNSUPPORTED_HEADER: 'UnsupportedHeader',\r\n    // Bad Request (400): One of the XML nodes specified in the request body is not supported.\r\n    UNSUPPORTED_XML_NODE: 'UnsupportedXmlNode', \r\n    // Bad Request (400): The value provided for one of the HTTP headers was not in the correct format.\r\n    INVALID_HEADER_VALUE: 'InvalidHeaderValue', \r\n    // Bad Request (400): The value provided for one of the XML nodes in the request body was not in the correct format.\r\n    INVALID_XML_NODE_VALUE: 'InvalidXmlNodeValue',\r\n    // Bad Request (400): A required query parameter was not specified for this request.\r\n    MISSING_REQUIRED_QUERY_PARAMETER: 'MissingRequiredQueryParameter',\r\n    // Bad Request (400): One of the query parameters specified in the request URI is not supported.\r\n    UNSUPPORTED_QUERY_PARAMETER: 'UnsupportedQueryParameter',\r\n    // Bad Request (400): An invalid value was specified for one of the query parameters in the request URI.\r\n    INVALID_QUERY_PARAMETER_VALUE: 'InvalidQueryParameterValue',\r\n    // Bad Request (400): A query parameter specified in the request URI is outside the permissible range.\r\n    OUT_OF_RANGE_QUERY_PARAMETER_VALUE: 'OutOfRangeQueryParameterValue',\r\n    // Bad Request (400): The url in the request could not be parsed.\r\n    REQUEST_URL_FAILED_TO_PARSE: 'RequestUrlFailedToParse',\r\n    // Bad Request (400): The requested URI does not represent any resource on the server.\r\n    INVALID_URI: 'InvalidUri',\r\n    // Bad Request (400): The HTTP verb specified was not recognized by the server.\r\n    INVALID_HTTP_VERB: 'InvalidHttpVerb',\r\n    // Bad Request (400): The key for one of the metadata key-value pairs is empty.\r\n    EMPTY_METADATA_KEY: 'EmptyMetadataKey',\r\n    // Bad Request (400): The specified XML is not syntactically valid.\r\n    INVALID_XML_DOCUMENT: 'InvalidXmlDocument',\r\n    // Bad Request (400): The MD5 value specified in the request did not match the MD5 value calculated by the server.\r\n    MD5_MISMATCH: 'Md5Mismatch',\r\n    // Bad Request (400): The MD5 value specified in the request is invalid. The MD5 value must be 128 bits and Base64-encoded.\r\n    INVALID_MD5: 'InvalidMd5',\r\n    // Bad Request (400): One of the request inputs is out of range.\r\n    OUT_OF_RANGE_INPUT: 'OutOfRangeInput',\r\n    // Bad Request (400): The authentication information was not provided in the correct format. Verify the value of Authorization header.\r\n    INVALID_AUTHENTICATION_INFO: 'InvalidAuthenticationInfo',\r\n    // Bad Request (400): One of the request inputs is not valid.\r\n    INVALID_INPUT: 'InvalidInput',\r\n    // Bad Request (400): The specified metadata is invalid. It includes characters that are not permitted.\r\n    INVALID_METADATA: 'InvalidMetadata',\r\n    // Bad Request (400): The specifed resource name contains invalid characters.\r\n    INVALID_RESOURCE_NAME: 'InvalidResourceName',\r\n    // Bad Request (400): The size of the specified metadata exceeds the maximum size permitted.\r\n    METADATA_TOO_LARGE: 'MetadataTooLarge',\r\n    // Bad Request (400): Condition headers are not supported.\r\n    CONDITION_HEADER_NOT_SUPPORTED: 'ConditionHeadersNotSupported',\r\n    // Bad Request (400): Multiple condition headers are not supported.\r\n    MULTIPLE_CONDITION_HEADER_NOT_SUPPORTED: 'MultipleConditionHeadersNotSupported',\r\n    // Forbidden (403): Server failed to authenticate the request. Make sure the value of the Authorization header is formed correctly including the signature.\r\n    AUTHENTICATION_FAILED: 'AuthenticationFailed',\r\n    // Forbidden (403): Read-access geo-redundant replication is not enabled for the account.\r\n    // Forbidden (403): Write operations to the secondary location are not allowed.\r\n    // Forbidden (403): The account being accessed does not have sufficient permissions to execute this operation.\r\n    INSUFFICIENT_ACCOUNT_PERMISSIONS: 'InsufficientAccountPermissions',\r\n    // Not Found (404): The specified resource does not exist.\r\n    RESOURCE_NOT_FOUND: 'ResourceNotFound',\r\n    // Forbidden (403): The specified account is disabled.\r\n    ACCOUNT_IS_DISABLED: 'AccountIsDisabled',\r\n    // Method Not Allowed (405): The resource doesn't support the specified HTTP verb.\r\n    UNSUPPORTED_HTTP_VERB: 'UnsupportedHttpVerb',\r\n    // Conflict (409): The specified account already exists. \r\n    ACCOUNT_ALREADY_EXISTS: 'AccountAlreadyExists',\r\n    // Conflict (409): The specified account is in the process of being created.\r\n    ACCOUNT_BEING_CREATED: 'AccountBeingCreated',\r\n    // Conflict (409): The specified resource already exists.\r\n    RESOURCE_ALREADY_EXISTS: 'ResourceAlreadyExists',\r\n    // Conflict (409): The specified resource type does not match the type of the existing resource.\r\n    RESOURCE_TYPE_MISMATCH: 'ResourceTypeMismatch',\r\n    // Length Required (411): The Content-Length header was not specified.\r\n    MISSING_CONTENT_LENGTH_HEADER: 'MissingContentLengthHeader',\r\n    // Request Entity Too Large (413): The size of the request body exceeds the maximum size permitted.\r\n    REQUEST_BODY_TOO_LARGE: 'RequestBodyTooLarge',\r\n    // Requested Range Not Satisfiable (416): The range specified is invalid for the current size of the resource.\r\n    INVALID_RANGE: 'InvalidRange',\r\n    // Internal Server Error (500): The server encountered an internal error. Please retry the request.\r\n    INTERNAL_ERROR: 'InternalError',\r\n    // Internal Server Error (500): The operation could not be completed within the permitted time.\r\n    OPERATION_TIMED_OUT: 'OperationTimedOut',\r\n    // Service Unavailable (503): The server is currently unable to receive requests. Please retry your request. \r\n    SERVER_BUSY: 'ServerBusy',\r\n\r\n    // Legacy error code strings\r\n    UPDATE_CONDITION_NOT_SATISFIED: 'UpdateConditionNotSatisfied',\r\n    CONTAINER_NOT_FOUND: 'ContainerNotFound',\r\n    CONTAINER_ALREADY_EXISTS: 'ContainerAlreadyExists',\r\n    CONTAINER_DISABLED: 'ContainerDisabled',\r\n    CONTAINER_BEING_DELETED: 'ContainerBeingDeleted'\r\n  },\r\n\r\n  TableErrorCodeStrings: {\r\n    XMETHOD_NOT_USING_POST: 'XMethodNotUsingPost',\r\n    XMETHOD_INCORRECT_VALUE: 'XMethodIncorrectValue',\r\n    XMETHOD_INCORRECT_COUNT: 'XMethodIncorrectCount',\r\n    TABLE_HAS_NO_PROPERTIES: 'TableHasNoProperties',\r\n    DUPLICATE_PROPERTIES_SPECIFIED: 'DuplicatePropertiesSpecified',\r\n    TABLE_HAS_NO_SUCH_PROPERTY: 'TableHasNoSuchProperty',\r\n    DUPLICATE_KEY_PROPERTY_SPECIFIED: 'DuplicateKeyPropertySpecified',\r\n    TABLE_ALREADY_EXISTS: 'TableAlreadyExists',\r\n    TABLE_NOT_FOUND: 'TableNotFound',\r\n    ENTITY_NOT_FOUND: 'EntityNotFound',\r\n    ENTITY_ALREADY_EXISTS: 'EntityAlreadyExists',\r\n    PARTITION_KEY_NOT_SPECIFIED: 'PartitionKeyNotSpecified',\r\n    OPERATOR_INVALID: 'OperatorInvalid',\r\n    UPDATE_CONDITION_NOT_SATISFIED: 'UpdateConditionNotSatisfied',\r\n    PROPERTIES_NEED_VALUE: 'PropertiesNeedValue',\r\n    PARTITION_KEY_PROPERTY_CANNOT_BE_UPDATED: 'PartitionKeyPropertyCannotBeUpdated',\r\n    TOO_MANY_PROPERTIES: 'TooManyProperties',\r\n    ENTITY_TOO_LARGE: 'EntityTooLarge',\r\n    PROPERTY_VALUE_TOO_LARGE: 'PropertyValueTooLarge',\r\n    INVALID_VALUE_TYPE: 'InvalidValueType',\r\n    TABLE_BEING_DELETED: 'TableBeingDeleted',\r\n    TABLE_SERVER_OUT_OF_MEMORY: 'TableServerOutOfMemory',\r\n    PRIMARY_KEY_PROPERTY_IS_INVALID_TYPE: 'PrimaryKeyPropertyIsInvalidType',\r\n    PROPERTY_NAME_TOO_LONG: 'PropertyNameTooLong',\r\n    PROPERTY_NAME_INVALID: 'PropertyNameInvalid',\r\n    BATCH_OPERATION_NOT_SUPPORTED: 'BatchOperationNotSupported',\r\n    JSON_FORMAT_NOT_SUPPORTED: 'JsonFormatNotSupported',\r\n    METHOD_NOT_ALLOWED: 'MethodNotAllowed',\r\n    NOT_IMPLEMENTED: 'NotImplemented'\r\n  },\r\n\r\n  ConnectionStringKeys: {\r\n    USE_DEVELOPMENT_STORAGE_NAME: 'UseDevelopmentStorage',\r\n    DEVELOPMENT_STORAGE_PROXY_URI_NAME: 'DevelopmentStorageProxyUri',\r\n    DEFAULT_ENDPOINTS_PROTOCOL_NAME: 'DefaultEndpointsProtocol',\r\n    ACCOUNT_NAME_NAME: 'AccountName',\r\n    ACCOUNT_KEY_NAME: 'AccountKey',\r\n    BLOB_ENDPOINT_NAME: 'BlobEndpoint',\r\n    FILE_ENDPOINT_NAME: 'FileEndpoint',\r\n    QUEUE_ENDPOINT_NAME: 'QueueEndpoint',\r\n    TABLE_ENDPOINT_NAME: 'TableEndpoint',\r\n    SHARED_ACCESS_SIGNATURE_NAME: 'SharedAccessSignature',\r\n    ENDPOINT_SUFFIX_NAME: 'EndpointSuffix',\r\n    BLOB_BASE_DNS_NAME: 'blob.core.windows.net',\r\n    FILE_BASE_DNS_NAME: 'file.core.windows.net',\r\n    QUEUE_BASE_DNS_NAME: 'queue.core.windows.net',\r\n    TABLE_BASE_DNS_NAME: 'table.core.windows.net'\r\n  }\r\n};\r\n\r\nmodule.exports = Constants;\r\n","module.exports = require(\"events\");","// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar util = require('util');\n\nfunction FingerprintFormatError(fp, format) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, FingerprintFormatError);\n\tthis.name = 'FingerprintFormatError';\n\tthis.fingerprint = fp;\n\tthis.format = format;\n\tthis.message = 'Fingerprint format is not supported, or is invalid: ';\n\tif (fp !== undefined)\n\t\tthis.message += ' fingerprint = ' + fp;\n\tif (format !== undefined)\n\t\tthis.message += ' format = ' + format;\n}\nutil.inherits(FingerprintFormatError, Error);\n\nfunction InvalidAlgorithmError(alg) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, InvalidAlgorithmError);\n\tthis.name = 'InvalidAlgorithmError';\n\tthis.algorithm = alg;\n\tthis.message = 'Algorithm \"' + alg + '\" is not supported';\n}\nutil.inherits(InvalidAlgorithmError, Error);\n\nfunction KeyParseError(name, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, KeyParseError);\n\tthis.name = 'KeyParseError';\n\tthis.format = format;\n\tthis.keyName = name;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse ' + name + ' as a valid ' + format +\n\t    ' format key: ' + innerErr.message;\n}\nutil.inherits(KeyParseError, Error);\n\nfunction SignatureParseError(type, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, SignatureParseError);\n\tthis.name = 'SignatureParseError';\n\tthis.type = type;\n\tthis.format = format;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse the given data as a ' + type +\n\t    ' signature in ' + format + ' format: ' + innerErr.message;\n}\nutil.inherits(SignatureParseError, Error);\n\nfunction CertificateParseError(name, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, CertificateParseError);\n\tthis.name = 'CertificateParseError';\n\tthis.format = format;\n\tthis.certName = name;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse ' + name + ' as a valid ' + format +\n\t    ' format certificate: ' + innerErr.message;\n}\nutil.inherits(CertificateParseError, Error);\n\nfunction KeyEncryptedError(name, format) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, KeyEncryptedError);\n\tthis.name = 'KeyEncryptedError';\n\tthis.format = format;\n\tthis.keyName = name;\n\tthis.message = 'The ' + format + ' format key ' + name + ' is ' +\n\t    'encrypted (password-protected), and no passphrase was ' +\n\t    'provided in `options`';\n}\nutil.inherits(KeyEncryptedError, Error);\n\nmodule.exports = {\n\tFingerprintFormatError: FingerprintFormatError,\n\tInvalidAlgorithmError: InvalidAlgorithmError,\n\tKeyParseError: KeyParseError,\n\tSignatureParseError: SignatureParseError,\n\tKeyEncryptedError: KeyEncryptedError,\n\tCertificateParseError: CertificateParseError\n};\n","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Signature;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar utils = require('./utils');\nvar asn1 = require('asn1');\nvar SSHBuffer = require('./ssh-buffer');\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar SignatureParseError = errs.SignatureParseError;\n\nfunction Signature(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.parts, 'options.parts');\n\tassert.string(opts.type, 'options.type');\n\n\tvar partLookup = {};\n\tfor (var i = 0; i < opts.parts.length; ++i) {\n\t\tvar part = opts.parts[i];\n\t\tpartLookup[part.name] = part;\n\t}\n\n\tthis.type = opts.type;\n\tthis.hashAlgorithm = opts.hashAlgo;\n\tthis.curve = opts.curve;\n\tthis.parts = opts.parts;\n\tthis.part = partLookup;\n}\n\nSignature.prototype.toBuffer = function (format) {\n\tif (format === undefined)\n\t\tformat = 'asn1';\n\tassert.string(format, 'format');\n\n\tvar buf;\n\tvar stype = 'ssh-' + this.type;\n\n\tswitch (this.type) {\n\tcase 'rsa':\n\t\tswitch (this.hashAlgorithm) {\n\t\tcase 'sha256':\n\t\t\tstype = 'rsa-sha2-256';\n\t\t\tbreak;\n\t\tcase 'sha512':\n\t\t\tstype = 'rsa-sha2-512';\n\t\t\tbreak;\n\t\tcase 'sha1':\n\t\tcase undefined:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('SSH signature ' +\n\t\t\t    'format does not support hash ' +\n\t\t\t    'algorithm ' + this.hashAlgorithm));\n\t\t}\n\t\tif (format === 'ssh') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString(stype);\n\t\t\tbuf.writePart(this.part.sig);\n\t\t\treturn (buf.toBuffer());\n\t\t} else {\n\t\t\treturn (this.part.sig.data);\n\t\t}\n\t\tbreak;\n\n\tcase 'ed25519':\n\t\tif (format === 'ssh') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString(stype);\n\t\t\tbuf.writePart(this.part.sig);\n\t\t\treturn (buf.toBuffer());\n\t\t} else {\n\t\t\treturn (this.part.sig.data);\n\t\t}\n\t\tbreak;\n\n\tcase 'dsa':\n\tcase 'ecdsa':\n\t\tvar r, s;\n\t\tif (format === 'asn1') {\n\t\t\tvar der = new asn1.BerWriter();\n\t\t\tder.startSequence();\n\t\t\tr = utils.mpNormalize(this.part.r.data);\n\t\t\ts = utils.mpNormalize(this.part.s.data);\n\t\t\tder.writeBuffer(r, asn1.Ber.Integer);\n\t\t\tder.writeBuffer(s, asn1.Ber.Integer);\n\t\t\tder.endSequence();\n\t\t\treturn (der.buffer);\n\t\t} else if (format === 'ssh' && this.type === 'dsa') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString('ssh-dss');\n\t\t\tr = this.part.r.data;\n\t\t\tif (r.length > 20 && r[0] === 0x00)\n\t\t\t\tr = r.slice(1);\n\t\t\ts = this.part.s.data;\n\t\t\tif (s.length > 20 && s[0] === 0x00)\n\t\t\t\ts = s.slice(1);\n\t\t\tif ((this.hashAlgorithm &&\n\t\t\t    this.hashAlgorithm !== 'sha1') ||\n\t\t\t    r.length + s.length !== 40) {\n\t\t\t\tthrow (new Error('OpenSSH only supports ' +\n\t\t\t\t    'DSA signatures with SHA1 hash'));\n\t\t\t}\n\t\t\tbuf.writeBuffer(Buffer.concat([r, s]));\n\t\t\treturn (buf.toBuffer());\n\t\t} else if (format === 'ssh' && this.type === 'ecdsa') {\n\t\t\tvar inner = new SSHBuffer({});\n\t\t\tr = this.part.r.data;\n\t\t\tinner.writeBuffer(r);\n\t\t\tinner.writePart(this.part.s);\n\n\t\t\tbuf = new SSHBuffer({});\n\t\t\t/* XXX: find a more proper way to do this? */\n\t\t\tvar curve;\n\t\t\tif (r[0] === 0x00)\n\t\t\t\tr = r.slice(1);\n\t\t\tvar sz = r.length * 8;\n\t\t\tif (sz === 256)\n\t\t\t\tcurve = 'nistp256';\n\t\t\telse if (sz === 384)\n\t\t\t\tcurve = 'nistp384';\n\t\t\telse if (sz === 528)\n\t\t\t\tcurve = 'nistp521';\n\t\t\tbuf.writeString('ecdsa-sha2-' + curve);\n\t\t\tbuf.writeBuffer(inner.toBuffer());\n\t\t\treturn (buf.toBuffer());\n\t\t}\n\t\tthrow (new Error('Invalid signature format'));\n\tdefault:\n\t\tthrow (new Error('Invalid signature data'));\n\t}\n};\n\nSignature.prototype.toString = function (format) {\n\tassert.optionalString(format, 'format');\n\treturn (this.toBuffer(format).toString('base64'));\n};\n\nSignature.parse = function (data, type, format) {\n\tif (typeof (data) === 'string')\n\t\tdata = new Buffer(data, 'base64');\n\tassert.buffer(data, 'data');\n\tassert.string(format, 'format');\n\tassert.string(type, 'type');\n\n\tvar opts = {};\n\topts.type = type.toLowerCase();\n\topts.parts = [];\n\n\ttry {\n\t\tassert.ok(data.length > 0, 'signature must not be empty');\n\t\tswitch (opts.type) {\n\t\tcase 'rsa':\n\t\t\treturn (parseOneNum(data, type, format, opts));\n\t\tcase 'ed25519':\n\t\t\treturn (parseOneNum(data, type, format, opts));\n\n\t\tcase 'dsa':\n\t\tcase 'ecdsa':\n\t\t\tif (format === 'asn1')\n\t\t\t\treturn (parseDSAasn1(data, type, format, opts));\n\t\t\telse if (opts.type === 'dsa')\n\t\t\t\treturn (parseDSA(data, type, format, opts));\n\t\t\telse\n\t\t\t\treturn (parseECDSA(data, type, format, opts));\n\n\t\tdefault:\n\t\t\tthrow (new InvalidAlgorithmError(type));\n\t\t}\n\n\t} catch (e) {\n\t\tif (e instanceof InvalidAlgorithmError)\n\t\t\tthrow (e);\n\t\tthrow (new SignatureParseError(type, format, e));\n\t}\n};\n\nfunction parseOneNum(data, type, format, opts) {\n\tif (format === 'ssh') {\n\t\ttry {\n\t\t\tvar buf = new SSHBuffer({buffer: data});\n\t\t\tvar head = buf.readString();\n\t\t} catch (e) {\n\t\t\t/* fall through */\n\t\t}\n\t\tif (buf !== undefined) {\n\t\t\tvar msg = 'SSH signature does not match expected ' +\n\t\t\t    'type (expected ' + type + ', got ' + head + ')';\n\t\t\tswitch (head) {\n\t\t\tcase 'ssh-rsa':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha1';\n\t\t\t\tbreak;\n\t\t\tcase 'rsa-sha2-256':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha256';\n\t\t\t\tbreak;\n\t\t\tcase 'rsa-sha2-512':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha512';\n\t\t\t\tbreak;\n\t\t\tcase 'ssh-ed25519':\n\t\t\t\tassert.strictEqual(type, 'ed25519', msg);\n\t\t\t\topts.hashAlgo = 'sha512';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow (new Error('Unknown SSH signature ' +\n\t\t\t\t    'type: ' + head));\n\t\t\t}\n\t\t\tvar sig = buf.readPart();\n\t\t\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\t\t\tsig.name = 'sig';\n\t\t\topts.parts.push(sig);\n\t\t\treturn (new Signature(opts));\n\t\t}\n\t}\n\topts.parts.push({name: 'sig', data: data});\n\treturn (new Signature(opts));\n}\n\nfunction parseDSAasn1(data, type, format, opts) {\n\tvar der = new asn1.BerReader(data);\n\tder.readSequence();\n\tvar r = der.readString(asn1.Ber.Integer, true);\n\tvar s = der.readString(asn1.Ber.Integer, true);\n\n\topts.parts.push({name: 'r', data: utils.mpNormalize(r)});\n\topts.parts.push({name: 's', data: utils.mpNormalize(s)});\n\n\treturn (new Signature(opts));\n}\n\nfunction parseDSA(data, type, format, opts) {\n\tif (data.length != 40) {\n\t\tvar buf = new SSHBuffer({buffer: data});\n\t\tvar d = buf.readBuffer();\n\t\tif (d.toString('ascii') === 'ssh-dss')\n\t\t\td = buf.readBuffer();\n\t\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\t\tassert.strictEqual(d.length, 40, 'invalid inner length');\n\t\tdata = d;\n\t}\n\topts.parts.push({name: 'r', data: data.slice(0, 20)});\n\topts.parts.push({name: 's', data: data.slice(20, 40)});\n\treturn (new Signature(opts));\n}\n\nfunction parseECDSA(data, type, format, opts) {\n\tvar buf = new SSHBuffer({buffer: data});\n\n\tvar r, s;\n\tvar inner = buf.readBuffer();\n\tvar stype = inner.toString('ascii');\n\tif (stype.slice(0, 6) === 'ecdsa-') {\n\t\tvar parts = stype.split('-');\n\t\tassert.strictEqual(parts[0], 'ecdsa');\n\t\tassert.strictEqual(parts[1], 'sha2');\n\t\topts.curve = parts[2];\n\t\tswitch (opts.curve) {\n\t\tcase 'nistp256':\n\t\t\topts.hashAlgo = 'sha256';\n\t\t\tbreak;\n\t\tcase 'nistp384':\n\t\t\topts.hashAlgo = 'sha384';\n\t\t\tbreak;\n\t\tcase 'nistp521':\n\t\t\topts.hashAlgo = 'sha512';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('Unsupported ECDSA curve: ' +\n\t\t\t    opts.curve));\n\t\t}\n\t\tinner = buf.readBuffer();\n\t\tassert.ok(buf.atEnd(), 'extra trailing bytes on outer');\n\t\tbuf = new SSHBuffer({buffer: inner});\n\t\tr = buf.readPart();\n\t} else {\n\t\tr = {data: inner};\n\t}\n\n\ts = buf.readPart();\n\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\n\tr.name = 'r';\n\ts.name = 's';\n\n\topts.parts.push(r);\n\topts.parts.push(s);\n\treturn (new Signature(opts));\n}\n\nSignature.isSignature = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Signature, ver));\n};\n\n/*\n * API versions for Signature:\n * [1,0] -- initial ver\n * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent\n *          hashAlgorithm property\n * [2,1] -- first tagged version\n */\nSignature.prototype._sshpkApiVersion = [2, 1];\n\nSignature._oldVersionDetect = function (obj) {\n\tassert.func(obj.toBuffer);\n\tif (obj.hasOwnProperty('hashAlgorithm'))\n\t\treturn ([2, 0]);\n\treturn ([1, 0]);\n};\n","(function(nacl) {\n'use strict';\n\n// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n//\n// Implementation derived from TweetNaCl version 20140427.\n// See for details: http://tweetnacl.cr.yp.to/\n\nvar gf = function(init) {\n  var i, r = new Float64Array(16);\n  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\n  return r;\n};\n\n//  Pluggable, initialized in high-level API below.\nvar randombytes = function(/* x, n */) { throw new Error('no PRNG'); };\n\nvar _0 = new Uint8Array(16);\nvar _9 = new Uint8Array(32); _9[0] = 9;\n\nvar gf0 = gf(),\n    gf1 = gf([1]),\n    _121665 = gf([0xdb41, 1]),\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\n    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),\n    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),\n    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction ts64(x, i, h, l) {\n  x[i]   = (h >> 24) & 0xff;\n  x[i+1] = (h >> 16) & 0xff;\n  x[i+2] = (h >>  8) & 0xff;\n  x[i+3] = h & 0xff;\n  x[i+4] = (l >> 24)  & 0xff;\n  x[i+5] = (l >> 16)  & 0xff;\n  x[i+6] = (l >>  8)  & 0xff;\n  x[i+7] = l & 0xff;\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i,d = 0;\n  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction crypto_verify_16(x, xi, y, yi) {\n  return vn(x,xi,y,yi,16);\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x,xi,y,yi,32);\n}\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n   x0 =  x0 +  j0 | 0;\n   x1 =  x1 +  j1 | 0;\n   x2 =  x2 +  j2 | 0;\n   x3 =  x3 +  j3 | 0;\n   x4 =  x4 +  j4 | 0;\n   x5 =  x5 +  j5 | 0;\n   x6 =  x6 +  j6 | 0;\n   x7 =  x7 +  j7 | 0;\n   x8 =  x8 +  j8 | 0;\n   x9 =  x9 +  j9 | 0;\n  x10 = x10 + j10 | 0;\n  x11 = x11 + j11 | 0;\n  x12 = x12 + j12 | 0;\n  x13 = x13 + j13 | 0;\n  x14 = x14 + j14 | 0;\n  x15 = x15 + j15 | 0;\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x1 >>>  0 & 0xff;\n  o[ 5] = x1 >>>  8 & 0xff;\n  o[ 6] = x1 >>> 16 & 0xff;\n  o[ 7] = x1 >>> 24 & 0xff;\n\n  o[ 8] = x2 >>>  0 & 0xff;\n  o[ 9] = x2 >>>  8 & 0xff;\n  o[10] = x2 >>> 16 & 0xff;\n  o[11] = x2 >>> 24 & 0xff;\n\n  o[12] = x3 >>>  0 & 0xff;\n  o[13] = x3 >>>  8 & 0xff;\n  o[14] = x3 >>> 16 & 0xff;\n  o[15] = x3 >>> 24 & 0xff;\n\n  o[16] = x4 >>>  0 & 0xff;\n  o[17] = x4 >>>  8 & 0xff;\n  o[18] = x4 >>> 16 & 0xff;\n  o[19] = x4 >>> 24 & 0xff;\n\n  o[20] = x5 >>>  0 & 0xff;\n  o[21] = x5 >>>  8 & 0xff;\n  o[22] = x5 >>> 16 & 0xff;\n  o[23] = x5 >>> 24 & 0xff;\n\n  o[24] = x6 >>>  0 & 0xff;\n  o[25] = x6 >>>  8 & 0xff;\n  o[26] = x6 >>> 16 & 0xff;\n  o[27] = x6 >>> 24 & 0xff;\n\n  o[28] = x7 >>>  0 & 0xff;\n  o[29] = x7 >>>  8 & 0xff;\n  o[30] = x7 >>> 16 & 0xff;\n  o[31] = x7 >>> 24 & 0xff;\n\n  o[32] = x8 >>>  0 & 0xff;\n  o[33] = x8 >>>  8 & 0xff;\n  o[34] = x8 >>> 16 & 0xff;\n  o[35] = x8 >>> 24 & 0xff;\n\n  o[36] = x9 >>>  0 & 0xff;\n  o[37] = x9 >>>  8 & 0xff;\n  o[38] = x9 >>> 16 & 0xff;\n  o[39] = x9 >>> 24 & 0xff;\n\n  o[40] = x10 >>>  0 & 0xff;\n  o[41] = x10 >>>  8 & 0xff;\n  o[42] = x10 >>> 16 & 0xff;\n  o[43] = x10 >>> 24 & 0xff;\n\n  o[44] = x11 >>>  0 & 0xff;\n  o[45] = x11 >>>  8 & 0xff;\n  o[46] = x11 >>> 16 & 0xff;\n  o[47] = x11 >>> 24 & 0xff;\n\n  o[48] = x12 >>>  0 & 0xff;\n  o[49] = x12 >>>  8 & 0xff;\n  o[50] = x12 >>> 16 & 0xff;\n  o[51] = x12 >>> 24 & 0xff;\n\n  o[52] = x13 >>>  0 & 0xff;\n  o[53] = x13 >>>  8 & 0xff;\n  o[54] = x13 >>> 16 & 0xff;\n  o[55] = x13 >>> 24 & 0xff;\n\n  o[56] = x14 >>>  0 & 0xff;\n  o[57] = x14 >>>  8 & 0xff;\n  o[58] = x14 >>> 16 & 0xff;\n  o[59] = x14 >>> 24 & 0xff;\n\n  o[60] = x15 >>>  0 & 0xff;\n  o[61] = x15 >>>  8 & 0xff;\n  o[62] = x15 >>> 16 & 0xff;\n  o[63] = x15 >>> 24 & 0xff;\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x5 >>>  0 & 0xff;\n  o[ 5] = x5 >>>  8 & 0xff;\n  o[ 6] = x5 >>> 16 & 0xff;\n  o[ 7] = x5 >>> 24 & 0xff;\n\n  o[ 8] = x10 >>>  0 & 0xff;\n  o[ 9] = x10 >>>  8 & 0xff;\n  o[10] = x10 >>> 16 & 0xff;\n  o[11] = x10 >>> 24 & 0xff;\n\n  o[12] = x15 >>>  0 & 0xff;\n  o[13] = x15 >>>  8 & 0xff;\n  o[14] = x15 >>> 16 & 0xff;\n  o[15] = x15 >>> 24 & 0xff;\n\n  o[16] = x6 >>>  0 & 0xff;\n  o[17] = x6 >>>  8 & 0xff;\n  o[18] = x6 >>> 16 & 0xff;\n  o[19] = x6 >>> 24 & 0xff;\n\n  o[20] = x7 >>>  0 & 0xff;\n  o[21] = x7 >>>  8 & 0xff;\n  o[22] = x7 >>> 16 & 0xff;\n  o[23] = x7 >>> 24 & 0xff;\n\n  o[24] = x8 >>>  0 & 0xff;\n  o[25] = x8 >>>  8 & 0xff;\n  o[26] = x8 >>> 16 & 0xff;\n  o[27] = x8 >>> 24 & 0xff;\n\n  o[28] = x9 >>>  0 & 0xff;\n  o[29] = x9 >>>  8 & 0xff;\n  o[30] = x9 >>> 16 & 0xff;\n  o[31] = x9 >>> 24 & 0xff;\n}\n\nfunction crypto_core_salsa20(out,inp,k,c) {\n  core_salsa20(out,inp,k,c);\n}\n\nfunction crypto_core_hsalsa20(out,inp,k,c) {\n  core_hsalsa20(out,inp,k,c);\n}\n\nvar sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);\n            // \"expand 32-byte k\"\n\nfunction crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n    mpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream_salsa20(c,cpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream(c,cpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20(c,cpos,d,sn,s);\n}\n\nfunction crypto_stream_xor(c,cpos,m,mpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);\n}\n\n/*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/\n\nvar poly1305 = function(key) {\n  this.buffer = new Uint8Array(16);\n  this.r = new Uint16Array(10);\n  this.h = new Uint16Array(10);\n  this.pad = new Uint16Array(8);\n  this.leftover = 0;\n  this.fin = 0;\n\n  var t0, t1, t2, t3, t4, t5, t6, t7;\n\n  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;\n  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;\n  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;\n  this.r[5] = ((t4 >>>  1)) & 0x1ffe;\n  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;\n  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n  this.r[9] = ((t7 >>>  5)) & 0x007f;\n\n  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n};\n\npoly1305.prototype.blocks = function(m, mpos, bytes) {\n  var hibit = this.fin ? 0 : (1 << 11);\n  var t0, t1, t2, t3, t4, t5, t6, t7, c;\n  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n\n  var h0 = this.h[0],\n      h1 = this.h[1],\n      h2 = this.h[2],\n      h3 = this.h[3],\n      h4 = this.h[4],\n      h5 = this.h[5],\n      h6 = this.h[6],\n      h7 = this.h[7],\n      h8 = this.h[8],\n      h9 = this.h[9];\n\n  var r0 = this.r[0],\n      r1 = this.r[1],\n      r2 = this.r[2],\n      r3 = this.r[3],\n      r4 = this.r[4],\n      r5 = this.r[5],\n      r6 = this.r[6],\n      r7 = this.r[7],\n      r8 = this.r[8],\n      r9 = this.r[9];\n\n  while (bytes >= 16) {\n    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;\n    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;\n    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;\n    h5 += ((t4 >>>  1)) & 0x1fff;\n    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;\n    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n    h9 += ((t7 >>> 5)) | hibit;\n\n    c = 0;\n\n    d0 = c;\n    d0 += h0 * r0;\n    d0 += h1 * (5 * r9);\n    d0 += h2 * (5 * r8);\n    d0 += h3 * (5 * r7);\n    d0 += h4 * (5 * r6);\n    c = (d0 >>> 13); d0 &= 0x1fff;\n    d0 += h5 * (5 * r5);\n    d0 += h6 * (5 * r4);\n    d0 += h7 * (5 * r3);\n    d0 += h8 * (5 * r2);\n    d0 += h9 * (5 * r1);\n    c += (d0 >>> 13); d0 &= 0x1fff;\n\n    d1 = c;\n    d1 += h0 * r1;\n    d1 += h1 * r0;\n    d1 += h2 * (5 * r9);\n    d1 += h3 * (5 * r8);\n    d1 += h4 * (5 * r7);\n    c = (d1 >>> 13); d1 &= 0x1fff;\n    d1 += h5 * (5 * r6);\n    d1 += h6 * (5 * r5);\n    d1 += h7 * (5 * r4);\n    d1 += h8 * (5 * r3);\n    d1 += h9 * (5 * r2);\n    c += (d1 >>> 13); d1 &= 0x1fff;\n\n    d2 = c;\n    d2 += h0 * r2;\n    d2 += h1 * r1;\n    d2 += h2 * r0;\n    d2 += h3 * (5 * r9);\n    d2 += h4 * (5 * r8);\n    c = (d2 >>> 13); d2 &= 0x1fff;\n    d2 += h5 * (5 * r7);\n    d2 += h6 * (5 * r6);\n    d2 += h7 * (5 * r5);\n    d2 += h8 * (5 * r4);\n    d2 += h9 * (5 * r3);\n    c += (d2 >>> 13); d2 &= 0x1fff;\n\n    d3 = c;\n    d3 += h0 * r3;\n    d3 += h1 * r2;\n    d3 += h2 * r1;\n    d3 += h3 * r0;\n    d3 += h4 * (5 * r9);\n    c = (d3 >>> 13); d3 &= 0x1fff;\n    d3 += h5 * (5 * r8);\n    d3 += h6 * (5 * r7);\n    d3 += h7 * (5 * r6);\n    d3 += h8 * (5 * r5);\n    d3 += h9 * (5 * r4);\n    c += (d3 >>> 13); d3 &= 0x1fff;\n\n    d4 = c;\n    d4 += h0 * r4;\n    d4 += h1 * r3;\n    d4 += h2 * r2;\n    d4 += h3 * r1;\n    d4 += h4 * r0;\n    c = (d4 >>> 13); d4 &= 0x1fff;\n    d4 += h5 * (5 * r9);\n    d4 += h6 * (5 * r8);\n    d4 += h7 * (5 * r7);\n    d4 += h8 * (5 * r6);\n    d4 += h9 * (5 * r5);\n    c += (d4 >>> 13); d4 &= 0x1fff;\n\n    d5 = c;\n    d5 += h0 * r5;\n    d5 += h1 * r4;\n    d5 += h2 * r3;\n    d5 += h3 * r2;\n    d5 += h4 * r1;\n    c = (d5 >>> 13); d5 &= 0x1fff;\n    d5 += h5 * r0;\n    d5 += h6 * (5 * r9);\n    d5 += h7 * (5 * r8);\n    d5 += h8 * (5 * r7);\n    d5 += h9 * (5 * r6);\n    c += (d5 >>> 13); d5 &= 0x1fff;\n\n    d6 = c;\n    d6 += h0 * r6;\n    d6 += h1 * r5;\n    d6 += h2 * r4;\n    d6 += h3 * r3;\n    d6 += h4 * r2;\n    c = (d6 >>> 13); d6 &= 0x1fff;\n    d6 += h5 * r1;\n    d6 += h6 * r0;\n    d6 += h7 * (5 * r9);\n    d6 += h8 * (5 * r8);\n    d6 += h9 * (5 * r7);\n    c += (d6 >>> 13); d6 &= 0x1fff;\n\n    d7 = c;\n    d7 += h0 * r7;\n    d7 += h1 * r6;\n    d7 += h2 * r5;\n    d7 += h3 * r4;\n    d7 += h4 * r3;\n    c = (d7 >>> 13); d7 &= 0x1fff;\n    d7 += h5 * r2;\n    d7 += h6 * r1;\n    d7 += h7 * r0;\n    d7 += h8 * (5 * r9);\n    d7 += h9 * (5 * r8);\n    c += (d7 >>> 13); d7 &= 0x1fff;\n\n    d8 = c;\n    d8 += h0 * r8;\n    d8 += h1 * r7;\n    d8 += h2 * r6;\n    d8 += h3 * r5;\n    d8 += h4 * r4;\n    c = (d8 >>> 13); d8 &= 0x1fff;\n    d8 += h5 * r3;\n    d8 += h6 * r2;\n    d8 += h7 * r1;\n    d8 += h8 * r0;\n    d8 += h9 * (5 * r9);\n    c += (d8 >>> 13); d8 &= 0x1fff;\n\n    d9 = c;\n    d9 += h0 * r9;\n    d9 += h1 * r8;\n    d9 += h2 * r7;\n    d9 += h3 * r6;\n    d9 += h4 * r5;\n    c = (d9 >>> 13); d9 &= 0x1fff;\n    d9 += h5 * r4;\n    d9 += h6 * r3;\n    d9 += h7 * r2;\n    d9 += h8 * r1;\n    d9 += h9 * r0;\n    c += (d9 >>> 13); d9 &= 0x1fff;\n\n    c = (((c << 2) + c)) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = (c >>> 13);\n    d1 += c;\n\n    h0 = d0;\n    h1 = d1;\n    h2 = d2;\n    h3 = d3;\n    h4 = d4;\n    h5 = d5;\n    h6 = d6;\n    h7 = d7;\n    h8 = d8;\n    h9 = d9;\n\n    mpos += 16;\n    bytes -= 16;\n  }\n  this.h[0] = h0;\n  this.h[1] = h1;\n  this.h[2] = h2;\n  this.h[3] = h3;\n  this.h[4] = h4;\n  this.h[5] = h5;\n  this.h[6] = h6;\n  this.h[7] = h7;\n  this.h[8] = h8;\n  this.h[9] = h9;\n};\n\npoly1305.prototype.finish = function(mac, macpos) {\n  var g = new Uint16Array(10);\n  var c, mask, f, i;\n\n  if (this.leftover) {\n    i = this.leftover;\n    this.buffer[i++] = 1;\n    for (; i < 16; i++) this.buffer[i] = 0;\n    this.fin = 1;\n    this.blocks(this.buffer, 0, 16);\n  }\n\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  for (i = 2; i < 10; i++) {\n    this.h[i] += c;\n    c = this.h[i] >>> 13;\n    this.h[i] &= 0x1fff;\n  }\n  this.h[0] += (c * 5);\n  c = this.h[0] >>> 13;\n  this.h[0] &= 0x1fff;\n  this.h[1] += c;\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  this.h[2] += c;\n\n  g[0] = this.h[0] + 5;\n  c = g[0] >>> 13;\n  g[0] &= 0x1fff;\n  for (i = 1; i < 10; i++) {\n    g[i] = this.h[i] + c;\n    c = g[i] >>> 13;\n    g[i] &= 0x1fff;\n  }\n  g[9] -= (1 << 13);\n\n  mask = (c ^ 1) - 1;\n  for (i = 0; i < 10; i++) g[i] &= mask;\n  mask = ~mask;\n  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];\n\n  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;\n  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;\n  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;\n  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;\n  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;\n  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;\n  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;\n  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;\n\n  f = this.h[0] + this.pad[0];\n  this.h[0] = f & 0xffff;\n  for (i = 1; i < 8; i++) {\n    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;\n    this.h[i] = f & 0xffff;\n  }\n\n  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;\n  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;\n  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;\n  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;\n  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;\n  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;\n  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;\n  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;\n  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;\n  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;\n  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;\n  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;\n  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;\n  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;\n  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;\n  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;\n};\n\npoly1305.prototype.update = function(m, mpos, bytes) {\n  var i, want;\n\n  if (this.leftover) {\n    want = (16 - this.leftover);\n    if (want > bytes)\n      want = bytes;\n    for (i = 0; i < want; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    bytes -= want;\n    mpos += want;\n    this.leftover += want;\n    if (this.leftover < 16)\n      return;\n    this.blocks(this.buffer, 0, 16);\n    this.leftover = 0;\n  }\n\n  if (bytes >= 16) {\n    want = bytes - (bytes % 16);\n    this.blocks(m, mpos, want);\n    mpos += want;\n    bytes -= want;\n  }\n\n  if (bytes) {\n    for (i = 0; i < bytes; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    this.leftover += bytes;\n  }\n};\n\nfunction crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n  var s = new poly1305(k);\n  s.update(m, mpos, n);\n  s.finish(out, outpos);\n  return 0;\n}\n\nfunction crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n  var x = new Uint8Array(16);\n  crypto_onetimeauth(x,0,m,mpos,n,k);\n  return crypto_verify_16(h,hpos,x,0);\n}\n\nfunction crypto_secretbox(c,m,d,n,k) {\n  var i;\n  if (d < 32) return -1;\n  crypto_stream_xor(c,0,m,0,d,n,k);\n  crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n  for (i = 0; i < 16; i++) c[i] = 0;\n  return 0;\n}\n\nfunction crypto_secretbox_open(m,c,d,n,k) {\n  var i;\n  var x = new Uint8Array(32);\n  if (d < 32) return -1;\n  crypto_stream(x,0,32,n,k);\n  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;\n  crypto_stream_xor(m,0,c,0,d,n,k);\n  for (i = 0; i < 32; i++) m[i] = 0;\n  return 0;\n}\n\nfunction set25519(r, a) {\n  var i;\n  for (i = 0; i < 16; i++) r[i] = a[i]|0;\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for (i = 0; i < 16; i++) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c-1 + 37 * (c-1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b-1);\n  for (var i = 0; i < 16; i++) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for (i = 0; i < 16; i++) t[i] = n[i];\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for (j = 0; j < 2; j++) {\n    m[0] = t[0] - 0xffed;\n    for (i = 1; i < 15; i++) {\n      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\n    b = (m[15]>>16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1-b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2*i] = t[i] & 0xff;\n    o[2*i+1] = t[i]>>8;\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction par25519(a) {\n  var d = new Uint8Array(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\n  o[15] &= 0x7fff;\n}\n\nfunction A(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];\n}\n\nfunction Z(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 253; a >= 0; a--) {\n    S(c, c);\n    if(a !== 2 && a !== 4) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 250; a >= 0; a--) {\n      S(c, c);\n      if(a !== 1) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction crypto_scalarmult(q, n, p) {\n  var z = new Uint8Array(32);\n  var x = new Float64Array(80), r, i;\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf();\n  for (i = 0; i < 31; i++) z[i] = n[i];\n  z[31]=(n[31]&127)|64;\n  z[0]&=248;\n  unpack25519(x,p);\n  for (i = 0; i < 16; i++) {\n    b[i]=x[i];\n    d[i]=a[i]=c[i]=0;\n  }\n  a[0]=d[0]=1;\n  for (i=254; i>=0; --i) {\n    r=(z[i>>>3]>>>(i&7))&1;\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n    A(e,a,c);\n    Z(a,a,c);\n    A(c,b,d);\n    Z(b,b,d);\n    S(d,e);\n    S(f,a);\n    M(a,c,a);\n    M(c,b,e);\n    A(e,a,c);\n    Z(a,a,c);\n    S(b,a);\n    Z(c,d,f);\n    M(a,c,_121665);\n    A(a,a,d);\n    M(c,c,a);\n    M(a,d,f);\n    M(d,b,x);\n    S(b,e);\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n  }\n  for (i = 0; i < 16; i++) {\n    x[i+16]=a[i];\n    x[i+32]=c[i];\n    x[i+48]=b[i];\n    x[i+64]=d[i];\n  }\n  var x32 = x.subarray(32);\n  var x16 = x.subarray(16);\n  inv25519(x32,x32);\n  M(x16,x16,x32);\n  pack25519(q,x16);\n  return 0;\n}\n\nfunction crypto_scalarmult_base(q, n) {\n  return crypto_scalarmult(q, n, _9);\n}\n\nfunction crypto_box_keypair(y, x) {\n  randombytes(x, 32);\n  return crypto_scalarmult_base(y, x);\n}\n\nfunction crypto_box_beforenm(k, y, x) {\n  var s = new Uint8Array(32);\n  crypto_scalarmult(s, x, y);\n  return crypto_core_hsalsa20(k, _0, s, sigma);\n}\n\nvar crypto_box_afternm = crypto_secretbox;\nvar crypto_box_open_afternm = crypto_secretbox_open;\n\nfunction crypto_box(c, m, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_afternm(c, m, d, n, k);\n}\n\nfunction crypto_box_open(m, c, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_open_afternm(m, c, d, n, k);\n}\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction crypto_hashblocks_hl(hh, hl, m, n) {\n  var wh = new Int32Array(16), wl = new Int32Array(16),\n      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,\n      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,\n      th, tl, i, j, h, l, a, b, c, d;\n\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n\n  var pos = 0;\n  while (n >= 128) {\n    for (i = 0; i < 16; i++) {\n      j = 8 * i + pos;\n      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];\n      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];\n    }\n    for (i = 0; i < 80; i++) {\n      bh0 = ah0;\n      bh1 = ah1;\n      bh2 = ah2;\n      bh3 = ah3;\n      bh4 = ah4;\n      bh5 = ah5;\n      bh6 = ah6;\n      bh7 = ah7;\n\n      bl0 = al0;\n      bl1 = al1;\n      bl2 = al2;\n      bl3 = al3;\n      bl4 = al4;\n      bl5 = al5;\n      bl6 = al6;\n      bl7 = al7;\n\n      // add\n      h = ah7;\n      l = al7;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma1\n      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));\n      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Ch\n      h = (ah4 & ah5) ^ (~ah4 & ah6);\n      l = (al4 & al5) ^ (~al4 & al6);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // K\n      h = K[i*2];\n      l = K[i*2+1];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // w\n      h = wh[i%16];\n      l = wl[i%16];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16;\n\n      // add\n      h = th;\n      l = tl;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma0\n      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));\n      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Maj\n      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh7 = (c & 0xffff) | (d << 16);\n      bl7 = (a & 0xffff) | (b << 16);\n\n      // add\n      h = bh3;\n      l = bl3;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      h = th;\n      l = tl;\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh3 = (c & 0xffff) | (d << 16);\n      bl3 = (a & 0xffff) | (b << 16);\n\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i%16 === 15) {\n        for (j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n\n          a = l & 0xffff; b = l >>> 16;\n          c = h & 0xffff; d = h >>> 16;\n\n          h = wh[(j+9)%16];\n          l = wl[(j+9)%16];\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma0\n          th = wh[(j+1)%16];\n          tl = wl[(j+1)%16];\n          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);\n          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma1\n          th = wh[(j+14)%16];\n          tl = wl[(j+14)%16];\n          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);\n          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n\n          wh[j] = (c & 0xffff) | (d << 16);\n          wl[j] = (a & 0xffff) | (b << 16);\n        }\n      }\n    }\n\n    // add\n    h = ah0;\n    l = al0;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[0];\n    l = hl[0];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[0] = ah0 = (c & 0xffff) | (d << 16);\n    hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n    h = ah1;\n    l = al1;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[1];\n    l = hl[1];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[1] = ah1 = (c & 0xffff) | (d << 16);\n    hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n    h = ah2;\n    l = al2;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[2];\n    l = hl[2];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[2] = ah2 = (c & 0xffff) | (d << 16);\n    hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n    h = ah3;\n    l = al3;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[3];\n    l = hl[3];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[3] = ah3 = (c & 0xffff) | (d << 16);\n    hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n    h = ah4;\n    l = al4;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[4];\n    l = hl[4];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[4] = ah4 = (c & 0xffff) | (d << 16);\n    hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n    h = ah5;\n    l = al5;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[5];\n    l = hl[5];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[5] = ah5 = (c & 0xffff) | (d << 16);\n    hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n    h = ah6;\n    l = al6;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[6];\n    l = hl[6];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[6] = ah6 = (c & 0xffff) | (d << 16);\n    hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n    h = ah7;\n    l = al7;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[7];\n    l = hl[7];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[7] = ah7 = (c & 0xffff) | (d << 16);\n    hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n    pos += 128;\n    n -= 128;\n  }\n\n  return n;\n}\n\nfunction crypto_hash(out, m, n) {\n  var hh = new Int32Array(8),\n      hl = new Int32Array(8),\n      x = new Uint8Array(256),\n      i, b = n;\n\n  hh[0] = 0x6a09e667;\n  hh[1] = 0xbb67ae85;\n  hh[2] = 0x3c6ef372;\n  hh[3] = 0xa54ff53a;\n  hh[4] = 0x510e527f;\n  hh[5] = 0x9b05688c;\n  hh[6] = 0x1f83d9ab;\n  hh[7] = 0x5be0cd19;\n\n  hl[0] = 0xf3bcc908;\n  hl[1] = 0x84caa73b;\n  hl[2] = 0xfe94f82b;\n  hl[3] = 0x5f1d36f1;\n  hl[4] = 0xade682d1;\n  hl[5] = 0x2b3e6c1f;\n  hl[6] = 0xfb41bd6b;\n  hl[7] = 0x137e2179;\n\n  crypto_hashblocks_hl(hh, hl, m, n);\n  n %= 128;\n\n  for (i = 0; i < n; i++) x[i] = m[b-n+i];\n  x[n] = 128;\n\n  n = 256-128*(n<112?1:0);\n  x[n-9] = 0;\n  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);\n  crypto_hashblocks_hl(hh, hl, x, n);\n\n  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);\n\n  return 0;\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  var i;\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i/8)|0] >> (i&7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction crypto_sign_keypair(pk, sk, seeded) {\n  var d = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  if (!seeded) randombytes(sk, 32);\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for (i = 0; i < 32; i++) sk[i+32] = pk[i];\n  return 0;\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for (i = 63; i >= 32; --i) {\n    carry = 0;\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = (x[j] + 128) >> 8;\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j];\n  for (i = 0; i < 32; i++) {\n    x[i+1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64), i;\n  for (i = 0; i < 64; i++) x[i] = r[i];\n  for (i = 0; i < 64; i++) r[i] = 0;\n  modL(r, x);\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for (i = 0; i < n; i++) sm[64 + i] = m[i];\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];\n\n  crypto_hash(r, sm.subarray(32), n+32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i];\n  crypto_hash(h, sm, n + 64);\n  reduce(h);\n\n  for (i = 0; i < 64; i++) x[i] = 0;\n  for (i = 0; i < 32; i++) x[i] = r[i];\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i+j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) M(r[0], r[0], I);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) return -1;\n\n  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i, mlen;\n  var t = new Uint8Array(32), h = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  mlen = -1;\n  if (n < 64) return -1;\n\n  if (unpackneg(q, pk)) return -1;\n\n  for (i = 0; i < n; i++) m[i] = sm[i];\n  for (i = 0; i < 32; i++) m[i+32] = pk[i];\n  crypto_hash(h, m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if (crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0;\n    return -1;\n  }\n\n  for (i = 0; i < n; i++) m[i] = sm[i + 64];\n  mlen = n;\n  return mlen;\n}\n\nvar crypto_secretbox_KEYBYTES = 32,\n    crypto_secretbox_NONCEBYTES = 24,\n    crypto_secretbox_ZEROBYTES = 32,\n    crypto_secretbox_BOXZEROBYTES = 16,\n    crypto_scalarmult_BYTES = 32,\n    crypto_scalarmult_SCALARBYTES = 32,\n    crypto_box_PUBLICKEYBYTES = 32,\n    crypto_box_SECRETKEYBYTES = 32,\n    crypto_box_BEFORENMBYTES = 32,\n    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,\n    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,\n    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,\n    crypto_sign_BYTES = 64,\n    crypto_sign_PUBLICKEYBYTES = 32,\n    crypto_sign_SECRETKEYBYTES = 64,\n    crypto_sign_SEEDBYTES = 32,\n    crypto_hash_BYTES = 64;\n\nnacl.lowlevel = {\n  crypto_core_hsalsa20: crypto_core_hsalsa20,\n  crypto_stream_xor: crypto_stream_xor,\n  crypto_stream: crypto_stream,\n  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n  crypto_stream_salsa20: crypto_stream_salsa20,\n  crypto_onetimeauth: crypto_onetimeauth,\n  crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n  crypto_verify_16: crypto_verify_16,\n  crypto_verify_32: crypto_verify_32,\n  crypto_secretbox: crypto_secretbox,\n  crypto_secretbox_open: crypto_secretbox_open,\n  crypto_scalarmult: crypto_scalarmult,\n  crypto_scalarmult_base: crypto_scalarmult_base,\n  crypto_box_beforenm: crypto_box_beforenm,\n  crypto_box_afternm: crypto_box_afternm,\n  crypto_box: crypto_box,\n  crypto_box_open: crypto_box_open,\n  crypto_box_keypair: crypto_box_keypair,\n  crypto_hash: crypto_hash,\n  crypto_sign: crypto_sign,\n  crypto_sign_keypair: crypto_sign_keypair,\n  crypto_sign_open: crypto_sign_open,\n\n  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n  crypto_sign_BYTES: crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n  crypto_hash_BYTES: crypto_hash_BYTES\n};\n\n/* High-level API */\n\nfunction checkLengths(k, n) {\n  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');\n  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');\n}\n\nfunction checkBoxLengths(pk, sk) {\n  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');\n  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');\n}\n\nfunction checkArrayTypes() {\n  var t, i;\n  for (i = 0; i < arguments.length; i++) {\n     if ((t = Object.prototype.toString.call(arguments[i])) !== '[object Uint8Array]')\n       throw new TypeError('unexpected type ' + t + ', use Uint8Array');\n  }\n}\n\nfunction cleanup(arr) {\n  for (var i = 0; i < arr.length; i++) arr[i] = 0;\n}\n\n// TODO: Completely remove this in v0.15.\nif (!nacl.util) {\n  nacl.util = {};\n  nacl.util.decodeUTF8 = nacl.util.encodeUTF8 = nacl.util.encodeBase64 = nacl.util.decodeBase64 = function() {\n    throw new Error('nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js');\n  };\n}\n\nnacl.randomBytes = function(n) {\n  var b = new Uint8Array(n);\n  randombytes(b, n);\n  return b;\n};\n\nnacl.secretbox = function(msg, nonce, key) {\n  checkArrayTypes(msg, nonce, key);\n  checkLengths(key, nonce);\n  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n  var c = new Uint8Array(m.length);\n  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];\n  crypto_secretbox(c, m, m.length, nonce, key);\n  return c.subarray(crypto_secretbox_BOXZEROBYTES);\n};\n\nnacl.secretbox.open = function(box, nonce, key) {\n  checkArrayTypes(box, nonce, key);\n  checkLengths(key, nonce);\n  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n  var m = new Uint8Array(c.length);\n  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];\n  if (c.length < 32) return false;\n  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return false;\n  return m.subarray(crypto_secretbox_ZEROBYTES);\n};\n\nnacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\nnacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\nnacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n\nnacl.scalarMult = function(n, p) {\n  checkArrayTypes(n, p);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult(q, n, p);\n  return q;\n};\n\nnacl.scalarMult.base = function(n) {\n  checkArrayTypes(n);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult_base(q, n);\n  return q;\n};\n\nnacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\nnacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n\nnacl.box = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox(msg, nonce, k);\n};\n\nnacl.box.before = function(publicKey, secretKey) {\n  checkArrayTypes(publicKey, secretKey);\n  checkBoxLengths(publicKey, secretKey);\n  var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n  crypto_box_beforenm(k, publicKey, secretKey);\n  return k;\n};\n\nnacl.box.after = nacl.secretbox;\n\nnacl.box.open = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox.open(msg, nonce, k);\n};\n\nnacl.box.open.after = nacl.secretbox.open;\n\nnacl.box.keyPair = function() {\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n  crypto_box_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.box.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_box_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  crypto_scalarmult_base(pk, secretKey);\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\nnacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\nnacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\nnacl.box.nonceLength = crypto_box_NONCEBYTES;\nnacl.box.overheadLength = nacl.secretbox.overheadLength;\n\nnacl.sign = function(msg, secretKey) {\n  checkArrayTypes(msg, secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);\n  crypto_sign(signedMsg, msg, msg.length, secretKey);\n  return signedMsg;\n};\n\nnacl.sign.open = function(signedMsg, publicKey) {\n  if (arguments.length !== 2)\n    throw new Error('nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?');\n  checkArrayTypes(signedMsg, publicKey);\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var tmp = new Uint8Array(signedMsg.length);\n  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n  if (mlen < 0) return null;\n  var m = new Uint8Array(mlen);\n  for (var i = 0; i < m.length; i++) m[i] = tmp[i];\n  return m;\n};\n\nnacl.sign.detached = function(msg, secretKey) {\n  var signedMsg = nacl.sign(msg, secretKey);\n  var sig = new Uint8Array(crypto_sign_BYTES);\n  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];\n  return sig;\n};\n\nnacl.sign.detached.verify = function(msg, sig, publicKey) {\n  checkArrayTypes(msg, sig, publicKey);\n  if (sig.length !== crypto_sign_BYTES)\n    throw new Error('bad signature size');\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var i;\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];\n  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nnacl.sign.keyPair = function() {\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign.keyPair.fromSeed = function(seed) {\n  checkArrayTypes(seed);\n  if (seed.length !== crypto_sign_SEEDBYTES)\n    throw new Error('bad seed size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  for (var i = 0; i < 32; i++) sk[i] = seed[i];\n  crypto_sign_keypair(pk, sk, true);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\nnacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\nnacl.sign.seedLength = crypto_sign_SEEDBYTES;\nnacl.sign.signatureLength = crypto_sign_BYTES;\n\nnacl.hash = function(msg) {\n  checkArrayTypes(msg);\n  var h = new Uint8Array(crypto_hash_BYTES);\n  crypto_hash(h, msg, msg.length);\n  return h;\n};\n\nnacl.hash.hashLength = crypto_hash_BYTES;\n\nnacl.verify = function(x, y) {\n  checkArrayTypes(x, y);\n  // Zero length arguments are considered not equal.\n  if (x.length === 0 || y.length === 0) return false;\n  if (x.length !== y.length) return false;\n  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;\n};\n\nnacl.setPRNG = function(fn) {\n  randombytes = fn;\n};\n\n(function() {\n  // Initialize PRNG if environment provides CSPRNG.\n  // If not, methods calling randombytes will throw.\n  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;\n  if (crypto && crypto.getRandomValues) {\n    // Browsers.\n    var QUOTA = 65536;\n    nacl.setPRNG(function(x, n) {\n      var i, v = new Uint8Array(n);\n      for (i = 0; i < n; i += QUOTA) {\n        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n      }\n      for (i = 0; i < n; i++) x[i] = v[i];\n      cleanup(v);\n    });\n  } else if (typeof require !== 'undefined') {\n    // Node.js.\n    crypto = require('crypto');\n    if (crypto && crypto.randomBytes) {\n      nacl.setPRNG(function(x, n) {\n        var i, v = crypto.randomBytes(n);\n        for (i = 0; i < n; i++) x[i] = v[i];\n        cleanup(v);\n      });\n    }\n  }\n})();\n\n})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));\n","// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\n// If you have no idea what ASN.1 or BER is, see this:\n// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc\n\nvar Ber = require('./ber/index');\n\n\n\n///--- Exported API\n\nmodule.exports = {\n\n  Ber: Ber,\n\n  BerReader: Ber.Reader,\n\n  BerWriter: Ber.Writer\n\n};\n","module.exports = require(\"http\");","//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n","(function(){\n\n    // Copyright (c) 2005  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Basic JavaScript BN library - subset useful for RSA encryption.\n\n    // Bits per digit\n    var dbits;\n\n    // JavaScript engine analysis\n    var canary = 0xdeadbeefcafe;\n    var j_lm = ((canary&0xffffff)==0xefcafe);\n\n    // (public) Constructor\n    function BigInteger(a,b,c) {\n      if(a != null)\n        if(\"number\" == typeof a) this.fromNumber(a,b,c);\n        else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n        else this.fromString(a,b);\n    }\n\n    // return new, unset BigInteger\n    function nbi() { return new BigInteger(null); }\n\n    // am: Compute w_j += (x*this_i), propagate carries,\n    // c is initial carry, returns final carry.\n    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n    // We need to select the fastest one that works in this environment.\n\n    // am1: use a single mult and divide to get the high bits,\n    // max digit bits should be 26 because\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n    function am1(i,x,w,j,c,n) {\n      while(--n >= 0) {\n        var v = x*this[i++]+w[j]+c;\n        c = Math.floor(v/0x4000000);\n        w[j++] = v&0x3ffffff;\n      }\n      return c;\n    }\n    // am2 avoids a big mult-and-extract completely.\n    // Max digit bits should be <= 30 because we do bitwise ops\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n    function am2(i,x,w,j,c,n) {\n      var xl = x&0x7fff, xh = x>>15;\n      while(--n >= 0) {\n        var l = this[i]&0x7fff;\n        var h = this[i++]>>15;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n        w[j++] = l&0x3fffffff;\n      }\n      return c;\n    }\n    // Alternately, set max digit bits to 28 since some\n    // browsers slow down when dealing with 32-bit numbers.\n    function am3(i,x,w,j,c,n) {\n      var xl = x&0x3fff, xh = x>>14;\n      while(--n >= 0) {\n        var l = this[i]&0x3fff;\n        var h = this[i++]>>14;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n        c = (l>>28)+(m>>14)+xh*h;\n        w[j++] = l&0xfffffff;\n      }\n      return c;\n    }\n    var inBrowser = typeof navigator !== \"undefined\";\n    if(inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n      BigInteger.prototype.am = am2;\n      dbits = 30;\n    }\n    else if(inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\n      BigInteger.prototype.am = am1;\n      dbits = 26;\n    }\n    else { // Mozilla/Netscape seems to prefer am3\n      BigInteger.prototype.am = am3;\n      dbits = 28;\n    }\n\n    BigInteger.prototype.DB = dbits;\n    BigInteger.prototype.DM = ((1<<dbits)-1);\n    BigInteger.prototype.DV = (1<<dbits);\n\n    var BI_FP = 52;\n    BigInteger.prototype.FV = Math.pow(2,BI_FP);\n    BigInteger.prototype.F1 = BI_FP-dbits;\n    BigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n    // Digit conversions\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var BI_RC = new Array();\n    var rr,vv;\n    rr = \"0\".charCodeAt(0);\n    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n    rr = \"a\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n    rr = \"A\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\n    function int2char(n) { return BI_RM.charAt(n); }\n    function intAt(s,i) {\n      var c = BI_RC[s.charCodeAt(i)];\n      return (c==null)?-1:c;\n    }\n\n    // (protected) copy this to r\n    function bnpCopyTo(r) {\n      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n      r.t = this.t;\n      r.s = this.s;\n    }\n\n    // (protected) set from integer value x, -DV <= x < DV\n    function bnpFromInt(x) {\n      this.t = 1;\n      this.s = (x<0)?-1:0;\n      if(x > 0) this[0] = x;\n      else if(x < -1) this[0] = x+this.DV;\n      else this.t = 0;\n    }\n\n    // return bigint initialized to value\n    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n    // (protected) set from string and radix\n    function bnpFromString(s,b) {\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 256) k = 8; // byte array\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else { this.fromRadix(s,b); return; }\n      this.t = 0;\n      this.s = 0;\n      var i = s.length, mi = false, sh = 0;\n      while(--i >= 0) {\n        var x = (k==8)?s[i]&0xff:intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\") mi = true;\n          continue;\n        }\n        mi = false;\n        if(sh == 0)\n          this[this.t++] = x;\n        else if(sh+k > this.DB) {\n          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n          this[this.t++] = (x>>(this.DB-sh));\n        }\n        else\n          this[this.t-1] |= x<<sh;\n        sh += k;\n        if(sh >= this.DB) sh -= this.DB;\n      }\n      if(k == 8 && (s[0]&0x80) != 0) {\n        this.s = -1;\n        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n      }\n      this.clamp();\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) clamp off excess high words\n    function bnpClamp() {\n      var c = this.s&this.DM;\n      while(this.t > 0 && this[this.t-1] == c) --this.t;\n    }\n\n    // (public) return string representation in given radix\n    function bnToString(b) {\n      if(this.s < 0) return \"-\"+this.negate().toString(b);\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else return this.toRadix(b);\n      var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n      var p = this.DB-(i*this.DB)%k;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n        while(i >= 0) {\n          if(p < k) {\n            d = (this[i]&((1<<p)-1))<<(k-p);\n            d |= this[--i]>>(p+=this.DB-k);\n          }\n          else {\n            d = (this[i]>>(p-=k))&km;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if(d > 0) m = true;\n          if(m) r += int2char(d);\n        }\n      }\n      return m?r:\"0\";\n    }\n\n    // (public) -this\n    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n    // (public) |this|\n    function bnAbs() { return (this.s<0)?this.negate():this; }\n\n    // (public) return + if this > a, - if this < a, 0 if equal\n    function bnCompareTo(a) {\n      var r = this.s-a.s;\n      if(r != 0) return r;\n      var i = this.t;\n      r = i-a.t;\n      if(r != 0) return (this.s<0)?-r:r;\n      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n      return 0;\n    }\n\n    // returns bit length of the integer x\n    function nbits(x) {\n      var r = 1, t;\n      if((t=x>>>16) != 0) { x = t; r += 16; }\n      if((t=x>>8) != 0) { x = t; r += 8; }\n      if((t=x>>4) != 0) { x = t; r += 4; }\n      if((t=x>>2) != 0) { x = t; r += 2; }\n      if((t=x>>1) != 0) { x = t; r += 1; }\n      return r;\n    }\n\n    // (public) return the number of bits in \"this\"\n    function bnBitLength() {\n      if(this.t <= 0) return 0;\n      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n    }\n\n    // (protected) r = this << n*DB\n    function bnpDLShiftTo(n,r) {\n      var i;\n      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n      for(i = n-1; i >= 0; --i) r[i] = 0;\n      r.t = this.t+n;\n      r.s = this.s;\n    }\n\n    // (protected) r = this >> n*DB\n    function bnpDRShiftTo(n,r) {\n      for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n      r.t = Math.max(this.t-n,0);\n      r.s = this.s;\n    }\n\n    // (protected) r = this << n\n    function bnpLShiftTo(n,r) {\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<cbs)-1;\n      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n      for(i = this.t-1; i >= 0; --i) {\n        r[i+ds+1] = (this[i]>>cbs)|c;\n        c = (this[i]&bm)<<bs;\n      }\n      for(i = ds-1; i >= 0; --i) r[i] = 0;\n      r[ds] = c;\n      r.t = this.t+ds+1;\n      r.s = this.s;\n      r.clamp();\n    }\n\n    // (protected) r = this >> n\n    function bnpRShiftTo(n,r) {\n      r.s = this.s;\n      var ds = Math.floor(n/this.DB);\n      if(ds >= this.t) { r.t = 0; return; }\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<bs)-1;\n      r[0] = this[ds]>>bs;\n      for(var i = ds+1; i < this.t; ++i) {\n        r[i-ds-1] |= (this[i]&bm)<<cbs;\n        r[i-ds] = this[i]>>bs;\n      }\n      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n      r.t = this.t-ds;\n      r.clamp();\n    }\n\n    // (protected) r = this - a\n    function bnpSubTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]-a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c -= a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c -= a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c -= a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c < -1) r[i++] = this.DV+c;\n      else if(c > 0) r[i++] = c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyTo(a,r) {\n      var x = this.abs(), y = a.abs();\n      var i = x.t;\n      r.t = i+y.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n      r.s = 0;\n      r.clamp();\n      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (protected) r = this^2, r != this (HAC 14.16)\n    function bnpSquareTo(r) {\n      var x = this.abs();\n      var i = r.t = 2*x.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < x.t-1; ++i) {\n        var c = x.am(i,x[i],r,2*i,0,1);\n        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n          r[i+x.t] -= x.DV;\n          r[i+x.t+1] = 1;\n        }\n      }\n      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n      r.s = 0;\n      r.clamp();\n    }\n\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    function bnpDivRemTo(m,q,r) {\n      var pm = m.abs();\n      if(pm.t <= 0) return;\n      var pt = this.abs();\n      if(pt.t < pm.t) {\n        if(q != null) q.fromInt(0);\n        if(r != null) this.copyTo(r);\n        return;\n      }\n      if(r == null) r = nbi();\n      var y = nbi(), ts = this.s, ms = m.s;\n      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus\n      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n      else { pm.copyTo(y); pt.copyTo(r); }\n      var ys = y.t;\n      var y0 = y[ys-1];\n      if(y0 == 0) return;\n      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n      var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n      y.dlShiftTo(j,t);\n      if(r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t,r);\n      }\n      BigInteger.ONE.dlShiftTo(ys,t);\n      t.subTo(y,y);  // \"negative\" y so we can replace sub with am later\n      while(y.t < ys) y[y.t++] = 0;\n      while(--j >= 0) {\n        // Estimate quotient digit\n        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out\n          y.dlShiftTo(j,t);\n          r.subTo(t,r);\n          while(r[i] < --qd) r.subTo(t,r);\n        }\n      }\n      if(q != null) {\n        r.drShiftTo(ys,q);\n        if(ts != ms) BigInteger.ZERO.subTo(q,q);\n      }\n      r.t = ys;\n      r.clamp();\n      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder\n      if(ts < 0) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (public) this mod a\n    function bnMod(a) {\n      var r = nbi();\n      this.abs().divRemTo(a,null,r);\n      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n      return r;\n    }\n\n    // Modular reduction using \"classic\" algorithm\n    function Classic(m) { this.m = m; }\n    function cConvert(x) {\n      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n      else return x;\n    }\n    function cRevert(x) { return x; }\n    function cReduce(x) { x.divRemTo(this.m,null,x); }\n    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    Classic.prototype.convert = cConvert;\n    Classic.prototype.revert = cRevert;\n    Classic.prototype.reduce = cReduce;\n    Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.sqrTo = cSqrTo;\n\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    function bnpInvDigit() {\n      if(this.t < 1) return 0;\n      var x = this[0];\n      if((x&1) == 0) return 0;\n      var y = x&3;       // y == 1/x mod 2^2\n      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4\n      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8\n      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16\n      // last step - calculate inverse mod DV directly;\n      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits\n      // we really want the negative inverse, and -DV < y < DV\n      return (y>0)?this.DV-y:-y;\n    }\n\n    // Montgomery reduction\n    function Montgomery(m) {\n      this.m = m;\n      this.mp = m.invDigit();\n      this.mpl = this.mp&0x7fff;\n      this.mph = this.mp>>15;\n      this.um = (1<<(m.DB-15))-1;\n      this.mt2 = 2*m.t;\n    }\n\n    // xR mod m\n    function montConvert(x) {\n      var r = nbi();\n      x.abs().dlShiftTo(this.m.t,r);\n      r.divRemTo(this.m,null,r);\n      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n      return r;\n    }\n\n    // x/R mod m\n    function montRevert(x) {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n\n    // x = x/R mod m (HAC 14.32)\n    function montReduce(x) {\n      while(x.t <= this.mt2) // pad x so am has enough room later\n        x[x.t++] = 0;\n      for(var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i]&0x7fff;\n        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i+this.m.t;\n        x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n        // propagate carry\n        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n      }\n      x.clamp();\n      x.drShiftTo(this.m.t,x);\n      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = \"x^2/R mod m\"; x != r\n    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = \"xy/R mod m\"; x,y != r\n    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Montgomery.prototype.convert = montConvert;\n    Montgomery.prototype.revert = montRevert;\n    Montgomery.prototype.reduce = montReduce;\n    Montgomery.prototype.mulTo = montMulTo;\n    Montgomery.prototype.sqrTo = montSqrTo;\n\n    // (protected) true iff this is even\n    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    function bnpExp(e,z) {\n      if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n      g.copyTo(r);\n      while(--i >= 0) {\n        z.sqrTo(r,r2);\n        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n        else { var t = r; r = r2; r2 = t; }\n      }\n      return z.revert(r);\n    }\n\n    // (public) this^e % m, 0 <= e < 2^32\n    function bnModPowInt(e,m) {\n      var z;\n      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n      return this.exp(e,z);\n    }\n\n    // protected\n    BigInteger.prototype.copyTo = bnpCopyTo;\n    BigInteger.prototype.fromInt = bnpFromInt;\n    BigInteger.prototype.fromString = bnpFromString;\n    BigInteger.prototype.clamp = bnpClamp;\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    BigInteger.prototype.subTo = bnpSubTo;\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    BigInteger.prototype.squareTo = bnpSquareTo;\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\n    BigInteger.prototype.invDigit = bnpInvDigit;\n    BigInteger.prototype.isEven = bnpIsEven;\n    BigInteger.prototype.exp = bnpExp;\n\n    // public\n    BigInteger.prototype.toString = bnToString;\n    BigInteger.prototype.negate = bnNegate;\n    BigInteger.prototype.abs = bnAbs;\n    BigInteger.prototype.compareTo = bnCompareTo;\n    BigInteger.prototype.bitLength = bnBitLength;\n    BigInteger.prototype.mod = bnMod;\n    BigInteger.prototype.modPowInt = bnModPowInt;\n\n    // \"constants\"\n    BigInteger.ZERO = nbv(0);\n    BigInteger.ONE = nbv(1);\n\n    // Copyright (c) 2005-2009  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Extended JavaScript BN functions, required for RSA private ops.\n\n    // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n    // Version 1.2: square() API, isProbablePrime fix\n\n    // (public)\n    function bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n    // (public) return value as integer\n    function bnIntValue() {\n      if(this.s < 0) {\n        if(this.t == 1) return this[0]-this.DV;\n        else if(this.t == 0) return -1;\n      }\n      else if(this.t == 1) return this[0];\n      else if(this.t == 0) return 0;\n      // assumes 16 < DB < 32\n      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n    }\n\n    // (public) return value as byte\n    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\n    // (public) return value as short (assumes DB>=16)\n    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\n    // (protected) return x s.t. r^x < DV\n    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n    // (public) 0 if this == 0, 1 if this > 0\n    function bnSigNum() {\n      if(this.s < 0) return -1;\n      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n      else return 1;\n    }\n\n    // (protected) convert to radix string\n    function bnpToRadix(b) {\n      if(b == null) b = 10;\n      if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n      var cs = this.chunkSize(b);\n      var a = Math.pow(b,cs);\n      var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n      this.divRemTo(d,y,z);\n      while(y.signum() > 0) {\n        r = (a+z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d,y,z);\n      }\n      return z.intValue().toString(b) + r;\n    }\n\n    // (protected) convert from radix string\n    function bnpFromRadix(s,b) {\n      this.fromInt(0);\n      if(b == null) b = 10;\n      var cs = this.chunkSize(b);\n      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n      for(var i = 0; i < s.length; ++i) {\n        var x = intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n          continue;\n        }\n        w = b*w+x;\n        if(++j >= cs) {\n          this.dMultiply(d);\n          this.dAddOffset(w,0);\n          j = 0;\n          w = 0;\n        }\n      }\n      if(j > 0) {\n        this.dMultiply(Math.pow(b,j));\n        this.dAddOffset(w,0);\n      }\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) alternate constructor\n    function bnpFromNumber(a,b,c) {\n      if(\"number\" == typeof b) {\n        // new BigInteger(int,int,RNG)\n        if(a < 2) this.fromInt(1);\n        else {\n          this.fromNumber(a,c);\n          if(!this.testBit(a-1))\t// force MSB set\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n          if(this.isEven()) this.dAddOffset(1,0); // force odd\n          while(!this.isProbablePrime(b)) {\n            this.dAddOffset(2,0);\n            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n          }\n        }\n      }\n      else {\n        // new BigInteger(int,RNG)\n        var x = new Array(), t = a&7;\n        x.length = (a>>3)+1;\n        b.nextBytes(x);\n        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n        this.fromString(x,256);\n      }\n    }\n\n    // (public) convert to bigendian byte array\n    function bnToByteArray() {\n      var i = this.t, r = new Array();\n      r[0] = this.s;\n      var p = this.DB-(i*this.DB)%8, d, k = 0;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n          r[k++] = d|(this.s<<(this.DB-p));\n        while(i >= 0) {\n          if(p < 8) {\n            d = (this[i]&((1<<p)-1))<<(8-p);\n            d |= this[--i]>>(p+=this.DB-8);\n          }\n          else {\n            d = (this[i]>>(p-=8))&0xff;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if((d&0x80) != 0) d |= -256;\n          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n          if(k > 0 || d != this.s) r[k++] = d;\n        }\n      }\n      return r;\n    }\n\n    function bnEquals(a) { return(this.compareTo(a)==0); }\n    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }\n    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n    // (protected) r = this op a (bitwise)\n    function bnpBitwiseTo(a,op,r) {\n      var i, f, m = Math.min(a.t,this.t);\n      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n      if(a.t < this.t) {\n        f = a.s&this.DM;\n        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n        r.t = this.t;\n      }\n      else {\n        f = this.s&this.DM;\n        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n        r.t = a.t;\n      }\n      r.s = op(this.s,a.s);\n      r.clamp();\n    }\n\n    // (public) this & a\n    function op_and(x,y) { return x&y; }\n    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n    // (public) this | a\n    function op_or(x,y) { return x|y; }\n    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n    // (public) this ^ a\n    function op_xor(x,y) { return x^y; }\n    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n    // (public) this & ~a\n    function op_andnot(x,y) { return x&~y; }\n    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n    // (public) ~this\n    function bnNot() {\n      var r = nbi();\n      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n      r.t = this.t;\n      r.s = ~this.s;\n      return r;\n    }\n\n    // (public) this << n\n    function bnShiftLeft(n) {\n      var r = nbi();\n      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n      return r;\n    }\n\n    // (public) this >> n\n    function bnShiftRight(n) {\n      var r = nbi();\n      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n      return r;\n    }\n\n    // return index of lowest 1-bit in x, x < 2^31\n    function lbit(x) {\n      if(x == 0) return -1;\n      var r = 0;\n      if((x&0xffff) == 0) { x >>= 16; r += 16; }\n      if((x&0xff) == 0) { x >>= 8; r += 8; }\n      if((x&0xf) == 0) { x >>= 4; r += 4; }\n      if((x&3) == 0) { x >>= 2; r += 2; }\n      if((x&1) == 0) ++r;\n      return r;\n    }\n\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    function bnGetLowestSetBit() {\n      for(var i = 0; i < this.t; ++i)\n        if(this[i] != 0) return i*this.DB+lbit(this[i]);\n      if(this.s < 0) return this.t*this.DB;\n      return -1;\n    }\n\n    // return number of 1 bits in x\n    function cbit(x) {\n      var r = 0;\n      while(x != 0) { x &= x-1; ++r; }\n      return r;\n    }\n\n    // (public) return number of set bits\n    function bnBitCount() {\n      var r = 0, x = this.s&this.DM;\n      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n      return r;\n    }\n\n    // (public) true iff nth bit is set\n    function bnTestBit(n) {\n      var j = Math.floor(n/this.DB);\n      if(j >= this.t) return(this.s!=0);\n      return((this[j]&(1<<(n%this.DB)))!=0);\n    }\n\n    // (protected) this op (1<<n)\n    function bnpChangeBit(n,op) {\n      var r = BigInteger.ONE.shiftLeft(n);\n      this.bitwiseTo(r,op,r);\n      return r;\n    }\n\n    // (public) this | (1<<n)\n    function bnSetBit(n) { return this.changeBit(n,op_or); }\n\n    // (public) this & ~(1<<n)\n    function bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n    // (public) this ^ (1<<n)\n    function bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n    // (protected) r = this + a\n    function bnpAddTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]+a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c += a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c += a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c > 0) r[i++] = c;\n      else if(c < -1) r[i++] = this.DV+c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (public) this + a\n    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n    // (public) this - a\n    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n    // (public) this * a\n    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n    // (public) this^2\n    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\n    // (public) this / a\n    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n    // (public) this % a\n    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n    // (public) [this/a,this%a]\n    function bnDivideAndRemainder(a) {\n      var q = nbi(), r = nbi();\n      this.divRemTo(a,q,r);\n      return new Array(q,r);\n    }\n\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    function bnpDMultiply(n) {\n      this[this.t] = this.am(0,n-1,this,0,0,this.t);\n      ++this.t;\n      this.clamp();\n    }\n\n    // (protected) this += n << w words, this >= 0\n    function bnpDAddOffset(n,w) {\n      if(n == 0) return;\n      while(this.t <= w) this[this.t++] = 0;\n      this[w] += n;\n      while(this[w] >= this.DV) {\n        this[w] -= this.DV;\n        if(++w >= this.t) this[this.t++] = 0;\n        ++this[w];\n      }\n    }\n\n    // A \"null\" reducer\n    function NullExp() {}\n    function nNop(x) { return x; }\n    function nMulTo(x,y,r) { x.multiplyTo(y,r); }\n    function nSqrTo(x,r) { x.squareTo(r); }\n\n    NullExp.prototype.convert = nNop;\n    NullExp.prototype.revert = nNop;\n    NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.sqrTo = nSqrTo;\n\n    // (public) this^e\n    function bnPow(e) { return this.exp(e,new NullExp()); }\n\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyLowerTo(a,n,r) {\n      var i = Math.min(this.t+a.t,n);\n      r.s = 0; // assumes a,this >= 0\n      r.t = i;\n      while(i > 0) r[--i] = 0;\n      var j;\n      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n      r.clamp();\n    }\n\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyUpperTo(a,n,r) {\n      --n;\n      var i = r.t = this.t+a.t-n;\n      r.s = 0; // assumes a,this >= 0\n      while(--i >= 0) r[i] = 0;\n      for(i = Math.max(n-this.t,0); i < a.t; ++i)\n        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n      r.clamp();\n      r.drShiftTo(1,r);\n    }\n\n    // Barrett modular reduction\n    function Barrett(m) {\n      // setup Barrett\n      this.r2 = nbi();\n      this.q3 = nbi();\n      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n      this.mu = this.r2.divide(m);\n      this.m = m;\n    }\n\n    function barrettConvert(x) {\n      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n      else if(x.compareTo(this.m) < 0) return x;\n      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n    }\n\n    function barrettRevert(x) { return x; }\n\n    // x = x mod m (HAC 14.42)\n    function barrettReduce(x) {\n      x.drShiftTo(this.m.t-1,this.r2);\n      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n      x.subTo(this.r2,x);\n      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = x^2 mod m; x != r\n    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = x*y mod m; x,y != r\n    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.reduce = barrettReduce;\n    Barrett.prototype.mulTo = barrettMulTo;\n    Barrett.prototype.sqrTo = barrettSqrTo;\n\n    // (public) this^e % m (HAC 14.85)\n    function bnModPow(e,m) {\n      var i = e.bitLength(), k, r = nbv(1), z;\n      if(i <= 0) return r;\n      else if(i < 18) k = 1;\n      else if(i < 48) k = 3;\n      else if(i < 144) k = 4;\n      else if(i < 768) k = 5;\n      else k = 6;\n      if(i < 8)\n        z = new Classic(m);\n      else if(m.isEven())\n        z = new Barrett(m);\n      else\n        z = new Montgomery(m);\n\n      // precomputation\n      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n      g[1] = z.convert(this);\n      if(k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1],g2);\n        while(n <= km) {\n          g[n] = nbi();\n          z.mulTo(g2,g[n-2],g[n]);\n          n += 2;\n        }\n      }\n\n      var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n      i = nbits(e[j])-1;\n      while(j >= 0) {\n        if(i >= k1) w = (e[j]>>(i-k1))&km;\n        else {\n          w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n        }\n\n        n = k;\n        while((w&1) == 0) { w >>= 1; --n; }\n        if((i -= n) < 0) { i += this.DB; --j; }\n        if(is1) {\t// ret == 1, don't bother squaring or multiplying it\n          g[w].copyTo(r);\n          is1 = false;\n        }\n        else {\n          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n          z.mulTo(r2,g[w],r);\n        }\n\n        while(j >= 0 && (e[j]&(1<<i)) == 0) {\n          z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n          if(--i < 0) { i = this.DB-1; --j; }\n        }\n      }\n      return z.revert(r);\n    }\n\n    // (public) gcd(this,a) (HAC 14.54)\n    function bnGCD(a) {\n      var x = (this.s<0)?this.negate():this.clone();\n      var y = (a.s<0)?a.negate():a.clone();\n      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n      var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n      if(g < 0) return x;\n      if(i < g) g = i;\n      if(g > 0) {\n        x.rShiftTo(g,x);\n        y.rShiftTo(g,y);\n      }\n      while(x.signum() > 0) {\n        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n        if(x.compareTo(y) >= 0) {\n          x.subTo(y,x);\n          x.rShiftTo(1,x);\n        }\n        else {\n          y.subTo(x,y);\n          y.rShiftTo(1,y);\n        }\n      }\n      if(g > 0) y.lShiftTo(g,y);\n      return y;\n    }\n\n    // (protected) this % n, n < 2^26\n    function bnpModInt(n) {\n      if(n <= 0) return 0;\n      var d = this.DV%n, r = (this.s<0)?n-1:0;\n      if(this.t > 0)\n        if(d == 0) r = this[0]%n;\n        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n      return r;\n    }\n\n    // (public) 1/this % m (HAC 14.61)\n    function bnModInverse(m) {\n      var ac = m.isEven();\n      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n      var u = m.clone(), v = this.clone();\n      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n      while(u.signum() != 0) {\n        while(u.isEven()) {\n          u.rShiftTo(1,u);\n          if(ac) {\n            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n            a.rShiftTo(1,a);\n          }\n          else if(!b.isEven()) b.subTo(m,b);\n          b.rShiftTo(1,b);\n        }\n        while(v.isEven()) {\n          v.rShiftTo(1,v);\n          if(ac) {\n            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n            c.rShiftTo(1,c);\n          }\n          else if(!d.isEven()) d.subTo(m,d);\n          d.rShiftTo(1,d);\n        }\n        if(u.compareTo(v) >= 0) {\n          u.subTo(v,u);\n          if(ac) a.subTo(c,a);\n          b.subTo(d,b);\n        }\n        else {\n          v.subTo(u,v);\n          if(ac) c.subTo(a,c);\n          d.subTo(b,d);\n        }\n      }\n      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n      if(d.compareTo(m) >= 0) return d.subtract(m);\n      if(d.signum() < 0) d.addTo(m,d); else return d;\n      if(d.signum() < 0) return d.add(m); else return d;\n    }\n\n    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n    var lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n    // (public) test primality with certainty >= 1-.5^t\n    function bnIsProbablePrime(t) {\n      var i, x = this.abs();\n      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n        for(i = 0; i < lowprimes.length; ++i)\n          if(x[0] == lowprimes[i]) return true;\n        return false;\n      }\n      if(x.isEven()) return false;\n      i = 1;\n      while(i < lowprimes.length) {\n        var m = lowprimes[i], j = i+1;\n        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n        m = x.modInt(m);\n        while(i < j) if(m%lowprimes[i++] == 0) return false;\n      }\n      return x.millerRabin(t);\n    }\n\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    function bnpMillerRabin(t) {\n      var n1 = this.subtract(BigInteger.ONE);\n      var k = n1.getLowestSetBit();\n      if(k <= 0) return false;\n      var r = n1.shiftRight(k);\n      t = (t+1)>>1;\n      if(t > lowprimes.length) t = lowprimes.length;\n      var a = nbi();\n      for(var i = 0; i < t; ++i) {\n        //Pick bases at random, instead of starting at 2\n        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n        var y = a.modPow(r,this);\n        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n          var j = 1;\n          while(j++ < k && y.compareTo(n1) != 0) {\n            y = y.modPowInt(2,this);\n            if(y.compareTo(BigInteger.ONE) == 0) return false;\n          }\n          if(y.compareTo(n1) != 0) return false;\n        }\n      }\n      return true;\n    }\n\n    // protected\n    BigInteger.prototype.chunkSize = bnpChunkSize;\n    BigInteger.prototype.toRadix = bnpToRadix;\n    BigInteger.prototype.fromRadix = bnpFromRadix;\n    BigInteger.prototype.fromNumber = bnpFromNumber;\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    BigInteger.prototype.changeBit = bnpChangeBit;\n    BigInteger.prototype.addTo = bnpAddTo;\n    BigInteger.prototype.dMultiply = bnpDMultiply;\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    BigInteger.prototype.modInt = bnpModInt;\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\n\n    // public\n    BigInteger.prototype.clone = bnClone;\n    BigInteger.prototype.intValue = bnIntValue;\n    BigInteger.prototype.byteValue = bnByteValue;\n    BigInteger.prototype.shortValue = bnShortValue;\n    BigInteger.prototype.signum = bnSigNum;\n    BigInteger.prototype.toByteArray = bnToByteArray;\n    BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.not = bnNot;\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\n    BigInteger.prototype.shiftRight = bnShiftRight;\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    BigInteger.prototype.bitCount = bnBitCount;\n    BigInteger.prototype.testBit = bnTestBit;\n    BigInteger.prototype.setBit = bnSetBit;\n    BigInteger.prototype.clearBit = bnClearBit;\n    BigInteger.prototype.flipBit = bnFlipBit;\n    BigInteger.prototype.add = bnAdd;\n    BigInteger.prototype.subtract = bnSubtract;\n    BigInteger.prototype.multiply = bnMultiply;\n    BigInteger.prototype.divide = bnDivide;\n    BigInteger.prototype.remainder = bnRemainder;\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    BigInteger.prototype.modPow = bnModPow;\n    BigInteger.prototype.modInverse = bnModInverse;\n    BigInteger.prototype.pow = bnPow;\n    BigInteger.prototype.gcd = bnGCD;\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n    // JSBN-specific extension\n    BigInteger.prototype.square = bnSquare;\n\n    // Expose the Barrett function\n    BigInteger.prototype.Barrett = Barrett\n\n    // BigInteger interfaces not implemented in jsbn:\n\n    // BigInteger(int signum, byte[] magnitude)\n    // double doubleValue()\n    // float floatValue()\n    // int hashCode()\n    // long longValue()\n    // static BigInteger valueOf(long val)\n\n\t// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n\t// For best results, put code like\n\t// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n\t// in your main HTML document.\n\n\tvar rng_state;\n\tvar rng_pool;\n\tvar rng_pptr;\n\n\t// Mix in a 32-bit integer into the pool\n\tfunction rng_seed_int(x) {\n\t  rng_pool[rng_pptr++] ^= x & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n\t  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n\t}\n\n\t// Mix in the current time (w/milliseconds) into the pool\n\tfunction rng_seed_time() {\n\t  rng_seed_int(new Date().getTime());\n\t}\n\n\t// Initialize the pool with junk if needed.\n\tif(rng_pool == null) {\n\t  rng_pool = new Array();\n\t  rng_pptr = 0;\n\t  var t;\n\t  if(typeof window !== \"undefined\" && window.crypto) {\n\t\tif (window.crypto.getRandomValues) {\n\t\t  // Use webcrypto if available\n\t\t  var ua = new Uint8Array(32);\n\t\t  window.crypto.getRandomValues(ua);\n\t\t  for(t = 0; t < 32; ++t)\n\t\t\trng_pool[rng_pptr++] = ua[t];\n\t\t}\n\t\telse if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\") {\n\t\t  // Extract entropy (256 bits) from NS4 RNG if available\n\t\t  var z = window.crypto.random(32);\n\t\t  for(t = 0; t < z.length; ++t)\n\t\t\trng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n\t\t}\n\t  }\n\t  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n\t\tt = Math.floor(65536 * Math.random());\n\t\trng_pool[rng_pptr++] = t >>> 8;\n\t\trng_pool[rng_pptr++] = t & 255;\n\t  }\n\t  rng_pptr = 0;\n\t  rng_seed_time();\n\t  //rng_seed_int(window.screenX);\n\t  //rng_seed_int(window.screenY);\n\t}\n\n\tfunction rng_get_byte() {\n\t  if(rng_state == null) {\n\t\trng_seed_time();\n\t\trng_state = prng_newstate();\n\t\trng_state.init(rng_pool);\n\t\tfor(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n\t\t  rng_pool[rng_pptr] = 0;\n\t\trng_pptr = 0;\n\t\t//rng_pool = null;\n\t  }\n\t  // TODO: allow reseeding after first request\n\t  return rng_state.next();\n\t}\n\n\tfunction rng_get_bytes(ba) {\n\t  var i;\n\t  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n\t}\n\n\tfunction SecureRandom() {}\n\n\tSecureRandom.prototype.nextBytes = rng_get_bytes;\n\n\t// prng4.js - uses Arcfour as a PRNG\n\n\tfunction Arcfour() {\n\t  this.i = 0;\n\t  this.j = 0;\n\t  this.S = new Array();\n\t}\n\n\t// Initialize arcfour context from key, an array of ints, each from [0..255]\n\tfunction ARC4init(key) {\n\t  var i, j, t;\n\t  for(i = 0; i < 256; ++i)\n\t\tthis.S[i] = i;\n\t  j = 0;\n\t  for(i = 0; i < 256; ++i) {\n\t\tj = (j + this.S[i] + key[i % key.length]) & 255;\n\t\tt = this.S[i];\n\t\tthis.S[i] = this.S[j];\n\t\tthis.S[j] = t;\n\t  }\n\t  this.i = 0;\n\t  this.j = 0;\n\t}\n\n\tfunction ARC4next() {\n\t  var t;\n\t  this.i = (this.i + 1) & 255;\n\t  this.j = (this.j + this.S[this.i]) & 255;\n\t  t = this.S[this.i];\n\t  this.S[this.i] = this.S[this.j];\n\t  this.S[this.j] = t;\n\t  return this.S[(t + this.S[this.i]) & 255];\n\t}\n\n\tArcfour.prototype.init = ARC4init;\n\tArcfour.prototype.next = ARC4next;\n\n\t// Plug in your RNG constructor here\n\tfunction prng_newstate() {\n\t  return new Arcfour();\n\t}\n\n\t// Pool size must be a multiple of 4 and greater than 32.\n\t// An array of bytes the size of the pool will be passed to init()\n\tvar rng_psize = 256;\n\n  BigInteger.SecureRandom = SecureRandom;\n  BigInteger.BigInteger = BigInteger;\n  if (typeof exports !== 'undefined') {\n    exports = module.exports = BigInteger;\n  } else {\n    this.BigInteger = BigInteger;\n    this.SecureRandom = SecureRandom;\n  }\n\n}).call(this);\n","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar crypto = require('crypto');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar pkcs1 = require('./pkcs1');\nvar pkcs8 = require('./pkcs8');\nvar sshpriv = require('./ssh-private');\nvar rfc4253 = require('./rfc4253');\n\nvar errors = require('../errors');\n\n/*\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n * we just take the public component of it and use that.\n */\nfunction read(buf, options, forceType) {\n\tvar input = buf;\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar lines = buf.trim().split('\\n');\n\n\tvar m = lines[0].match(/*JSSTYLED*/\n\t    /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\tassert.ok(m, 'invalid PEM header');\n\n\tvar m2 = lines[lines.length - 1].match(/*JSSTYLED*/\n\t    /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\tassert.ok(m2, 'invalid PEM footer');\n\n\t/* Begin and end banners must match key type */\n\tassert.equal(m[2], m2[2]);\n\tvar type = m[2].toLowerCase();\n\n\tvar alg;\n\tif (m[1]) {\n\t\t/* They also must match algorithms, if given */\n\t\tassert.equal(m[1], m2[1], 'PEM header and footer mismatch');\n\t\talg = m[1].trim();\n\t}\n\n\tvar headers = {};\n\twhile (true) {\n\t\tlines = lines.slice(1);\n\t\tm = lines[0].match(/*JSSTYLED*/\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\n\t\tif (!m)\n\t\t\tbreak;\n\t\theaders[m[1].toLowerCase()] = m[2];\n\t}\n\n\tvar cipher, key, iv;\n\tif (headers['proc-type']) {\n\t\tvar parts = headers['proc-type'].split(',');\n\t\tif (parts[0] === '4' && parts[1] === 'ENCRYPTED') {\n\t\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\t\toptions.passphrase = new Buffer(\n\t\t\t\t    options.passphrase, 'utf-8');\n\t\t\t}\n\t\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t\t    options.filename, 'PEM'));\n\t\t\t} else {\n\t\t\t\tparts = headers['dek-info'].split(',');\n\t\t\t\tassert.ok(parts.length === 2);\n\t\t\t\tcipher = parts[0].toLowerCase();\n\t\t\t\tiv = new Buffer(parts[1], 'hex');\n\t\t\t\tkey = utils.opensslKeyDeriv(cipher, iv,\n\t\t\t\t    options.passphrase, 1).key;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Chop off the first and last lines */\n\tlines = lines.slice(0, -1).join('');\n\tbuf = new Buffer(lines, 'base64');\n\n\tif (cipher && key && iv) {\n\t\tvar cipherStream = crypto.createDecipheriv(cipher, key, iv);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\n\t\t\t\t    'supplied, could not decrypt key'));\n\t\t\t}\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(buf);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tbuf = Buffer.concat(chunks);\n\t}\n\n\t/* The new OpenSSH internal format abuses PEM headers */\n\tif (alg && alg.toLowerCase() === 'openssh')\n\t\treturn (sshpriv.readSSHPrivate(type, buf, options));\n\tif (alg && alg.toLowerCase() === 'ssh2')\n\t\treturn (rfc4253.readType(type, buf, options));\n\n\tvar der = new asn1.BerReader(buf);\n\tder.originalInput = input;\n\n\t/*\n\t * All of the PEM file types start with a sequence tag, so chop it\n\t * off here\n\t */\n\tder.readSequence();\n\n\t/* PKCS#1 type keys name an algorithm in the banner explicitly */\n\tif (alg) {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs1');\n\t\treturn (pkcs1.readPkcs1(alg, type, der));\n\t} else {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs8');\n\t\treturn (pkcs8.readPkcs8(alg, type, der));\n\t}\n}\n\nfunction write(key, options, type) {\n\tassert.object(key);\n\n\tvar alg = {\n\t    'ecdsa': 'EC',\n\t    'rsa': 'RSA',\n\t    'dsa': 'DSA',\n\t    'ed25519': 'EdDSA'\n\t}[key.type];\n\tvar header;\n\n\tvar der = new asn1.BerWriter();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tif (type && type === 'pkcs8') {\n\t\t\theader = 'PRIVATE KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs1');\n\t\t\theader = alg + ' PRIVATE KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t}\n\n\t} else if (Key.isKey(key)) {\n\t\tif (type && type === 'pkcs1') {\n\t\t\theader = alg + ' PUBLIC KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs8');\n\t\t\theader = 'PUBLIC KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t}\n\n\t} else {\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t}\n\n\tvar tmp = der.buffer.toString('base64');\n\tvar len = tmp.length + (tmp.length / 64) +\n\t    18 + 16 + header.length*2 + 10;\n\tvar buf = new Buffer(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 64;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n","module.exports = require(\"zlib\");","module.exports = require(\"path\");","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read.bind(undefined, false, undefined),\n\treadType: read.bind(undefined, false),\n\twrite: write,\n\t/* semi-private api, used by sshpk-agent */\n\treadPartial: read.bind(undefined, true),\n\n\t/* shared with ssh format */\n\treadInternal: read,\n\tkeyTypeToAlg: keyTypeToAlg,\n\talgToKeyType: algToKeyType\n};\n\nvar assert = require('assert-plus');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar SSHBuffer = require('../ssh-buffer');\n\nfunction algToKeyType(alg) {\n\tassert.string(alg);\n\tif (alg === 'ssh-dss')\n\t\treturn ('dsa');\n\telse if (alg === 'ssh-rsa')\n\t\treturn ('rsa');\n\telse if (alg === 'ssh-ed25519')\n\t\treturn ('ed25519');\n\telse if (alg === 'ssh-curve25519')\n\t\treturn ('curve25519');\n\telse if (alg.match(/^ecdsa-sha2-/))\n\t\treturn ('ecdsa');\n\telse\n\t\tthrow (new Error('Unknown algorithm ' + alg));\n}\n\nfunction keyTypeToAlg(key) {\n\tassert.object(key);\n\tif (key.type === 'dsa')\n\t\treturn ('ssh-dss');\n\telse if (key.type === 'rsa')\n\t\treturn ('ssh-rsa');\n\telse if (key.type === 'ed25519')\n\t\treturn ('ssh-ed25519');\n\telse if (key.type === 'curve25519')\n\t\treturn ('ssh-curve25519');\n\telse if (key.type === 'ecdsa')\n\t\treturn ('ecdsa-sha2-' + key.part.curve.data.toString());\n\telse\n\t\tthrow (new Error('Unknown key type ' + key.type));\n}\n\nfunction read(partial, type, buf, options) {\n\tif (typeof (buf) === 'string')\n\t\tbuf = new Buffer(buf);\n\tassert.buffer(buf, 'buf');\n\n\tvar key = {};\n\n\tvar parts = key.parts = [];\n\tvar sshbuf = new SSHBuffer({buffer: buf});\n\n\tvar alg = sshbuf.readString();\n\tassert.ok(!sshbuf.atEnd(), 'key must have at least one part');\n\n\tkey.type = algToKeyType(alg);\n\n\tvar partCount = algs.info[key.type].parts.length;\n\tif (type && type === 'private')\n\t\tpartCount = algs.privInfo[key.type].parts.length;\n\n\twhile (!sshbuf.atEnd() && parts.length < partCount)\n\t\tparts.push(sshbuf.readPart());\n\twhile (!partial && !sshbuf.atEnd())\n\t\tparts.push(sshbuf.readPart());\n\n\tassert.ok(parts.length >= 1,\n\t    'key must have at least one part');\n\tassert.ok(partial || sshbuf.atEnd(),\n\t    'leftover bytes at end of key');\n\n\tvar Constructor = Key;\n\tvar algInfo = algs.info[key.type];\n\tif (type === 'private' || algInfo.parts.length !== parts.length) {\n\t\talgInfo = algs.privInfo[key.type];\n\t\tConstructor = PrivateKey;\n\t}\n\tassert.strictEqual(algInfo.parts.length, parts.length);\n\n\tif (key.type === 'ecdsa') {\n\t\tvar res = /^ecdsa-sha2-(.+)$/.exec(alg);\n\t\tassert.ok(res !== null);\n\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t}\n\n\tvar normalized = true;\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tvar p = parts[i];\n\t\tp.name = algInfo.parts[i];\n\t\t/*\n\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t * concat'd together (k followed by A). We want to keep them\n\t\t * separate for other formats that don't do this.\n\t\t */\n\t\tif (key.type === 'ed25519' && p.name === 'k')\n\t\t\tp.data = p.data.slice(0, 32);\n\n\t\tif (p.name !== 'curve' && algInfo.normalize !== false) {\n\t\t\tvar nd;\n\t\t\tif (key.type === 'ed25519') {\n\t\t\t\tnd = utils.zeroPadToLength(p.data, 32);\n\t\t\t} else {\n\t\t\t\tnd = utils.mpNormalize(p.data);\n\t\t\t}\n\t\t\tif (nd.toString('binary') !==\n\t\t\t    p.data.toString('binary')) {\n\t\t\t\tp.data = nd;\n\t\t\t\tnormalized = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (normalized)\n\t\tkey._rfc4253Cache = sshbuf.toBuffer();\n\n\tif (partial && typeof (partial) === 'object') {\n\t\tpartial.remainder = sshbuf.remainder();\n\t\tpartial.consumed = sshbuf._offset;\n\t}\n\n\treturn (new Constructor(key));\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\n\tvar alg = keyTypeToAlg(key);\n\tvar i;\n\n\tvar algInfo = algs.info[key.type];\n\tif (PrivateKey.isPrivateKey(key))\n\t\talgInfo = algs.privInfo[key.type];\n\tvar parts = algInfo.parts;\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeString(alg);\n\n\tfor (i = 0; i < parts.length; ++i) {\n\t\tvar data = key.part[parts[i]].data;\n\t\tif (algInfo.normalize !== false) {\n\t\t\tif (key.type === 'ed25519')\n\t\t\t\tdata = utils.zeroPadToLength(data, 32);\n\t\t\telse\n\t\t\t\tdata = utils.mpNormalize(data);\n\t\t}\n\t\tif (key.type === 'ed25519' && parts[i] === 'k')\n\t\t\tdata = Buffer.concat([data, key.part.A.data]);\n\t\tbuf.writeBuffer(data);\n\t}\n\n\treturn (buf.toBuffer());\n}\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar _ = require('underscore');\r\nvar util = require('util');\r\nvar url = require('url');\r\nvar stream = require('stream');\r\nvar Constants = require('./constants');\r\nvar Md5Wrapper = require('../md5-wrapper');\r\nvar StorageUtilities = require('./storageutilities');\r\nvar SR = require('./sr');\r\n\r\n/**\r\n* Trim the default port in the url.\r\n*\r\n* @param {string} uri The URI to be encoded.\r\n* @return {string} The URI without defualt port.\r\n*/\r\nexports.trimPortFromUri = function (uri) {\r\n  var uri = url.parse(uri);\r\n  if ((uri.protocol === Constants.HTTPS && uri.port == Constants.DEFAULT_HTTPS_PORT) || (uri.protocol === Constants.HTTP && uri.port == Constants.DEFAULT_HTTP_PORT)) {\r\n    uri.host = uri.hostname;\r\n  }\r\n  return url.format(uri);\r\n};\r\n\r\n/**\r\n* Returns the number of keys (properties) in an object.\r\n*\r\n* @param {object} value The object which keys are to be counted.\r\n* @return {number} The number of keys in the object.\r\n*/\r\nexports.objectKeysLength = function (value) {\r\n  if (!value) {\r\n    return 0;\r\n  }\r\n\r\n  return _.keys(value).length;\r\n};\r\n\r\n/**\r\n* Checks if in a browser environment.\r\n*\r\n* @return {bool} True if in a browser environment, false otherwise.\r\n*/\r\nexports.isBrowser = function () {\r\n  return typeof window !== 'undefined';\r\n};\r\n\r\n/**\r\n* Checks if in IE.\r\n*\r\n* @return {bool} True if in IE, false otherwise.\r\n*/\r\nexports.isIE = function () {\r\n  if (!exports.isBrowser()) {\r\n    return false;\r\n  }\r\n\r\n  var ua = window.navigator.userAgent;\r\n  var msie = ua.indexOf('MSIE ');\r\n  var trident = ua.indexOf('Trident/');\r\n  return msie > 0 || trident > 0;\r\n};\r\n\r\n/**\r\n* Checks if in a 32bit Node.js environment.\r\n*\r\n* @return {bool} True if in a 32bit Node.js environment, false otherwise.\r\n*/\r\nexports.is32 = function () {\r\n  return !exports.isBrowser() && process.arch === 'ia32';\r\n};\r\n\r\n/**\r\n* Checks if a value is null or undefined.\r\n*\r\n* @param {object} value The value to check for null or undefined.\r\n* @return {bool} True if the value is null or undefined, false otherwise.\r\n*/\r\nexports.objectIsNull = function (value) {\r\n  return _.isNull(value) || _.isUndefined(value);\r\n};\r\n\r\n/**\r\n* Checks if an object is empty.\r\n*\r\n* @param {object} object The object to check if it is null.\r\n* @return {bool} True if the object is empty, false otherwise.\r\n*/\r\nexports.objectIsEmpty = function (object) {\r\n  return _.isEmpty(object);\r\n};\r\n\r\n/**\r\n* Determines if an object contains an integer number.\r\n*\r\n* @param {object}  value  The object to assert.\r\n* @return {bool} True if the object contains an integer number; false otherwise.\r\n*/\r\nexports.objectIsInt = function (value) {\r\n  return typeof value === 'number' && parseFloat(value) == parseInt(value, 10) && !isNaN(value);\r\n};\r\n\r\n/**\r\n* Determines if an object is a NaN.\r\n*\r\n* @param {object}  value  The object to assert.\r\n* @return {bool} True if the object is a NaN; false otherwise.\r\n*/\r\nexports.objectIsNaN = function (value) {\r\n  return typeof(value) === 'number' && isNaN(value);\r\n};\r\n\r\n/**\r\n* Checks if an object is a string.\r\n*\r\n* @param {object} object The object to check if it is a string.\r\n* @return {bool} True if the object is a string, false otherwise.\r\n*/\r\nexports.objectIsString = function (object) {\r\n  return _.isString(object);\r\n};\r\n\r\n/**\r\n* Check if an object is a function\r\n* @param {object} object The object to check whether it is function\r\n* @return {bool} True if the specified object is function, otherwise false\r\n*/\r\nexports.objectIsFunction = function (object) {\r\n  return _.isFunction(object);\r\n};\r\n\r\n\r\n/**\r\n* Front zero padding of string to sepcified length\r\n*/\r\nexports.zeroPaddingString = function(str, len) {\r\n  var paddingStr = '0000000000' + str;\r\n  if(paddingStr.length < len) {\r\n    return exports.zeroPaddingString(paddingStr, len);\r\n  } else {\r\n    return paddingStr.substr(-1 * len);\r\n  }\r\n};\r\n\r\n/**\r\n* Checks if a value is an empty string, null or undefined.\r\n*\r\n* @param {object} value The value to check for an empty string, null or undefined.\r\n* @return {bool} True if the value is an empty string, null or undefined, false otherwise.\r\n*/\r\nexports.stringIsEmpty = function (value) {\r\n  return _.isNull(value) || _.isUndefined(value) || value === '';\r\n};\r\n\r\n/**\r\n* Checks if a value is null, empty, undefined or consists only of white-space characters.\r\n*\r\n* @param {object} value The value to check for null, empty, undefined and white-space only characters.\r\n* @return {bool} True if the value is an empty string, null, undefined, or consists only of white-space characters, false otherwise.\r\n*/\r\nexports.IsNullOrEmptyOrUndefinedOrWhiteSpace = function (value) {\r\n  if(_.isNull(value) || _.isUndefined(value) || value === '') {\r\n    return true;\r\n  }\r\n\r\n  if(_.isString(value) && value.trim().length === 0) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/**\r\n* Formats a text replacing '?' by the arguments.\r\n*\r\n* @param {string}       text      The string where the ? should be replaced.\r\n* @param {array}        arguments Value(s) to insert in question mark (?) parameters.\r\n* @return {string}\r\n*/\r\nexports.stringFormat = function (text) {\r\n  if (arguments.length > 1) {\r\n    for (var i = 1; text.indexOf('?') !== -1; i++) {\r\n      text = text.replace('?', arguments[i]);\r\n    }\r\n  }\r\n\r\n  return text;\r\n};\r\n\r\n/**\r\n* Determines if a string starts with another.\r\n*\r\n* @param {string}       text      The string to assert.\r\n* @param {string}       prefix    The string prefix.\r\n* @return {Bool} True if the string starts with the prefix; false otherwise.\r\n*/\r\nexports.stringStartsWith = function (text, prefix) {\r\n  if (_.isNull(prefix)) {\r\n    return true;\r\n  }\r\n\r\n  return text.substr(0, prefix.length) === prefix;\r\n};\r\n\r\n/**\r\n* Determines if a string ends with another.\r\n*\r\n* @param {string}       text      The string to assert.\r\n* @param {string}       suffix    The string suffix.\r\n* @return {Bool} True if the string ends with the suffix; false otherwise.\r\n*/\r\nexports.stringEndsWith = function (text, suffix) {\r\n  if (_.isNull(suffix)) {\r\n    return true;\r\n  }\r\n\r\n  return text.substr(text.length - suffix.length) === suffix;\r\n};\r\n\r\n/**\r\n* Removes the BOM from a string.\r\n*\r\n* @param {string} str The string from where the BOM is to be removed\r\n* @return {string} The string without the BOM.\r\n*/\r\nexports.removeBOM = function (str) {\r\n  if (str.charCodeAt(0) === 0xfeff || str.charCodeAt(0) === 0xffef) {\r\n    str = str.substring(1);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n/**\r\n* Merges multiple objects.\r\n*\r\n* @param {object} object The objects to be merged\r\n* @return {object} The merged object.\r\n*/\r\nexports.merge = function () {\r\n  return _.extend.apply(this, arguments);\r\n};\r\n\r\n/**\r\n* Checks if a value exists in an array. The comparison is done in a case\r\n* insensitive manner.\r\n*\r\n* @param {string} needle     The searched value.\r\n* @param {array}  haystack   The array.\r\n*\r\n* @static\r\n*\r\n* @return {boolean}\r\n*/\r\nexports.inArrayInsensitive = function (needle, haystack) {\r\n  return _.contains(_.map(haystack, function (h) { return h.toLowerCase(); }), needle.toLowerCase());\r\n};\r\n\r\n/**\r\n* Returns the specified value of the key passed from object and in case that\r\n* this key doesn't exist, the default value is returned. The key matching is\r\n* done in a case insensitive manner.\r\n*\r\n* @param {string} key      The array key.\r\n* @param {object} haystack The object to be used.\r\n* @param {mix}    default  The value to return if $key is not found in $array.\r\n*\r\n* @static\r\n*\r\n* @return mix\r\n*/\r\nexports.tryGetValueInsensitive = function (key, haystack, defaultValue) {\r\n  if (haystack) {\r\n    for (var i in haystack) {\r\n      if (haystack.hasOwnProperty(i) && i.toString().toLowerCase() === key.toString().toLowerCase()) {\r\n        return haystack[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  return defaultValue;\r\n};\r\n\r\n/**\r\n* Returns the value in a chained object.\r\n*\r\n* @param {object} object   The object with the values.\r\n* @param {array}  keys     The keys.\r\n* @param {mix}    default  The value to return if $key is not found in $array.\r\n*\r\n* @static\r\n*\r\n* @return mix\r\n*/\r\nexports.tryGetValueChain = function (object, keys, defaultValue) {\r\n  if (keys.length === 0) {\r\n    return object;\r\n  }\r\n\r\n  var currentKey = keys.shift();\r\n  if (object && object[currentKey] !== undefined) {\r\n    return exports.tryGetValueChain(object[currentKey], keys, defaultValue);\r\n  }\r\n\r\n  return defaultValue;\r\n};\r\n\r\n/**\r\n* Set the value of an inner property of an object.\r\n*\r\n* @param {object} object   The target object.\r\n* @param {array}  keys     The property chain keys.\r\n* @param {mix}    object   The value to be set.\r\n*\r\n* @static\r\n\r\n* @example\r\n* // Set targetObject.propA.propB to 'testValue'\r\n* var targetObject = {};\r\n* util.setObjectInnerPropertyValue(targetObject, ['propA', 'propB'], 'testValue');\r\n*/\r\nexports.setObjectInnerPropertyValue = function(object, propertyChainKeys, value){\r\n  if(!object || propertyChainKeys.length < 1) {\r\n    return;\r\n  }\r\n\r\n  var currentKey = propertyChainKeys.shift();\r\n  if(propertyChainKeys.length === 0) {\r\n    object[currentKey] = value;\r\n    return;\r\n  }\r\n  \r\n  if (!object[currentKey]) {\r\n    object[currentKey] = {};\r\n  }\r\n  \r\n  exports.setObjectInnerPropertyValue(object[currentKey], propertyChainKeys, value);\r\n};\r\n\r\n/**\r\n* Rounds a date off to seconds.\r\n*\r\n* @param {Date} a date\r\n* @return {string} the date in ISO8061 format, with no milliseconds component\r\n*/\r\nexports.truncatedISO8061Date = function (date) {\r\n  var dateString = date.toISOString();\r\n  return dateString.substring(0, dateString.length - 5) + 'Z';\r\n};\r\n\r\nexports.normalizeArgs = function (optionsOrCallback, callback, result) {\r\n  var options = {};\r\n  if(_.isFunction(optionsOrCallback) && !callback) {\r\n    callback = optionsOrCallback;\r\n  } else if (optionsOrCallback) {\r\n    options = optionsOrCallback;\r\n  }\r\n\r\n  result(options, callback);\r\n};\r\n\r\nexports.getNodeVersion = function () {\r\n  var parsedVersion = process.version.split('.');\r\n  return {\r\n    major: parseInt(parsedVersion[0].substr(1), 10),\r\n    minor: parseInt(parsedVersion[1], 10),\r\n    patch: parseInt(parsedVersion[2], 10)\r\n  };\r\n};\r\n\r\n/**\r\n* Calculate md5sum for the stream\r\n* @ignore\r\n*/\r\nexports.calculateMD5 = function(readStream, bufferLength, options, callback) {\r\n  var internalBuff = new Buffer(bufferLength);\r\n  var index = 0;\r\n  var internalHash = new Md5Wrapper().createMd5Hash();\r\n  readStream.on('data', function(data) {\r\n    if (index + data.length > bufferLength) {\r\n      var copyLength = bufferLength - index;\r\n      if (copyLength > 0) {\r\n        data = data.slice(0, copyLength);\r\n        data.copy(internalBuff, index);\r\n        internalHash.update(data);\r\n        index += copyLength;\r\n      }\r\n      readStream.emit('end');\r\n    } else {\r\n      data.copy(internalBuff, index);\r\n      internalHash.update(data);\r\n      index += data.length;\r\n    }\r\n  }).on('end', function() {\r\n    if (!readStream.endEmitted) {\r\n      internalBuff = internalBuff.slice(0, index);\r\n      var contentMD5 = internalHash.digest('base64');\r\n      // Set the flag to be compatible with Nodejs 0.10 which will keep emitting data from \r\n      // the file stream when the read stream has emitted the end event from its listner. \r\n      readStream.endEmitted = true;\r\n      callback(internalBuff, contentMD5);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Whether the content of buffer is all zero\r\n*/\r\nexports.isBufferAllZero = function (buffer) {\r\n  for(var i = 0, len = buffer.length; i < len; i++) {\r\n    if (buffer[i] !== 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n* Write zero to stream\r\n*/\r\nvar zeroBuffer = null;\r\nexports.writeZerosToStream = function (stream, length, md5Hash, progressCallback, callback) {\r\n  var defaultBufferSize = Constants.BlobConstants.DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES;\r\n  var bufferSize = Math.min(defaultBufferSize, length);\r\n  var remaining = length - bufferSize;\r\n  var buffer = null;\r\n  if (bufferSize == defaultBufferSize) {\r\n    if (!zeroBuffer) {\r\n      zeroBuffer = new Buffer(defaultBufferSize);\r\n      zeroBuffer.fill(0);\r\n    }\r\n    buffer = zeroBuffer;\r\n  } else {\r\n    buffer = new Buffer(bufferSize);\r\n    buffer.fill(0);\r\n  }\r\n  if (md5Hash) {\r\n    md5Hash.update(buffer);\r\n  }\r\n  //We can only write the entire buffer to stream instead of part of buffer.\r\n  return stream.write(buffer, function () {\r\n    if (exports.objectIsFunction(progressCallback)) {\r\n      progressCallback(null, buffer.length);\r\n    }\r\n    buffer = null;\r\n    if (remaining > 0) {\r\n      exports.writeZerosToStream(stream, remaining, md5Hash, progressCallback, callback);\r\n    } else if (exports.objectIsFunction(callback)) {\r\n      callback(null, null);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Calculate md5sum for the content\r\n*/\r\nexports.getContentMd5 = function (content, encoding) {\r\n  if (!encoding) encoding = 'base64';\r\n  var internalHash = new Md5Wrapper().createMd5Hash();\r\n  internalHash.update(content, 'utf8');\r\n  return internalHash.digest(encoding);\r\n};\r\n\r\nexports.getNextLocation = function(lastLocation, locationMode) {\r\n  switch(locationMode) {\r\n  case StorageUtilities.LocationMode.PRIMARY_ONLY:\r\n    return Constants.StorageLocation.PRIMARY;\r\n  case StorageUtilities.LocationMode.SECONDARY_ONLY:\r\n    return Constants.StorageLocation.SECONDARY;\r\n  case StorageUtilities.LocationMode.PRIMARY_THEN_SECONDARY:\r\n  case StorageUtilities.LocationMode.SECONDARY_THEN_PRIMARY:\r\n    return (lastLocation === Constants.StorageLocation.PRIMARY) ? Constants.StorageLocation.SECONDARY : Constants.StorageLocation.PRIMARY;\r\n  default:\r\n    throw new RangeError(util.format(SR.ARGUMENT_OUT_OF_RANGE_ERROR, 'locationMode', locationMode));\r\n  }\r\n};\r\n\r\nexports.getNextListingLocationMode = function (token) {\r\n  if(_.isNull(token) || _.isUndefined(token)) {\r\n    return Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  }\r\n  else {\r\n    switch (token.targetLocation) {\r\n    case Constants.StorageLocation.PRIMARY:\r\n      return Constants.RequestLocationMode.PRIMARY_ONLY;\r\n    case Constants.StorageLocation.SECONDARY:\r\n      return Constants.RequestLocationMode.SECONDARY_ONLY;\r\n    default:\r\n      throw new RangeError(util.format(SR.ARGUMENT_OUT_OF_RANGE_ERROR, 'targetLocation', token.targetLocation));\r\n    }\r\n  }\r\n};\r\n\r\nexports.isStreamPaused = function (object) {\r\n  if (object instanceof stream) {\r\n    return object._paused === true || (object._readableState && object._readableState.flowing === false);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n* Parse copy progress string in the format of bytesCopied/totalBytes\r\n*/\r\nexports.parseCopyProgress = function (progress) {\r\n  if (typeof progress != 'string' || progress.indexOf('/') === -1) {\r\n    return {};\r\n  }\r\n  \r\n  var progressInfo = progress.split('/');\r\n  return { bytesCopied: progressInfo[0], totalBytes: progressInfo[1] };\r\n};\r\n\r\n/**\r\n* The list of the properties should be normalized with explicit mapping\r\n*/\r\nvar normalizePropertyNameExceptionList = {\r\n  'x-ms-blob-sequence-number': 'sequenceNumber',\r\n  'content-Type': 'contentSettings.contentType',\r\n  'content-Encoding': 'contentSettings.contentEncoding',\r\n  'content-Language': 'contentSettings.contentLanguage',\r\n  'cache-Control': 'contentSettings.cacheControl',\r\n  'content-Disposition': 'contentSettings.contentDisposition',\r\n  'content-MD5': 'contentSettings.contentMD5',\r\n  'leaseId': 'lease.id',\r\n  'leaseStatus': 'lease.status',\r\n  'leaseDuration': 'lease.duration',\r\n  'leaseState': 'lease.state',\r\n  'copyId': 'copy.id',\r\n  'copyStatus': 'copy.status',\r\n  'copySource': 'copy.source',\r\n  'copyProgress': 'copy.progress',\r\n  'copyCompletionTime': 'copy.completionTime',\r\n  'copyStatusDescription': 'copy.statusDescription',\r\n  'copyDestinationSnapshot': 'copy.destinationSnapshot',\r\n  'publicAccess': 'publicAccessLevel',\r\n  'incrementalCopy': 'isIncrementalCopy'\r\n};\r\n\r\n/**\r\n* Normalize the property name from XML to keep consistent with \r\n* the name defined in the property headers\r\n*/\r\nexports.normalizePropertyNameFromXML = function (propertyName) {\r\n  if (this.IsNullOrEmptyOrUndefinedOrWhiteSpace(propertyName)) {\r\n    return '';\r\n  }\r\n  \r\n  propertyName = propertyName.trim();\r\n  propertyName = propertyName[0].toLowerCase() + propertyName.substring(1);\r\n  // So far the cases are:\r\n  //   for the 'last-modified' property in listing resources\r\n  //   for the 'content-*' properties in listing resources\r\n  //   for the 'cache-control' property in listing blobs\r\n  //   for the 'x-ms-blob-sequence-number' in listing blobs\r\n  if (propertyName in normalizePropertyNameExceptionList) {\r\n    return normalizePropertyNameExceptionList[propertyName];\r\n  } else if (propertyName.toLowerCase().indexOf('-') != -1) {\r\n    return propertyName.replace('-', '');\r\n  } else {\r\n    return propertyName;\r\n  }\r\n};\r\n\r\n/**\r\n* Set the property value from XML\r\n*/\r\nexports.setPropertyValueFromXML = function (result, xmlNode, toNormalize) {\r\n  for (var subPropertyName in xmlNode) {\r\n    if (xmlNode.hasOwnProperty(subPropertyName)) {\r\n      if (toNormalize) {\r\n        var propertyChain = this.normalizePropertyNameFromXML(subPropertyName).split('.');\r\n        exports.setObjectInnerPropertyValue(result, propertyChain, xmlNode[subPropertyName]);\r\n      } else {\r\n        result[subPropertyName.toLowerCase()] = xmlNode[subPropertyName];\r\n      }\r\n      \r\n      if (subPropertyName.toLowerCase() === 'copyprogress') {\r\n        var info = this.parseCopyProgress(xmlNode[subPropertyName]);\r\n        exports.setObjectInnerPropertyValue(result, ['copy', 'bytesCopied'], parseInt(info.bytesCopied));\r\n        exports.setObjectInnerPropertyValue(result, ['copy', 'totalBytes'], parseInt(info.totalBytes));\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Filter out non-reserved properties from options\r\n */\r\nexports.filterOutNonReservedProperties = function (reserved, options) {\r\n  var nonReservedProperties = {};\r\n  if (options) {\r\n    for (var prop in options) {\r\n      if (options.hasOwnProperty(prop)) {\r\n        var isReserved = reserved.hasOwnProperty(prop);\r\n        var isFunction = typeof options[prop] === 'function';\r\n        if (!isReserved && !isFunction) {\r\n          nonReservedProperties[prop] = options[prop];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return nonReservedProperties;\r\n};","module.exports = require(\"https\");","'use strict';\n\n\nmodule.exports = {\n  copy: copy,\n  checkDataType: checkDataType,\n  checkDataTypes: checkDataTypes,\n  coerceToTypes: coerceToTypes,\n  toHash: toHash,\n  getProperty: getProperty,\n  escapeQuotes: escapeQuotes,\n  equal: require('fast-deep-equal'),\n  ucs2length: require('./ucs2length'),\n  varOccurences: varOccurences,\n  varReplace: varReplace,\n  cleanUpCode: cleanUpCode,\n  finalCleanUpCode: finalCleanUpCode,\n  schemaHasRules: schemaHasRules,\n  schemaHasRulesExcept: schemaHasRulesExcept,\n  toQuotedString: toQuotedString,\n  getPathExpr: getPathExpr,\n  getPath: getPath,\n  getData: getData,\n  unescapeFragment: unescapeFragment,\n  unescapeJsonPointer: unescapeJsonPointer,\n  escapeFragment: escapeFragment,\n  escapeJsonPointer: escapeJsonPointer\n};\n\n\nfunction copy(o, to) {\n  to = to || {};\n  for (var key in o) to[key] = o[key];\n  return to;\n}\n\n\nfunction checkDataType(dataType, data, negate) {\n  var EQUAL = negate ? ' !== ' : ' === '\n    , AND = negate ? ' || ' : ' && '\n    , OK = negate ? '!' : ''\n    , NOT = negate ? '' : '!';\n  switch (dataType) {\n    case 'null': return data + EQUAL + 'null';\n    case 'array': return OK + 'Array.isArray(' + data + ')';\n    case 'object': return '(' + OK + data + AND +\n                          'typeof ' + data + EQUAL + '\"object\"' + AND +\n                          NOT + 'Array.isArray(' + data + '))';\n    case 'integer': return '(typeof ' + data + EQUAL + '\"number\"' + AND +\n                           NOT + '(' + data + ' % 1)' +\n                           AND + data + EQUAL + data + ')';\n    default: return 'typeof ' + data + EQUAL + '\"' + dataType + '\"';\n  }\n}\n\n\nfunction checkDataTypes(dataTypes, data) {\n  switch (dataTypes.length) {\n    case 1: return checkDataType(dataTypes[0], data, true);\n    default:\n      var code = '';\n      var types = toHash(dataTypes);\n      if (types.array && types.object) {\n        code = types.null ? '(': '(!' + data + ' || ';\n        code += 'typeof ' + data + ' !== \"object\")';\n        delete types.null;\n        delete types.array;\n        delete types.object;\n      }\n      if (types.number) delete types.integer;\n      for (var t in types)\n        code += (code ? ' && ' : '' ) + checkDataType(t, data, true);\n\n      return code;\n  }\n}\n\n\nvar COERCE_TO_TYPES = toHash([ 'string', 'number', 'integer', 'boolean', 'null' ]);\nfunction coerceToTypes(optionCoerceTypes, dataTypes) {\n  if (Array.isArray(dataTypes)) {\n    var types = [];\n    for (var i=0; i<dataTypes.length; i++) {\n      var t = dataTypes[i];\n      if (COERCE_TO_TYPES[t]) types[types.length] = t;\n      else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;\n    }\n    if (types.length) return types;\n  } else if (COERCE_TO_TYPES[dataTypes]) {\n    return [dataTypes];\n  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {\n    return ['array'];\n  }\n}\n\n\nfunction toHash(arr) {\n  var hash = {};\n  for (var i=0; i<arr.length; i++) hash[arr[i]] = true;\n  return hash;\n}\n\n\nvar IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\nvar SINGLE_QUOTE = /'|\\\\/g;\nfunction getProperty(key) {\n  return typeof key == 'number'\n          ? '[' + key + ']'\n          : IDENTIFIER.test(key)\n            ? '.' + key\n            : \"['\" + escapeQuotes(key) + \"']\";\n}\n\n\nfunction escapeQuotes(str) {\n  return str.replace(SINGLE_QUOTE, '\\\\$&')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\f/g, '\\\\f')\n            .replace(/\\t/g, '\\\\t');\n}\n\n\nfunction varOccurences(str, dataVar) {\n  dataVar += '[^0-9]';\n  var matches = str.match(new RegExp(dataVar, 'g'));\n  return matches ? matches.length : 0;\n}\n\n\nfunction varReplace(str, dataVar, expr) {\n  dataVar += '([^0-9])';\n  expr = expr.replace(/\\$/g, '$$$$');\n  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');\n}\n\n\nvar EMPTY_ELSE = /else\\s*{\\s*}/g\n  , EMPTY_IF_NO_ELSE = /if\\s*\\([^)]+\\)\\s*\\{\\s*\\}(?!\\s*else)/g\n  , EMPTY_IF_WITH_ELSE = /if\\s*\\(([^)]+)\\)\\s*\\{\\s*\\}\\s*else(?!\\s*if)/g;\nfunction cleanUpCode(out) {\n  return out.replace(EMPTY_ELSE, '')\n            .replace(EMPTY_IF_NO_ELSE, '')\n            .replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');\n}\n\n\nvar ERRORS_REGEXP = /[^v.]errors/g\n  , REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g\n  , REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g\n  , RETURN_VALID = 'return errors === 0;'\n  , RETURN_TRUE = 'validate.errors = null; return true;'\n  , RETURN_ASYNC = /if \\(errors === 0\\) return data;\\s*else throw new ValidationError\\(vErrors\\);/\n  , RETURN_DATA_ASYNC = 'return data;'\n  , ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g\n  , REMOVE_ROOTDATA = /if \\(rootData === undefined\\) rootData = data;/;\n\nfunction finalCleanUpCode(out, async) {\n  var matches = out.match(ERRORS_REGEXP);\n  if (matches && matches.length == 2) {\n    out = async\n          ? out.replace(REMOVE_ERRORS_ASYNC, '')\n               .replace(RETURN_ASYNC, RETURN_DATA_ASYNC)\n          : out.replace(REMOVE_ERRORS, '')\n               .replace(RETURN_VALID, RETURN_TRUE);\n  }\n\n  matches = out.match(ROOTDATA_REGEXP);\n  if (!matches || matches.length !== 3) return out;\n  return out.replace(REMOVE_ROOTDATA, '');\n}\n\n\nfunction schemaHasRules(schema, rules) {\n  if (typeof schema == 'boolean') return !schema;\n  for (var key in schema) if (rules[key]) return true;\n}\n\n\nfunction schemaHasRulesExcept(schema, rules, exceptKeyword) {\n  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';\n  for (var key in schema) if (key != exceptKeyword && rules[key]) return true;\n}\n\n\nfunction toQuotedString(str) {\n  return '\\'' + escapeQuotes(str) + '\\'';\n}\n\n\nfunction getPathExpr(currentPath, expr, jsonPointers, isNumber) {\n  var path = jsonPointers // false by default\n              ? '\\'/\\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \\'~0\\').replace(/\\\\//g, \\'~1\\')')\n              : (isNumber ? '\\'[\\' + ' + expr + ' + \\']\\'' : '\\'[\\\\\\'\\' + ' + expr + ' + \\'\\\\\\']\\'');\n  return joinPaths(currentPath, path);\n}\n\n\nfunction getPath(currentPath, prop, jsonPointers) {\n  var path = jsonPointers // false by default\n              ? toQuotedString('/' + escapeJsonPointer(prop))\n              : toQuotedString(getProperty(prop));\n  return joinPaths(currentPath, path);\n}\n\n\nvar JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/;\nvar RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/;\nfunction getData($data, lvl, paths) {\n  var up, jsonPointer, data, matches;\n  if ($data === '') return 'rootData';\n  if ($data[0] == '/') {\n    if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);\n    jsonPointer = $data;\n    data = 'rootData';\n  } else {\n    matches = $data.match(RELATIVE_JSON_POINTER);\n    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);\n    up = +matches[1];\n    jsonPointer = matches[2];\n    if (jsonPointer == '#') {\n      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);\n      return paths[lvl - up];\n    }\n\n    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);\n    data = 'data' + ((lvl - up) || '');\n    if (!jsonPointer) return data;\n  }\n\n  var expr = data;\n  var segments = jsonPointer.split('/');\n  for (var i=0; i<segments.length; i++) {\n    var segment = segments[i];\n    if (segment) {\n      data += getProperty(unescapeJsonPointer(segment));\n      expr += ' && ' + data;\n    }\n  }\n  return expr;\n}\n\n\nfunction joinPaths (a, b) {\n  if (a == '\"\"') return b;\n  return (a + ' + ' + b).replace(/' \\+ '/g, '');\n}\n\n\nfunction unescapeFragment(str) {\n  return unescapeJsonPointer(decodeURIComponent(str));\n}\n\n\nfunction escapeFragment(str) {\n  return encodeURIComponent(escapeJsonPointer(str));\n}\n\n\nfunction escapeJsonPointer(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n","module.exports = require(\"querystring\");","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","module.exports = require(\"assert\");","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Fingerprint;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar Key = require('./key');\nvar Certificate = require('./certificate');\nvar utils = require('./utils');\n\nvar FingerprintFormatError = errs.FingerprintFormatError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\n\nfunction Fingerprint(opts) {\n\tassert.object(opts, 'options');\n\tassert.string(opts.type, 'options.type');\n\tassert.buffer(opts.hash, 'options.hash');\n\tassert.string(opts.algorithm, 'options.algorithm');\n\n\tthis.algorithm = opts.algorithm.toLowerCase();\n\tif (algs.hashAlgs[this.algorithm] !== true)\n\t\tthrow (new InvalidAlgorithmError(this.algorithm));\n\n\tthis.hash = opts.hash;\n\tthis.type = opts.type;\n}\n\nFingerprint.prototype.toString = function (format) {\n\tif (format === undefined) {\n\t\tif (this.algorithm === 'md5')\n\t\t\tformat = 'hex';\n\t\telse\n\t\t\tformat = 'base64';\n\t}\n\tassert.string(format);\n\n\tswitch (format) {\n\tcase 'hex':\n\t\treturn (addColons(this.hash.toString('hex')));\n\tcase 'base64':\n\t\treturn (sshBase64Format(this.algorithm,\n\t\t    this.hash.toString('base64')));\n\tdefault:\n\t\tthrow (new FingerprintFormatError(undefined, format));\n\t}\n};\n\nFingerprint.prototype.matches = function (other) {\n\tassert.object(other, 'key or certificate');\n\tif (this.type === 'key') {\n\t\tutils.assertCompatible(other, Key, [1, 0], 'key');\n\t} else {\n\t\tutils.assertCompatible(other, Certificate, [1, 0],\n\t\t    'certificate');\n\t}\n\n\tvar theirHash = other.hash(this.algorithm);\n\tvar theirHash2 = crypto.createHash(this.algorithm).\n\t    update(theirHash).digest('base64');\n\n\tif (this.hash2 === undefined)\n\t\tthis.hash2 = crypto.createHash(this.algorithm).\n\t\t    update(this.hash).digest('base64');\n\n\treturn (this.hash2 === theirHash2);\n};\n\nFingerprint.parse = function (fp, options) {\n\tassert.string(fp, 'fingerprint');\n\n\tvar alg, hash, enAlgs;\n\tif (Array.isArray(options)) {\n\t\tenAlgs = options;\n\t\toptions = {};\n\t}\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tif (options.enAlgs !== undefined)\n\t\tenAlgs = options.enAlgs;\n\tassert.optionalArrayOfString(enAlgs, 'algorithms');\n\n\tvar parts = fp.split(':');\n\tif (parts.length == 2) {\n\t\talg = parts[0].toLowerCase();\n\t\t/*JSSTYLED*/\n\t\tvar base64RE = /^[A-Za-z0-9+\\/=]+$/;\n\t\tif (!base64RE.test(parts[1]))\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\ttry {\n\t\t\thash = new Buffer(parts[1], 'base64');\n\t\t} catch (e) {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\t} else if (parts.length > 2) {\n\t\talg = 'md5';\n\t\tif (parts[0].toLowerCase() === 'md5')\n\t\t\tparts = parts.slice(1);\n\t\tparts = parts.join('');\n\t\t/*JSSTYLED*/\n\t\tvar md5RE = /^[a-fA-F0-9]+$/;\n\t\tif (!md5RE.test(parts))\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\ttry {\n\t\t\thash = new Buffer(parts, 'hex');\n\t\t} catch (e) {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\t}\n\n\tif (alg === undefined)\n\t\tthrow (new FingerprintFormatError(fp));\n\n\tif (algs.hashAlgs[alg] === undefined)\n\t\tthrow (new InvalidAlgorithmError(alg));\n\n\tif (enAlgs !== undefined) {\n\t\tenAlgs = enAlgs.map(function (a) { return a.toLowerCase(); });\n\t\tif (enAlgs.indexOf(alg) === -1)\n\t\t\tthrow (new InvalidAlgorithmError(alg));\n\t}\n\n\treturn (new Fingerprint({\n\t\talgorithm: alg,\n\t\thash: hash,\n\t\ttype: options.type || 'key'\n\t}));\n};\n\nfunction addColons(s) {\n\t/*JSSTYLED*/\n\treturn (s.replace(/(.{2})(?=.)/g, '$1:'));\n}\n\nfunction base64Strip(s) {\n\t/*JSSTYLED*/\n\treturn (s.replace(/=*$/, ''));\n}\n\nfunction sshBase64Format(alg, h) {\n\treturn (alg.toUpperCase() + ':' + base64Strip(h));\n}\n\nFingerprint.isFingerprint = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Fingerprint, ver));\n};\n\n/*\n * API versions for Fingerprint:\n * [1,0] -- initial ver\n * [1,1] -- first tagged ver\n */\nFingerprint.prototype._sshpkApiVersion = [1, 1];\n\nFingerprint._oldVersionDetect = function (obj) {\n\tassert.func(obj.toString);\n\tassert.func(obj.matches);\n\treturn ([1, 0]);\n};\n","// Copyright 2016 Joyent, Inc.\n\nmodule.exports = Certificate;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\nvar Identity = require('./identity');\n\nvar formats = {};\nformats['openssh'] = require('./formats/openssh-cert');\nformats['x509'] = require('./formats/x509');\nformats['pem'] = require('./formats/x509-pem');\n\nvar CertificateParseError = errs.CertificateParseError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\n\nfunction Certificate(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.subjects, 'options.subjects');\n\tutils.assertCompatible(opts.subjects[0], Identity, [1, 0],\n\t    'options.subjects');\n\tutils.assertCompatible(opts.subjectKey, Key, [1, 0],\n\t    'options.subjectKey');\n\tutils.assertCompatible(opts.issuer, Identity, [1, 0], 'options.issuer');\n\tif (opts.issuerKey !== undefined) {\n\t\tutils.assertCompatible(opts.issuerKey, Key, [1, 0],\n\t\t    'options.issuerKey');\n\t}\n\tassert.object(opts.signatures, 'options.signatures');\n\tassert.buffer(opts.serial, 'options.serial');\n\tassert.date(opts.validFrom, 'options.validFrom');\n\tassert.date(opts.validUntil, 'optons.validUntil');\n\n\tassert.optionalArrayOfString(opts.purposes, 'options.purposes');\n\n\tthis._hashCache = {};\n\n\tthis.subjects = opts.subjects;\n\tthis.issuer = opts.issuer;\n\tthis.subjectKey = opts.subjectKey;\n\tthis.issuerKey = opts.issuerKey;\n\tthis.signatures = opts.signatures;\n\tthis.serial = opts.serial;\n\tthis.validFrom = opts.validFrom;\n\tthis.validUntil = opts.validUntil;\n\tthis.purposes = opts.purposes;\n}\n\nCertificate.formats = formats;\n\nCertificate.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'x509';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\treturn (formats[format].write(this, options));\n};\n\nCertificate.prototype.toString = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'pem';\n\treturn (this.toBuffer(format, options).toString());\n};\n\nCertificate.prototype.fingerprint = function (algo) {\n\tif (algo === undefined)\n\t\talgo = 'sha256';\n\tassert.string(algo, 'algorithm');\n\tvar opts = {\n\t\ttype: 'certificate',\n\t\thash: this.hash(algo),\n\t\talgorithm: algo\n\t};\n\treturn (new Fingerprint(opts));\n};\n\nCertificate.prototype.hash = function (algo) {\n\tassert.string(algo, 'algorithm');\n\talgo = algo.toLowerCase();\n\tif (algs.hashAlgs[algo] === undefined)\n\t\tthrow (new InvalidAlgorithmError(algo));\n\n\tif (this._hashCache[algo])\n\t\treturn (this._hashCache[algo]);\n\n\tvar hash = crypto.createHash(algo).\n\t    update(this.toBuffer('x509')).digest();\n\tthis._hashCache[algo] = hash;\n\treturn (hash);\n};\n\nCertificate.prototype.isExpired = function (when) {\n\tif (when === undefined)\n\t\twhen = new Date();\n\treturn (!((when.getTime() >= this.validFrom.getTime()) &&\n\t\t(when.getTime() < this.validUntil.getTime())));\n};\n\nCertificate.prototype.isSignedBy = function (issuerCert) {\n\tutils.assertCompatible(issuerCert, Certificate, [1, 0], 'issuer');\n\n\tif (!this.issuer.equals(issuerCert.subjects[0]))\n\t\treturn (false);\n\tif (this.issuer.purposes && this.issuer.purposes.length > 0 &&\n\t    this.issuer.purposes.indexOf('ca') === -1) {\n\t\treturn (false);\n\t}\n\n\treturn (this.isSignedByKey(issuerCert.subjectKey));\n};\n\nCertificate.prototype.isSignedByKey = function (issuerKey) {\n\tutils.assertCompatible(issuerKey, Key, [1, 2], 'issuerKey');\n\n\tif (this.issuerKey !== undefined) {\n\t\treturn (this.issuerKey.\n\t\t    fingerprint('sha512').matches(issuerKey));\n\t}\n\n\tvar fmt = Object.keys(this.signatures)[0];\n\tvar valid = formats[fmt].verify(this, issuerKey);\n\tif (valid)\n\t\tthis.issuerKey = issuerKey;\n\treturn (valid);\n};\n\nCertificate.prototype.signWith = function (key) {\n\tutils.assertCompatible(key, PrivateKey, [1, 2], 'key');\n\tvar fmts = Object.keys(formats);\n\tvar didOne = false;\n\tfor (var i = 0; i < fmts.length; ++i) {\n\t\tif (fmts[i] !== 'pem') {\n\t\t\tvar ret = formats[fmts[i]].sign(this, key);\n\t\t\tif (ret === true)\n\t\t\t\tdidOne = true;\n\t\t}\n\t}\n\tif (!didOne) {\n\t\tthrow (new Error('Failed to sign the certificate for any ' +\n\t\t    'available certificate formats'));\n\t}\n};\n\nCertificate.createSelfSigned = function (subjectOrSubjects, key, options) {\n\tvar subjects;\n\tif (Array.isArray(subjectOrSubjects))\n\t\tsubjects = subjectOrSubjects;\n\telse\n\t\tsubjects = [subjectOrSubjects];\n\n\tassert.arrayOfObject(subjects);\n\tsubjects.forEach(function (subject) {\n\t\tutils.assertCompatible(subject, Identity, [1, 0], 'subject');\n\t});\n\n\tutils.assertCompatible(key, PrivateKey, [1, 2], 'private key');\n\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalObject(options.validFrom, 'options.validFrom');\n\tassert.optionalObject(options.validUntil, 'options.validUntil');\n\tvar validFrom = options.validFrom;\n\tvar validUntil = options.validUntil;\n\tif (validFrom === undefined)\n\t\tvalidFrom = new Date();\n\tif (validUntil === undefined) {\n\t\tassert.optionalNumber(options.lifetime, 'options.lifetime');\n\t\tvar lifetime = options.lifetime;\n\t\tif (lifetime === undefined)\n\t\t\tlifetime = 10*365*24*3600;\n\t\tvalidUntil = new Date();\n\t\tvalidUntil.setTime(validUntil.getTime() + lifetime*1000);\n\t}\n\tassert.optionalBuffer(options.serial, 'options.serial');\n\tvar serial = options.serial;\n\tif (serial === undefined)\n\t\tserial = new Buffer('0000000000000001', 'hex');\n\n\tvar purposes = options.purposes;\n\tif (purposes === undefined)\n\t\tpurposes = [];\n\n\tif (purposes.indexOf('signature') === -1)\n\t\tpurposes.push('signature');\n\n\t/* Self-signed certs are always CAs. */\n\tif (purposes.indexOf('ca') === -1)\n\t\tpurposes.push('ca');\n\tif (purposes.indexOf('crl') === -1)\n\t\tpurposes.push('crl');\n\n\t/*\n\t * If we weren't explicitly given any other purposes, do the sensible\n\t * thing and add some basic ones depending on the subject type.\n\t */\n\tif (purposes.length <= 3) {\n\t\tvar hostSubjects = subjects.filter(function (subject) {\n\t\t\treturn (subject.type === 'host');\n\t\t});\n\t\tvar userSubjects = subjects.filter(function (subject) {\n\t\t\treturn (subject.type === 'user');\n\t\t});\n\t\tif (hostSubjects.length > 0) {\n\t\t\tif (purposes.indexOf('serverAuth') === -1)\n\t\t\t\tpurposes.push('serverAuth');\n\t\t}\n\t\tif (userSubjects.length > 0) {\n\t\t\tif (purposes.indexOf('clientAuth') === -1)\n\t\t\t\tpurposes.push('clientAuth');\n\t\t}\n\t\tif (userSubjects.length > 0 || hostSubjects.length > 0) {\n\t\t\tif (purposes.indexOf('keyAgreement') === -1)\n\t\t\t\tpurposes.push('keyAgreement');\n\t\t\tif (key.type === 'rsa' &&\n\t\t\t    purposes.indexOf('encryption') === -1)\n\t\t\t\tpurposes.push('encryption');\n\t\t}\n\t}\n\n\tvar cert = new Certificate({\n\t\tsubjects: subjects,\n\t\tissuer: subjects[0],\n\t\tsubjectKey: key.toPublic(),\n\t\tissuerKey: key.toPublic(),\n\t\tsignatures: {},\n\t\tserial: serial,\n\t\tvalidFrom: validFrom,\n\t\tvalidUntil: validUntil,\n\t\tpurposes: purposes\n\t});\n\tcert.signWith(key);\n\n\treturn (cert);\n};\n\nCertificate.create =\n    function (subjectOrSubjects, key, issuer, issuerKey, options) {\n\tvar subjects;\n\tif (Array.isArray(subjectOrSubjects))\n\t\tsubjects = subjectOrSubjects;\n\telse\n\t\tsubjects = [subjectOrSubjects];\n\n\tassert.arrayOfObject(subjects);\n\tsubjects.forEach(function (subject) {\n\t\tutils.assertCompatible(subject, Identity, [1, 0], 'subject');\n\t});\n\n\tutils.assertCompatible(key, Key, [1, 0], 'key');\n\tif (PrivateKey.isPrivateKey(key))\n\t\tkey = key.toPublic();\n\tutils.assertCompatible(issuer, Identity, [1, 0], 'issuer');\n\tutils.assertCompatible(issuerKey, PrivateKey, [1, 2], 'issuer key');\n\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalObject(options.validFrom, 'options.validFrom');\n\tassert.optionalObject(options.validUntil, 'options.validUntil');\n\tvar validFrom = options.validFrom;\n\tvar validUntil = options.validUntil;\n\tif (validFrom === undefined)\n\t\tvalidFrom = new Date();\n\tif (validUntil === undefined) {\n\t\tassert.optionalNumber(options.lifetime, 'options.lifetime');\n\t\tvar lifetime = options.lifetime;\n\t\tif (lifetime === undefined)\n\t\t\tlifetime = 10*365*24*3600;\n\t\tvalidUntil = new Date();\n\t\tvalidUntil.setTime(validUntil.getTime() + lifetime*1000);\n\t}\n\tassert.optionalBuffer(options.serial, 'options.serial');\n\tvar serial = options.serial;\n\tif (serial === undefined)\n\t\tserial = new Buffer('0000000000000001', 'hex');\n\n\tvar purposes = options.purposes;\n\tif (purposes === undefined)\n\t\tpurposes = [];\n\n\tif (purposes.indexOf('signature') === -1)\n\t\tpurposes.push('signature');\n\n\tif (options.ca === true) {\n\t\tif (purposes.indexOf('ca') === -1)\n\t\t\tpurposes.push('ca');\n\t\tif (purposes.indexOf('crl') === -1)\n\t\t\tpurposes.push('crl');\n\t}\n\n\tvar hostSubjects = subjects.filter(function (subject) {\n\t\treturn (subject.type === 'host');\n\t});\n\tvar userSubjects = subjects.filter(function (subject) {\n\t\treturn (subject.type === 'user');\n\t});\n\tif (hostSubjects.length > 0) {\n\t\tif (purposes.indexOf('serverAuth') === -1)\n\t\t\tpurposes.push('serverAuth');\n\t}\n\tif (userSubjects.length > 0) {\n\t\tif (purposes.indexOf('clientAuth') === -1)\n\t\t\tpurposes.push('clientAuth');\n\t}\n\tif (userSubjects.length > 0 || hostSubjects.length > 0) {\n\t\tif (purposes.indexOf('keyAgreement') === -1)\n\t\t\tpurposes.push('keyAgreement');\n\t\tif (key.type === 'rsa' &&\n\t\t    purposes.indexOf('encryption') === -1)\n\t\t\tpurposes.push('encryption');\n\t}\n\n\tvar cert = new Certificate({\n\t\tsubjects: subjects,\n\t\tissuer: issuer,\n\t\tsubjectKey: key,\n\t\tissuerKey: issuerKey.toPublic(),\n\t\tsignatures: {},\n\t\tserial: serial,\n\t\tvalidFrom: validFrom,\n\t\tvalidUntil: validUntil,\n\t\tpurposes: purposes\n\t});\n\tcert.signWith(issuerKey);\n\n\treturn (cert);\n};\n\nCertificate.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\treturn (k);\n\t} catch (e) {\n\t\tthrow (new CertificateParseError(options.filename, format, e));\n\t}\n};\n\nCertificate.isCertificate = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Certificate, ver));\n};\n\n/*\n * API versions for Certificate:\n * [1,0] -- initial ver\n */\nCertificate.prototype._sshpkApiVersion = [1, 0];\n\nCertificate._oldVersionDetect = function (obj) {\n\treturn ([1, 0]);\n};\n","// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n\n// Requires jsbn.js and jsbn2.js\nvar BigInteger = require('jsbn').BigInteger\nvar Barrett = BigInteger.prototype.Barrett\n\n// ----------------\n// ECFieldElementFp\n\n// constructor\nfunction ECFieldElementFp(q,x) {\n    this.x = x;\n    // TODO if(x.compareTo(q) >= 0) error\n    this.q = q;\n}\n\nfunction feFpEquals(other) {\n    if(other == this) return true;\n    return (this.q.equals(other.q) && this.x.equals(other.x));\n}\n\nfunction feFpToBigInteger() {\n    return this.x;\n}\n\nfunction feFpNegate() {\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\n\nfunction feFpAdd(b) {\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpSubtract(b) {\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpMultiply(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpSquare() {\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\n\nfunction feFpDivide(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\n\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n\n// ----------------\n// ECPointFp\n\n// constructor\nfunction ECPointFp(curve,x,y,z) {\n    this.curve = curve;\n    this.x = x;\n    this.y = y;\n    // Projective coordinates: either zinv == null or z * zinv == 1\n    // z and zinv are just BigIntegers, not fieldElements\n    if(z == null) {\n      this.z = BigInteger.ONE;\n    }\n    else {\n      this.z = z;\n    }\n    this.zinv = null;\n    //TODO: compression flag\n}\n\nfunction pointFpGetX() {\n    if(this.zinv == null) {\n      this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.x.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\n\nfunction pointFpGetY() {\n    if(this.zinv == null) {\n      this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.y.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\n\nfunction pointFpEquals(other) {\n    if(other == this) return true;\n    if(this.isInfinity()) return other.isInfinity();\n    if(other.isInfinity()) return this.isInfinity();\n    var u, v;\n    // u = Y2 * Z1 - Y1 * Z2\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    if(!u.equals(BigInteger.ZERO)) return false;\n    // v = X2 * Z1 - X1 * Z2\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    return v.equals(BigInteger.ZERO);\n}\n\nfunction pointFpIsInfinity() {\n    if((this.x == null) && (this.y == null)) return true;\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\n\nfunction pointFpNegate() {\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\n\nfunction pointFpAdd(b) {\n    if(this.isInfinity()) return b;\n    if(b.isInfinity()) return this;\n\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    // v = X2 * Z1 - X1 * Z2\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n\n    if(BigInteger.ZERO.equals(v)) {\n        if(BigInteger.ZERO.equals(u)) {\n            return this.twice(); // this == b, so double\n        }\n\treturn this.curve.getInfinity(); // this = -b, so infinity\n    }\n\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var x2 = b.x.toBigInteger();\n    var y2 = b.y.toBigInteger();\n\n    var v2 = v.square();\n    var v3 = v2.multiply(v);\n    var x1v2 = x1.multiply(v2);\n    var zu2 = u.square().multiply(this.z);\n\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n    // z3 = v^3 * z1 * z2\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\nfunction pointFpTwice() {\n    if(this.isInfinity()) return this;\n    if(this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n\n    // TODO: optimized handling of constants\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n\n    var y1z1 = y1.multiply(this.z);\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n    var a = this.curve.a.toBigInteger();\n\n    // w = 3 * x1^2 + a * z1^2\n    var w = x1.square().multiply(THREE);\n    if(!BigInteger.ZERO.equals(a)) {\n      w = w.add(this.z.square().multiply(a));\n    }\n    w = w.mod(this.curve.q);\n    //this.curve.reduce(w);\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n    // z3 = 8 * (y1 * z1)^3\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n    if(this.isInfinity()) return this;\n    if(k.signum() == 0) return this.curve.getInfinity();\n\n    var e = k;\n    var h = e.multiply(new BigInteger(\"3\"));\n\n    var neg = this.negate();\n    var R = this;\n\n    var i;\n    for(i = h.bitLength() - 2; i > 0; --i) {\n\tR = R.twice();\n\n\tvar hBit = h.testBit(i);\n\tvar eBit = e.testBit(i);\n\n\tif (hBit != eBit) {\n\t    R = R.add(hBit ? this : neg);\n\t}\n    }\n\n    return R;\n}\n\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j,x,k) {\n  var i;\n  if(j.bitLength() > k.bitLength())\n    i = j.bitLength() - 1;\n  else\n    i = k.bitLength() - 1;\n\n  var R = this.curve.getInfinity();\n  var both = this.add(x);\n  while(i >= 0) {\n    R = R.twice();\n    if(j.testBit(i)) {\n      if(k.testBit(i)) {\n        R = R.add(both);\n      }\n      else {\n        R = R.add(this);\n      }\n    }\n    else {\n      if(k.testBit(i)) {\n        R = R.add(x);\n      }\n    }\n    --i;\n  }\n\n  return R;\n}\n\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n\n// ----------------\n// ECCurveFp\n\n// constructor\nfunction ECCurveFp(q,a,b) {\n    this.q = q;\n    this.a = this.fromBigInteger(a);\n    this.b = this.fromBigInteger(b);\n    this.infinity = new ECPointFp(this, null, null);\n    this.reducer = new Barrett(this.q);\n}\n\nfunction curveFpGetQ() {\n    return this.q;\n}\n\nfunction curveFpGetA() {\n    return this.a;\n}\n\nfunction curveFpGetB() {\n    return this.b;\n}\n\nfunction curveFpEquals(other) {\n    if(other == this) return true;\n    return(this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));\n}\n\nfunction curveFpGetInfinity() {\n    return this.infinity;\n}\n\nfunction curveFpFromBigInteger(x) {\n    return new ECFieldElementFp(this.q, x);\n}\n\nfunction curveReduce(x) {\n    this.reducer.reduce(x);\n}\n\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\n    case 0:\n\treturn this.infinity;\n    case 2:\n    case 3:\n\t// point compression not supported yet\n\treturn null;\n    case 4:\n    case 6:\n    case 7:\n\tvar len = (s.length - 2) / 2;\n\tvar xHex = s.substr(2, len);\n\tvar yHex = s.substr(len+2, len);\n\n\treturn new ECPointFp(this,\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\n\n    default: // unsupported\n\treturn null;\n    }\n}\n\nfunction curveFpEncodePointHex(p) {\n\tif (p.isInfinity()) return \"00\";\n\tvar xHex = p.getX().toBigInteger().toString(16);\n\tvar yHex = p.getY().toBigInteger().toString(16);\n\tvar oLen = this.getQ().toString(16).length;\n\tif ((oLen % 2) != 0) oLen++;\n\twhile (xHex.length < oLen) {\n\t\txHex = \"0\" + xHex;\n\t}\n\twhile (yHex.length < oLen) {\n\t\tyHex = \"0\" + yHex;\n\t}\n\treturn \"04\" + xHex + yHex;\n}\n\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function(s)\n{\n\tvar yIsEven;\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\n    case 0:\n\treturn this.infinity;\n    case 2:\n\tyIsEven = false;\n    case 3:\n\tif(yIsEven == undefined) yIsEven = true;\n\tvar len = s.length - 2;\n\tvar xHex = s.substr(2, len);\n\tvar x = this.fromBigInteger(new BigInteger(xHex,16));\n\tvar alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n\tvar beta = alpha.sqrt();\n\n    if (beta == null) throw \"Invalid point compression\";\n\n    var betaValue = beta.toBigInteger();\n    if (betaValue.testBit(0) != yIsEven)\n    {\n        // Use the other root\n        beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n    }\n    return new ECPointFp(this,x,beta);\n    case 4:\n    case 6:\n    case 7:\n\tvar len = (s.length - 2) / 2;\n\tvar xHex = s.substr(2, len);\n\tvar yHex = s.substr(len+2, len);\n\n\treturn new ECPointFp(this,\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\n\n    default: // unsupported\n\treturn null;\n    }\n}\nECCurveFp.prototype.encodeCompressedPointHex = function(p)\n{\n\tif (p.isInfinity()) return \"00\";\n\tvar xHex = p.getX().toBigInteger().toString(16);\n\tvar oLen = this.getQ().toString(16).length;\n\tif ((oLen % 2) != 0) oLen++;\n\twhile (xHex.length < oLen)\n\t\txHex = \"0\" + xHex;\n\tvar yPrefix;\n\tif(p.getY().toBigInteger().isEven()) yPrefix = \"02\";\n\telse                                 yPrefix = \"03\";\n\n\treturn yPrefix + xHex;\n}\n\n\nECFieldElementFp.prototype.getR = function()\n{\n\tif(this.r != undefined) return this.r;\n\n    this.r = null;\n    var bitLength = this.q.bitLength();\n    if (bitLength > 128)\n    {\n        var firstWord = this.q.shiftRight(bitLength - 64);\n        if (firstWord.intValue() == -1)\n        {\n            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n        }\n    }\n    return this.r;\n}\nECFieldElementFp.prototype.modMult = function(x1,x2)\n{\n    return this.modReduce(x1.multiply(x2));\n}\nECFieldElementFp.prototype.modReduce = function(x)\n{\n    if (this.getR() != null)\n    {\n        var qLen = q.bitLength();\n        while (x.bitLength() > (qLen + 1))\n        {\n            var u = x.shiftRight(qLen);\n            var v = x.subtract(u.shiftLeft(qLen));\n            if (!this.getR().equals(BigInteger.ONE))\n            {\n                u = u.multiply(this.getR());\n            }\n            x = u.add(v); \n        }\n        while (x.compareTo(q) >= 0)\n        {\n            x = x.subtract(q);\n        }\n    }\n    else\n    {\n        x = x.mod(q);\n    }\n    return x;\n}\nECFieldElementFp.prototype.sqrt = function()\n{\n    if (!this.q.testBit(0)) throw \"unsupported\";\n\n    // p mod 4 == 3\n    if (this.q.testBit(1))\n    {\n    \tvar z = new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));\n    \treturn z.square().equals(this) ? z : null;\n    }\n\n    // p mod 4 == 1\n    var qMinusOne = this.q.subtract(BigInteger.ONE);\n\n    var legendreExponent = qMinusOne.shiftRight(1);\n    if (!(this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)))\n    {\n        return null;\n    }\n\n    var u = qMinusOne.shiftRight(2);\n    var k = u.shiftLeft(1).add(BigInteger.ONE);\n\n    var Q = this.x;\n    var fourQ = modDouble(modDouble(Q));\n\n    var U, V;\n    do\n    {\n        var P;\n        do\n        {\n            P = new BigInteger(this.q.bitLength(), new SecureRandom());\n        }\n        while (P.compareTo(this.q) >= 0\n            || !(P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne)));\n\n        var result = this.lucasSequence(P, Q, k);\n        U = result[0];\n        V = result[1];\n\n        if (this.modMult(V, V).equals(fourQ))\n        {\n            // Integer division by 2, mod q\n            if (V.testBit(0))\n            {\n                V = V.add(q);\n            }\n\n            V = V.shiftRight(1);\n\n            return new ECFieldElementFp(q,V);\n        }\n    }\n    while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n\n    return null;\n}\nECFieldElementFp.prototype.lucasSequence = function(P,Q,k)\n{\n    var n = k.bitLength();\n    var s = k.getLowestSetBit();\n\n    var Uh = BigInteger.ONE;\n    var Vl = BigInteger.TWO;\n    var Vh = P;\n    var Ql = BigInteger.ONE;\n    var Qh = BigInteger.ONE;\n\n    for (var j = n - 1; j >= s + 1; --j)\n    {\n        Ql = this.modMult(Ql, Qh);\n\n        if (k.testBit(j))\n        {\n            Qh = this.modMult(Ql, Q);\n            Uh = this.modMult(Uh, Vh);\n            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n        }\n        else\n        {\n            Qh = Ql;\n            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        }\n    }\n\n    Ql = this.modMult(Ql, Qh);\n    Qh = this.modMult(Ql, Q);\n    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n    Ql = this.modMult(Ql, Qh);\n\n    for (var j = 1; j <= s; ++j)\n    {\n        Uh = this.modMult(Uh, Vl);\n        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        Ql = this.modMult(Ql, Ql);\n    }\n\n    return [ Uh, Vl ];\n}\n\nvar exports = {\n  ECCurveFp: ECCurveFp,\n  ECPointFp: ECPointFp,\n  ECFieldElementFp: ECFieldElementFp\n}\n\nmodule.exports = exports\n","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs8: readPkcs8,\n\twrite: write,\n\twritePkcs8: writePkcs8,\n\n\treadECDSACurve: readECDSACurve,\n\twriteECDSACurve: writeECDSACurve\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options, 'pkcs8'));\n}\n\nfunction write(key, options) {\n\treturn (pem.write(key, options, 'pkcs8'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs8(alg, type, der) {\n\t/* Private keys in pkcs#8 format have a weird extra int */\n\tif (der.peek() === asn1.Ber.Integer) {\n\t\tassert.strictEqual(type, 'private',\n\t\t    'unexpected Integer at start of public key');\n\t\tder.readString(asn1.Ber.Integer, true);\n\t}\n\n\tder.readSequence();\n\tvar next = der.offset + der.length;\n\n\tvar oid = der.readOID();\n\tswitch (oid) {\n\tcase '1.2.840.113549.1.1.1':\n\t\tder._offset = next;\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8RSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8RSAPrivate(der));\n\tcase '1.2.840.10040.4.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8DSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8DSAPrivate(der));\n\tcase '1.2.840.10045.2.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8ECDSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8ECDSAPrivate(der));\n\tcase '1.3.101.112':\n\t\tif (type === 'public') {\n\t\t\treturn (readPkcs8EdDSAPublic(der));\n\t\t} else {\n\t\t\treturn (readPkcs8EdDSAPrivate(der));\n\t\t}\n\tcase '1.3.101.110':\n\t\tif (type === 'public') {\n\t\t\treturn (readPkcs8X25519Public(der));\n\t\t} else {\n\t\t\treturn (readPkcs8X25519Private(der));\n\t\t}\n\tdefault:\n\t\tthrow (new Error('Unknown key type OID ' + oid));\n\t}\n}\n\nfunction readPkcs8RSAPublic(der) {\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\tder.readSequence();\n\n\t// modulus\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tsource: der.originalInput,\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8RSAPrivate(der) {\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar ver = readMPInt(der, 'version');\n\tassert.equal(ver[0], 0x0, 'unknown RSA private key version');\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8DSAPublic(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\n\tvar y = readMPInt(der, 'y');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8DSAPrivate(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar x = readMPInt(der, 'x');\n\n\t/* The pkcs#8 format does not include the public key */\n\tvar y = utils.calculateDSAPublic(g, p, x);\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readECDSACurve(der) {\n\tvar curveName, curveNames;\n\tvar j, c, cd;\n\n\tif (der.peek() === asn1.Ber.OID) {\n\t\tvar oid = der.readOID();\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tif (cd.pkcs8oid === oid) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.readSequence();\n\t\tvar version = der.readString(asn1.Ber.Integer, true);\n\t\tassert.strictEqual(version[0], 1, 'ECDSA key not version 1');\n\n\t\tvar curve = {};\n\n\t\t// FieldID sequence\n\t\tder.readSequence();\n\t\tvar fieldTypeOid = der.readOID();\n\t\tassert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1',\n\t\t    'ECDSA key is not from a prime-field');\n\t\tvar p = curve.p = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\t/*\n\t\t * p always starts with a 1 bit, so count the zeros to get its\n\t\t * real size.\n\t\t */\n\t\tcurve.size = p.length * 8 - utils.countZeros(p);\n\n\t\t// Curve sequence\n\t\tder.readSequence();\n\t\tcurve.a = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tcurve.b = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tif (der.peek() === asn1.Ber.BitString)\n\t\t\tcurve.s = der.readString(asn1.Ber.BitString, true);\n\n\t\t// Combined Gx and Gy\n\t\tcurve.G = der.readString(asn1.Ber.OctetString, true);\n\t\tassert.strictEqual(curve.G[0], 0x4,\n\t\t    'uncompressed G is required');\n\n\t\tcurve.n = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tcurve.h = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tassert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' +\n\t\t    'required');\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tvar ks = Object.keys(curve);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tvar equal = true;\n\t\t\tfor (var i = 0; i < ks.length; ++i) {\n\t\t\t\tvar k = ks[i];\n\t\t\t\tif (cd[k] === undefined)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (typeof (cd[k]) === 'object' &&\n\t\t\t\t    cd[k].equals !== undefined) {\n\t\t\t\t\tif (!cd[k].equals(curve[k])) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (Buffer.isBuffer(cd[k])) {\n\t\t\t\t\tif (cd[k].toString('binary')\n\t\t\t\t\t    !== curve[k].toString('binary')) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (cd[k] !== curve[k]) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (equal) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (curveName);\n}\n\nfunction readPkcs8ECDSAPrivate(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar version = readMPInt(der, 'version');\n\tassert.equal(version[0], 1, 'unknown version of ECDSA key');\n\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\tder.readSequence(0xa1);\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curveName) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8ECDSAPublic(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curveName) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8EdDSAPublic(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8X25519Public(der) {\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'curve25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8EdDSAPrivate(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\tk = utils.zeroPadToLength(k, 32);\n\n\tvar A;\n\tif (der.peek() === asn1.Ber.BitString) {\n\t\tA = utils.readBitString(der);\n\t\tA = utils.zeroPadToLength(A, 32);\n\t} else {\n\t\tA = utils.calculateED25519Public(k);\n\t}\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: utils.zeroPadToLength(k, 32) }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8X25519Private(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\tk = utils.zeroPadToLength(k, 32);\n\n\tvar A = utils.calculateX25519Public(k);\n\n\tvar key = {\n\t\ttype: 'curve25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: utils.zeroPadToLength(k, 32) }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction writePkcs8(der, key) {\n\tder.startSequence();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tvar sillyInt = new Buffer(1);\n\t\tsillyInt[0] = 0x0;\n\t\tder.writeBuffer(sillyInt, asn1.Ber.Integer);\n\t}\n\n\tder.startSequence();\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tder.writeOID('1.2.840.113549.1.1.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8RSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8RSAPublic(key, der);\n\t\tbreak;\n\tcase 'dsa':\n\t\tder.writeOID('1.2.840.10040.4.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8DSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8DSAPublic(key, der);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tder.writeOID('1.2.840.10045.2.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8ECDSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8ECDSAPublic(key, der);\n\t\tbreak;\n\tcase 'ed25519':\n\t\tder.writeOID('1.3.101.112');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\tthrow (new Error('Ed25519 private keys in pkcs8 ' +\n\t\t\t    'format are not supported'));\n\t\twritePkcs8EdDSAPublic(key, der);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported key type: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPrivate(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = new Buffer(1);\n\tversion[0] = 0;\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n\n\tder.endSequence();\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPublic(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\n\tder.startSequence();\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPrivate(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPublic(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writeECDSACurve(key, der) {\n\tvar curve = algs.curves[key.curve];\n\tif (curve.pkcs8oid) {\n\t\t/* This one has a name in pkcs#8, so just write the oid */\n\t\tder.writeOID(curve.pkcs8oid);\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.startSequence();\n\n\t\tvar version = new Buffer(1);\n\t\tversion.writeUInt8(1, 0);\n\t\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\t\t// FieldID sequence\n\t\tder.startSequence();\n\t\tder.writeOID('1.2.840.10045.1.1'); // prime-field\n\t\tder.writeBuffer(curve.p, asn1.Ber.Integer);\n\t\tder.endSequence();\n\n\t\t// Curve sequence\n\t\tder.startSequence();\n\t\tvar a = curve.p;\n\t\tif (a[0] === 0x0)\n\t\t\ta = a.slice(1);\n\t\tder.writeBuffer(a, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.b, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.s, asn1.Ber.BitString);\n\t\tder.endSequence();\n\n\t\tder.writeBuffer(curve.G, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.n, asn1.Ber.Integer);\n\t\tvar h = curve.h;\n\t\tif (!h) {\n\t\t\th = new Buffer(1);\n\t\t\th[0] = 1;\n\t\t}\n\t\tder.writeBuffer(h, asn1.Ber.Integer);\n\n\t\t// ECParameters\n\t\tder.endSequence();\n\t}\n}\n\nfunction writePkcs8ECDSAPublic(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs8ECDSAPrivate(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = new Buffer(1);\n\tversion[0] = 1;\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n\n\tder.endSequence();\n\tder.endSequence();\n}\n\nfunction writePkcs8EdDSAPublic(key, der) {\n\tder.endSequence();\n\n\tutils.writeBitString(der, key.part.A.data);\n}\n\nfunction writePkcs8EdDSAPrivate(key, der) {\n\tder.endSequence();\n\n\tvar k = utils.mpNormalize(key.part.k.data, true);\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.writeBuffer(k, asn1.Ber.OctetString);\n\tder.endSequence();\n}\n","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = SSHBuffer;\n\nvar assert = require('assert-plus');\n\nfunction SSHBuffer(opts) {\n\tassert.object(opts, 'options');\n\tif (opts.buffer !== undefined)\n\t\tassert.buffer(opts.buffer, 'options.buffer');\n\n\tthis._size = opts.buffer ? opts.buffer.length : 1024;\n\tthis._buffer = opts.buffer || (new Buffer(this._size));\n\tthis._offset = 0;\n}\n\nSSHBuffer.prototype.toBuffer = function () {\n\treturn (this._buffer.slice(0, this._offset));\n};\n\nSSHBuffer.prototype.atEnd = function () {\n\treturn (this._offset >= this._buffer.length);\n};\n\nSSHBuffer.prototype.remainder = function () {\n\treturn (this._buffer.slice(this._offset));\n};\n\nSSHBuffer.prototype.skip = function (n) {\n\tthis._offset += n;\n};\n\nSSHBuffer.prototype.expand = function () {\n\tthis._size *= 2;\n\tvar buf = new Buffer(this._size);\n\tthis._buffer.copy(buf, 0);\n\tthis._buffer = buf;\n};\n\nSSHBuffer.prototype.readPart = function () {\n\treturn ({data: this.readBuffer()});\n};\n\nSSHBuffer.prototype.readBuffer = function () {\n\tvar len = this._buffer.readUInt32BE(this._offset);\n\tthis._offset += 4;\n\tassert.ok(this._offset + len <= this._buffer.length,\n\t    'length out of bounds at +0x' + this._offset.toString(16) +\n\t    ' (data truncated?)');\n\tvar buf = this._buffer.slice(this._offset, this._offset + len);\n\tthis._offset += len;\n\treturn (buf);\n};\n\nSSHBuffer.prototype.readString = function () {\n\treturn (this.readBuffer().toString());\n};\n\nSSHBuffer.prototype.readCString = function () {\n\tvar offset = this._offset;\n\twhile (offset < this._buffer.length &&\n\t    this._buffer[offset] !== 0x00)\n\t\toffset++;\n\tassert.ok(offset < this._buffer.length, 'c string does not terminate');\n\tvar str = this._buffer.slice(this._offset, offset).toString();\n\tthis._offset = offset + 1;\n\treturn (str);\n};\n\nSSHBuffer.prototype.readInt = function () {\n\tvar v = this._buffer.readUInt32BE(this._offset);\n\tthis._offset += 4;\n\treturn (v);\n};\n\nSSHBuffer.prototype.readInt64 = function () {\n\tassert.ok(this._offset + 8 < this._buffer.length,\n\t    'buffer not long enough to read Int64');\n\tvar v = this._buffer.slice(this._offset, this._offset + 8);\n\tthis._offset += 8;\n\treturn (v);\n};\n\nSSHBuffer.prototype.readChar = function () {\n\tvar v = this._buffer[this._offset++];\n\treturn (v);\n};\n\nSSHBuffer.prototype.writeBuffer = function (buf) {\n\twhile (this._offset + 4 + buf.length > this._size)\n\t\tthis.expand();\n\tthis._buffer.writeUInt32BE(buf.length, this._offset);\n\tthis._offset += 4;\n\tbuf.copy(this._buffer, this._offset);\n\tthis._offset += buf.length;\n};\n\nSSHBuffer.prototype.writeString = function (str) {\n\tthis.writeBuffer(new Buffer(str, 'utf8'));\n};\n\nSSHBuffer.prototype.writeCString = function (str) {\n\twhile (this._offset + 1 + str.length > this._size)\n\t\tthis.expand();\n\tthis._buffer.write(str, this._offset);\n\tthis._offset += str.length;\n\tthis._buffer[this._offset++] = 0;\n};\n\nSSHBuffer.prototype.writeInt = function (v) {\n\twhile (this._offset + 4 > this._size)\n\t\tthis.expand();\n\tthis._buffer.writeUInt32BE(v, this._offset);\n\tthis._offset += 4;\n};\n\nSSHBuffer.prototype.writeInt64 = function (v) {\n\tassert.buffer(v, 'value');\n\tif (v.length > 8) {\n\t\tvar lead = v.slice(0, v.length - 8);\n\t\tfor (var i = 0; i < lead.length; ++i) {\n\t\t\tassert.strictEqual(lead[i], 0,\n\t\t\t    'must fit in 64 bits of precision');\n\t\t}\n\t\tv = v.slice(v.length - 8, v.length);\n\t}\n\twhile (this._offset + 8 > this._size)\n\t\tthis.expand();\n\tv.copy(this._buffer, this._offset);\n\tthis._offset += 8;\n};\n\nSSHBuffer.prototype.writeChar = function (v) {\n\twhile (this._offset + 1 > this._size)\n\t\tthis.expand();\n\tthis._buffer[this._offset++] = v;\n};\n\nSSHBuffer.prototype.writePart = function (p) {\n\tthis.writeBuffer(p.data);\n};\n\nSSHBuffer.prototype.write = function (buf) {\n\twhile (this._offset + buf.length > this._size)\n\t\tthis.expand();\n\tbuf.copy(this._buffer, this._offset);\n\tthis._offset += buf.length;\n};\n","// Copyright 2017 Joyent, Inc.\n\nmodule.exports = Identity;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar asn1 = require('asn1');\n\n/*JSSTYLED*/\nvar DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\\-]{0,62})(?:\\.([*]|[a-z0-9][a-z0-9\\-]{0,62}))*$/i;\n\nvar oids = {};\noids.cn = '2.5.4.3';\noids.o = '2.5.4.10';\noids.ou = '2.5.4.11';\noids.l = '2.5.4.7';\noids.s = '2.5.4.8';\noids.c = '2.5.4.6';\noids.sn = '2.5.4.4';\noids.dc = '0.9.2342.19200300.100.1.25';\noids.uid = '0.9.2342.19200300.100.1.1';\noids.mail = '0.9.2342.19200300.100.1.3';\n\nvar unoids = {};\nObject.keys(oids).forEach(function (k) {\n\tunoids[oids[k]] = k;\n});\n\nfunction Identity(opts) {\n\tvar self = this;\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.components, 'options.components');\n\tthis.components = opts.components;\n\tthis.componentLookup = {};\n\tthis.components.forEach(function (c) {\n\t\tif (c.name && !c.oid)\n\t\t\tc.oid = oids[c.name];\n\t\tif (c.oid && !c.name)\n\t\t\tc.name = unoids[c.oid];\n\t\tif (self.componentLookup[c.name] === undefined)\n\t\t\tself.componentLookup[c.name] = [];\n\t\tself.componentLookup[c.name].push(c);\n\t});\n\tif (this.componentLookup.cn && this.componentLookup.cn.length > 0) {\n\t\tthis.cn = this.componentLookup.cn[0].value;\n\t}\n\tassert.optionalString(opts.type, 'options.type');\n\tif (opts.type === undefined) {\n\t\tif (this.components.length === 1 &&\n\t\t    this.componentLookup.cn &&\n\t\t    this.componentLookup.cn.length === 1 &&\n\t\t    this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n\t\t\tthis.type = 'host';\n\t\t\tthis.hostname = this.componentLookup.cn[0].value;\n\n\t\t} else if (this.componentLookup.dc &&\n\t\t    this.components.length === this.componentLookup.dc.length) {\n\t\t\tthis.type = 'host';\n\t\t\tthis.hostname = this.componentLookup.dc.map(\n\t\t\t    function (c) {\n\t\t\t\treturn (c.value);\n\t\t\t}).join('.');\n\n\t\t} else if (this.componentLookup.uid &&\n\t\t    this.components.length ===\n\t\t    this.componentLookup.uid.length) {\n\t\t\tthis.type = 'user';\n\t\t\tthis.uid = this.componentLookup.uid[0].value;\n\n\t\t} else if (this.componentLookup.cn &&\n\t\t    this.componentLookup.cn.length === 1 &&\n\t\t    this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n\t\t\tthis.type = 'host';\n\t\t\tthis.hostname = this.componentLookup.cn[0].value;\n\n\t\t} else if (this.componentLookup.uid &&\n\t\t    this.componentLookup.uid.length === 1) {\n\t\t\tthis.type = 'user';\n\t\t\tthis.uid = this.componentLookup.uid[0].value;\n\n\t\t} else if (this.componentLookup.mail &&\n\t\t    this.componentLookup.mail.length === 1) {\n\t\t\tthis.type = 'email';\n\t\t\tthis.email = this.componentLookup.mail[0].value;\n\n\t\t} else if (this.componentLookup.cn &&\n\t\t    this.componentLookup.cn.length === 1) {\n\t\t\tthis.type = 'user';\n\t\t\tthis.uid = this.componentLookup.cn[0].value;\n\n\t\t} else {\n\t\t\tthis.type = 'unknown';\n\t\t}\n\t} else {\n\t\tthis.type = opts.type;\n\t\tif (this.type === 'host')\n\t\t\tthis.hostname = opts.hostname;\n\t\telse if (this.type === 'user')\n\t\t\tthis.uid = opts.uid;\n\t\telse if (this.type === 'email')\n\t\t\tthis.email = opts.email;\n\t\telse\n\t\t\tthrow (new Error('Unknown type ' + this.type));\n\t}\n}\n\nIdentity.prototype.toString = function () {\n\treturn (this.components.map(function (c) {\n\t\treturn (c.name.toUpperCase() + '=' + c.value);\n\t}).join(', '));\n};\n\n/*\n * These are from X.680 -- PrintableString allowed chars are in section 37.4\n * table 8. Spec for IA5Strings is \"1,6 + SPACE + DEL\" where 1 refers to\n * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006\n * (the basic ASCII character set).\n */\n/* JSSTYLED */\nvar NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\\/:=?-]/;\n/* JSSTYLED */\nvar NOT_IA5 = /[^\\x00-\\x7f]/;\n\nIdentity.prototype.toAsn1 = function (der, tag) {\n\tder.startSequence(tag);\n\tthis.components.forEach(function (c) {\n\t\tder.startSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n\t\tder.startSequence();\n\t\tder.writeOID(c.oid);\n\t\t/*\n\t\t * If we fit in a PrintableString, use that. Otherwise use an\n\t\t * IA5String or UTF8String.\n\t\t *\n\t\t * If this identity was parsed from a DN, use the ASN.1 types\n\t\t * from the original representation (otherwise this might not\n\t\t * be a full match for the original in some validators).\n\t\t */\n\t\tif (c.asn1type === asn1.Ber.Utf8String ||\n\t\t    c.value.match(NOT_IA5)) {\n\t\t\tvar v = new Buffer(c.value, 'utf8');\n\t\t\tder.writeBuffer(v, asn1.Ber.Utf8String);\n\n\t\t} else if (c.asn1type === asn1.Ber.IA5String ||\n\t\t    c.value.match(NOT_PRINTABLE)) {\n\t\t\tder.writeString(c.value, asn1.Ber.IA5String);\n\n\t\t} else {\n\t\t\tvar type = asn1.Ber.PrintableString;\n\t\t\tif (c.asn1type !== undefined)\n\t\t\t\ttype = c.asn1type;\n\t\t\tder.writeString(c.value, type);\n\t\t}\n\t\tder.endSequence();\n\t\tder.endSequence();\n\t});\n\tder.endSequence();\n};\n\nfunction globMatch(a, b) {\n\tif (a === '**' || b === '**')\n\t\treturn (true);\n\tvar aParts = a.split('.');\n\tvar bParts = b.split('.');\n\tif (aParts.length !== bParts.length)\n\t\treturn (false);\n\tfor (var i = 0; i < aParts.length; ++i) {\n\t\tif (aParts[i] === '*' || bParts[i] === '*')\n\t\t\tcontinue;\n\t\tif (aParts[i] !== bParts[i])\n\t\t\treturn (false);\n\t}\n\treturn (true);\n}\n\nIdentity.prototype.equals = function (other) {\n\tif (!Identity.isIdentity(other, [1, 0]))\n\t\treturn (false);\n\tif (other.components.length !== this.components.length)\n\t\treturn (false);\n\tfor (var i = 0; i < this.components.length; ++i) {\n\t\tif (this.components[i].oid !== other.components[i].oid)\n\t\t\treturn (false);\n\t\tif (!globMatch(this.components[i].value,\n\t\t    other.components[i].value)) {\n\t\t\treturn (false);\n\t\t}\n\t}\n\treturn (true);\n};\n\nIdentity.forHost = function (hostname) {\n\tassert.string(hostname, 'hostname');\n\treturn (new Identity({\n\t\ttype: 'host',\n\t\thostname: hostname,\n\t\tcomponents: [ { name: 'cn', value: hostname } ]\n\t}));\n};\n\nIdentity.forUser = function (uid) {\n\tassert.string(uid, 'uid');\n\treturn (new Identity({\n\t\ttype: 'user',\n\t\tuid: uid,\n\t\tcomponents: [ { name: 'uid', value: uid } ]\n\t}));\n};\n\nIdentity.forEmail = function (email) {\n\tassert.string(email, 'email');\n\treturn (new Identity({\n\t\ttype: 'email',\n\t\temail: email,\n\t\tcomponents: [ { name: 'mail', value: email } ]\n\t}));\n};\n\nIdentity.parseDN = function (dn) {\n\tassert.string(dn, 'dn');\n\tvar parts = dn.split(',');\n\tvar cmps = parts.map(function (c) {\n\t\tc = c.trim();\n\t\tvar eqPos = c.indexOf('=');\n\t\tvar name = c.slice(0, eqPos).toLowerCase();\n\t\tvar value = c.slice(eqPos + 1);\n\t\treturn ({ name: name, value: value });\n\t});\n\treturn (new Identity({ components: cmps }));\n};\n\nIdentity.parseAsn1 = function (der, top) {\n\tvar components = [];\n\tder.readSequence(top);\n\tvar end = der.offset + der.length;\n\twhile (der.offset < end) {\n\t\tder.readSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n\t\tvar after = der.offset + der.length;\n\t\tder.readSequence();\n\t\tvar oid = der.readOID();\n\t\tvar type = der.peek();\n\t\tvar value;\n\t\tswitch (type) {\n\t\tcase asn1.Ber.PrintableString:\n\t\tcase asn1.Ber.IA5String:\n\t\tcase asn1.Ber.OctetString:\n\t\tcase asn1.Ber.T61String:\n\t\t\tvalue = der.readString(type);\n\t\t\tbreak;\n\t\tcase asn1.Ber.Utf8String:\n\t\t\tvalue = der.readString(type, true);\n\t\t\tvalue = value.toString('utf8');\n\t\t\tbreak;\n\t\tcase asn1.Ber.CharacterString:\n\t\tcase asn1.Ber.BMPString:\n\t\t\tvalue = der.readString(type, true);\n\t\t\tvalue = value.toString('utf16le');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('Unknown asn1 type ' + type));\n\t\t}\n\t\tcomponents.push({ oid: oid, asn1type: type, value: value });\n\t\tder._offset = after;\n\t}\n\tder._offset = end;\n\treturn (new Identity({\n\t\tcomponents: components\n\t}));\n};\n\nIdentity.isIdentity = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Identity, ver));\n};\n\n/*\n * API versions for Identity:\n * [1,0] -- initial ver\n */\nIdentity.prototype._sshpkApiVersion = [1, 0];\n\nIdentity._oldVersionDetect = function (obj) {\n\treturn ([1, 0]);\n};\n","module.exports = require(\"string_decoder\");","module.exports = require(\"net\");","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nexports = module.exports;\r\n\r\nvar SR = {\r\n  ANONYMOUS_ACCESS_BLOBSERVICE_ONLY: 'Anonymous access is only valid for the BlobService.',\r\n  ARGUMENT_NULL_OR_EMPTY: 'The argument must not be null or an empty string. Argument name: %s.',\r\n  ARGUMENT_NULL_OR_UNDEFINED: 'The argument must not be null or undefined. Argument name: %s.',\r\n  ARGUMENT_OUT_OF_RANGE_ERROR: 'The argument is out of range. Argument name: %s, Value passed: %s.',\r\n  BATCH_ONE_PARTITION_KEY: 'All entities in the batch must have the same PartitionKey value.',\r\n  BATCH_ONE_RETRIEVE: 'If a retrieve operation is part of a batch, it must be the only operation in the batch.',\r\n  BATCH_TOO_LARGE: 'Batches must not contain more than 100 operations.',\r\n  BLOB_INVALID_SEQUENCE_NUMBER: 'The sequence number may not be specified for an increment operation.',\r\n  BLOB_TYPE_MISMATCH: 'Blob type of the blob reference doesn\\'t match blob type of the blob.',\r\n  CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY: 'Cannot create Shared Access Signature unless the Account Name and Key are used to create the ServiceClient.',\r\n  CONTENT_LENGTH_MISMATCH: 'An incorrect number of bytes was read from the connection. The connection may have been closed.',\r\n  CONTENT_TYPE_MISSING: 'Content-Type response header is missing or invalid.',\r\n  EMPTY_BATCH: 'Batch must not be empty.',\r\n  EXCEEDED_SIZE_LIMITATION: 'Upload exceeds the size limitation. Max size is %s but the current size is %s',\r\n  HASH_MISMATCH: 'Hash mismatch (integrity check failed), Expected value is %s, retrieved %s.',\r\n  INCORRECT_ENTITY_KEYS: 'PartitionKey and RowKey must be specified as strings in the entity object.',\r\n  INVALID_BLOB_LENGTH: 'createBlockBlobFromText requires the size of text to be less than 64MB. Please use createBlockBlobFromLocalFile or createBlockBlobFromStream to upload large blobs.',\r\n  INVALID_CONNECTION_STRING: 'Connection strings must be of the form \"key1=value1;key2=value2\".',\r\n  INVALID_CONNECTION_STRING_BAD_KEY: 'Connection string contains unrecognized key: \"%s\"',\r\n  INVALID_CONNECTION_STRING_DUPLICATE_KEY: 'Connection string contains duplicate key: \"%s\"',\r\n  INVALID_CONNECTION_STRING_EMPTY_KEY: 'Connection strings must not contain empty keys.',\r\n  INVALID_DELETE_SNAPSHOT_OPTION: 'The deleteSnapshots option cannot be included when deleting a specific snapshot using the snapshotId option.',\r\n  INVALID_EDM_TYPE: 'The value \\'%s\\' does not match the type \\'%s\\'.',\r\n  INVALID_FILE_LENGTH: 'createFileFromText requires the size of text to be less than 4MB. Please use createFileFromLocalFile or createFileFromStream to upload large files.',\r\n  INVALID_FILE_RANGE_FOR_UPDATE: 'Range size should be less than 4MB for a file range update operation.',\r\n  INVALID_HEADERS: 'Headers are not supported in the 2012-02-12 version.',\r\n  INVALID_MESSAGE_ID: 'Message ID cannot be null or undefined for deleteMessage and updateMessage operations.',\r\n  INVALID_PAGE_BLOB_LENGTH: 'Page blob length must be multiple of 512.',\r\n  INVALID_PAGE_END_OFFSET: 'Page end offset must be multiple of 512.',\r\n  INVALID_PAGE_RANGE_FOR_UPDATE: 'Page range size should be less than 4MB for a page update operation.',\r\n  INVALID_PAGE_START_OFFSET: 'Page start offset must be multiple of 512.',\r\n  INVALID_POP_RECEIPT: 'Pop Receipt cannot be null or undefined for deleteMessage and updateMessage operations.',\r\n  INVALID_PROPERTY_RESOLVER: 'The specified property resolver returned an invalid type. %s:{_:%s,$:%s }',\r\n  INVALID_RANGE_FOR_MD5: 'The requested range should be less than 4MB when contentMD5 is expected from the server',\r\n  INVALID_SAS_VERSION: 'SAS Version ? is invalid. Valid versions include: ?.',\r\n  INVALID_SAS_TOKEN: 'The SAS token should not contain api-version.',\r\n  INVALID_SIGNED_IDENTIFIERS: 'Signed identifiers need to be a hash object with key as the id and the value as the access policy.',\r\n  INVALID_STREAM_LENGTH: 'The length of the provided stream is invalid.',\r\n  INVALID_STRING_ERROR: 'Invalid string error.',\r\n  INVALID_TABLE_OPERATION: 'Operation not found: %s',\r\n  INVALID_TEXT_LENGTH: 'The length of the provided text is invalid.',\r\n  MAXIMUM_EXECUTION_TIMEOUT_EXCEPTION: 'The client could not finish the operation within specified maximum execution timeout.',\r\n  MD5_NOT_POSSIBLE: 'MD5 cannot be calculated for an existing blob because it would require reading the existing data. Please disable storeBlobContentMD5.',\r\n  MD5_NOT_PRESENT_ERROR: 'MD5 does not exist. If you do not want to force validation, please disable useTransactionalMD5.',\r\n  METADATA_KEY_INVALID: 'The key for one of the metadata key-value pairs is null, empty, or whitespace.',\r\n  METADATA_VALUE_INVALID: 'The value for one of the metadata key-value pairs is null, empty, or whitespace.',\r\n  NO_CREDENTIALS_PROVIDED: 'Credentials must be provided when creating a service client.',\r\n  PRIMARY_ONLY_COMMAND: 'This operation can only be executed against the primary storage location.',\r\n  QUERY_OPERATOR_REQUIRES_WHERE: '%s operator needs to be used after where.',\r\n  SECONDARY_ONLY_COMMAND: 'This operation can only be executed against the secondary storage location.',\r\n  STORAGE_HOST_LOCATION_REQUIRED: 'The host for the storage service must be specified.',\r\n  STORAGE_HOST_MISSING_LOCATION: 'The host for the target storage location is not specified. Please consider changing the request\\'s location mode.',\r\n  TYPE_NOT_SUPPORTED: 'Type not supported when sending data to the service: ',\r\n  MAX_BLOB_SIZE_CONDITION_NOT_MEET: 'Append block data should not exceed the maximum blob size condition value.',\r\n};\r\n\r\nmodule.exports = SR;","// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar sshpk = require('sshpk');\nvar util = require('util');\n\nvar HASH_ALGOS = {\n  'sha1': true,\n  'sha256': true,\n  'sha512': true\n};\n\nvar PK_ALGOS = {\n  'rsa': true,\n  'dsa': true,\n  'ecdsa': true\n};\n\nfunction HttpSignatureError(message, caller) {\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, caller || HttpSignatureError);\n\n  this.message = message;\n  this.name = caller.name;\n}\nutil.inherits(HttpSignatureError, Error);\n\nfunction InvalidAlgorithmError(message) {\n  HttpSignatureError.call(this, message, InvalidAlgorithmError);\n}\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\n\nfunction validateAlgorithm(algorithm) {\n  var alg = algorithm.toLowerCase().split('-');\n\n  if (alg.length !== 2) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' +\n      'valid algorithm'));\n  }\n\n  if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' +\n      'are not supported'));\n  }\n\n  if (!HASH_ALGOS[alg[1]]) {\n    throw (new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' +\n      'supported hash algorithm'));\n  }\n\n  return (alg);\n}\n\n///--- API\n\nmodule.exports = {\n\n  HASH_ALGOS: HASH_ALGOS,\n  PK_ALGOS: PK_ALGOS,\n\n  HttpSignatureError: HttpSignatureError,\n  InvalidAlgorithmError: InvalidAlgorithmError,\n\n  validateAlgorithm: validateAlgorithm,\n\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.toString('pem'));\n  },\n\n\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.fingerprint('md5').toString('hex'));\n  },\n\n  /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n    assert.equal('string', typeof (pem), 'typeof pem');\n\n    var k = sshpk.parseKey(pem, 'pem');\n    k.comment = comment;\n    return (k.toString('ssh'));\n  }\n};\n","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadSSHPrivate: readSSHPrivate,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar crypto = require('crypto');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar rfc4253 = require('./rfc4253');\nvar SSHBuffer = require('../ssh-buffer');\nvar errors = require('../errors');\n\nvar bcrypt;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options));\n}\n\nvar MAGIC = 'openssh-key-v1';\n\nfunction readSSHPrivate(type, buf, options) {\n\tbuf = new SSHBuffer({buffer: buf});\n\n\tvar magic = buf.readCString();\n\tassert.strictEqual(magic, MAGIC, 'bad magic string');\n\n\tvar cipher = buf.readString();\n\tvar kdf = buf.readString();\n\tvar kdfOpts = buf.readBuffer();\n\n\tvar nkeys = buf.readInt();\n\tif (nkeys !== 1) {\n\t\tthrow (new Error('OpenSSH-format key file contains ' +\n\t\t    'multiple keys: this is unsupported.'));\n\t}\n\n\tvar pubKey = buf.readBuffer();\n\n\tif (type === 'public') {\n\t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\t\treturn (rfc4253.read(pubKey));\n\t}\n\n\tvar privKeyBlob = buf.readBuffer();\n\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\n\tvar kdfOptsBuf = new SSHBuffer({ buffer: kdfOpts });\n\tswitch (kdf) {\n\tcase 'none':\n\t\tif (cipher !== 'none') {\n\t\t\tthrow (new Error('OpenSSH-format key uses KDF \"none\" ' +\n\t\t\t     'but specifies a cipher other than \"none\"'));\n\t\t}\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = kdfOptsBuf.readBuffer();\n\t\tvar rounds = kdfOptsBuf.readInt();\n\t\tvar cinf = utils.opensshCipherInfo(cipher);\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\n\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\toptions.passphrase = new Buffer(options.passphrase,\n\t\t\t    'utf-8');\n\t\t}\n\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t    options.filename, 'OpenSSH'));\n\t\t}\n\n\t\tvar pass = new Uint8Array(options.passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = new Buffer(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\t\tvar cipherStream = crypto.createDecipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\n\t\t\t\t    'supplied, could not decrypt key'));\n\t\t\t}\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privKeyBlob);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivKeyBlob = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error(\n\t\t    'OpenSSH-format key uses unknown KDF \"' + kdf + '\"'));\n\t}\n\n\tbuf = new SSHBuffer({buffer: privKeyBlob});\n\n\tvar checkInt1 = buf.readInt();\n\tvar checkInt2 = buf.readInt();\n\tif (checkInt1 !== checkInt2) {\n\t\tthrow (new Error('Incorrect passphrase supplied, could not ' +\n\t\t    'decrypt key'));\n\t}\n\n\tvar ret = {};\n\tvar key = rfc4253.readInternal(ret, 'private', buf.remainder());\n\n\tbuf.skip(ret.consumed);\n\n\tvar comment = buf.readString();\n\tkey.comment = comment;\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tvar pubKey;\n\tif (PrivateKey.isPrivateKey(key))\n\t\tpubKey = key.toPublic();\n\telse\n\t\tpubKey = key;\n\n\tvar cipher = 'none';\n\tvar kdf = 'none';\n\tvar kdfopts = new Buffer(0);\n\tvar cinf = { blockSize: 8 };\n\tvar passphrase;\n\tif (options !== undefined) {\n\t\tpassphrase = options.passphrase;\n\t\tif (typeof (passphrase) === 'string')\n\t\t\tpassphrase = new Buffer(passphrase, 'utf-8');\n\t\tif (passphrase !== undefined) {\n\t\t\tassert.buffer(passphrase, 'options.passphrase');\n\t\t\tassert.optionalString(options.cipher, 'options.cipher');\n\t\t\tcipher = options.cipher;\n\t\t\tif (cipher === undefined)\n\t\t\t\tcipher = 'aes128-ctr';\n\t\t\tcinf = utils.opensshCipherInfo(cipher);\n\t\t\tkdf = 'bcrypt';\n\t\t}\n\t}\n\n\tvar privBuf;\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tprivBuf = new SSHBuffer({});\n\t\tvar checkInt = crypto.randomBytes(4).readUInt32BE(0);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.write(key.toBuffer('rfc4253'));\n\t\tprivBuf.writeString(key.comment || '');\n\n\t\tvar n = 1;\n\t\twhile (privBuf._offset % cinf.blockSize !== 0)\n\t\t\tprivBuf.writeChar(n++);\n\t\tprivBuf = privBuf.toBuffer();\n\t}\n\n\tswitch (kdf) {\n\tcase 'none':\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = crypto.randomBytes(16);\n\t\tvar rounds = 16;\n\t\tvar kdfssh = new SSHBuffer({});\n\t\tkdfssh.writeBuffer(salt);\n\t\tkdfssh.writeInt(rounds);\n\t\tkdfopts = kdfssh.toBuffer();\n\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\t\tvar pass = new Uint8Array(passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = new Buffer(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\n\t\tvar cipherStream = crypto.createCipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privBuf);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivBuf = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported kdf ' + kdf));\n\t}\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeCString(MAGIC);\n\tbuf.writeString(cipher);\t/* cipher */\n\tbuf.writeString(kdf);\t\t/* kdf */\n\tbuf.writeBuffer(kdfopts);\t/* kdfoptions */\n\n\tbuf.writeInt(1);\t\t/* nkeys */\n\tbuf.writeBuffer(pubKey.toBuffer('rfc4253'));\n\n\tif (privBuf)\n\t\tbuf.writeBuffer(privBuf);\n\n\tbuf = buf.toBuffer();\n\n\tvar header;\n\tif (PrivateKey.isPrivateKey(key))\n\t\theader = 'OPENSSH PRIVATE KEY';\n\telse\n\t\theader = 'OPENSSH PUBLIC KEY';\n\n\tvar tmp = buf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 70) +\n\t    18 + 16 + header.length*2 + 10;\n\tbuf = new Buffer(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 70;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n","\n/**\n * slice() reference.\n */\n\nvar slice = Array.prototype.slice;\n\n/**\n * Expose `co`.\n */\n\nmodule.exports = co['default'] = co.co = co;\n\n/**\n * Wrap the given generator `fn` into a\n * function that returns a promise.\n * This is a separate function so that\n * every `co()` call doesn't create a new,\n * unnecessary closure.\n *\n * @param {GeneratorFunction} fn\n * @return {Function}\n * @api public\n */\n\nco.wrap = function (fn) {\n  createPromise.__generatorFunction__ = fn;\n  return createPromise;\n  function createPromise() {\n    return co.call(this, fn.apply(this, arguments));\n  }\n};\n\n/**\n * Execute the generator function or a generator\n * and return a promise.\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nfunction co(gen) {\n  var ctx = this;\n  var args = slice.call(arguments, 1)\n\n  // we wrap everything in a promise to avoid promise chaining,\n  // which leads to memory leak errors.\n  // see https://github.com/tj/co/issues/180\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.apply(ctx, args);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n\n    onFulfilled();\n\n    /**\n     * @param {Mixed} res\n     * @return {Promise}\n     * @api private\n     */\n\n    function onFulfilled(res) {\n      var ret;\n      try {\n        ret = gen.next(res);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n\n    /**\n     * @param {Error} err\n     * @return {Promise}\n     * @api private\n     */\n\n    function onRejected(err) {\n      var ret;\n      try {\n        ret = gen.throw(err);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n\n    /**\n     * Get the next value in the generator,\n     * return a promise.\n     *\n     * @param {Object} ret\n     * @return {Promise}\n     * @api private\n     */\n\n    function next(ret) {\n      if (ret.done) return resolve(ret.value);\n      var value = toPromise.call(ctx, ret.value);\n      if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n      return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n        + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n    }\n  });\n}\n\n/**\n * Convert a `yield`ed value into a promise.\n *\n * @param {Mixed} obj\n * @return {Promise}\n * @api private\n */\n\nfunction toPromise(obj) {\n  if (!obj) return obj;\n  if (isPromise(obj)) return obj;\n  if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);\n  if ('function' == typeof obj) return thunkToPromise.call(this, obj);\n  if (Array.isArray(obj)) return arrayToPromise.call(this, obj);\n  if (isObject(obj)) return objectToPromise.call(this, obj);\n  return obj;\n}\n\n/**\n * Convert a thunk to a promise.\n *\n * @param {Function}\n * @return {Promise}\n * @api private\n */\n\nfunction thunkToPromise(fn) {\n  var ctx = this;\n  return new Promise(function (resolve, reject) {\n    fn.call(ctx, function (err, res) {\n      if (err) return reject(err);\n      if (arguments.length > 2) res = slice.call(arguments, 1);\n      resolve(res);\n    });\n  });\n}\n\n/**\n * Convert an array of \"yieldables\" to a promise.\n * Uses `Promise.all()` internally.\n *\n * @param {Array} obj\n * @return {Promise}\n * @api private\n */\n\nfunction arrayToPromise(obj) {\n  return Promise.all(obj.map(toPromise, this));\n}\n\n/**\n * Convert an object of \"yieldables\" to a promise.\n * Uses `Promise.all()` internally.\n *\n * @param {Object} obj\n * @return {Promise}\n * @api private\n */\n\nfunction objectToPromise(obj){\n  var results = new obj.constructor();\n  var keys = Object.keys(obj);\n  var promises = [];\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var promise = toPromise.call(this, obj[key]);\n    if (promise && isPromise(promise)) defer(promise, key);\n    else results[key] = obj[key];\n  }\n  return Promise.all(promises).then(function () {\n    return results;\n  });\n\n  function defer(promise, key) {\n    // predefine the key in the result\n    results[key] = undefined;\n    promises.push(promise.then(function (res) {\n      results[key] = res;\n    }));\n  }\n}\n\n/**\n * Check if `obj` is a promise.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isPromise(obj) {\n  return 'function' == typeof obj.then;\n}\n\n/**\n * Check if `obj` is a generator.\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isGenerator(obj) {\n  return 'function' == typeof obj.next && 'function' == typeof obj.throw;\n}\n\n/**\n * Check if `obj` is a generator function.\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api private\n */\nfunction isGeneratorFunction(obj) {\n  var constructor = obj.constructor;\n  if (!constructor) return false;\n  if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;\n  return isGenerator(constructor.prototype);\n}\n\n/**\n * Check for plain object.\n *\n * @param {Mixed} val\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(val) {\n  return Object == val.constructor;\n}\n","var hasOwn = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nfunction isPlainObject(obj) {\n\tif (!obj || toString.call(obj) !== '[object Object]' || obj.nodeType || obj.setInterval)\n\t\treturn false;\n\n\tvar has_own_constructor = hasOwn.call(obj, 'constructor');\n\tvar has_is_property_of_method = hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !has_own_constructor && !has_is_property_of_method)\n\t\treturn false;\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor ( key in obj ) {}\n\n\treturn key === undefined || hasOwn.call( obj, key );\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t    target = arguments[0] || {},\n\t    i = 1,\n\t    length = arguments.length,\n\t    deep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && typeof target !== \"function\") {\n\t\ttarget = {};\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\t\t// Only deal with non-null/undefined values\n\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( isPlainObject(copy) || (copyIsArray = Array.isArray(copy)) ) ) {\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray(src) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar util = require('util');\r\nvar _ = require('underscore');\r\n\r\nfunction captureStackTrace(targetObject, constructorOpt) {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(targetObject, constructorOpt);\r\n  }\r\n}\r\n\r\nfunction ArgumentError(argumentName, message) {\r\n  captureStackTrace(this, this.constructor); \r\n  this.name = this.constructor.name;\r\n  this.argumentName = argumentName;\r\n  this.message = message || util.format('Invalid or missing argument supplied: %s', argumentName);\r\n}\r\nutil.inherits(ArgumentError, Error);\r\n\r\nfunction ArgumentNullError(argumentName, message) {\r\n  captureStackTrace(this, this.constructor); \r\n  this.name = this.constructor.name;\r\n  this.argumentName = argumentName;\r\n  this.message = message || util.format('Missing argument: %s', argumentName);\r\n}\r\n\r\nutil.inherits(ArgumentNullError, Error);\r\n\r\nfunction StorageError(message, properties) {\r\n  captureStackTrace(this, this.constructor); \r\n  this.name = this.constructor.name;\r\n  this.message = message;\r\n  \r\n  if(properties){\r\n    _.extend(this, properties);\r\n  }\r\n}\r\n\r\nutil.inherits(StorageError, Error);\r\n\r\nfunction TimeoutError(message) {\r\n  captureStackTrace(this, this.constructor); \r\n  this.name = this.constructor.name;\r\n  this.message = message;\r\n}\r\n\r\nutil.inherits(TimeoutError, Error);\r\n\r\nmodule.exports.ArgumentError = ArgumentError;\r\nmodule.exports.ArgumentNullError = ArgumentNullError;\r\nmodule.exports.StorageError = StorageError;\r\nmodule.exports.TimeoutError = TimeoutError;\r\nmodule.exports.captureStackTrace = captureStackTrace;","module.exports = require(\"tls\");","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar crypto = require('crypto');\r\n\r\nvar Md5Wrapper = function () {\r\n};\r\n\r\nMd5Wrapper.prototype.createMd5Hash = function() {\r\n    return crypto.createHash('md5');\r\n};\r\n\r\nmodule.exports = Md5Wrapper;","// Copyright 2015 Joyent, Inc.\n\nvar Key = require('./key');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar PrivateKey = require('./private-key');\nvar Certificate = require('./certificate');\nvar Identity = require('./identity');\nvar errs = require('./errors');\n\nmodule.exports = {\n\t/* top-level classes */\n\tKey: Key,\n\tparseKey: Key.parse,\n\tFingerprint: Fingerprint,\n\tparseFingerprint: Fingerprint.parse,\n\tSignature: Signature,\n\tparseSignature: Signature.parse,\n\tPrivateKey: PrivateKey,\n\tparsePrivateKey: PrivateKey.parse,\n\tgeneratePrivateKey: PrivateKey.generate,\n\tCertificate: Certificate,\n\tparseCertificate: Certificate.parse,\n\tcreateSelfSignedCertificate: Certificate.createSelfSigned,\n\tcreateCertificate: Certificate.create,\n\tIdentity: Identity,\n\tidentityFromDN: Identity.parseDN,\n\tidentityForHost: Identity.forHost,\n\tidentityForUser: Identity.forUser,\n\tidentityForEmail: Identity.forEmail,\n\n\t/* errors */\n\tFingerprintFormatError: errs.FingerprintFormatError,\n\tInvalidAlgorithmError: errs.InvalidAlgorithmError,\n\tKeyParseError: errs.KeyParseError,\n\tSignatureParseError: errs.SignatureParseError,\n\tKeyEncryptedError: errs.KeyEncryptedError,\n\tCertificateParseError: errs.CertificateParseError\n};\n","// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tDiffieHellman: DiffieHellman,\n\tgenerateECDSA: generateECDSA,\n\tgenerateED25519: generateED25519\n};\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar algs = require('./algs');\nvar utils = require('./utils');\nvar nacl;\n\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\n\nvar CRYPTO_HAVE_ECDH = (crypto.createECDH !== undefined);\n\nvar ecdh, ec, jsbn;\n\nfunction DiffieHellman(key) {\n\tutils.assertCompatible(key, Key, [1, 4], 'key');\n\tthis._isPriv = PrivateKey.isPrivateKey(key, [1, 3]);\n\tthis._algo = key.type;\n\tthis._curve = key.curve;\n\tthis._key = key;\n\tif (key.type === 'dsa') {\n\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\tthrow (new Error('Due to bugs in the node 0.10 ' +\n\t\t\t    'crypto API, node 0.12.x or later is required ' +\n\t\t\t    'to use DH'));\n\t\t}\n\t\tthis._dh = crypto.createDiffieHellman(\n\t\t    key.part.p.data, undefined,\n\t\t    key.part.g.data, undefined);\n\t\tthis._p = key.part.p;\n\t\tthis._g = key.part.g;\n\t\tif (this._isPriv)\n\t\t\tthis._dh.setPrivateKey(key.part.x.data);\n\t\tthis._dh.setPublicKey(key.part.y.data);\n\n\t} else if (key.type === 'ecdsa') {\n\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\tif (ecdh === undefined)\n\t\t\t\tecdh = require('ecc-jsbn');\n\t\t\tif (ec === undefined)\n\t\t\t\tec = require('ecc-jsbn/lib/ec');\n\t\t\tif (jsbn === undefined)\n\t\t\t\tjsbn = require('jsbn').BigInteger;\n\n\t\t\tthis._ecParams = new X9ECParameters(this._curve);\n\n\t\t\tif (this._isPriv) {\n\t\t\t\tthis._priv = new ECPrivate(\n\t\t\t\t    this._ecParams, key.part.d.data);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tvar curve = {\n\t\t\t'nistp256': 'prime256v1',\n\t\t\t'nistp384': 'secp384r1',\n\t\t\t'nistp521': 'secp521r1'\n\t\t}[key.curve];\n\t\tthis._dh = crypto.createECDH(curve);\n\t\tif (typeof (this._dh) !== 'object' ||\n\t\t    typeof (this._dh.setPrivateKey) !== 'function') {\n\t\t\tCRYPTO_HAVE_ECDH = false;\n\t\t\tDiffieHellman.call(this, key);\n\t\t\treturn;\n\t\t}\n\t\tif (this._isPriv)\n\t\t\tthis._dh.setPrivateKey(key.part.d.data);\n\t\tthis._dh.setPublicKey(key.part.Q.data);\n\n\t} else if (key.type === 'curve25519') {\n\t\tif (nacl === undefined)\n\t\t\tnacl = require('tweetnacl');\n\n\t\tif (this._isPriv) {\n\t\t\tutils.assertCompatible(key, PrivateKey, [1, 5], 'key');\n\t\t\tthis._priv = key.part.k.data;\n\t\t}\n\n\t} else {\n\t\tthrow (new Error('DH not supported for ' + key.type + ' keys'));\n\t}\n}\n\nDiffieHellman.prototype.getPublicKey = function () {\n\tif (this._isPriv)\n\t\treturn (this._key.toPublic());\n\treturn (this._key);\n};\n\nDiffieHellman.prototype.getPrivateKey = function () {\n\tif (this._isPriv)\n\t\treturn (this._key);\n\telse\n\t\treturn (undefined);\n};\nDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\n\nDiffieHellman.prototype._keyCheck = function (pk, isPub) {\n\tassert.object(pk, 'key');\n\tif (!isPub)\n\t\tutils.assertCompatible(pk, PrivateKey, [1, 3], 'key');\n\tutils.assertCompatible(pk, Key, [1, 4], 'key');\n\n\tif (pk.type !== this._algo) {\n\t\tthrow (new Error('A ' + pk.type + ' key cannot be used in ' +\n\t\t    this._algo + ' Diffie-Hellman'));\n\t}\n\n\tif (pk.curve !== this._curve) {\n\t\tthrow (new Error('A key from the ' + pk.curve + ' curve ' +\n\t\t    'cannot be used with a ' + this._curve +\n\t\t    ' Diffie-Hellman'));\n\t}\n\n\tif (pk.type === 'dsa') {\n\t\tassert.deepEqual(pk.part.p, this._p,\n\t\t    'DSA key prime does not match');\n\t\tassert.deepEqual(pk.part.g, this._g,\n\t\t    'DSA key generator does not match');\n\t}\n};\n\nDiffieHellman.prototype.setKey = function (pk) {\n\tthis._keyCheck(pk);\n\n\tif (pk.type === 'dsa') {\n\t\tthis._dh.setPrivateKey(pk.part.x.data);\n\t\tthis._dh.setPublicKey(pk.part.y.data);\n\n\t} else if (pk.type === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\tthis._dh.setPrivateKey(pk.part.d.data);\n\t\t\tthis._dh.setPublicKey(pk.part.Q.data);\n\t\t} else {\n\t\t\tthis._priv = new ECPrivate(\n\t\t\t    this._ecParams, pk.part.d.data);\n\t\t}\n\n\t} else if (pk.type === 'curve25519') {\n\t\tvar k = pk.part.k;\n\t\tif (!pk.part.k)\n\t\t\tk = pk.part.r;\n\t\tthis._priv = k.data;\n\t\tif (this._priv[0] === 0x00)\n\t\t\tthis._priv = this._priv.slice(1);\n\t\tthis._priv = this._priv.slice(0, 32);\n\t}\n\tthis._key = pk;\n\tthis._isPriv = true;\n};\nDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\n\nDiffieHellman.prototype.computeSecret = function (otherpk) {\n\tthis._keyCheck(otherpk, true);\n\tif (!this._isPriv)\n\t\tthrow (new Error('DH exchange has not been initialized with ' +\n\t\t    'a private key yet'));\n\n\tvar pub;\n\tif (this._algo === 'dsa') {\n\t\treturn (this._dh.computeSecret(\n\t\t    otherpk.part.y.data));\n\n\t} else if (this._algo === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\treturn (this._dh.computeSecret(\n\t\t\t    otherpk.part.Q.data));\n\t\t} else {\n\t\t\tpub = new ECPublic(\n\t\t\t    this._ecParams, otherpk.part.Q.data);\n\t\t\treturn (this._priv.deriveSharedSecret(pub));\n\t\t}\n\n\t} else if (this._algo === 'curve25519') {\n\t\tpub = otherpk.part.A.data;\n\t\twhile (pub[0] === 0x00 && pub.length > 32)\n\t\t\tpub = pub.slice(1);\n\t\tvar priv = this._priv;\n\t\tassert.strictEqual(pub.length, 32);\n\t\tassert.strictEqual(priv.length, 32);\n\n\t\tvar secret = nacl.box.before(new Uint8Array(pub),\n\t\t    new Uint8Array(priv));\n\n\t\treturn (new Buffer(secret));\n\t}\n\n\tthrow (new Error('Invalid algorithm: ' + this._algo));\n};\n\nDiffieHellman.prototype.generateKey = function () {\n\tvar parts = [];\n\tvar priv, pub;\n\tif (this._algo === 'dsa') {\n\t\tthis._dh.generateKeys();\n\n\t\tparts.push({name: 'p', data: this._p.data});\n\t\tparts.push({name: 'q', data: this._key.part.q.data});\n\t\tparts.push({name: 'g', data: this._g.data});\n\t\tparts.push({name: 'y', data: this._dh.getPublicKey()});\n\t\tparts.push({name: 'x', data: this._dh.getPrivateKey()});\n\t\tthis._key = new PrivateKey({\n\t\t\ttype: 'dsa',\n\t\t\tparts: parts\n\t\t});\n\t\tthis._isPriv = true;\n\t\treturn (this._key);\n\n\t} else if (this._algo === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\tthis._dh.generateKeys();\n\n\t\t\tparts.push({name: 'curve',\n\t\t\t    data: new Buffer(this._curve)});\n\t\t\tparts.push({name: 'Q', data: this._dh.getPublicKey()});\n\t\t\tparts.push({name: 'd', data: this._dh.getPrivateKey()});\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: this._curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\n\t\t} else {\n\t\t\tvar n = this._ecParams.getN();\n\t\t\tvar r = new jsbn(crypto.randomBytes(n.bitLength()));\n\t\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\t\tpriv = r.mod(n1).add(jsbn.ONE);\n\t\t\tpub = this._ecParams.getG().multiply(priv);\n\n\t\t\tpriv = new Buffer(priv.toByteArray());\n\t\t\tpub = new Buffer(this._ecParams.getCurve().\n\t\t\t    encodePointHex(pub), 'hex');\n\n\t\t\tthis._priv = new ECPrivate(this._ecParams, priv);\n\n\t\t\tparts.push({name: 'curve',\n\t\t\t    data: new Buffer(this._curve)});\n\t\t\tparts.push({name: 'Q', data: pub});\n\t\t\tparts.push({name: 'd', data: priv});\n\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: this._curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\t\t}\n\n\t} else if (this._algo === 'curve25519') {\n\t\tvar pair = nacl.box.keyPair();\n\t\tpriv = new Buffer(pair.secretKey);\n\t\tpub = new Buffer(pair.publicKey);\n\t\tpriv = Buffer.concat([priv, pub]);\n\t\tassert.strictEqual(priv.length, 64);\n\t\tassert.strictEqual(pub.length, 32);\n\n\t\tparts.push({name: 'A', data: pub});\n\t\tparts.push({name: 'k', data: priv});\n\t\tthis._key = new PrivateKey({\n\t\t\ttype: 'curve25519',\n\t\t\tparts: parts\n\t\t});\n\t\tthis._isPriv = true;\n\t\treturn (this._key);\n\t}\n\n\tthrow (new Error('Invalid algorithm: ' + this._algo));\n};\nDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n\n/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */\n\nfunction X9ECParameters(name) {\n\tvar params = algs.curves[name];\n\tassert.object(params);\n\n\tvar p = new jsbn(params.p);\n\tvar a = new jsbn(params.a);\n\tvar b = new jsbn(params.b);\n\tvar n = new jsbn(params.n);\n\tvar h = jsbn.ONE;\n\tvar curve = new ec.ECCurveFp(p, a, b);\n\tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n\tthis.curve = curve;\n\tthis.g = G;\n\tthis.n = n;\n\tthis.h = h;\n}\nX9ECParameters.prototype.getCurve = function () { return (this.curve); };\nX9ECParameters.prototype.getG = function () { return (this.g); };\nX9ECParameters.prototype.getN = function () { return (this.n); };\nX9ECParameters.prototype.getH = function () { return (this.h); };\n\nfunction ECPublic(params, buffer) {\n\tthis._params = params;\n\tif (buffer[0] === 0x00)\n\t\tbuffer = buffer.slice(1);\n\tthis._pub = params.getCurve().decodePointHex(buffer.toString('hex'));\n}\n\nfunction ECPrivate(params, buffer) {\n\tthis._params = params;\n\tthis._priv = new jsbn(utils.mpNormalize(buffer));\n}\nECPrivate.prototype.deriveSharedSecret = function (pubKey) {\n\tassert.ok(pubKey instanceof ECPublic);\n\tvar S = pubKey._pub.multiply(this._priv);\n\treturn (new Buffer(S.getX().toBigInteger().toByteArray()));\n};\n\nfunction generateED25519() {\n\tif (nacl === undefined)\n\t\tnacl = require('tweetnacl');\n\n\tvar pair = nacl.sign.keyPair();\n\tvar priv = new Buffer(pair.secretKey);\n\tvar pub = new Buffer(pair.publicKey);\n\tassert.strictEqual(priv.length, 64);\n\tassert.strictEqual(pub.length, 32);\n\n\tvar parts = [];\n\tparts.push({name: 'A', data: pub});\n\tparts.push({name: 'k', data: priv.slice(0, 32)});\n\tvar key = new PrivateKey({\n\t\ttype: 'ed25519',\n\t\tparts: parts\n\t});\n\treturn (key);\n}\n\n/* Generates a new ECDSA private key on a given curve. */\nfunction generateECDSA(curve) {\n\tvar parts = [];\n\tvar key;\n\n\tif (CRYPTO_HAVE_ECDH) {\n\t\t/*\n\t\t * Node crypto doesn't expose key generation directly, but the\n\t\t * ECDH instances can generate keys. It turns out this just\n\t\t * calls into the OpenSSL generic key generator, and we can\n\t\t * read its output happily without doing an actual DH. So we\n\t\t * use that here.\n\t\t */\n\t\tvar osCurve = {\n\t\t\t'nistp256': 'prime256v1',\n\t\t\t'nistp384': 'secp384r1',\n\t\t\t'nistp521': 'secp521r1'\n\t\t}[curve];\n\n\t\tvar dh = crypto.createECDH(osCurve);\n\t\tdh.generateKeys();\n\n\t\tparts.push({name: 'curve',\n\t\t    data: new Buffer(curve)});\n\t\tparts.push({name: 'Q', data: dh.getPublicKey()});\n\t\tparts.push({name: 'd', data: dh.getPrivateKey()});\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tparts: parts\n\t\t});\n\t\treturn (key);\n\t} else {\n\t\tif (ecdh === undefined)\n\t\t\tecdh = require('ecc-jsbn');\n\t\tif (ec === undefined)\n\t\t\tec = require('ecc-jsbn/lib/ec');\n\t\tif (jsbn === undefined)\n\t\t\tjsbn = require('jsbn').BigInteger;\n\n\t\tvar ecParams = new X9ECParameters(curve);\n\n\t\t/* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */\n\t\tvar n = ecParams.getN();\n\t\t/*\n\t\t * The crypto.randomBytes() function can only give us whole\n\t\t * bytes, so taking a nod from X9.62, we round up.\n\t\t */\n\t\tvar cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n\t\tvar c = new jsbn(crypto.randomBytes(cByteLen));\n\n\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\tvar priv = c.mod(n1).add(jsbn.ONE);\n\t\tvar pub = ecParams.getG().multiply(priv);\n\n\t\tpriv = new Buffer(priv.toByteArray());\n\t\tpub = new Buffer(ecParams.getCurve().\n\t\t    encodePointHex(pub), 'hex');\n\n\t\tparts.push({name: 'curve', data: new Buffer(curve)});\n\t\tparts.push({name: 'Q', data: pub});\n\t\tparts.push({name: 'd', data: priv});\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tparts: parts\n\t\t});\n\t\treturn (key);\n\t}\n}\n","// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\n\nmodule.exports = {\n\n  newInvalidAsn1Error: function(msg) {\n    var e = new Error();\n    e.name = 'InvalidAsn1Error';\n    e.message = msg || '';\n    return e;\n  }\n\n};\n","// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\n\nmodule.exports = {\n  EOC: 0,\n  Boolean: 1,\n  Integer: 2,\n  BitString: 3,\n  OctetString: 4,\n  Null: 5,\n  OID: 6,\n  ObjectDescriptor: 7,\n  External: 8,\n  Real: 9, // float\n  Enumeration: 10,\n  PDV: 11,\n  Utf8String: 12,\n  RelativeOID: 13,\n  Sequence: 16,\n  Set: 17,\n  NumericString: 18,\n  PrintableString: 19,\n  T61String: 20,\n  VideotexString: 21,\n  IA5String: 22,\n  UTCTime: 23,\n  GeneralizedTime: 24,\n  GraphicString: 25,\n  VisibleString: 26,\n  GeneralString: 28,\n  UniversalString: 29,\n  CharacterString: 30,\n  BMPString: 31,\n  Constructor: 32,\n  Context: 128\n};\n","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs1: readPkcs1,\n\twrite: write,\n\twritePkcs1: writePkcs1\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nvar pkcs8 = require('./pkcs8');\nvar readECDSACurve = pkcs8.readECDSACurve;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options, 'pkcs1'));\n}\n\nfunction write(key, options) {\n\treturn (pem.write(key, options, 'pkcs1'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs1(alg, type, der) {\n\tswitch (alg) {\n\tcase 'RSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1RSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1RSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'DSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1DSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1DSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'EC':\n\tcase 'ECDSA':\n\t\tif (type === 'private')\n\t\t\treturn (readPkcs1ECDSAPrivate(der));\n\t\telse if (type === 'public')\n\t\t\treturn (readPkcs1ECDSAPublic(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'EDDSA':\n\tcase 'EdDSA':\n\t\tif (type === 'private')\n\t\t\treturn (readPkcs1EdDSAPrivate(der));\n\t\tthrow (new Error(type + ' keys not supported with EdDSA'));\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + alg));\n\t}\n}\n\nfunction readPkcs1RSAPublic(der) {\n\t// modulus and exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1RSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version[0], 0);\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 0);\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\tvar y = readMPInt(der, 'y');\n\tvar x = readMPInt(der, 'x');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1EdDSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 1);\n\n\t// private key\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\n\tder.readSequence(0xa0);\n\tvar oid = der.readOID();\n\tassert.strictEqual(oid, '1.3.101.112', 'the ed25519 curve identifier');\n\n\tder.readSequence(0xa1);\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: k }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPublic(der) {\n\tvar y = readMPInt(der, 'y');\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPublic(der) {\n\tder.readSequence();\n\n\tvar oid = der.readOID();\n\tassert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');\n\n\tvar curveOid = der.readOID();\n\n\tvar curve;\n\tvar curves = Object.keys(algs.curves);\n\tfor (var j = 0; j < curves.length; ++j) {\n\t\tvar c = curves[j];\n\t\tvar cd = algs.curves[c];\n\t\tif (cd.pkcs8oid === curveOid) {\n\t\t\tcurve = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\tassert.string(curve, 'a known ECDSA named curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curve) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 1);\n\n\t// private key\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\n\tder.readSequence(0xa0);\n\tvar curve = readECDSACurve(der);\n\tassert.string(curve, 'a known elliptic curve');\n\n\tder.readSequence(0xa1);\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curve) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction writePkcs1(der, key) {\n\tder.startSequence();\n\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1RSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1RSAPublic(der, key);\n\t\tbreak;\n\tcase 'dsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1DSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1DSAPublic(der, key);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1ECDSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1ECDSAPublic(der, key);\n\t\tbreak;\n\tcase 'ed25519':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1EdDSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1EdDSAPublic(der, key);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs1RSAPublic(der, key) {\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1RSAPrivate(der, key) {\n\tvar ver = new Buffer(1);\n\tver[0] = 0;\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPrivate(der, key) {\n\tvar ver = new Buffer(1);\n\tver[0] = 0;\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPublic(der, key) {\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1ECDSAPublic(der, key) {\n\tder.startSequence();\n\n\tder.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs1ECDSAPrivate(der, key) {\n\tvar ver = new Buffer(1);\n\tver[0] = 1;\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa0);\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\tder.endSequence();\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n}\n\nfunction writePkcs1EdDSAPrivate(der, key) {\n\tvar ver = new Buffer(1);\n\tver[0] = 1;\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa0);\n\tder.writeOID('1.3.101.112');\n\tder.endSequence();\n\n\tder.startSequence(0xa1);\n\tutils.writeBitString(der, key.part.A.data);\n\tder.endSequence();\n}\n\nfunction writePkcs1EdDSAPublic(der, key) {\n\tthrow (new Error('Public keys are not supported for EdDSA PKCS#1'));\n}\n","// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar utils = require('../utils');\nvar SSHBuffer = require('../ssh-buffer');\nvar Dhe = require('../dhe');\n\nvar supportedAlgos = {\n\t'rsa-sha1' : 5,\n\t'rsa-sha256' : 8,\n\t'rsa-sha512' : 10,\n\t'ecdsa-p256-sha256' : 13,\n\t'ecdsa-p384-sha384' : 14\n\t/*\n\t * ed25519 is hypothetically supported with id 15\n\t * but the common tools available don't appear to be\n\t * capable of generating/using ed25519 keys\n\t */\n};\n\nvar supportedAlgosById = {};\nObject.keys(supportedAlgos).forEach(function (k) {\n\tsupportedAlgosById[supportedAlgos[k]] = k.toUpperCase();\n});\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\tvar lines = buf.split('\\n');\n\tif (lines[0].match(/^Private-key-format\\: v1/)) {\n\t\tvar algElems = lines[1].split(' ');\n\t\tvar algoNum = parseInt(algElems[1], 10);\n\t\tvar algoName = algElems[2];\n\t\tif (!supportedAlgosById[algoNum])\n\t\t\tthrow (new Error('Unsupported algorithm: ' + algoName));\n\t\treturn (readDNSSECPrivateKey(algoNum, lines.slice(2)));\n\t}\n\n\t// skip any comment-lines\n\tvar line = 0;\n\t/* JSSTYLED */\n\twhile (lines[line].match(/^\\;/))\n\t\tline++;\n\t// we should now have *one single* line left with our KEY on it.\n\tif ((lines[line].match(/\\. IN KEY /) ||\n\t    lines[line].match(/\\. IN DNSKEY /)) && lines[line+1].length === 0) {\n\t\treturn (readRFC3110(lines[line]));\n\t}\n\tthrow (new Error('Cannot parse dnssec key'));\n}\n\nfunction readRFC3110(keyString) {\n\tvar elems = keyString.split(' ');\n\t//unused var flags = parseInt(elems[3], 10);\n\t//unused var protocol = parseInt(elems[4], 10);\n\tvar algorithm = parseInt(elems[5], 10);\n\tif (!supportedAlgosById[algorithm])\n\t\tthrow (new Error('Unsupported algorithm: ' + algorithm));\n\tvar base64key = elems.slice(6, elems.length).join();\n\tvar keyBuffer = new Buffer(base64key, 'base64');\n\tif (supportedAlgosById[algorithm].match(/^RSA-/)) {\n\t\t// join the rest of the body into a single base64-blob\n\t\tvar publicExponentLen = keyBuffer.readUInt8(0);\n\t\tif (publicExponentLen != 3 && publicExponentLen != 1)\n\t\t\tthrow (new Error('Cannot parse dnssec key: ' +\n\t\t\t    'unsupported exponent length'));\n\n\t\tvar publicExponent = keyBuffer.slice(1, publicExponentLen+1);\n\t\tpublicExponent = utils.mpNormalize(publicExponent);\n\t\tvar modulus = keyBuffer.slice(1+publicExponentLen);\n\t\tmodulus = utils.mpNormalize(modulus);\n\t\t// now, make the key\n\t\tvar rsaKey = {\n\t\t\ttype: 'rsa',\n\t\t\tparts: []\n\t\t};\n\t\trsaKey.parts.push({ name: 'e', data: publicExponent});\n\t\trsaKey.parts.push({ name: 'n', data: modulus});\n\t\treturn (new Key(rsaKey));\n\t}\n\tif (supportedAlgosById[algorithm] === 'ECDSA-P384-SHA384' ||\n\t    supportedAlgosById[algorithm] === 'ECDSA-P256-SHA256') {\n\t\tvar curve = 'nistp384';\n\t\tvar size = 384;\n\t\tif (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {\n\t\t\tcurve = 'nistp256';\n\t\t\tsize = 256;\n\t\t}\n\n\t\tvar ecdsaKey = {\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tsize: size,\n\t\t\tparts: [\n\t\t\t\t{name: 'curve', data: new Buffer(curve) },\n\t\t\t\t{name: 'Q', data: utils.ecNormalize(keyBuffer) }\n\t\t\t]\n\t\t};\n\t\treturn (new Key(ecdsaKey));\n\t}\n\tthrow (new Error('Unsupported algorithm: ' +\n\t    supportedAlgosById[algorithm]));\n}\n\nfunction elementToBuf(e) {\n\treturn (new Buffer(e.split(' ')[1], 'base64'));\n}\n\nfunction readDNSSECRSAPrivateKey(elements) {\n\tvar rsaParams = {};\n\telements.forEach(function (element) {\n\t\tif (element.split(' ')[0] === 'Modulus:')\n\t\t\trsaParams['n'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'PublicExponent:')\n\t\t\trsaParams['e'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'PrivateExponent:')\n\t\t\trsaParams['d'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Prime1:')\n\t\t\trsaParams['p'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Prime2:')\n\t\t\trsaParams['q'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Exponent1:')\n\t\t\trsaParams['dmodp'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Exponent2:')\n\t\t\trsaParams['dmodq'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Coefficient:')\n\t\t\trsaParams['iqmp'] = elementToBuf(element);\n\t});\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'e', data: utils.mpNormalize(rsaParams['e'])},\n\t\t\t{ name: 'n', data: utils.mpNormalize(rsaParams['n'])},\n\t\t\t{ name: 'd', data: utils.mpNormalize(rsaParams['d'])},\n\t\t\t{ name: 'p', data: utils.mpNormalize(rsaParams['p'])},\n\t\t\t{ name: 'q', data: utils.mpNormalize(rsaParams['q'])},\n\t\t\t{ name: 'dmodp',\n\t\t\t    data: utils.mpNormalize(rsaParams['dmodp'])},\n\t\t\t{ name: 'dmodq',\n\t\t\t    data: utils.mpNormalize(rsaParams['dmodq'])},\n\t\t\t{ name: 'iqmp',\n\t\t\t    data: utils.mpNormalize(rsaParams['iqmp'])}\n\t\t]\n\t};\n\treturn (new PrivateKey(key));\n}\n\nfunction readDNSSECPrivateKey(alg, elements) {\n\tif (supportedAlgosById[alg].match(/^RSA-/)) {\n\t\treturn (readDNSSECRSAPrivateKey(elements));\n\t}\n\tif (supportedAlgosById[alg] === 'ECDSA-P384-SHA384' ||\n\t    supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n\t\tvar d = new Buffer(elements[0].split(' ')[1], 'base64');\n\t\tvar curve = 'nistp384';\n\t\tvar size = 384;\n\t\tif (supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n\t\t\tcurve = 'nistp256';\n\t\t\tsize = 256;\n\t\t}\n\t\t// DNSSEC generates the public-key on the fly (go calculate it)\n\t\tvar publicKey = utils.publicFromPrivateECDSA(curve, d);\n\t\tvar Q = publicKey.part['Q'].data;\n\t\tvar ecdsaKey = {\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tsize: size,\n\t\t\tparts: [\n\t\t\t\t{name: 'curve', data: new Buffer(curve) },\n\t\t\t\t{name: 'd', data: d },\n\t\t\t\t{name: 'Q', data: Q }\n\t\t\t]\n\t\t};\n\t\treturn (new PrivateKey(ecdsaKey));\n\t}\n\tthrow (new Error('Unsupported algorithm: ' + supportedAlgosById[alg]));\n}\n\nfunction dnssecTimestamp(date) {\n\tvar year = date.getFullYear() + ''; //stringify\n\tvar month = (date.getMonth() + 1);\n\tvar timestampStr = year + month + date.getUTCDate();\n\ttimestampStr += '' + date.getUTCHours() + date.getUTCMinutes();\n\ttimestampStr += date.getUTCSeconds();\n\treturn (timestampStr);\n}\n\nfunction rsaAlgFromOptions(opts) {\n\tif (!opts || !opts.hashAlgo || opts.hashAlgo === 'sha1')\n\t\treturn ('5 (RSASHA1)');\n\telse if (opts.hashAlgo === 'sha256')\n\t\treturn ('8 (RSASHA256)');\n\telse if (opts.hashAlgo === 'sha512')\n\t\treturn ('10 (RSASHA512)');\n\telse\n\t\tthrow (new Error('Unknown or unsupported hash: ' +\n\t\t    opts.hashAlgo));\n}\n\nfunction writeRSA(key, options) {\n\t// if we're missing parts, add them.\n\tif (!key.part.dmodp || !key.part.dmodq) {\n\t\tutils.addRSAMissing(key);\n\t}\n\n\tvar out = '';\n\tout += 'Private-key-format: v1.3\\n';\n\tout += 'Algorithm: ' + rsaAlgFromOptions(options) + '\\n';\n\tvar n = utils.mpDenormalize(key.part['n'].data);\n\tout += 'Modulus: ' + n.toString('base64') + '\\n';\n\tvar e = utils.mpDenormalize(key.part['e'].data);\n\tout += 'PublicExponent: ' + e.toString('base64') + '\\n';\n\tvar d = utils.mpDenormalize(key.part['d'].data);\n\tout += 'PrivateExponent: ' + d.toString('base64') + '\\n';\n\tvar p = utils.mpDenormalize(key.part['p'].data);\n\tout += 'Prime1: ' + p.toString('base64') + '\\n';\n\tvar q = utils.mpDenormalize(key.part['q'].data);\n\tout += 'Prime2: ' + q.toString('base64') + '\\n';\n\tvar dmodp = utils.mpDenormalize(key.part['dmodp'].data);\n\tout += 'Exponent1: ' + dmodp.toString('base64') + '\\n';\n\tvar dmodq = utils.mpDenormalize(key.part['dmodq'].data);\n\tout += 'Exponent2: ' + dmodq.toString('base64') + '\\n';\n\tvar iqmp = utils.mpDenormalize(key.part['iqmp'].data);\n\tout += 'Coefficient: ' + iqmp.toString('base64') + '\\n';\n\t// Assume that we're valid as-of now\n\tvar timestamp = new Date();\n\tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\treturn (new Buffer(out, 'ascii'));\n}\n\nfunction writeECDSA(key, options) {\n\tvar out = '';\n\tout += 'Private-key-format: v1.3\\n';\n\n\tif (key.curve === 'nistp256') {\n\t\tout += 'Algorithm: 13 (ECDSAP256SHA256)\\n';\n\t} else if (key.curve === 'nistp384') {\n\t\tout += 'Algorithm: 14 (ECDSAP384SHA384)\\n';\n\t} else {\n\t\tthrow (new Error('Unsupported curve'));\n\t}\n\tvar base64Key = key.part['d'].data.toString('base64');\n\tout += 'PrivateKey: ' + base64Key + '\\n';\n\n\t// Assume that we're valid as-of now\n\tvar timestamp = new Date();\n\tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\n\treturn (new Buffer(out, 'ascii'));\n}\n\nfunction write(key, options) {\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tif (key.type === 'rsa') {\n\t\t\treturn (writeRSA(key, options));\n\t\t} else if (key.type === 'ecdsa') {\n\t\t\treturn (writeECDSA(key, options));\n\t\t} else {\n\t\t\tthrow (new Error('Unsupported algorithm: ' + key.type));\n\t\t}\n\t} else if (Key.isKey(key)) {\n\t\t/*\n\t\t * RFC3110 requires a keyname, and a keytype, which we\n\t\t * don't really have a mechanism for specifying such\n\t\t * additional metadata.\n\t\t */\n\t\tthrow (new Error('Format \"dnssec\" only supports ' +\n\t\t    'writing private keys'));\n\t} else {\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t}\n}\n","function Caseless (dict) {\n  this.dict = dict || {}\n}\nCaseless.prototype.set = function (name, value, clobber) {\n  if (typeof name === 'object') {\n    for (var i in name) {\n      this.set(i, name[i], value)\n    }\n  } else {\n    if (typeof clobber === 'undefined') clobber = true\n    var has = this.has(name)\n\n    if (!clobber && has) this.dict[has] = this.dict[has] + ',' + value\n    else this.dict[has || name] = value\n    return has\n  }\n}\nCaseless.prototype.has = function (name) {\n  var keys = Object.keys(this.dict)\n    , name = name.toLowerCase()\n    ;\n  for (var i=0;i<keys.length;i++) {\n    if (keys[i].toLowerCase() === name) return keys[i]\n  }\n  return false\n}\nCaseless.prototype.get = function (name) {\n  name = name.toLowerCase()\n  var result, _key\n  var headers = this.dict\n  Object.keys(headers).forEach(function (key) {\n    _key = key.toLowerCase()\n    if (name === _key) result = headers[key]\n  })\n  return result\n}\nCaseless.prototype.swap = function (name) {\n  var has = this.has(name)\n  if (has === name) return\n  if (!has) throw new Error('There is no header than matches \"'+name+'\"')\n  this.dict[name] = this.dict[has]\n  delete this.dict[has]\n}\nCaseless.prototype.del = function (name) {\n  var has = this.has(name)\n  return delete this.dict[has || name]\n}\n\nmodule.exports = function (dict) {return new Caseless(dict)}\nmodule.exports.httpify = function (resp, headers) {\n  var c = new Caseless(headers)\n  resp.setHeader = function (key, value, clobber) {\n    if (typeof value === 'undefined') return\n    return c.set(key, value, clobber)\n  }\n  resp.hasHeader = function (key) {\n    return c.has(key)\n  }\n  resp.getHeader = function (key) {\n    return c.get(key)\n  }\n  resp.removeHeader = function (key) {\n    return c.del(key)\n  }\n  resp.headers = c.dict\n  return c\n}\n","'use strict';\n\nvar url = require('url')\n  , equal = require('fast-deep-equal')\n  , util = require('./util')\n  , SchemaObject = require('./schema_obj')\n  , traverse = require('json-schema-traverse');\n\nmodule.exports = resolve;\n\nresolve.normalizeId = normalizeId;\nresolve.fullPath = getFullPath;\nresolve.url = resolveUrl;\nresolve.ids = resolveIds;\nresolve.inlineRef = inlineRef;\nresolve.schema = resolveSchema;\n\n/**\n * [resolve and compile the references ($ref)]\n * @this   Ajv\n * @param  {Function} compile reference to schema compilation funciton (localCompile)\n * @param  {Object} root object with information about the root schema for the current schema\n * @param  {String} ref reference to resolve\n * @return {Object|Function} schema object (if the schema can be inlined) or validation function\n */\nfunction resolve(compile, root, ref) {\n  /* jshint validthis: true */\n  var refVal = this._refs[ref];\n  if (typeof refVal == 'string') {\n    if (this._refs[refVal]) refVal = this._refs[refVal];\n    else return resolve.call(this, compile, root, refVal);\n  }\n\n  refVal = refVal || this._schemas[ref];\n  if (refVal instanceof SchemaObject) {\n    return inlineRef(refVal.schema, this._opts.inlineRefs)\n            ? refVal.schema\n            : refVal.validate || this._compile(refVal);\n  }\n\n  var res = resolveSchema.call(this, root, ref);\n  var schema, v, baseId;\n  if (res) {\n    schema = res.schema;\n    root = res.root;\n    baseId = res.baseId;\n  }\n\n  if (schema instanceof SchemaObject) {\n    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);\n  } else if (schema !== undefined) {\n    v = inlineRef(schema, this._opts.inlineRefs)\n        ? schema\n        : compile.call(this, schema, root, undefined, baseId);\n  }\n\n  return v;\n}\n\n\n/**\n * Resolve schema, its root and baseId\n * @this Ajv\n * @param  {Object} root root object with properties schema, refVal, refs\n * @param  {String} ref  reference to resolve\n * @return {Object} object with properties schema, root, baseId\n */\nfunction resolveSchema(root, ref) {\n  /* jshint validthis: true */\n  var p = url.parse(ref, false, true)\n    , refPath = _getFullPath(p)\n    , baseId = getFullPath(this._getId(root.schema));\n  if (refPath !== baseId) {\n    var id = normalizeId(refPath);\n    var refVal = this._refs[id];\n    if (typeof refVal == 'string') {\n      return resolveRecursive.call(this, root, refVal, p);\n    } else if (refVal instanceof SchemaObject) {\n      if (!refVal.validate) this._compile(refVal);\n      root = refVal;\n    } else {\n      refVal = this._schemas[id];\n      if (refVal instanceof SchemaObject) {\n        if (!refVal.validate) this._compile(refVal);\n        if (id == normalizeId(ref))\n          return { schema: refVal, root: root, baseId: baseId };\n        root = refVal;\n      } else {\n        return;\n      }\n    }\n    if (!root.schema) return;\n    baseId = getFullPath(this._getId(root.schema));\n  }\n  return getJsonPointer.call(this, p, baseId, root.schema, root);\n}\n\n\n/* @this Ajv */\nfunction resolveRecursive(root, ref, parsedRef) {\n  /* jshint validthis: true */\n  var res = resolveSchema.call(this, root, ref);\n  if (res) {\n    var schema = res.schema;\n    var baseId = res.baseId;\n    root = res.root;\n    var id = this._getId(schema);\n    if (id) baseId = resolveUrl(baseId, id);\n    return getJsonPointer.call(this, parsedRef, baseId, schema, root);\n  }\n}\n\n\nvar PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);\n/* @this Ajv */\nfunction getJsonPointer(parsedRef, baseId, schema, root) {\n  /* jshint validthis: true */\n  parsedRef.hash = parsedRef.hash || '';\n  if (parsedRef.hash.slice(0,2) != '#/') return;\n  var parts = parsedRef.hash.split('/');\n\n  for (var i = 1; i < parts.length; i++) {\n    var part = parts[i];\n    if (part) {\n      part = util.unescapeFragment(part);\n      schema = schema[part];\n      if (schema === undefined) break;\n      var id;\n      if (!PREVENT_SCOPE_CHANGE[part]) {\n        id = this._getId(schema);\n        if (id) baseId = resolveUrl(baseId, id);\n        if (schema.$ref) {\n          var $ref = resolveUrl(baseId, schema.$ref);\n          var res = resolveSchema.call(this, root, $ref);\n          if (res) {\n            schema = res.schema;\n            root = res.root;\n            baseId = res.baseId;\n          }\n        }\n      }\n    }\n  }\n  if (schema !== undefined && schema !== root.schema)\n    return { schema: schema, root: root, baseId: baseId };\n}\n\n\nvar SIMPLE_INLINED = util.toHash([\n  'type', 'format', 'pattern',\n  'maxLength', 'minLength',\n  'maxProperties', 'minProperties',\n  'maxItems', 'minItems',\n  'maximum', 'minimum',\n  'uniqueItems', 'multipleOf',\n  'required', 'enum'\n]);\nfunction inlineRef(schema, limit) {\n  if (limit === false) return false;\n  if (limit === undefined || limit === true) return checkNoRef(schema);\n  else if (limit) return countKeys(schema) <= limit;\n}\n\n\nfunction checkNoRef(schema) {\n  var item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return false;\n      item = schema[key];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  }\n  return true;\n}\n\n\nfunction countKeys(schema) {\n  var count = 0, item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object') count += countKeys(item);\n      if (count == Infinity) return Infinity;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return Infinity;\n      if (SIMPLE_INLINED[key]) {\n        count++;\n      } else {\n        item = schema[key];\n        if (typeof item == 'object') count += countKeys(item) + 1;\n        if (count == Infinity) return Infinity;\n      }\n    }\n  }\n  return count;\n}\n\n\nfunction getFullPath(id, normalize) {\n  if (normalize !== false) id = normalizeId(id);\n  var p = url.parse(id, false, true);\n  return _getFullPath(p);\n}\n\n\nfunction _getFullPath(p) {\n  var protocolSeparator = p.protocol || p.href.slice(0,2) == '//' ? '//' : '';\n  return (p.protocol||'') + protocolSeparator + (p.host||'') + (p.path||'')  + '#';\n}\n\n\nvar TRAILING_SLASH_HASH = /#\\/?$/;\nfunction normalizeId(id) {\n  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';\n}\n\n\nfunction resolveUrl(baseId, id) {\n  id = normalizeId(id);\n  return url.resolve(baseId, id);\n}\n\n\n/* @this Ajv */\nfunction resolveIds(schema) {\n  var schemaId = normalizeId(this._getId(schema));\n  var baseIds = {'': schemaId};\n  var fullPaths = {'': getFullPath(schemaId, false)};\n  var localRefs = {};\n  var self = this;\n\n  traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n    if (jsonPtr === '') return;\n    var id = self._getId(sch);\n    var baseId = baseIds[parentJsonPtr];\n    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;\n    if (keyIndex !== undefined)\n      fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));\n\n    if (typeof id == 'string') {\n      id = baseId = normalizeId(baseId ? url.resolve(baseId, id) : id);\n\n      var refVal = self._refs[id];\n      if (typeof refVal == 'string') refVal = self._refs[refVal];\n      if (refVal && refVal.schema) {\n        if (!equal(sch, refVal.schema))\n          throw new Error('id \"' + id + '\" resolves to more than one schema');\n      } else if (id != normalizeId(fullPath)) {\n        if (id[0] == '#') {\n          if (localRefs[id] && !equal(sch, localRefs[id]))\n            throw new Error('id \"' + id + '\" resolves to more than one schema');\n          localRefs[id] = sch;\n        } else {\n          self._refs[id] = fullPath;\n        }\n      }\n    }\n    baseIds[jsonPtr] = baseId;\n    fullPaths[jsonPtr] = fullPath;\n  });\n\n  return localRefs;\n}\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  var arrA = isArray(a)\n    , arrB = isArray(b)\n    , i\n    , length\n    , key;\n\n  if (arrA && arrB) {\n    length = a.length;\n    if (length != b.length) return false;\n    for (i = 0; i < length; i++)\n      if (!equal(a[i], b[i])) return false;\n    return true;\n  }\n\n  if (arrA != arrB) return false;\n\n  var dateA = a instanceof Date\n    , dateB = b instanceof Date;\n  if (dateA != dateB) return false;\n  if (dateA && dateB) return a.getTime() == b.getTime();\n\n  var regexpA = a instanceof RegExp\n    , regexpB = b instanceof RegExp;\n  if (regexpA != regexpB) return false;\n  if (regexpA && regexpB) return a.toString() == b.toString();\n\n  if (a instanceof Object && b instanceof Object) {\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = 0; i < length; i++)\n      if (!hasProp.call(b, keys[i])) return false;\n\n    for (i = 0; i < length; i++) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n","'use strict';\n\nvar resolve = require('./resolve');\n\nmodule.exports = {\n  Validation: errorSubclass(ValidationError),\n  MissingRef: errorSubclass(MissingRefError)\n};\n\n\nfunction ValidationError(errors) {\n  this.message = 'validation failed';\n  this.errors = errors;\n  this.ajv = this.validation = true;\n}\n\n\nMissingRefError.message = function (baseId, ref) {\n  return 'can\\'t resolve reference ' + ref + ' from id ' + baseId;\n};\n\n\nfunction MissingRefError(baseId, ref, message) {\n  this.message = message || MissingRefError.message(baseId, ref);\n  this.missingRef = resolve.url(baseId, ref);\n  this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));\n}\n\n\nfunction errorSubclass(Subclass) {\n  Subclass.prototype = Object.create(Error.prototype);\n  Subclass.prototype.constructor = Subclass;\n  return Subclass;\n}\n","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\nfunction merge() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = arguments[1];\n\n  for (var key in defaults) {\n    if (typeof obj[key] === 'undefined') {\n      obj[key] = defaults[key];\n    }\n  }\n  return obj;\n}\nmodule.exports = exports['default'];","'use strict';\n\nvar traverse = module.exports = function (schema, opts, cb) {\n  if (typeof opts == 'function') {\n    cb = opts;\n    opts = {};\n  }\n  _traverse(opts, cb, schema, '', schema);\n};\n\n\ntraverse.keywords = {\n  additionalItems: true,\n  items: true,\n  contains: true,\n  additionalProperties: true,\n  propertyNames: true,\n  not: true\n};\n\ntraverse.arrayKeywords = {\n  items: true,\n  allOf: true,\n  anyOf: true,\n  oneOf: true\n};\n\ntraverse.propsKeywords = {\n  definitions: true,\n  properties: true,\n  patternProperties: true,\n  dependencies: true\n};\n\ntraverse.skipKeywords = {\n  enum: true,\n  const: true,\n  required: true,\n  maximum: true,\n  minimum: true,\n  exclusiveMaximum: true,\n  exclusiveMinimum: true,\n  multipleOf: true,\n  maxLength: true,\n  minLength: true,\n  pattern: true,\n  format: true,\n  maxItems: true,\n  minItems: true,\n  uniqueItems: true,\n  maxProperties: true,\n  minProperties: true\n};\n\n\nfunction _traverse(opts, cb, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {\n    cb(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n    for (var key in schema) {\n      var sch = schema[key];\n      if (Array.isArray(sch)) {\n        if (key in traverse.arrayKeywords) {\n          for (var i=0; i<sch.length; i++)\n            _traverse(opts, cb, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);\n        }\n      } else if (key in traverse.propsKeywords) {\n        if (sch && typeof sch == 'object') {\n          for (var prop in sch)\n            _traverse(opts, cb, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n        }\n      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {\n        _traverse(opts, cb, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);\n      }\n    }\n  }\n}\n\n\nfunction escapeJsonPtr(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n","module.exports = require(\"punycode\");","var crypto = require(\"crypto\");\nvar BigInteger = require(\"jsbn\").BigInteger;\nvar ECPointFp = require(\"./lib/ec.js\").ECPointFp;\nexports.ECCurves = require(\"./lib/sec.js\");\n\n// zero prepad\nfunction unstupid(hex,len)\n{\n\treturn (hex.length >= len) ? hex : unstupid(\"0\"+hex,len);\n}\n\nexports.ECKey = function(curve, key, isPublic)\n{\n  var priv;\n\tvar c = curve();\n\tvar n = c.getN();\n  var bytes = Math.floor(n.bitLength()/8);\n\n  if(key)\n  {\n    if(isPublic)\n    {\n      var curve = c.getCurve();\n//      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format\n//      var y = key.slice(bytes+1);\n//      this.P = new ECPointFp(curve,\n//        curve.fromBigInteger(new BigInteger(x.toString(\"hex\"), 16)),\n//        curve.fromBigInteger(new BigInteger(y.toString(\"hex\"), 16)));      \n      this.P = curve.decodePointHex(key.toString(\"hex\"));\n    }else{\n      if(key.length != bytes) return false;\n      priv = new BigInteger(key.toString(\"hex\"), 16);      \n    }\n  }else{\n    var n1 = n.subtract(BigInteger.ONE);\n    var r = new BigInteger(crypto.randomBytes(n.bitLength()));\n    priv = r.mod(n1).add(BigInteger.ONE);\n    this.P = c.getG().multiply(priv);\n  }\n  if(this.P)\n  {\n//  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);\n//  this.PublicKey = new Buffer(\"04\"+pubhex,\"hex\");\n    this.PublicKey = new Buffer(c.getCurve().encodeCompressedPointHex(this.P),\"hex\");\n  }\n  if(priv)\n  {\n    this.PrivateKey = new Buffer(unstupid(priv.toString(16),bytes*2),\"hex\");\n    this.deriveSharedSecret = function(key)\n    {\n      if(!key || !key.P) return false;\n      var S = key.P.multiply(priv);\n      return new Buffer(unstupid(S.getX().toBigInteger().toString(16),bytes*2),\"hex\");\n   }     \n  }\n}\n\n","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tVerifier: Verifier,\n\tSigner: Signer\n};\n\nvar nacl;\nvar stream = require('stream');\nvar util = require('util');\nvar assert = require('assert-plus');\nvar Signature = require('./signature');\n\nfunction Verifier(key, hashAlgo) {\n\tif (nacl === undefined)\n\t\tnacl = require('tweetnacl');\n\n\tif (hashAlgo.toLowerCase() !== 'sha512')\n\t\tthrow (new Error('ED25519 only supports the use of ' +\n\t\t    'SHA-512 hashes'));\n\n\tthis.key = key;\n\tthis.chunks = [];\n\n\tstream.Writable.call(this, {});\n}\nutil.inherits(Verifier, stream.Writable);\n\nVerifier.prototype._write = function (chunk, enc, cb) {\n\tthis.chunks.push(chunk);\n\tcb();\n};\n\nVerifier.prototype.update = function (chunk) {\n\tif (typeof (chunk) === 'string')\n\t\tchunk = new Buffer(chunk, 'binary');\n\tthis.chunks.push(chunk);\n};\n\nVerifier.prototype.verify = function (signature, fmt) {\n\tvar sig;\n\tif (Signature.isSignature(signature, [2, 0])) {\n\t\tif (signature.type !== 'ed25519')\n\t\t\treturn (false);\n\t\tsig = signature.toBuffer('raw');\n\n\t} else if (typeof (signature) === 'string') {\n\t\tsig = new Buffer(signature, 'base64');\n\n\t} else if (Signature.isSignature(signature, [1, 0])) {\n\t\tthrow (new Error('signature was created by too old ' +\n\t\t    'a version of sshpk and cannot be verified'));\n\t}\n\n\tassert.buffer(sig);\n\treturn (nacl.sign.detached.verify(\n\t    new Uint8Array(Buffer.concat(this.chunks)),\n\t    new Uint8Array(sig),\n\t    new Uint8Array(this.key.part.A.data)));\n};\n\nfunction Signer(key, hashAlgo) {\n\tif (nacl === undefined)\n\t\tnacl = require('tweetnacl');\n\n\tif (hashAlgo.toLowerCase() !== 'sha512')\n\t\tthrow (new Error('ED25519 only supports the use of ' +\n\t\t    'SHA-512 hashes'));\n\n\tthis.key = key;\n\tthis.chunks = [];\n\n\tstream.Writable.call(this, {});\n}\nutil.inherits(Signer, stream.Writable);\n\nSigner.prototype._write = function (chunk, enc, cb) {\n\tthis.chunks.push(chunk);\n\tcb();\n};\n\nSigner.prototype.update = function (chunk) {\n\tif (typeof (chunk) === 'string')\n\t\tchunk = new Buffer(chunk, 'binary');\n\tthis.chunks.push(chunk);\n};\n\nSigner.prototype.sign = function () {\n\tvar sig = nacl.sign.detached(\n\t    new Uint8Array(Buffer.concat(this.chunks)),\n\t    new Uint8Array(Buffer.concat([\n\t\tthis.key.part.k.data, this.key.part.A.data])));\n\tvar sigBuf = new Buffer(sig);\n\tvar sigObj = Signature.parse(sigBuf, 'ed25519', 'raw');\n\tsigObj.hashAlgorithm = 'sha512';\n\treturn (sigObj);\n};\n","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar pem = require('./pem');\nvar ssh = require('./ssh');\nvar rfc4253 = require('./rfc4253');\nvar dnssec = require('./dnssec');\n\nvar DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';\n\nfunction read(buf, options) {\n\tif (typeof (buf) === 'string') {\n\t\tif (buf.trim().match(/^[-]+[ ]*BEGIN/))\n\t\t\treturn (pem.read(buf, options));\n\t\tif (buf.match(/^\\s*ssh-[a-z]/))\n\t\t\treturn (ssh.read(buf, options));\n\t\tif (buf.match(/^\\s*ecdsa-/))\n\t\t\treturn (ssh.read(buf, options));\n\t\tif (findDNSSECHeader(buf))\n\t\t\treturn (dnssec.read(buf, options));\n\t\tbuf = new Buffer(buf, 'binary');\n\t} else {\n\t\tassert.buffer(buf);\n\t\tif (findPEMHeader(buf))\n\t\t\treturn (pem.read(buf, options));\n\t\tif (findSSHHeader(buf))\n\t\t\treturn (ssh.read(buf, options));\n\t\tif (findDNSSECHeader(buf))\n\t\t\treturn (dnssec.read(buf, options));\n\t}\n\tif (buf.readUInt32BE(0) < buf.length)\n\t\treturn (rfc4253.read(buf, options));\n\tthrow (new Error('Failed to auto-detect format of key'));\n}\n\nfunction findSSHHeader(buf) {\n\tvar offset = 0;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))\n\t\t++offset;\n\tif (offset + 4 <= buf.length &&\n\t    buf.slice(offset, offset + 4).toString('ascii') === 'ssh-')\n\t\treturn (true);\n\tif (offset + 6 <= buf.length &&\n\t    buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-')\n\t\treturn (true);\n\treturn (false);\n}\n\nfunction findPEMHeader(buf) {\n\tvar offset = 0;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32 || buf[offset] === 10))\n\t\t++offset;\n\tif (buf[offset] !== 45)\n\t\treturn (false);\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 45))\n\t\t++offset;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32))\n\t\t++offset;\n\tif (offset + 5 > buf.length ||\n\t    buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN')\n\t\treturn (false);\n\treturn (true);\n}\n\nfunction findDNSSECHeader(buf) {\n\t// private case first\n\tif (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length)\n\t\treturn (false);\n\tvar headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n\tif (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX)\n\t\treturn (true);\n\n\t// public-key RFC3110 ?\n\t// 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n\t// skip any comment-lines\n\tif (typeof (buf) !== 'string') {\n\t\tbuf = buf.toString('ascii');\n\t}\n\tvar lines = buf.split('\\n');\n\tvar line = 0;\n\t/* JSSTYLED */\n\twhile (lines[line].match(/^\\;/))\n\t\tline++;\n\tif (lines[line].toString('ascii').match(/\\. IN KEY /))\n\t\treturn (true);\n\tif (lines[line].toString('ascii').match(/\\. IN DNSKEY /))\n\t\treturn (true);\n\treturn (false);\n}\n\nfunction write(key, options) {\n\tthrow (new Error('\"auto\" format cannot be used for writing'));\n}\n","'use strict';\n\nvar crypto_hash_sha512 = require('tweetnacl').lowlevel.crypto_hash;\n\n/*\n * This file is a 1:1 port from the OpenBSD blowfish.c and bcrypt_pbkdf.c. As a\n * result, it retains the original copyright and license. The two files are\n * under slightly different (but compatible) licenses, and are here combined in\n * one file.\n *\n * Credit for the actual porting work goes to:\n *  Devi Mandiri <me@devi.web.id>\n */\n\n/*\n * The Blowfish portions are under the following license:\n *\n * Blowfish block cipher for OpenBSD\n * Copyright 1997 Niels Provos <provos@physnet.uni-hamburg.de>\n * All rights reserved.\n *\n * Implementation advice by David Mazieres <dm@lcs.mit.edu>.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. The name of the author may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * The bcrypt_pbkdf portions are under the following license:\n *\n * Copyright (c) 2013 Ted Unangst <tedu@openbsd.org>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * Performance improvements (Javascript-specific):\n *\n * Copyright 2016, Joyent Inc\n * Author: Alex Wilson <alex.wilson@joyent.com>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n// Ported from OpenBSD bcrypt_pbkdf.c v1.9\n\nvar BLF_J = 0;\n\nvar Blowfish = function() {\n  this.S = [\n    new Uint32Array([\n      0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,\n      0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,\n      0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,\n      0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,\n      0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,\n      0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,\n      0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef,\n      0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,\n      0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,\n      0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,\n      0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce,\n      0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,\n      0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e,\n      0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,\n      0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n      0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,\n      0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88,\n      0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,\n      0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e,\n      0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,\n      0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,\n      0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,\n      0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88,\n      0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,\n      0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,\n      0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,\n      0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,\n      0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,\n      0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba,\n      0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n      0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f,\n      0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,\n      0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,\n      0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,\n      0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,\n      0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,\n      0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab,\n      0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,\n      0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,\n      0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,\n      0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0,\n      0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,\n      0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790,\n      0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,\n      0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n      0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,\n      0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7,\n      0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,\n      0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad,\n      0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,\n      0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,\n      0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,\n      0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477,\n      0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,\n      0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,\n      0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,\n      0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,\n      0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,\n      0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41,\n      0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n      0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400,\n      0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,\n      0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,\n      0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a]),\n    new Uint32Array([\n      0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,\n      0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,\n      0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,\n      0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,\n      0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,\n      0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\n      0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e,\n      0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,\n      0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,\n      0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,\n      0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\n      0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,\n      0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701,\n      0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,\n      0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,\n      0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,\n      0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,\n      0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,\n      0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e,\n      0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,\n      0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\n      0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,\n      0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,\n      0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,\n      0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b,\n      0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\n      0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,\n      0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,\n      0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,\n      0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,\n      0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,\n      0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,\n      0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,\n      0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,\n      0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,\n      0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\n      0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510,\n      0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,\n      0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,\n      0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,\n      0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\n      0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,\n      0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8,\n      0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,\n      0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,\n      0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,\n      0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,\n      0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,\n      0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0,\n      0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,\n      0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\n      0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,\n      0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,\n      0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,\n      0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00,\n      0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\n      0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,\n      0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,\n      0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,\n      0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,\n      0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,\n      0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,\n      0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,\n      0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7]),\n    new Uint32Array([\n      0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,\n      0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,\n      0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,\n      0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,\n      0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45,\n      0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,\n      0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\n      0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,\n      0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,\n      0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,\n      0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,\n      0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\n      0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,\n      0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,\n      0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,\n      0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,\n      0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,\n      0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,\n      0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,\n      0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,\n      0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,\n      0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\n      0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b,\n      0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,\n      0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,\n      0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,\n      0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\n      0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,\n      0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37,\n      0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,\n      0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,\n      0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,\n      0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,\n      0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,\n      0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d,\n      0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,\n      0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\n      0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,\n      0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,\n      0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,\n      0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,\n      0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\n      0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,\n      0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,\n      0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,\n      0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,\n      0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,\n      0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,\n      0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,\n      0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,\n      0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,\n      0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\n      0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52,\n      0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,\n      0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,\n      0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,\n      0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\n      0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,\n      0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24,\n      0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,\n      0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,\n      0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,\n      0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,\n      0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0]),\n    new Uint32Array([\n      0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,\n      0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe,\n      0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n      0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,\n      0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8,\n      0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,\n      0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304,\n      0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,\n      0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,\n      0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,\n      0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9,\n      0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,\n      0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,\n      0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51,\n      0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,\n      0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,\n      0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b,\n      0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n      0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c,\n      0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd,\n      0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,\n      0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,\n      0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,\n      0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,\n      0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991,\n      0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,\n      0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,\n      0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,\n      0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae,\n      0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,\n      0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,\n      0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47,\n      0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n      0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,\n      0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84,\n      0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,\n      0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8,\n      0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,\n      0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,\n      0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,\n      0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38,\n      0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,\n      0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,\n      0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525,\n      0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,\n      0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,\n      0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964,\n      0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n      0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8,\n      0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d,\n      0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,\n      0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,\n      0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,\n      0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,\n      0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,\n      0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a,\n      0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,\n      0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,\n      0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0,\n      0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,\n      0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e,\n      0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9,\n      0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n      0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6])\n    ];\n  this.P = new Uint32Array([\n    0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,\n    0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,\n    0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n    0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,\n    0x9216d5d9, 0x8979fb1b]);\n};\n\nfunction F(S, x8, i) {\n  return (((S[0][x8[i+3]] +\n            S[1][x8[i+2]]) ^\n            S[2][x8[i+1]]) +\n            S[3][x8[i]]);\n};\n\nBlowfish.prototype.encipher = function(x, x8) {\n  if (x8 === undefined) {\n    x8 = new Uint8Array(x.buffer);\n    if (x.byteOffset !== 0)\n      x8 = x8.subarray(x.byteOffset);\n  }\n  x[0] ^= this.P[0];\n  for (var i = 1; i < 16; i += 2) {\n    x[1] ^= F(this.S, x8, 0) ^ this.P[i];\n    x[0] ^= F(this.S, x8, 4) ^ this.P[i+1];\n  }\n  var t = x[0];\n  x[0] = x[1] ^ this.P[17];\n  x[1] = t;\n};\n\nBlowfish.prototype.decipher = function(x) {\n  var x8 = new Uint8Array(x.buffer);\n  if (x.byteOffset !== 0)\n    x8 = x8.subarray(x.byteOffset);\n  x[0] ^= this.P[17];\n  for (var i = 16; i > 0; i -= 2) {\n    x[1] ^= F(this.S, x8, 0) ^ this.P[i];\n    x[0] ^= F(this.S, x8, 4) ^ this.P[i-1];\n  }\n  var t = x[0];\n  x[0] = x[1] ^ this.P[0];\n  x[1] = t;\n};\n\nfunction stream2word(data, databytes){\n  var i, temp = 0;\n  for (i = 0; i < 4; i++, BLF_J++) {\n    if (BLF_J >= databytes) BLF_J = 0;\n    temp = (temp << 8) | data[BLF_J];\n  }\n  return temp;\n};\n\nBlowfish.prototype.expand0state = function(key, keybytes) {\n  var d = new Uint32Array(2), i, k;\n  var d8 = new Uint8Array(d.buffer);\n\n  for (i = 0, BLF_J = 0; i < 18; i++) {\n    this.P[i] ^= stream2word(key, keybytes);\n  }\n  BLF_J = 0;\n\n  for (i = 0; i < 18; i += 2) {\n    this.encipher(d, d8);\n    this.P[i]   = d[0];\n    this.P[i+1] = d[1];\n  }\n\n  for (i = 0; i < 4; i++) {\n    for (k = 0; k < 256; k += 2) {\n      this.encipher(d, d8);\n      this.S[i][k]   = d[0];\n      this.S[i][k+1] = d[1];\n    }\n  }\n};\n\nBlowfish.prototype.expandstate = function(data, databytes, key, keybytes) {\n  var d = new Uint32Array(2), i, k;\n\n  for (i = 0, BLF_J = 0; i < 18; i++) {\n    this.P[i] ^= stream2word(key, keybytes);\n  }\n\n  for (i = 0, BLF_J = 0; i < 18; i += 2) {\n    d[0] ^= stream2word(data, databytes);\n    d[1] ^= stream2word(data, databytes);\n    this.encipher(d);\n    this.P[i]   = d[0];\n    this.P[i+1] = d[1];\n  }\n\n  for (i = 0; i < 4; i++) {\n    for (k = 0; k < 256; k += 2) {\n      d[0] ^= stream2word(data, databytes);\n      d[1] ^= stream2word(data, databytes);\n      this.encipher(d);\n      this.S[i][k]   = d[0];\n      this.S[i][k+1] = d[1];\n    }\n  }\n  BLF_J = 0;\n};\n\nBlowfish.prototype.enc = function(data, blocks) {\n  for (var i = 0; i < blocks; i++) {\n    this.encipher(data.subarray(i*2));\n  }\n};\n\nBlowfish.prototype.dec = function(data, blocks) {\n  for (var i = 0; i < blocks; i++) {\n    this.decipher(data.subarray(i*2));\n  }\n};\n\nvar BCRYPT_BLOCKS = 8,\n    BCRYPT_HASHSIZE = 32;\n\nfunction bcrypt_hash(sha2pass, sha2salt, out) {\n  var state = new Blowfish(),\n      cdata = new Uint32Array(BCRYPT_BLOCKS), i,\n      ciphertext = new Uint8Array([79,120,121,99,104,114,111,109,97,116,105,\n            99,66,108,111,119,102,105,115,104,83,119,97,116,68,121,110,97,109,\n            105,116,101]); //\"OxychromaticBlowfishSwatDynamite\"\n\n  state.expandstate(sha2salt, 64, sha2pass, 64);\n  for (i = 0; i < 64; i++) {\n    state.expand0state(sha2salt, 64);\n    state.expand0state(sha2pass, 64);\n  }\n\n  for (i = 0; i < BCRYPT_BLOCKS; i++)\n    cdata[i] = stream2word(ciphertext, ciphertext.byteLength);\n  for (i = 0; i < 64; i++)\n    state.enc(cdata, cdata.byteLength / 8);\n\n  for (i = 0; i < BCRYPT_BLOCKS; i++) {\n    out[4*i+3] = cdata[i] >>> 24;\n    out[4*i+2] = cdata[i] >>> 16;\n    out[4*i+1] = cdata[i] >>> 8;\n    out[4*i+0] = cdata[i];\n  }\n};\n\nfunction bcrypt_pbkdf(pass, passlen, salt, saltlen, key, keylen, rounds) {\n  var sha2pass = new Uint8Array(64),\n      sha2salt = new Uint8Array(64),\n      out = new Uint8Array(BCRYPT_HASHSIZE),\n      tmpout = new Uint8Array(BCRYPT_HASHSIZE),\n      countsalt = new Uint8Array(saltlen+4),\n      i, j, amt, stride, dest, count,\n      origkeylen = keylen;\n\n  if (rounds < 1)\n    return -1;\n  if (passlen === 0 || saltlen === 0 || keylen === 0 ||\n      keylen > (out.byteLength * out.byteLength) || saltlen > (1<<20))\n    return -1;\n\n  stride = Math.floor((keylen + out.byteLength - 1) / out.byteLength);\n  amt = Math.floor((keylen + stride - 1) / stride);\n\n  for (i = 0; i < saltlen; i++)\n    countsalt[i] = salt[i];\n\n  crypto_hash_sha512(sha2pass, pass, passlen);\n\n  for (count = 1; keylen > 0; count++) {\n    countsalt[saltlen+0] = count >>> 24;\n    countsalt[saltlen+1] = count >>> 16;\n    countsalt[saltlen+2] = count >>>  8;\n    countsalt[saltlen+3] = count;\n\n    crypto_hash_sha512(sha2salt, countsalt, saltlen + 4);\n    bcrypt_hash(sha2pass, sha2salt, tmpout);\n    for (i = out.byteLength; i--;)\n      out[i] = tmpout[i];\n\n    for (i = 1; i < rounds; i++) {\n      crypto_hash_sha512(sha2salt, tmpout, tmpout.byteLength);\n      bcrypt_hash(sha2pass, sha2salt, tmpout);\n      for (j = 0; j < out.byteLength; j++)\n        out[j] ^= tmpout[j];\n    }\n\n    amt = Math.min(amt, keylen);\n    for (i = 0; i < amt; i++) {\n      dest = i * stride + (count - 1);\n      if (dest >= origkeylen)\n        break;\n      key[dest] = out[i];\n    }\n    keylen -= i;\n  }\n\n  return 0;\n};\n\nmodule.exports = {\n      BLOCKS: BCRYPT_BLOCKS,\n      HASHSIZE: BCRYPT_HASHSIZE,\n      hash: bcrypt_hash,\n      pbkdf: bcrypt_pbkdf\n};\n","// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar rfc4253 = require('./rfc4253');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar sshpriv = require('./ssh-private');\n\n/*JSSTYLED*/\nvar SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n/*JSSTYLED*/\nvar SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\n\tvar m = trimmed.match(SSHKEY_RE);\n\tif (!m)\n\t\tm = trimmed.match(SSHKEY_RE2);\n\tassert.ok(m, 'key must match regex');\n\n\tvar type = rfc4253.algToKeyType(m[1]);\n\tvar kbuf = new Buffer(m[2], 'base64');\n\n\t/*\n\t * This is a bit tricky. If we managed to parse the key and locate the\n\t * key comment with the regex, then do a non-partial read and assert\n\t * that we have consumed all bytes. If we couldn't locate the key\n\t * comment, though, there may be whitespace shenanigans going on that\n\t * have conjoined the comment to the rest of the key. We do a partial\n\t * read in this case to try to make the best out of a sorry situation.\n\t */\n\tvar key;\n\tvar ret = {};\n\tif (m[4]) {\n\t\ttry {\n\t\t\tkey = rfc4253.read(kbuf);\n\n\t\t} catch (e) {\n\t\t\tm = trimmed.match(SSHKEY_RE2);\n\t\t\tassert.ok(m, 'key must match regex');\n\t\t\tkbuf = new Buffer(m[2], 'base64');\n\t\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t\t}\n\t} else {\n\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t}\n\n\tassert.strictEqual(type, key.type);\n\n\tif (m[4] && m[4].length > 0) {\n\t\tkey.comment = m[4];\n\n\t} else if (ret.consumed) {\n\t\t/*\n\t\t * Now the magic: trying to recover the key comment when it's\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\n\t\t *\n\t\t * Work out how much base64 we used, then drop all non-base64\n\t\t * chars from the beginning up to this point in the the string.\n\t\t * Then offset in this and try to make up for missing = chars.\n\t\t */\n\t\tvar data = m[2] + (m[3] ? m[3] : '');\n\t\tvar realOffset = Math.ceil(ret.consumed / 3) * 4;\n\t\tdata = data.slice(0, realOffset - 2). /*JSSTYLED*/\n\t\t    replace(/[^a-zA-Z0-9+\\/=]/g, '') +\n\t\t    data.slice(realOffset - 2);\n\n\t\tvar padding = ret.consumed % 3;\n\t\tif (padding > 0 &&\n\t\t    data.slice(realOffset - 1, realOffset) !== '=')\n\t\t\trealOffset--;\n\t\twhile (data.slice(realOffset, realOffset + 1) === '=')\n\t\t\trealOffset++;\n\n\t\t/* Finally, grab what we think is the comment & clean it up. */\n\t\tvar trailer = data.slice(realOffset);\n\t\ttrailer = trailer.replace(/[\\r\\n]/g, ' ').\n\t\t    replace(/^\\s+/, '');\n\t\tif (trailer.match(/^[a-zA-Z0-9]/))\n\t\t\tkey.comment = trailer;\n\t}\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\tif (!Key.isKey(key))\n\t\tthrow (new Error('Must be a public key'));\n\n\tvar parts = [];\n\tvar alg = rfc4253.keyTypeToAlg(key);\n\tparts.push(alg);\n\n\tvar buf = rfc4253.write(key);\n\tparts.push(buf.toString('base64'));\n\n\tif (key.comment)\n\t\tparts.push(key.comment);\n\n\treturn (new Buffer(parts.join(' ')));\n}\n","// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\tverify: verify,\n\tsign: sign,\n\tsignAsync: signAsync,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar Identity = require('../identity');\nvar Signature = require('../signature');\nvar Certificate = require('../certificate');\nvar pkcs8 = require('./pkcs8');\n\n/*\n * This file is based on RFC5280 (X.509).\n */\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction verify(cert, key) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tvar algParts = sig.algo.split('-');\n\tif (algParts[0] !== key.type)\n\t\treturn (false);\n\n\tvar blob = sig.cache;\n\tif (blob === undefined) {\n\t\tvar der = new asn1.BerWriter();\n\t\twriteTBSCert(cert, der);\n\t\tblob = der.buffer;\n\t}\n\n\tvar verifier = key.createVerify(algParts[1]);\n\tverifier.write(blob);\n\treturn (verifier.verify(sig.signature));\n}\n\nfunction Local(i) {\n\treturn (asn1.Ber.Context | asn1.Ber.Constructor | i);\n}\n\nfunction Context(i) {\n\treturn (asn1.Ber.Context | i);\n}\n\nvar SIGN_ALGS = {\n\t'rsa-md5': '1.2.840.113549.1.1.4',\n\t'rsa-sha1': '1.2.840.113549.1.1.5',\n\t'rsa-sha256': '1.2.840.113549.1.1.11',\n\t'rsa-sha384': '1.2.840.113549.1.1.12',\n\t'rsa-sha512': '1.2.840.113549.1.1.13',\n\t'dsa-sha1': '1.2.840.10040.4.3',\n\t'dsa-sha256': '2.16.840.1.101.3.4.3.2',\n\t'ecdsa-sha1': '1.2.840.10045.4.1',\n\t'ecdsa-sha256': '1.2.840.10045.4.3.2',\n\t'ecdsa-sha384': '1.2.840.10045.4.3.3',\n\t'ecdsa-sha512': '1.2.840.10045.4.3.4',\n\t'ed25519-sha512': '1.3.101.112'\n};\nObject.keys(SIGN_ALGS).forEach(function (k) {\n\tSIGN_ALGS[SIGN_ALGS[k]] = k;\n});\nSIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';\nSIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';\n\nvar EXTS = {\n\t'issuerKeyId': '2.5.29.35',\n\t'altName': '2.5.29.17',\n\t'basicConstraints': '2.5.29.19',\n\t'keyUsage': '2.5.29.15',\n\t'extKeyUsage': '2.5.29.37'\n};\n\nfunction read(buf, options) {\n\tif (typeof (buf) === 'string') {\n\t\tbuf = new Buffer(buf, 'binary');\n\t}\n\tassert.buffer(buf, 'buf');\n\n\tvar der = new asn1.BerReader(buf);\n\n\tder.readSequence();\n\tif (Math.abs(der.length - der.remain) > 1) {\n\t\tthrow (new Error('DER sequence does not contain whole byte ' +\n\t\t    'stream'));\n\t}\n\n\tvar tbsStart = der.offset;\n\tder.readSequence();\n\tvar sigOffset = der.offset + der.length;\n\tvar tbsEnd = sigOffset;\n\n\tif (der.peek() === Local(0)) {\n\t\tder.readSequence(Local(0));\n\t\tvar version = der.readInt();\n\t\tassert.ok(version <= 3,\n\t\t    'only x.509 versions up to v3 supported');\n\t}\n\n\tvar cert = {};\n\tcert.signatures = {};\n\tvar sig = (cert.signatures.x509 = {});\n\tsig.extras = {};\n\n\tcert.serial = readMPInt(der, 'serial');\n\n\tder.readSequence();\n\tvar after = der.offset + der.length;\n\tvar certAlgOid = der.readOID();\n\tvar certAlg = SIGN_ALGS[certAlgOid];\n\tif (certAlg === undefined)\n\t\tthrow (new Error('unknown signature algorithm ' + certAlgOid));\n\n\tder._offset = after;\n\tcert.issuer = Identity.parseAsn1(der);\n\n\tder.readSequence();\n\tcert.validFrom = readDate(der);\n\tcert.validUntil = readDate(der);\n\n\tcert.subjects = [Identity.parseAsn1(der)];\n\n\tder.readSequence();\n\tafter = der.offset + der.length;\n\tcert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);\n\tder._offset = after;\n\n\t/* issuerUniqueID */\n\tif (der.peek() === Local(1)) {\n\t\tder.readSequence(Local(1));\n\t\tsig.extras.issuerUniqueID =\n\t\t    buf.slice(der.offset, der.offset + der.length);\n\t\tder._offset += der.length;\n\t}\n\n\t/* subjectUniqueID */\n\tif (der.peek() === Local(2)) {\n\t\tder.readSequence(Local(2));\n\t\tsig.extras.subjectUniqueID =\n\t\t    buf.slice(der.offset, der.offset + der.length);\n\t\tder._offset += der.length;\n\t}\n\n\t/* extensions */\n\tif (der.peek() === Local(3)) {\n\t\tder.readSequence(Local(3));\n\t\tvar extEnd = der.offset + der.length;\n\t\tder.readSequence();\n\n\t\twhile (der.offset < extEnd)\n\t\t\treadExtension(cert, buf, der);\n\n\t\tassert.strictEqual(der.offset, extEnd);\n\t}\n\n\tassert.strictEqual(der.offset, sigOffset);\n\n\tder.readSequence();\n\tafter = der.offset + der.length;\n\tvar sigAlgOid = der.readOID();\n\tvar sigAlg = SIGN_ALGS[sigAlgOid];\n\tif (sigAlg === undefined)\n\t\tthrow (new Error('unknown signature algorithm ' + sigAlgOid));\n\tder._offset = after;\n\n\tvar sigData = der.readString(asn1.Ber.BitString, true);\n\tif (sigData[0] === 0)\n\t\tsigData = sigData.slice(1);\n\tvar algParts = sigAlg.split('-');\n\n\tsig.signature = Signature.parse(sigData, algParts[0], 'asn1');\n\tsig.signature.hashAlgorithm = algParts[1];\n\tsig.algo = sigAlg;\n\tsig.cache = buf.slice(tbsStart, tbsEnd);\n\n\treturn (new Certificate(cert));\n}\n\nfunction readDate(der) {\n\tif (der.peek() === asn1.Ber.UTCTime) {\n\t\treturn (utcTimeToDate(der.readString(asn1.Ber.UTCTime)));\n\t} else if (der.peek() === asn1.Ber.GeneralizedTime) {\n\t\treturn (gTimeToDate(der.readString(asn1.Ber.GeneralizedTime)));\n\t} else {\n\t\tthrow (new Error('Unsupported date format'));\n\t}\n}\n\n/* RFC5280, section 4.2.1.6 (GeneralName type) */\nvar ALTNAME = {\n\tOtherName: Local(0),\n\tRFC822Name: Context(1),\n\tDNSName: Context(2),\n\tX400Address: Local(3),\n\tDirectoryName: Local(4),\n\tEDIPartyName: Local(5),\n\tURI: Context(6),\n\tIPAddress: Context(7),\n\tOID: Context(8)\n};\n\n/* RFC5280, section 4.2.1.12 (KeyPurposeId) */\nvar EXTPURPOSE = {\n\t'serverAuth': '1.3.6.1.5.5.7.3.1',\n\t'clientAuth': '1.3.6.1.5.5.7.3.2',\n\t'codeSigning': '1.3.6.1.5.5.7.3.3',\n\n\t/* See https://github.com/joyent/oid-docs/blob/master/root.md */\n\t'joyentDocker': '1.3.6.1.4.1.38678.1.4.1',\n\t'joyentCmon': '1.3.6.1.4.1.38678.1.4.2'\n};\nvar EXTPURPOSE_REV = {};\nObject.keys(EXTPURPOSE).forEach(function (k) {\n\tEXTPURPOSE_REV[EXTPURPOSE[k]] = k;\n});\n\nvar KEYUSEBITS = [\n\t'signature', 'identity', 'keyEncryption',\n\t'encryption', 'keyAgreement', 'ca', 'crl'\n];\n\nfunction readExtension(cert, buf, der) {\n\tder.readSequence();\n\tvar after = der.offset + der.length;\n\tvar extId = der.readOID();\n\tvar id;\n\tvar sig = cert.signatures.x509;\n\tsig.extras.exts = [];\n\n\tvar critical;\n\tif (der.peek() === asn1.Ber.Boolean)\n\t\tcritical = der.readBoolean();\n\n\tswitch (extId) {\n\tcase (EXTS.basicConstraints):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tvar bcEnd = der.offset + der.length;\n\t\tvar ca = false;\n\t\tif (der.peek() === asn1.Ber.Boolean)\n\t\t\tca = der.readBoolean();\n\t\tif (cert.purposes === undefined)\n\t\t\tcert.purposes = [];\n\t\tif (ca === true)\n\t\t\tcert.purposes.push('ca');\n\t\tvar bc = { oid: extId, critical: critical };\n\t\tif (der.offset < bcEnd && der.peek() === asn1.Ber.Integer)\n\t\t\tbc.pathLen = der.readInt();\n\t\tsig.extras.exts.push(bc);\n\t\tbreak;\n\tcase (EXTS.extKeyUsage):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tif (cert.purposes === undefined)\n\t\t\tcert.purposes = [];\n\t\tvar ekEnd = der.offset + der.length;\n\t\twhile (der.offset < ekEnd) {\n\t\t\tvar oid = der.readOID();\n\t\t\tcert.purposes.push(EXTPURPOSE_REV[oid] || oid);\n\t\t}\n\t\t/*\n\t\t * This is a bit of a hack: in the case where we have a cert\n\t\t * that's only allowed to do serverAuth or clientAuth (and not\n\t\t * the other), we want to make sure all our Subjects are of\n\t\t * the right type. But we already parsed our Subjects and\n\t\t * decided if they were hosts or users earlier (since it appears\n\t\t * first in the cert).\n\t\t *\n\t\t * So we go through and mutate them into the right kind here if\n\t\t * it doesn't match. This might not be hugely beneficial, as it\n\t\t * seems that single-purpose certs are not often seen in the\n\t\t * wild.\n\t\t */\n\t\tif (cert.purposes.indexOf('serverAuth') !== -1 &&\n\t\t    cert.purposes.indexOf('clientAuth') === -1) {\n\t\t\tcert.subjects.forEach(function (ide) {\n\t\t\t\tif (ide.type !== 'host') {\n\t\t\t\t\tide.type = 'host';\n\t\t\t\t\tide.hostname = ide.uid ||\n\t\t\t\t\t    ide.email ||\n\t\t\t\t\t    ide.components[0].value;\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (cert.purposes.indexOf('clientAuth') !== -1 &&\n\t\t    cert.purposes.indexOf('serverAuth') === -1) {\n\t\t\tcert.subjects.forEach(function (ide) {\n\t\t\t\tif (ide.type !== 'user') {\n\t\t\t\t\tide.type = 'user';\n\t\t\t\t\tide.uid = ide.hostname ||\n\t\t\t\t\t    ide.email ||\n\t\t\t\t\t    ide.components[0].value;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tsig.extras.exts.push({ oid: extId, critical: critical });\n\t\tbreak;\n\tcase (EXTS.keyUsage):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tvar bits = der.readString(asn1.Ber.BitString, true);\n\t\tvar setBits = readBitField(bits, KEYUSEBITS);\n\t\tsetBits.forEach(function (bit) {\n\t\t\tif (cert.purposes === undefined)\n\t\t\t\tcert.purposes = [];\n\t\t\tif (cert.purposes.indexOf(bit) === -1)\n\t\t\t\tcert.purposes.push(bit);\n\t\t});\n\t\tsig.extras.exts.push({ oid: extId, critical: critical,\n\t\t    bits: bits });\n\t\tbreak;\n\tcase (EXTS.altName):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tvar aeEnd = der.offset + der.length;\n\t\twhile (der.offset < aeEnd) {\n\t\t\tswitch (der.peek()) {\n\t\t\tcase ALTNAME.OtherName:\n\t\t\tcase ALTNAME.EDIPartyName:\n\t\t\t\tder.readSequence();\n\t\t\t\tder._offset += der.length;\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.OID:\n\t\t\t\tder.readOID(ALTNAME.OID);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.RFC822Name:\n\t\t\t\t/* RFC822 specifies email addresses */\n\t\t\t\tvar email = der.readString(ALTNAME.RFC822Name);\n\t\t\t\tid = Identity.forEmail(email);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.DirectoryName:\n\t\t\t\tder.readSequence(ALTNAME.DirectoryName);\n\t\t\t\tid = Identity.parseAsn1(der);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.DNSName:\n\t\t\t\tvar host = der.readString(\n\t\t\t\t    ALTNAME.DNSName);\n\t\t\t\tid = Identity.forHost(host);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tder.readString(der.peek());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsig.extras.exts.push({ oid: extId, critical: critical });\n\t\tbreak;\n\tdefault:\n\t\tsig.extras.exts.push({\n\t\t\toid: extId,\n\t\t\tcritical: critical,\n\t\t\tdata: der.readString(asn1.Ber.OctetString, true)\n\t\t});\n\t\tbreak;\n\t}\n\n\tder._offset = after;\n}\n\nvar UTCTIME_RE =\n    /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction utcTimeToDate(t) {\n\tvar m = t.match(UTCTIME_RE);\n\tassert.ok(m, 'timestamps must be in UTC');\n\tvar d = new Date();\n\n\tvar thisYear = d.getUTCFullYear();\n\tvar century = Math.floor(thisYear / 100) * 100;\n\n\tvar year = parseInt(m[1], 10);\n\tif (thisYear % 100 < 50 && year >= 60)\n\t\tyear += (century - 1);\n\telse\n\t\tyear += century;\n\td.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n\td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n\tif (m[6] && m[6].length > 0)\n\t\td.setUTCSeconds(parseInt(m[6], 10));\n\treturn (d);\n}\n\nvar GTIME_RE =\n    /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction gTimeToDate(t) {\n\tvar m = t.match(GTIME_RE);\n\tassert.ok(m);\n\tvar d = new Date();\n\n\td.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1,\n\t    parseInt(m[3], 10));\n\td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n\tif (m[6] && m[6].length > 0)\n\t\td.setUTCSeconds(parseInt(m[6], 10));\n\treturn (d);\n}\n\nfunction zeroPad(n) {\n\tvar s = '' + n;\n\twhile (s.length < 2)\n\t\ts = '0' + s;\n\treturn (s);\n}\n\nfunction dateToUTCTime(d) {\n\tvar s = '';\n\ts += zeroPad(d.getUTCFullYear() % 100);\n\ts += zeroPad(d.getUTCMonth() + 1);\n\ts += zeroPad(d.getUTCDate());\n\ts += zeroPad(d.getUTCHours());\n\ts += zeroPad(d.getUTCMinutes());\n\ts += zeroPad(d.getUTCSeconds());\n\ts += 'Z';\n\treturn (s);\n}\n\nfunction sign(cert, key) {\n\tif (cert.signatures.x509 === undefined)\n\t\tcert.signatures.x509 = {};\n\tvar sig = cert.signatures.x509;\n\n\tsig.algo = key.type + '-' + key.defaultHashAlgorithm();\n\tif (SIGN_ALGS[sig.algo] === undefined)\n\t\treturn (false);\n\n\tvar der = new asn1.BerWriter();\n\twriteTBSCert(cert, der);\n\tvar blob = der.buffer;\n\tsig.cache = blob;\n\n\tvar signer = key.createSign();\n\tsigner.write(blob);\n\tcert.signatures.x509.signature = signer.sign();\n\n\treturn (true);\n}\n\nfunction signAsync(cert, signer, done) {\n\tif (cert.signatures.x509 === undefined)\n\t\tcert.signatures.x509 = {};\n\tvar sig = cert.signatures.x509;\n\n\tvar der = new asn1.BerWriter();\n\twriteTBSCert(cert, der);\n\tvar blob = der.buffer;\n\tsig.cache = blob;\n\n\tsigner(blob, function (err, signature) {\n\t\tif (err) {\n\t\t\tdone(err);\n\t\t\treturn;\n\t\t}\n\t\tsig.algo = signature.type + '-' + signature.hashAlgorithm;\n\t\tif (SIGN_ALGS[sig.algo] === undefined) {\n\t\t\tdone(new Error('Invalid signing algorithm \"' +\n\t\t\t    sig.algo + '\"'));\n\t\t\treturn;\n\t\t}\n\t\tsig.signature = signature;\n\t\tdone();\n\t});\n}\n\nfunction write(cert, options) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tvar der = new asn1.BerWriter();\n\tder.startSequence();\n\tif (sig.cache) {\n\t\tder._ensure(sig.cache.length);\n\t\tsig.cache.copy(der._buf, der._offset);\n\t\tder._offset += sig.cache.length;\n\t} else {\n\t\twriteTBSCert(cert, der);\n\t}\n\n\tder.startSequence();\n\tder.writeOID(SIGN_ALGS[sig.algo]);\n\tif (sig.algo.match(/^rsa-/))\n\t\tder.writeNull();\n\tder.endSequence();\n\n\tvar sigData = sig.signature.toBuffer('asn1');\n\tvar data = new Buffer(sigData.length + 1);\n\tdata[0] = 0;\n\tsigData.copy(data, 1);\n\tder.writeBuffer(data, asn1.Ber.BitString);\n\tder.endSequence();\n\n\treturn (der.buffer);\n}\n\nfunction writeTBSCert(cert, der) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tder.startSequence();\n\n\tder.startSequence(Local(0));\n\tder.writeInt(2);\n\tder.endSequence();\n\n\tder.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);\n\n\tder.startSequence();\n\tder.writeOID(SIGN_ALGS[sig.algo]);\n\tif (sig.algo.match(/^rsa-/))\n\t\tder.writeNull();\n\tder.endSequence();\n\n\tcert.issuer.toAsn1(der);\n\n\tder.startSequence();\n\tder.writeString(dateToUTCTime(cert.validFrom), asn1.Ber.UTCTime);\n\tder.writeString(dateToUTCTime(cert.validUntil), asn1.Ber.UTCTime);\n\tder.endSequence();\n\n\tvar subject = cert.subjects[0];\n\tvar altNames = cert.subjects.slice(1);\n\tsubject.toAsn1(der);\n\n\tpkcs8.writePkcs8(der, cert.subjectKey);\n\n\tif (sig.extras && sig.extras.issuerUniqueID) {\n\t\tder.writeBuffer(sig.extras.issuerUniqueID, Local(1));\n\t}\n\n\tif (sig.extras && sig.extras.subjectUniqueID) {\n\t\tder.writeBuffer(sig.extras.subjectUniqueID, Local(2));\n\t}\n\n\tif (altNames.length > 0 || subject.type === 'host' ||\n\t    (cert.purposes !== undefined && cert.purposes.length > 0) ||\n\t    (sig.extras && sig.extras.exts)) {\n\t\tder.startSequence(Local(3));\n\t\tder.startSequence();\n\n\t\tvar exts = [];\n\t\tif (cert.purposes !== undefined && cert.purposes.length > 0) {\n\t\t\texts.push({\n\t\t\t\toid: EXTS.basicConstraints,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t\texts.push({\n\t\t\t\toid: EXTS.keyUsage,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t\texts.push({\n\t\t\t\toid: EXTS.extKeyUsage,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t}\n\t\texts.push({ oid: EXTS.altName });\n\t\tif (sig.extras && sig.extras.exts)\n\t\t\texts = sig.extras.exts;\n\n\t\tfor (var i = 0; i < exts.length; ++i) {\n\t\t\tder.startSequence();\n\t\t\tder.writeOID(exts[i].oid);\n\n\t\t\tif (exts[i].critical !== undefined)\n\t\t\t\tder.writeBoolean(exts[i].critical);\n\n\t\t\tif (exts[i].oid === EXTS.altName) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tif (subject.type === 'host') {\n\t\t\t\t\tder.writeString(subject.hostname,\n\t\t\t\t\t    Context(2));\n\t\t\t\t}\n\t\t\t\tfor (var j = 0; j < altNames.length; ++j) {\n\t\t\t\t\tif (altNames[j].type === 'host') {\n\t\t\t\t\t\tder.writeString(\n\t\t\t\t\t\t    altNames[j].hostname,\n\t\t\t\t\t\t    ALTNAME.DNSName);\n\t\t\t\t\t} else if (altNames[j].type ===\n\t\t\t\t\t    'email') {\n\t\t\t\t\t\tder.writeString(\n\t\t\t\t\t\t    altNames[j].email,\n\t\t\t\t\t\t    ALTNAME.RFC822Name);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Encode anything else as a\n\t\t\t\t\t\t * DN style name for now.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tder.startSequence(\n\t\t\t\t\t\t    ALTNAME.DirectoryName);\n\t\t\t\t\t\taltNames[j].toAsn1(der);\n\t\t\t\t\t\tder.endSequence();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.basicConstraints) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tvar ca = (cert.purposes.indexOf('ca') !== -1);\n\t\t\t\tvar pathLen = exts[i].pathLen;\n\t\t\t\tder.writeBoolean(ca);\n\t\t\t\tif (pathLen !== undefined)\n\t\t\t\t\tder.writeInt(pathLen);\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.extKeyUsage) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tcert.purposes.forEach(function (purpose) {\n\t\t\t\t\tif (purpose === 'ca')\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif (KEYUSEBITS.indexOf(purpose) !== -1)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tvar oid = purpose;\n\t\t\t\t\tif (EXTPURPOSE[purpose] !== undefined)\n\t\t\t\t\t\toid = EXTPURPOSE[purpose];\n\t\t\t\t\tder.writeOID(oid);\n\t\t\t\t});\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.keyUsage) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\t/*\n\t\t\t\t * If we parsed this certificate from a byte\n\t\t\t\t * stream (i.e. we didn't generate it in sshpk)\n\t\t\t\t * then we'll have a \".bits\" property on the\n\t\t\t\t * ext with the original raw byte contents.\n\t\t\t\t *\n\t\t\t\t * If we have this, use it here instead of\n\t\t\t\t * regenerating it. This guarantees we output\n\t\t\t\t * the same data we parsed, so signatures still\n\t\t\t\t * validate.\n\t\t\t\t */\n\t\t\t\tif (exts[i].bits !== undefined) {\n\t\t\t\t\tder.writeBuffer(exts[i].bits,\n\t\t\t\t\t    asn1.Ber.BitString);\n\t\t\t\t} else {\n\t\t\t\t\tvar bits = writeBitField(cert.purposes,\n\t\t\t\t\t    KEYUSEBITS);\n\t\t\t\t\tder.writeBuffer(bits,\n\t\t\t\t\t    asn1.Ber.BitString);\n\t\t\t\t}\n\t\t\t\tder.endSequence();\n\t\t\t} else {\n\t\t\t\tder.writeBuffer(exts[i].data,\n\t\t\t\t    asn1.Ber.OctetString);\n\t\t\t}\n\n\t\t\tder.endSequence();\n\t\t}\n\n\t\tder.endSequence();\n\t\tder.endSequence();\n\t}\n\n\tder.endSequence();\n}\n\n/*\n * Reads an ASN.1 BER bitfield out of the Buffer produced by doing\n * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw\n * contents of the BitString tag, which is a count of unused bits followed by\n * the bits as a right-padded byte string.\n *\n * `bits` is the Buffer, `bitIndex` should contain an array of string names\n * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.\n *\n * Returns an array of Strings, the names of the bits that were set to 1.\n */\nfunction readBitField(bits, bitIndex) {\n\tvar bitLen = 8 * (bits.length - 1) - bits[0];\n\tvar setBits = {};\n\tfor (var i = 0; i < bitLen; ++i) {\n\t\tvar byteN = 1 + Math.floor(i / 8);\n\t\tvar bit = 7 - (i % 8);\n\t\tvar mask = 1 << bit;\n\t\tvar bitVal = ((bits[byteN] & mask) !== 0);\n\t\tvar name = bitIndex[i];\n\t\tif (bitVal && typeof (name) === 'string') {\n\t\t\tsetBits[name] = true;\n\t\t}\n\t}\n\treturn (Object.keys(setBits));\n}\n\n/*\n * `setBits` is an array of strings, containing the names for each bit that\n * sould be set to 1. `bitIndex` is same as in `readBitField()`.\n *\n * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.\n */\nfunction writeBitField(setBits, bitIndex) {\n\tvar bitLen = bitIndex.length;\n\tvar blen = Math.ceil(bitLen / 8);\n\tvar unused = blen * 8 - bitLen;\n\tvar bits = new Buffer(1 + blen);\n\tbits.fill(0);\n\tbits[0] = unused;\n\tfor (var i = 0; i < bitLen; ++i) {\n\t\tvar byteN = 1 + Math.floor(i / 8);\n\t\tvar bit = 7 - (i % 8);\n\t\tvar mask = 1 << bit;\n\t\tvar name = bitIndex[i];\n\t\tif (name === undefined)\n\t\t\tcontinue;\n\t\tvar bitVal = (setBits.indexOf(name) !== -1);\n\t\tif (bitVal) {\n\t\t\tbits[byteN] |= mask;\n\t\t}\n\t}\n\treturn (bits);\n}\n","/*\n * extsprintf.js: extended POSIX-style sprintf\n */\n\nvar mod_assert = require('assert');\nvar mod_util = require('util');\n\n/*\n * Public interface\n */\nexports.sprintf = jsSprintf;\nexports.printf = jsPrintf;\nexports.fprintf = jsFprintf;\n\n/*\n * Stripped down version of s[n]printf(3c).  We make a best effort to throw an\n * exception when given a format string we don't understand, rather than\n * ignoring it, so that we won't break existing programs if/when we go implement\n * the rest of this.\n *\n * This implementation currently supports specifying\n *\t- field alignment ('-' flag),\n * \t- zero-pad ('0' flag)\n *\t- always show numeric sign ('+' flag),\n *\t- field width\n *\t- conversions for strings, decimal integers, and floats (numbers).\n *\t- argument size specifiers.  These are all accepted but ignored, since\n *\t  Javascript has no notion of the physical size of an argument.\n *\n * Everything else is currently unsupported, most notably precision, unsigned\n * numbers, non-decimal numbers, and characters.\n */\nfunction jsSprintf(fmt)\n{\n\tvar regex = [\n\t    '([^%]*)',\t\t\t\t/* normal text */\n\t    '%',\t\t\t\t/* start of format */\n\t    '([\\'\\\\-+ #0]*?)',\t\t\t/* flags (optional) */\n\t    '([1-9]\\\\d*)?',\t\t\t/* width (optional) */\n\t    '(\\\\.([1-9]\\\\d*))?',\t\t/* precision (optional) */\n\t    '[lhjztL]*?',\t\t\t/* length mods (ignored) */\n\t    '([diouxXfFeEgGaAcCsSp%jr])'\t/* conversion */\n\t].join('');\n\n\tvar re = new RegExp(regex);\n\tvar args = Array.prototype.slice.call(arguments, 1);\n\tvar flags, width, precision, conversion;\n\tvar left, pad, sign, arg, match;\n\tvar ret = '';\n\tvar argn = 1;\n\n\tmod_assert.equal('string', typeof (fmt));\n\n\twhile ((match = re.exec(fmt)) !== null) {\n\t\tret += match[1];\n\t\tfmt = fmt.substring(match[0].length);\n\n\t\tflags = match[2] || '';\n\t\twidth = match[3] || 0;\n\t\tprecision = match[4] || '';\n\t\tconversion = match[6];\n\t\tleft = false;\n\t\tsign = false;\n\t\tpad = ' ';\n\n\t\tif (conversion == '%') {\n\t\t\tret += '%';\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (args.length === 0)\n\t\t\tthrow (new Error('too few args to sprintf'));\n\n\t\targ = args.shift();\n\t\targn++;\n\n\t\tif (flags.match(/[\\' #]/))\n\t\t\tthrow (new Error(\n\t\t\t    'unsupported flags: ' + flags));\n\n\t\tif (precision.length > 0)\n\t\t\tthrow (new Error(\n\t\t\t    'non-zero precision not supported'));\n\n\t\tif (flags.match(/-/))\n\t\t\tleft = true;\n\n\t\tif (flags.match(/0/))\n\t\t\tpad = '0';\n\n\t\tif (flags.match(/\\+/))\n\t\t\tsign = true;\n\n\t\tswitch (conversion) {\n\t\tcase 's':\n\t\t\tif (arg === undefined || arg === null)\n\t\t\t\tthrow (new Error('argument ' + argn +\n\t\t\t\t    ': attempted to print undefined or null ' +\n\t\t\t\t    'as a string'));\n\t\t\tret += doPad(pad, width, left, arg.toString());\n\t\t\tbreak;\n\n\t\tcase 'd':\n\t\t\targ = Math.floor(arg);\n\t\t\t/*jsl:fallthru*/\n\t\tcase 'f':\n\t\t\tsign = sign && arg > 0 ? '+' : '';\n\t\t\tret += sign + doPad(pad, width, left,\n\t\t\t    arg.toString());\n\t\t\tbreak;\n\n\t\tcase 'x':\n\t\t\tret += doPad(pad, width, left, arg.toString(16));\n\t\t\tbreak;\n\n\t\tcase 'j': /* non-standard */\n\t\t\tif (width === 0)\n\t\t\t\twidth = 10;\n\t\t\tret += mod_util.inspect(arg, false, width);\n\t\t\tbreak;\n\n\t\tcase 'r': /* non-standard */\n\t\t\tret += dumpException(arg);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow (new Error('unsupported conversion: ' +\n\t\t\t    conversion));\n\t\t}\n\t}\n\n\tret += fmt;\n\treturn (ret);\n}\n\nfunction jsPrintf() {\n\tvar args = Array.prototype.slice.call(arguments);\n\targs.unshift(process.stdout);\n\tjsFprintf.apply(null, args);\n}\n\nfunction jsFprintf(stream) {\n\tvar args = Array.prototype.slice.call(arguments, 1);\n\treturn (stream.write(jsSprintf.apply(this, args)));\n}\n\nfunction doPad(chr, width, left, str)\n{\n\tvar ret = str;\n\n\twhile (ret.length < width) {\n\t\tif (left)\n\t\t\tret += chr;\n\t\telse\n\t\t\tret = chr + ret;\n\t}\n\n\treturn (ret);\n}\n\n/*\n * This function dumps long stack traces for exceptions having a cause() method.\n * See node-verror for an example.\n */\nfunction dumpException(ex)\n{\n\tvar ret;\n\n\tif (!(ex instanceof Error))\n\t\tthrow (new Error(jsSprintf('invalid type for %%r: %j', ex)));\n\n\t/* Note that V8 prepends \"ex.stack\" with ex.toString(). */\n\tret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;\n\n\tif (ex.cause && typeof (ex.cause) === 'function') {\n\t\tvar cex = ex.cause();\n\t\tif (cex) {\n\t\t\tret += '\\nCaused by: ' + dumpException(cex);\n\t\t}\n\t}\n\n\treturn (ret);\n}\n","var util = require('util');\nvar Stream = require('stream').Stream;\nvar DelayedStream = require('delayed-stream');\nvar defer = require('./defer.js');\n\nmodule.exports = CombinedStream;\nfunction CombinedStream() {\n  this.writable = false;\n  this.readable = true;\n  this.dataSize = 0;\n  this.maxDataSize = 2 * 1024 * 1024;\n  this.pauseStreams = true;\n\n  this._released = false;\n  this._streams = [];\n  this._currentStream = null;\n}\nutil.inherits(CombinedStream, Stream);\n\nCombinedStream.create = function(options) {\n  var combinedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    combinedStream[option] = options[option];\n  }\n\n  return combinedStream;\n};\n\nCombinedStream.isStreamLike = function(stream) {\n  return (typeof stream !== 'function')\n    && (typeof stream !== 'string')\n    && (typeof stream !== 'boolean')\n    && (typeof stream !== 'number')\n    && (!Buffer.isBuffer(stream));\n};\n\nCombinedStream.prototype.append = function(stream) {\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n  if (isStreamLike) {\n    if (!(stream instanceof DelayedStream)) {\n      var newStream = DelayedStream.create(stream, {\n        maxDataSize: Infinity,\n        pauseStream: this.pauseStreams,\n      });\n      stream.on('data', this._checkDataSize.bind(this));\n      stream = newStream;\n    }\n\n    this._handleErrors(stream);\n\n    if (this.pauseStreams) {\n      stream.pause();\n    }\n  }\n\n  this._streams.push(stream);\n  return this;\n};\n\nCombinedStream.prototype.pipe = function(dest, options) {\n  Stream.prototype.pipe.call(this, dest, options);\n  this.resume();\n  return dest;\n};\n\nCombinedStream.prototype._getNext = function() {\n  this._currentStream = null;\n  var stream = this._streams.shift();\n\n\n  if (typeof stream == 'undefined') {\n    this.end();\n    return;\n  }\n\n  if (typeof stream !== 'function') {\n    this._pipeNext(stream);\n    return;\n  }\n\n  var getStream = stream;\n  getStream(function(stream) {\n    var isStreamLike = CombinedStream.isStreamLike(stream);\n    if (isStreamLike) {\n      stream.on('data', this._checkDataSize.bind(this));\n      this._handleErrors(stream);\n    }\n\n    defer(this._pipeNext.bind(this, stream));\n  }.bind(this));\n};\n\nCombinedStream.prototype._pipeNext = function(stream) {\n  this._currentStream = stream;\n\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    stream.on('end', this._getNext.bind(this));\n    stream.pipe(this, {end: false});\n    return;\n  }\n\n  var value = stream;\n  this.write(value);\n  this._getNext();\n};\n\nCombinedStream.prototype._handleErrors = function(stream) {\n  var self = this;\n  stream.on('error', function(err) {\n    self._emitError(err);\n  });\n};\n\nCombinedStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nCombinedStream.prototype.pause = function() {\n  if (!this.pauseStreams) {\n    return;\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\n  this.emit('pause');\n};\n\nCombinedStream.prototype.resume = function() {\n  if (!this._released) {\n    this._released = true;\n    this.writable = true;\n    this._getNext();\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\n  this.emit('resume');\n};\n\nCombinedStream.prototype.end = function() {\n  this._reset();\n  this.emit('end');\n};\n\nCombinedStream.prototype.destroy = function() {\n  this._reset();\n  this.emit('close');\n};\n\nCombinedStream.prototype._reset = function() {\n  this.writable = false;\n  this._streams = [];\n  this._currentStream = null;\n};\n\nCombinedStream.prototype._checkDataSize = function() {\n  this._updateDataSize();\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n  this._emitError(new Error(message));\n};\n\nCombinedStream.prototype._updateDataSize = function() {\n  this.dataSize = 0;\n\n  var self = this;\n  this._streams.forEach(function(stream) {\n    if (!stream.dataSize) {\n      return;\n    }\n\n    self.dataSize += stream.dataSize;\n  });\n\n  if (this._currentStream && this._currentStream.dataSize) {\n    this.dataSize += this._currentStream.dataSize;\n  }\n};\n\nCombinedStream.prototype._emitError = function(err) {\n  this._reset();\n  this.emit('error', err);\n};\n","var async = require('./async.js')\n  , abort = require('./abort.js')\n  ;\n\n// API\nmodule.exports = iterate;\n\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\nfunction iterate(list, iterator, state, callback)\n{\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n\n  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)\n  {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs))\n    {\n      return;\n    }\n\n    // clean up jobs\n    delete state.jobs[key];\n\n    if (error)\n    {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    }\n    else\n    {\n      state.results[key] = output;\n    }\n\n    // return salvaged results\n    callback(error, state.results);\n  });\n}\n\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\nfunction runJob(iterator, key, item, callback)\n{\n  var aborter;\n\n  // allow shortcut if iterator expects only two arguments\n  if (iterator.length == 2)\n  {\n    aborter = iterator(item, async(callback));\n  }\n  // otherwise go with full three arguments\n  else\n  {\n    aborter = iterator(item, key, async(callback));\n  }\n\n  return aborter;\n}\n","var defer = require('./defer.js');\n\n// API\nmodule.exports = async;\n\n/**\n * Runs provided callback asynchronously\n * even if callback itself is not\n *\n * @param   {function} callback - callback to invoke\n * @returns {function} - augmented callback\n */\nfunction async(callback)\n{\n  var isAsync = false;\n\n  // check if async happened\n  defer(function() { isAsync = true; });\n\n  return function async_callback(err, result)\n  {\n    if (isAsync)\n    {\n      callback(err, result);\n    }\n    else\n    {\n      defer(function nextTick_callback()\n      {\n        callback(err, result);\n      });\n    }\n  };\n}\n","// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state)\n{\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key)\n{\n  if (typeof this.jobs[key] == 'function')\n  {\n    this.jobs[key]();\n  }\n}\n","// API\nmodule.exports = state;\n\n/**\n * Creates initial state object\n * for iteration over list\n *\n * @param   {array|object} list - list to iterate over\n * @param   {function|null} sortMethod - function to use for keys sort,\n *                                     or `null` to keep them as is\n * @returns {object} - initial state object\n */\nfunction state(list, sortMethod)\n{\n  var isNamedList = !Array.isArray(list)\n    , initState =\n    {\n      index    : 0,\n      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,\n      jobs     : {},\n      results  : isNamedList ? {} : [],\n      size     : isNamedList ? Object.keys(list).length : list.length\n    }\n    ;\n\n  if (sortMethod)\n  {\n    // sort array keys based on it's values\n    // sort object's keys just on own merit\n    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)\n    {\n      return sortMethod(list[a], list[b]);\n    });\n  }\n\n  return initState;\n}\n","var abort = require('./abort.js')\n  , async = require('./async.js')\n  ;\n\n// API\nmodule.exports = terminator;\n\n/**\n * Terminates jobs in the attached state context\n *\n * @this  AsyncKitState#\n * @param {function} callback - final callback to invoke after termination\n */\nfunction terminator(callback)\n{\n  if (!Object.keys(this.jobs).length)\n  {\n    return;\n  }\n\n  // fast forward iteration index\n  this.index = this.size;\n\n  // abort jobs\n  abort(this);\n\n  // send back results we have so far\n  async(callback)(null, this.results);\n}\n","var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = serialOrdered;\n// sorting helpers\nmodule.exports.ascending  = ascending;\nmodule.exports.descending = descending;\n\n/**\n * Runs iterator over provided sorted array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} sortMethod - custom sort function\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serialOrdered(list, iterator, sortMethod, callback)\n{\n  var state = initState(list, sortMethod);\n\n  iterate(list, iterator, state, function iteratorHandler(error, result)\n  {\n    if (error)\n    {\n      callback(error, result);\n      return;\n    }\n\n    state.index++;\n\n    // are we there yet?\n    if (state.index < (state['keyedList'] || list).length)\n    {\n      iterate(list, iterator, state, iteratorHandler);\n      return;\n    }\n\n    // done here\n    callback(null, state.results);\n  });\n\n  return terminator.bind(state, callback);\n}\n\n/*\n * -- Sort methods\n */\n\n/**\n * sort helper to sort array elements in ascending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction ascending(a, b)\n{\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * sort helper to sort array elements in descending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction descending(a, b)\n{\n  return -1 * ascending(a, b);\n}\n","var stream = require('stream')\n\n\nfunction isStream (obj) {\n  return obj instanceof stream.Stream\n}\n\n\nfunction isReadable (obj) {\n  return isStream(obj) && typeof obj._read == 'function' && typeof obj._readableState == 'object'\n}\n\n\nfunction isWritable (obj) {\n  return isStream(obj) && typeof obj._write == 'function' && typeof obj._writableState == 'object'\n}\n\n\nfunction isDuplex (obj) {\n  return isReadable(obj) && isWritable(obj)\n}\n\n\nmodule.exports            = isStream\nmodule.exports.isReadable = isReadable\nmodule.exports.isWritable = isWritable\nmodule.exports.isDuplex   = isDuplex\n","'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    var obj;\n\n    while (queue.length) {\n        var item = queue.pop();\n        obj = item.obj[item.prop];\n\n        if (Array.isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n\n    return obj;\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (Array.isArray(target)) {\n            target.push(source);\n        } else if (typeof target === 'object') {\n            if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (Array.isArray(target) && !Array.isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (Array.isArray(target) && Array.isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                if (target[i] && typeof target[i] === 'object') {\n                    target[i] = merge(target[i], item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str) {\n    try {\n        return decodeURIComponent(str.replace(/\\+/g, ' '));\n    } catch (e) {\n        return str;\n    }\n};\n\nvar encode = function encode(str) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = typeof str === 'string' ? str : String(str);\n\n    var out = '';\n    for (var i = 0; i < string.length; ++i) {\n        var c = string.charCodeAt(i);\n\n        if (\n            c === 0x2D // -\n            || c === 0x2E // .\n            || c === 0x5F // _\n            || c === 0x7E // ~\n            || (c >= 0x30 && c <= 0x39) // 0-9\n            || (c >= 0x41 && c <= 0x5A) // a-z\n            || (c >= 0x61 && c <= 0x7A) // A-Z\n        ) {\n            out += string.charAt(i);\n            continue;\n        }\n\n        if (c < 0x80) {\n            out = out + hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        i += 1;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));\n        out += hexTable[0xF0 | (c >> 18)]\n            + hexTable[0x80 | ((c >> 12) & 0x3F)]\n            + hexTable[0x80 | ((c >> 6) & 0x3F)]\n            + hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    return compactQueue(queue);\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (obj === null || typeof obj === 'undefined') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    merge: merge\n};\n","'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nmodule.exports = {\n    'default': 'RFC3986',\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return value;\n        }\n    },\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n","'use strict';\n\nvar util = require('./util');\n\nmodule.exports = SchemaObject;\n\nfunction SchemaObject(obj) {\n  util.copy(obj, this);\n}\n","'use strict';\n\nmodule.exports = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (node) {\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        if (node === undefined) return;\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n        if (typeof node !== 'object') return JSON.stringify(node);\n\n        var i, out;\n        if (Array.isArray(node)) {\n            out = '[';\n            for (i = 0; i < node.length; i++) {\n                if (i) out += ',';\n                out += stringify(node[i]) || 'null';\n            }\n            return out + ']';\n        }\n\n        if (node === null) return 'null';\n\n        if (seen.indexOf(node) !== -1) {\n            if (cycles) return JSON.stringify('__cycle__');\n            throw new TypeError('Converting circular structure to JSON');\n        }\n\n        var seenIndex = seen.push(node) - 1;\n        var keys = Object.keys(node).sort(cmp && cmp(node));\n        out = '';\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = stringify(node[key]);\n\n            if (!value) continue;\n            if (out) out += ',';\n            out += JSON.stringify(key) + ':' + value;\n        }\n        seen.splice(seenIndex, 1);\n        return '{' + out + '}';\n    })(data);\n};\n","'use strict';\nmodule.exports = function generate_validate(it, $keyword, $ruleType) {\n  var out = '';\n  var $async = it.schema.$async === true,\n    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),\n    $id = it.self._getId(it.schema);\n  if (it.isTop) {\n    if ($async) {\n      it.async = true;\n      var $es7 = it.opts.async == 'es7';\n      it.yieldAwait = $es7 ? 'await' : 'yield';\n    }\n    out += ' var validate = ';\n    if ($async) {\n      if ($es7) {\n        out += ' (async function ';\n      } else {\n        if (it.opts.async != '*') {\n          out += 'co.wrap';\n        }\n        out += '(function* ';\n      }\n    } else {\n      out += ' (function ';\n    }\n    out += ' (data, dataPath, parentData, parentDataProperty, rootData) { \\'use strict\\'; ';\n    if ($id && (it.opts.sourceCode || it.opts.processCode)) {\n      out += ' ' + ('/\\*# sourceURL=' + $id + ' */') + ' ';\n    }\n  }\n  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {\n    var $keyword = 'false schema';\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = 'data' + ($dataLvl || '');\n    var $valid = 'valid' + $lvl;\n    if (it.schema === false) {\n      if (it.isTop) {\n        $breakOnError = true;\n      } else {\n        out += ' var ' + ($valid) + ' = false; ';\n      }\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = ''; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ($errorKeyword || 'false schema') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'boolean schema is false\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError([' + (__err) + ']); ';\n        } else {\n          out += ' validate.errors = [' + (__err) + ']; return false; ';\n        }\n      } else {\n        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      }\n    } else {\n      if (it.isTop) {\n        if ($async) {\n          out += ' return data; ';\n        } else {\n          out += ' validate.errors = null; return true; ';\n        }\n      } else {\n        out += ' var ' + ($valid) + ' = true; ';\n      }\n    }\n    if (it.isTop) {\n      out += ' }); return validate; ';\n    }\n    return out;\n  }\n  if (it.isTop) {\n    var $top = it.isTop,\n      $lvl = it.level = 0,\n      $dataLvl = it.dataLevel = 0,\n      $data = 'data';\n    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));\n    it.baseId = it.baseId || it.rootId;\n    delete it.isTop;\n    it.dataPathArr = [undefined];\n    out += ' var vErrors = null; ';\n    out += ' var errors = 0;     ';\n    out += ' if (rootData === undefined) rootData = data; ';\n  } else {\n    var $lvl = it.level,\n      $dataLvl = it.dataLevel,\n      $data = 'data' + ($dataLvl || '');\n    if ($id) it.baseId = it.resolve.url(it.baseId, $id);\n    if ($async && !it.async) throw new Error('async schema in sync schema');\n    out += ' var errs_' + ($lvl) + ' = errors;';\n  }\n  var $valid = 'valid' + $lvl,\n    $breakOnError = !it.opts.allErrors,\n    $closingBraces1 = '',\n    $closingBraces2 = '';\n  var $errorKeyword;\n  var $typeSchema = it.schema.type,\n    $typeIsArray = Array.isArray($typeSchema);\n  if ($typeIsArray && $typeSchema.length == 1) {\n    $typeSchema = $typeSchema[0];\n    $typeIsArray = false;\n  }\n  if (it.schema.$ref && $refKeywords) {\n    if (it.opts.extendRefs == 'fail') {\n      throw new Error('$ref: validation keywords used in schema at path \"' + it.errSchemaPath + '\" (see option extendRefs)');\n    } else if (it.opts.extendRefs !== true) {\n      $refKeywords = false;\n      it.logger.warn('$ref: keywords ignored in schema at path \"' + it.errSchemaPath + '\"');\n    }\n  }\n  if ($typeSchema) {\n    if (it.opts.coerceTypes) {\n      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);\n    }\n    var $rulesGroup = it.RULES.types[$typeSchema];\n    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {\n      var $schemaPath = it.schemaPath + '.type',\n        $errSchemaPath = it.errSchemaPath + '/type';\n      var $schemaPath = it.schemaPath + '.type',\n        $errSchemaPath = it.errSchemaPath + '/type',\n        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';\n      out += ' if (' + (it.util[$method]($typeSchema, $data, true)) + ') { ';\n      if ($coerceToTypes) {\n        var $dataType = 'dataType' + $lvl,\n          $coerced = 'coerced' + $lvl;\n        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; ';\n        if (it.opts.coerceTypes == 'array') {\n          out += ' if (' + ($dataType) + ' == \\'object\\' && Array.isArray(' + ($data) + ')) ' + ($dataType) + ' = \\'array\\'; ';\n        }\n        out += ' var ' + ($coerced) + ' = undefined; ';\n        var $bracesCoercion = '';\n        var arr1 = $coerceToTypes;\n        if (arr1) {\n          var $type, $i = -1,\n            l1 = arr1.length - 1;\n          while ($i < l1) {\n            $type = arr1[$i += 1];\n            if ($i) {\n              out += ' if (' + ($coerced) + ' === undefined) { ';\n              $bracesCoercion += '}';\n            }\n            if (it.opts.coerceTypes == 'array' && $type != 'array') {\n              out += ' if (' + ($dataType) + ' == \\'array\\' && ' + ($data) + '.length == 1) { ' + ($coerced) + ' = ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + ';  } ';\n            }\n            if ($type == 'string') {\n              out += ' if (' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\') ' + ($coerced) + ' = \\'\\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \\'\\'; ';\n            } else if ($type == 'number' || $type == 'integer') {\n              out += ' if (' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \\'string\\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';\n              if ($type == 'integer') {\n                out += ' && !(' + ($data) + ' % 1)';\n              }\n              out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';\n            } else if ($type == 'boolean') {\n              out += ' if (' + ($data) + ' === \\'false\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \\'true\\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';\n            } else if ($type == 'null') {\n              out += ' if (' + ($data) + ' === \\'\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';\n            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {\n              out += ' if (' + ($dataType) + ' == \\'string\\' || ' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';\n            }\n          }\n        }\n        out += ' ' + ($bracesCoercion) + ' if (' + ($coerced) + ' === undefined) {   ';\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n          if ($typeIsArray) {\n            out += '' + ($typeSchema.join(\",\"));\n          } else {\n            out += '' + ($typeSchema);\n          }\n          out += '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n            if ($typeIsArray) {\n              out += '' + ($typeSchema.join(\",\"));\n            } else {\n              out += '' + ($typeSchema);\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        out += ' } else {  ';\n        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\n          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';\n        if (!$dataLvl) {\n          out += 'if (' + ($parentData) + ' !== undefined)';\n        }\n        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';\n      } else {\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n          if ($typeIsArray) {\n            out += '' + ($typeSchema.join(\",\"));\n          } else {\n            out += '' + ($typeSchema);\n          }\n          out += '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n            if ($typeIsArray) {\n              out += '' + ($typeSchema.join(\",\"));\n            } else {\n              out += '' + ($typeSchema);\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n      }\n      out += ' } ';\n    }\n  }\n  if (it.schema.$ref && !$refKeywords) {\n    out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';\n    if ($breakOnError) {\n      out += ' } if (errors === ';\n      if ($top) {\n        out += '0';\n      } else {\n        out += 'errs_' + ($lvl);\n      }\n      out += ') { ';\n      $closingBraces2 += '}';\n    }\n  } else {\n    if (it.opts.v5 && it.schema.patternGroups) {\n      it.logger.warn('keyword \"patternGroups\" is deprecated and disabled. Use option patternGroups: true to enable.');\n    }\n    var arr2 = it.RULES;\n    if (arr2) {\n      var $rulesGroup, i2 = -1,\n        l2 = arr2.length - 1;\n      while (i2 < l2) {\n        $rulesGroup = arr2[i2 += 1];\n        if ($shouldUseGroup($rulesGroup)) {\n          if ($rulesGroup.type) {\n            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data)) + ') { ';\n          }\n          if (it.opts.useDefaults && !it.compositeRule) {\n            if ($rulesGroup.type == 'object' && it.schema.properties) {\n              var $schema = it.schema.properties,\n                $schemaKeys = Object.keys($schema);\n              var arr3 = $schemaKeys;\n              if (arr3) {\n                var $propertyKey, i3 = -1,\n                  l3 = arr3.length - 1;\n                while (i3 < l3) {\n                  $propertyKey = arr3[i3 += 1];\n                  var $sch = $schema[$propertyKey];\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + it.util.getProperty($propertyKey);\n                    out += '  if (' + ($passData) + ' === undefined) ' + ($passData) + ' = ';\n                    if (it.opts.useDefaults == 'shared') {\n                      out += ' ' + (it.useDefault($sch.default)) + ' ';\n                    } else {\n                      out += ' ' + (JSON.stringify($sch.default)) + ' ';\n                    }\n                    out += '; ';\n                  }\n                }\n              }\n            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {\n              var arr4 = it.schema.items;\n              if (arr4) {\n                var $sch, $i = -1,\n                  l4 = arr4.length - 1;\n                while ($i < l4) {\n                  $sch = arr4[$i += 1];\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + '[' + $i + ']';\n                    out += '  if (' + ($passData) + ' === undefined) ' + ($passData) + ' = ';\n                    if (it.opts.useDefaults == 'shared') {\n                      out += ' ' + (it.useDefault($sch.default)) + ' ';\n                    } else {\n                      out += ' ' + (JSON.stringify($sch.default)) + ' ';\n                    }\n                    out += '; ';\n                  }\n                }\n              }\n            }\n          }\n          var arr5 = $rulesGroup.rules;\n          if (arr5) {\n            var $rule, i5 = -1,\n              l5 = arr5.length - 1;\n            while (i5 < l5) {\n              $rule = arr5[i5 += 1];\n              if ($shouldUseRule($rule)) {\n                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);\n                if ($code) {\n                  out += ' ' + ($code) + ' ';\n                  if ($breakOnError) {\n                    $closingBraces1 += '}';\n                  }\n                }\n              }\n            }\n          }\n          if ($breakOnError) {\n            out += ' ' + ($closingBraces1) + ' ';\n            $closingBraces1 = '';\n          }\n          if ($rulesGroup.type) {\n            out += ' } ';\n            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {\n              out += ' else { ';\n              var $schemaPath = it.schemaPath + '.type',\n                $errSchemaPath = it.errSchemaPath + '/type';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n                if ($typeIsArray) {\n                  out += '' + ($typeSchema.join(\",\"));\n                } else {\n                  out += '' + ($typeSchema);\n                }\n                out += '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should be ';\n                  if ($typeIsArray) {\n                    out += '' + ($typeSchema.join(\",\"));\n                  } else {\n                    out += '' + ($typeSchema);\n                  }\n                  out += '\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n            }\n          }\n          if ($breakOnError) {\n            out += ' if (errors === ';\n            if ($top) {\n              out += '0';\n            } else {\n              out += 'errs_' + ($lvl);\n            }\n            out += ') { ';\n            $closingBraces2 += '}';\n          }\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces2) + ' ';\n  }\n  if ($top) {\n    if ($async) {\n      out += ' if (errors === 0) return data;           ';\n      out += ' else throw new ValidationError(vErrors); ';\n    } else {\n      out += ' validate.errors = vErrors; ';\n      out += ' return errors === 0;       ';\n    }\n    out += ' }); return validate;';\n  } else {\n    out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';\n  }\n  out = it.util.cleanUpCode(out);\n  if ($top) {\n    out = it.util.finalCleanUpCode(out, $async);\n  }\n\n  function $shouldUseGroup($rulesGroup) {\n    var rules = $rulesGroup.rules;\n    for (var i = 0; i < rules.length; i++)\n      if ($shouldUseRule(rules[i])) return true;\n  }\n\n  function $shouldUseRule($rule) {\n    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));\n  }\n\n  function $ruleImplementsSomeKeyword($rule) {\n    var impl = $rule.implements;\n    for (var i = 0; i < impl.length; i++)\n      if (it.schema[impl[i]] !== undefined) return true;\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate__limit(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $isMax = $keyword == 'maximum',\n    $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',\n    $schemaExcl = it.schema[$exclusiveKeyword],\n    $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,\n    $op = $isMax ? '<' : '>',\n    $notOp = $isMax ? '>' : '<',\n    $errorKeyword = undefined;\n  if ($isDataExcl) {\n    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),\n      $exclusive = 'exclusive' + $lvl,\n      $exclType = 'exclType' + $lvl,\n      $exclIsNumber = 'exclIsNumber' + $lvl,\n      $opExpr = 'op' + $lvl,\n      $opStr = '\\' + ' + $opExpr + ' + \\'';\n    out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';\n    $schemaValueExcl = 'schemaExcl' + $lvl;\n    out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \\'boolean\\' && ' + ($exclType) + ' != \\'undefined\\' && ' + ($exclType) + ' != \\'number\\') { ';\n    var $errorKeyword = $exclusiveKeyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = ''; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ($errorKeyword || '_exclusiveLimit') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'' + ($exclusiveKeyword) + ' should be boolean\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + (__err) + ']); ';\n      } else {\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n    out += ' } else if ( ';\n    if ($isData) {\n      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n    }\n    out += ' ' + ($exclType) + ' == \\'number\\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \\'' + ($op) + '\\' : \\'' + ($op) + '=\\';';\n  } else {\n    var $exclIsNumber = typeof $schemaExcl == 'number',\n      $opStr = $op;\n    if ($exclIsNumber && $isData) {\n      var $opExpr = '\\'' + $opStr + '\\'';\n      out += ' if ( ';\n      if ($isData) {\n        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n      }\n      out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';\n    } else {\n      if ($exclIsNumber && $schema === undefined) {\n        $exclusive = true;\n        $errorKeyword = $exclusiveKeyword;\n        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\n        $schemaValue = $schemaExcl;\n        $notOp += '=';\n      } else {\n        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);\n        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {\n          $exclusive = true;\n          $errorKeyword = $exclusiveKeyword;\n          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\n          $notOp += '=';\n        } else {\n          $exclusive = false;\n          $opStr += '=';\n        }\n      }\n      var $opExpr = '\\'' + $opStr + '\\'';\n      out += ' if ( ';\n      if ($isData) {\n        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n      }\n      out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';\n    }\n  }\n  $errorKeyword = $errorKeyword || $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limit') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be ' + ($opStr) + ' ';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue);\n      } else {\n        out += '' + ($schemaValue) + '\\'';\n      }\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + ($schema);\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' } ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate__limitItems(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $op = $keyword == 'maxItems' ? '>' : '<';\n  out += 'if ( ';\n  if ($isData) {\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n  }\n  out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitItems') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should NOT have ';\n      if ($keyword == 'maxItems') {\n        out += 'more';\n      } else {\n        out += 'less';\n      }\n      out += ' than ';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + ($schema);\n      }\n      out += ' items\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + ($schema);\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '} ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate__limitLength(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $op = $keyword == 'maxLength' ? '>' : '<';\n  out += 'if ( ';\n  if ($isData) {\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n  }\n  if (it.opts.unicode === false) {\n    out += ' ' + ($data) + '.length ';\n  } else {\n    out += ' ucs2length(' + ($data) + ') ';\n  }\n  out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitLength') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should NOT be ';\n      if ($keyword == 'maxLength') {\n        out += 'longer';\n      } else {\n        out += 'shorter';\n      }\n      out += ' than ';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + ($schema);\n      }\n      out += ' characters\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + ($schema);\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '} ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate__limitProperties(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $op = $keyword == 'maxProperties' ? '>' : '<';\n  out += 'if ( ';\n  if ($isData) {\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n  }\n  out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitProperties') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should NOT have ';\n      if ($keyword == 'maxProperties') {\n        out += 'more';\n      } else {\n        out += 'less';\n      }\n      out += ' than ';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + ($schema);\n      }\n      out += ' properties\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + ($schema);\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '} ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Expose 'BlobUtilities'.\r\nexports = module.exports;\r\n\r\n/**\r\n* Defines constants, enums, and utility functions for use with the Blob service.\r\n* @namespace BlobUtilities\r\n*/\r\nvar BlobUtilities = {\r\n  /**\r\n  * Permission types\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  SharedAccessPermissions: {\r\n    READ: 'r',\r\n    ADD: 'a',\r\n    CREATE: 'c',\r\n    WRITE: 'w',\r\n    DELETE: 'd',\r\n    LIST: 'l'\r\n  },\r\n\r\n  /**\r\n  * Blob listing details.\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  BlobListingDetails: {\r\n    SNAPSHOTS: 'snapshots',\r\n    METADATA: 'metadata',\r\n    UNCOMMITTED_BLOBS: 'uncommittedblobs',\r\n    COPY: 'copy',\r\n    DELETED: 'deleted'\r\n  },\r\n\r\n  /**\r\n  * Deletion options for blob snapshots\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  SnapshotDeleteOptions: {\r\n    SNAPSHOTS_ONLY: 'only',\r\n    BLOB_AND_SNAPSHOTS: 'include'\r\n  },\r\n\r\n  /**\r\n  * Type of block list to retrieve\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  BlockListFilter: {\r\n    ALL: 'all',\r\n    COMMITTED: 'committed',\r\n    UNCOMMITTED: 'uncommitted'\r\n  },\r\n\r\n  /**\r\n  * Blobs and container public access types.\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  BlobContainerPublicAccessType: {\r\n    OFF: null,\r\n    CONTAINER: 'container',\r\n    BLOB: 'blob'\r\n  },\r\n\r\n  /**\r\n  * Describes actions that can be performed on a page blob sequence number.\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  SequenceNumberAction: {\r\n    MAX: 'max',\r\n    UPDATE: 'update',\r\n    INCREMENT: 'increment'\r\n  },\r\n\r\n  /**\r\n  * Candidate values for blob tiers.\r\n  *\r\n  * @property {object} PremiumPageBlobTier      Candidate values for premium pageblob tiers.\r\n  * @property {string} PremiumPageBlobTier.P4\r\n  * @property {string} PremiumPageBlobTier.P6\r\n  * @property {string} PremiumPageBlobTier.P10\r\n  * @property {string} PremiumPageBlobTier.P20\r\n  * @property {string} PremiumPageBlobTier.P30\r\n  * @property {string} PremiumPageBlobTier.P40\r\n  * @property {string} PremiumPageBlobTier.P50\r\n  * @property {string} PremiumPageBlobTier.P60\r\n  * @property {object} StandardBlobTier         Candidate values for standard blobs tiers.\r\n  * @property {string} StandardBlobTier.HOT\r\n  * @property {string} StandardBlobTier.COOL\r\n  * @property {string} StandardBlobTier.ARCHIVE\r\n  */\r\n  BlobTier: {\r\n    PremiumPageBlobTier: {\r\n      P4: 'P4',\r\n      P6: 'P6',\r\n      P10: 'P10',\r\n      P20: 'P20',\r\n      P30: 'P30',\r\n      P40: 'P40',\r\n      P50: 'P50',\r\n      P60: 'P60'\r\n    },\r\n    StandardBlobTier: {\r\n      HOT: 'Hot',\r\n      COOL: 'Cool',\r\n      ARCHIVE: 'Archive'\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = BlobUtilities;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Expose 'HeaderConstants'.\r\nexports = module.exports;\r\n\r\n/**\r\n* Defines constants, enums, and utility functions for use with the Table service.\r\n* @namespace TableUtilities\r\n*/\r\nvar TableUtilities = {\r\n  /**\r\n  * Permission types.\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  SharedAccessPermissions: {\r\n    QUERY: 'r',\r\n    ADD: 'a',\r\n    UPDATE: 'u',\r\n    DELETE: 'd'\r\n  },\r\n\r\n  /**\r\n  * Payload Format.\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  PayloadFormat: {\r\n    FULL_METADATA: 'application/json;odata=fullmetadata',\r\n    MINIMAL_METADATA: 'application/json;odata=minimalmetadata',\r\n    NO_METADATA: 'application/json;odata=nometadata'\r\n  },\r\n\r\n  /**\r\n  * Defines the set of Boolean operators for constructing queries.\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  TableOperators: {\r\n    AND: 'and',\r\n    NOT: 'not',\r\n    OR: 'or'\r\n  },\r\n\r\n  /**\r\n  * Filter property comparison operators.\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  QueryComparisons: {\r\n    EQUAL: 'eq',\r\n    NOT_EQUAL: 'ne',\r\n    GREATER_THAN: 'gt',\r\n    GREATER_THAN_OR_EQUAL: 'ge',\r\n    LESS_THAN: 'lt',\r\n    LESS_THAN_OR_EQUAL: 'le'\r\n  },\r\n\r\n  /**\r\n  * Edm types.\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  EdmType: {\r\n    STRING: 'Edm.String',\r\n    BINARY: 'Edm.Binary',\r\n    INT64: 'Edm.Int64',\r\n    INT32: 'Edm.Int32',\r\n    DOUBLE: 'Edm.Double',\r\n    DATETIME: 'Edm.DateTime',\r\n    GUID: 'Edm.Guid',\r\n    BOOLEAN: 'Edm.Boolean'\r\n  },\r\n\r\n  /**\r\n  * A helper to create table entities.\r\n  *\r\n  * @example\r\n  * var entGen = TableUtilities.entityGenerator;\r\n  * var entity = {  PartitionKey: entGen.String('part2'),\r\n  *        RowKey: entGen.String('row1'),\r\n  *        boolValue: entGen.Boolean(true),\r\n  *        intValue: entGen.Int32(42),\r\n  *        dateValue: entGen.DateTime(new Date(Date.UTC(2011, 10, 25))),\r\n  *       };\r\n  */\r\n  entityGenerator: (function()\r\n  {\r\n    var EntityProperty = function (value, type) {\r\n        var entityProperty = { _:value};\r\n        if (type) {\r\n          entityProperty['$'] = type;\r\n        }\r\n        return entityProperty;\r\n      };\r\n\r\n      return {\r\n      EntityProperty : EntityProperty,\r\n      \r\n      Int32 : function(value) {\r\n        return new EntityProperty(value, 'Edm.Int32');\r\n      },\r\n\r\n      Int64 : function(value) {\r\n        return new EntityProperty(value, 'Edm.Int64');\r\n      },\r\n\r\n      Binary : function(value) {\r\n        return new EntityProperty(value, 'Edm.Binary');\r\n      },\r\n\r\n      Boolean : function(value) {\r\n        return new EntityProperty(value, 'Edm.Boolean');\r\n      },\r\n\r\n      String : function(value) {\r\n        return new EntityProperty(value, 'Edm.String');\r\n      },\r\n\r\n      Guid : function(value) {\r\n        return new EntityProperty(value, 'Edm.Guid');\r\n      },\r\n\r\n      Double : function(value) {\r\n        return new EntityProperty(value, 'Edm.Double');\r\n      },\r\n\r\n      DateTime : function(value) {\r\n        return new EntityProperty(value, 'Edm.DateTime');\r\n      }\r\n    };\r\n  })()\r\n};\r\n\r\nmodule.exports = TableUtilities;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Expose 'StorageUtilities'.\r\n\r\n/**\r\n* Defines constants, enums, and utility functions for use with storage.\r\n* @namespace\r\n*/\r\nvar StorageUtilities = {\r\n\t/**\r\n  * Specifies the location mode used to decide which location the request should be sent to.\r\n  *\r\n  * @const\r\n  * @enum {number}\r\n  */\r\n  LocationMode: {\r\n    /** The primary location only */\r\n    PRIMARY_ONLY: 0,\r\n    /** The primary location first, then the secondary */\r\n    PRIMARY_THEN_SECONDARY: 1,\r\n    /** The secondary location only */\r\n    SECONDARY_ONLY: 2,\r\n    /** The secondary location first, then the primary */\r\n    SECONDARY_THEN_PRIMARY: 3\r\n  }\r\n};\r\n\r\nmodule.exports = StorageUtilities;","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n","module.exports = require(\"os\");","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar alpha = exports.alpha = {\n  'en-US': /^[A-Z]+$/i,\n  'bg-BG': /^[А-Я]+$/i,\n  'cs-CZ': /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,\n  'da-DK': /^[A-ZÆØÅ]+$/i,\n  'de-DE': /^[A-ZÄÖÜß]+$/i,\n  'el-GR': /^[Α-ω]+$/i,\n  'es-ES': /^[A-ZÁÉÍÑÓÚÜ]+$/i,\n  'fr-FR': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,\n  'it-IT': /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,\n  'nb-NO': /^[A-ZÆØÅ]+$/i,\n  'nl-NL': /^[A-ZÁÉËÏÓÖÜÚ]+$/i,\n  'nn-NO': /^[A-ZÆØÅ]+$/i,\n  'hu-HU': /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,\n  'pl-PL': /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,\n  'pt-PT': /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,\n  'ru-RU': /^[А-ЯЁ]+$/i,\n  'sk-SK': /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,\n  'sr-RS@latin': /^[A-ZČĆŽŠĐ]+$/i,\n  'sr-RS': /^[А-ЯЂЈЉЊЋЏ]+$/i,\n  'sv-SE': /^[A-ZÅÄÖ]+$/i,\n  'tr-TR': /^[A-ZÇĞİıÖŞÜ]+$/i,\n  'uk-UA': /^[А-ЩЬЮЯЄIЇҐі]+$/i,\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/\n};\n\nvar alphanumeric = exports.alphanumeric = {\n  'en-US': /^[0-9A-Z]+$/i,\n  'bg-BG': /^[0-9А-Я]+$/i,\n  'cs-CZ': /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,\n  'da-DK': /^[0-9A-ZÆØÅ]+$/i,\n  'de-DE': /^[0-9A-ZÄÖÜß]+$/i,\n  'el-GR': /^[0-9Α-ω]+$/i,\n  'es-ES': /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,\n  'fr-FR': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,\n  'it-IT': /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,\n  'hu-HU': /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,\n  'nb-NO': /^[0-9A-ZÆØÅ]+$/i,\n  'nl-NL': /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,\n  'nn-NO': /^[0-9A-ZÆØÅ]+$/i,\n  'pl-PL': /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,\n  'pt-PT': /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,\n  'ru-RU': /^[0-9А-ЯЁ]+$/i,\n  'sk-SK': /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,\n  'sr-RS@latin': /^[0-9A-ZČĆŽŠĐ]+$/i,\n  'sr-RS': /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,\n  'sv-SE': /^[0-9A-ZÅÄÖ]+$/i,\n  'tr-TR': /^[0-9A-ZÇĞİıÖŞÜ]+$/i,\n  'uk-UA': /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/\n};\n\nvar decimal = exports.decimal = {\n  'en-US': '.',\n  ar: '٫'\n};\n\nvar englishLocales = exports.englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];\n\nfor (var locale, i = 0; i < englishLocales.length; i++) {\n  locale = 'en-' + englishLocales[i];\n  alpha[locale] = alpha['en-US'];\n  alphanumeric[locale] = alphanumeric['en-US'];\n  decimal[locale] = decimal['en-US'];\n}\n\n// Source: http://www.localeplanet.com/java/\nvar arabicLocales = exports.arabicLocales = ['AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY', 'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE'];\n\nfor (var _locale, _i = 0; _i < arabicLocales.length; _i++) {\n  _locale = 'ar-' + arabicLocales[_i];\n  alpha[_locale] = alpha.ar;\n  alphanumeric[_locale] = alphanumeric.ar;\n  decimal[_locale] = decimal.ar;\n}\n\n// Source: https://en.wikipedia.org/wiki/Decimal_mark\nvar dotDecimal = exports.dotDecimal = [];\nvar commaDecimal = exports.commaDecimal = ['bg-BG', 'cs-CZ', 'da-DK', 'de-DE', 'el-GR', 'es-ES', 'fr-FR', 'it-IT', 'hu-HU', 'nb-NO', 'nn-NO', 'nl-NL', 'pl-Pl', 'pt-PT', 'ru-RU', 'sr-RS@latin', 'sr-RS', 'sv-SE', 'tr-TR', 'uk-UA'];\n\nfor (var _i2 = 0; _i2 < dotDecimal.length; _i2++) {\n  decimal[dotDecimal[_i2]] = decimal['en-US'];\n}\n\nfor (var _i3 = 0; _i3 < commaDecimal.length; _i3++) {\n  decimal[commaDecimal[_i3]] = ',';\n}\n\nalpha['pt-BR'] = alpha['pt-PT'];\nalphanumeric['pt-BR'] = alphanumeric['pt-PT'];\ndecimal['pt-BR'] = decimal['pt-PT'];","// Generated by CoffeeScript 1.3.3\n(function() {\n  var XMLBuilder;\n\n  XMLBuilder = require('./XMLBuilder');\n\n  module.exports.create = function(name, xmldec, doctype, options) {\n    if (name != null) {\n      return new XMLBuilder(name, xmldec, doctype, options).root();\n    } else {\n      return new XMLBuilder();\n    }\n  };\n\n}).call(this);\n","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n/**\r\n* Creates a new Logger object\r\n* @class\r\n* The Logger class is used to write log information.\r\n* \r\n* @constructor\r\n*\r\n* @param {string} [level]           The log level. Refer to Logger.LogLevels.\r\n* @param {object} [loggerFunction]  The function to write log information.\r\n*/\r\nfunction Logger(level, loggerFunction) {\r\n  /**\r\n   * The log level. Refer to the Logger.LogLevels for available log levels. \r\n   * @name  Logger#level\r\n   * @type  {string}\r\n   * @see Logger.LogLevels\r\n   */\r\n  this.level = level;\r\n  \r\n  this.loggerFunction = loggerFunction;\r\n\r\n  if (!this.loggerFunction) {\r\n    this.loggerFunction = this.defaultLoggerFunction;\r\n  }\r\n}\r\n\r\n/**\r\n* The available log levels.\r\n*\r\n* @const\r\n* @enum {string}\r\n*/\r\nLogger.LogLevels = {\r\n  /**\r\n  * System is unusable.\r\n  */\r\n  EMERGENCY: 'emergency',\r\n\r\n  /**\r\n  * Action must be taken immediately.\r\n  */\r\n  ALERT : 'alert',\r\n\r\n  /**\r\n  * Critical condition.\r\n  */\r\n  CRITICAL : 'critical',\r\n\r\n  /**\r\n  * Error condition.\r\n  */\r\n  ERROR : 'error',\r\n\r\n  /**\r\n  * Warning condition.\r\n  */\r\n  WARNING : 'warning',\r\n\r\n  /**\r\n  * Normal but significant condition.\r\n  */\r\n  NOTICE : 'notice',\r\n\r\n  /**\r\n  * Purely informational message.\r\n  */\r\n  INFO : 'info',\r\n\r\n  /**\r\n  * Application debug messages.\r\n  */\r\n  DEBUG : 'debug'\r\n};\r\n\r\nLogger.logPriority = [\r\n  Logger.LogLevels.EMERGENCY,\r\n  Logger.LogLevels.ALERT,\r\n  Logger.LogLevels.CRITICAL,\r\n  Logger.LogLevels.ERROR,\r\n  Logger.LogLevels.WARNING,\r\n  Logger.LogLevels.NOTICE,\r\n  Logger.LogLevels.INFO,\r\n  Logger.LogLevels.DEBUG\r\n];\r\n\r\nLogger.prototype.log = function (level, msg) {\r\n  this.loggerFunction(level, msg);\r\n};\r\n\r\nLogger.prototype.emergency = function(msg) {\r\n  this.log(Logger.LogLevels.EMERGENCY, msg);\r\n};\r\n\r\nLogger.prototype.critical = function(msg) {\r\n  this.log(Logger.LogLevels.CRITICAL, msg);\r\n};\r\n\r\nLogger.prototype.alert = function(msg) {\r\n  this.log(Logger.LogLevels.ALERT, msg);\r\n};\r\n\r\nLogger.prototype.error = function(msg) {\r\n  this.log(Logger.LogLevels.ERROR, msg);\r\n};\r\n\r\nLogger.prototype.warn = function(msg) {\r\n  this.log(Logger.LogLevels.WARNING, msg);\r\n};\r\n\r\nLogger.prototype.notice = function(msg) {\r\n  this.log(Logger.LogLevels.NOTICE, msg);\r\n};\r\n\r\nLogger.prototype.info = function(msg) {\r\n  this.log(Logger.LogLevels.INFO, msg);\r\n};\r\n\r\nLogger.prototype.debug = function(msg) {\r\n  this.log(Logger.LogLevels.DEBUG, msg);\r\n};\r\n\r\nLogger.prototype.defaultLoggerFunction = function(logLevel , msg) {\r\n  var currentLevelIndex = Logger.logPriority.indexOf(this.level);\r\n  var logLevelIndex = Logger.logPriority.indexOf(logLevel);\r\n  var time = new Date();\r\n  var timeStamp = time.toISOString();\r\n  if (logLevelIndex <= currentLevelIndex) {\r\n    console.log('[' + timeStamp + ']' + this.level + ' : ' + msg);\r\n  }\r\n};\r\n\r\nmodule.exports = Logger;\r\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","'use strict'\n\nvar jsonSafeStringify = require('json-stringify-safe')\nvar crypto = require('crypto')\nvar Buffer = require('safe-buffer').Buffer\n\nvar defer = typeof setImmediate === 'undefined'\n  ? process.nextTick\n  : setImmediate\n\nfunction paramsHaveRequestBody (params) {\n  return (\n    params.body ||\n    params.requestBodyStream ||\n    (params.json && typeof params.json !== 'boolean') ||\n    params.multipart\n  )\n}\n\nfunction safeStringify (obj, replacer) {\n  var ret\n  try {\n    ret = JSON.stringify(obj, replacer)\n  } catch (e) {\n    ret = jsonSafeStringify(obj, replacer)\n  }\n  return ret\n}\n\nfunction md5 (str) {\n  return crypto.createHash('md5').update(str).digest('hex')\n}\n\nfunction isReadStream (rs) {\n  return rs.readable && rs.path && rs.mode\n}\n\nfunction toBase64 (str) {\n  return Buffer.from(str || '', 'utf8').toString('base64')\n}\n\nfunction copy (obj) {\n  var o = {}\n  Object.keys(obj).forEach(function (i) {\n    o[i] = obj[i]\n  })\n  return o\n}\n\nfunction version () {\n  var numbers = process.version.replace('v', '').split('.')\n  return {\n    major: parseInt(numbers[0], 10),\n    minor: parseInt(numbers[1], 10),\n    patch: parseInt(numbers[2], 10)\n  }\n}\n\nexports.paramsHaveRequestBody = paramsHaveRequestBody\nexports.safeStringify = safeStringify\nexports.md5 = md5\nexports.isReadStream = isReadStream\nexports.toBase64 = toBase64\nexports.copy = copy\nexports.version = version\nexports.defer = defer\n","exports = module.exports = stringify\nexports.getSerialize = serializer\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [], keys = []\n\n  if (cycleReplacer == null) cycleReplacer = function(key, value) {\n    if (stack[0] === value) return \"[Circular ~]\"\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\"\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this)\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\n      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)\n    }\n    else stack.push(value)\n\n    return replacer == null ? value : replacer.call(this, key, value)\n  }\n}\n","\n/*!\n *  Copyright 2010 LearnBoost <dev@learnboost.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto')\n  , parse = require('url').parse\n  ;\n\n/**\n * Valid keys.\n */\n\nvar keys = \n  [ 'acl'\n  , 'location'\n  , 'logging'\n  , 'notification'\n  , 'partNumber'\n  , 'policy'\n  , 'requestPayment'\n  , 'torrent'\n  , 'uploadId'\n  , 'uploads'\n  , 'versionId'\n  , 'versioning'\n  , 'versions'\n  , 'website'\n  ]\n\n/**\n * Return an \"Authorization\" header value with the given `options`\n * in the form of \"AWS <key>:<signature>\"\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nfunction authorization (options) {\n  return 'AWS ' + options.key + ':' + sign(options)\n}\n\nmodule.exports = authorization\nmodule.exports.authorization = authorization\n\n/**\n * Simple HMAC-SHA1 Wrapper\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */ \n\nfunction hmacSha1 (options) {\n  return crypto.createHmac('sha1', options.secret).update(options.message).digest('base64')\n}\n\nmodule.exports.hmacSha1 = hmacSha1\n\n/**\n * Create a base64 sha1 HMAC for `options`. \n * \n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nfunction sign (options) {\n  options.message = stringToSign(options)\n  return hmacSha1(options)\n}\nmodule.exports.sign = sign\n\n/**\n * Create a base64 sha1 HMAC for `options`. \n *\n * Specifically to be used with S3 presigned URLs\n * \n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nfunction signQuery (options) {\n  options.message = queryStringToSign(options)\n  return hmacSha1(options)\n}\nmodule.exports.signQuery= signQuery\n\n/**\n * Return a string for sign() with the given `options`.\n *\n * Spec:\n * \n *    <verb>\\n\n *    <md5>\\n\n *    <content-type>\\n\n *    <date>\\n\n *    [headers\\n]\n *    <resource>\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nfunction stringToSign (options) {\n  var headers = options.amazonHeaders || ''\n  if (headers) headers += '\\n'\n  var r = \n    [ options.verb\n    , options.md5\n    , options.contentType\n    , options.date ? options.date.toUTCString() : ''\n    , headers + options.resource\n    ]\n  return r.join('\\n')\n}\nmodule.exports.stringToSign = stringToSign\n\n/**\n * Return a string for sign() with the given `options`, but is meant exclusively\n * for S3 presigned URLs\n *\n * Spec:\n * \n *    <date>\\n\n *    <resource>\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nfunction queryStringToSign (options){\n  return 'GET\\n\\n\\n' + options.date + '\\n' + options.resource\n}\nmodule.exports.queryStringToSign = queryStringToSign\n\n/**\n * Perform the following:\n *\n *  - ignore non-amazon headers\n *  - lowercase fields\n *  - sort lexicographically\n *  - trim whitespace between \":\"\n *  - join with newline\n *\n * @param {Object} headers\n * @return {String}\n * @api private\n */\n\nfunction canonicalizeHeaders (headers) {\n  var buf = []\n    , fields = Object.keys(headers)\n    ;\n  for (var i = 0, len = fields.length; i < len; ++i) {\n    var field = fields[i]\n      , val = headers[field]\n      , field = field.toLowerCase()\n      ;\n    if (0 !== field.indexOf('x-amz')) continue\n    buf.push(field + ':' + val)\n  }\n  return buf.sort().join('\\n')\n}\nmodule.exports.canonicalizeHeaders = canonicalizeHeaders\n\n/**\n * Perform the following:\n *\n *  - ignore non sub-resources\n *  - sort lexicographically\n *\n * @param {String} resource\n * @return {String}\n * @api private\n */\n\nfunction canonicalizeResource (resource) {\n  var url = parse(resource, true)\n    , path = url.pathname\n    , buf = []\n    ;\n\n  Object.keys(url.query).forEach(function(key){\n    if (!~keys.indexOf(key)) return\n    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key])\n    buf.push(key + val)\n  })\n\n  return path + (buf.length ? '?' + buf.sort().join('&') : '')\n}\nmodule.exports.canonicalizeResource = canonicalizeResource\n","// Copyright 2015 Joyent, Inc.\n\nvar parser = require('./parser');\nvar signer = require('./signer');\nvar verify = require('./verify');\nvar utils = require('./utils');\n\n\n\n///--- API\n\nmodule.exports = {\n\n  parse: parser.parseRequest,\n  parseRequest: parser.parseRequest,\n\n  sign: signer.signRequest,\n  signRequest: signer.signRequest,\n  createSigner: signer.createSigner,\n  isSigner: signer.isSigner,\n\n  sshKeyToPEM: utils.sshKeyToPEM,\n  sshKeyFingerprint: utils.fingerprint,\n  pemToRsaSSHKey: utils.pemToRsaSSHKey,\n\n  verify: verify.verifySignature,\n  verifySignature: verify.verifySignature,\n  verifyHMAC: verify.verifyHMAC\n};\n","// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar util = require('util');\nvar utils = require('./utils');\n\n\n\n///--- Globals\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\nvar State = {\n  New: 0,\n  Params: 1\n};\n\nvar ParamsState = {\n  Name: 0,\n  Quote: 1,\n  Value: 2,\n  Comma: 3\n};\n\n\n///--- Specific Errors\n\n\nfunction ExpiredRequestError(message) {\n  HttpSignatureError.call(this, message, ExpiredRequestError);\n}\nutil.inherits(ExpiredRequestError, HttpSignatureError);\n\n\nfunction InvalidHeaderError(message) {\n  HttpSignatureError.call(this, message, InvalidHeaderError);\n}\nutil.inherits(InvalidHeaderError, HttpSignatureError);\n\n\nfunction InvalidParamsError(message) {\n  HttpSignatureError.call(this, message, InvalidParamsError);\n}\nutil.inherits(InvalidParamsError, HttpSignatureError);\n\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n///--- Exported API\n\nmodule.exports = {\n\n  /**\n   * Parses the 'Authorization' header out of an http.ServerRequest object.\n   *\n   * Note that this API will fully validate the Authorization header, and throw\n   * on any error.  It will not however check the signature, or the keyId format\n   * as those are specific to your environment.  You can use the options object\n   * to pass in extra constraints.\n   *\n   * As a response object you can expect this:\n   *\n   *     {\n   *       \"scheme\": \"Signature\",\n   *       \"params\": {\n   *         \"keyId\": \"foo\",\n   *         \"algorithm\": \"rsa-sha256\",\n   *         \"headers\": [\n   *           \"date\" or \"x-date\",\n   *           \"digest\"\n   *         ],\n   *         \"signature\": \"base64\"\n   *       },\n   *       \"signingString\": \"ready to be passed to crypto.verify()\"\n   *     }\n   *\n   * @param {Object} request an http.ServerRequest.\n   * @param {Object} options an optional options object with:\n   *                   - clockSkew: allowed clock skew in seconds (default 300).\n   *                   - headers: required header names (def: date or x-date)\n   *                   - algorithms: algorithms to support (default: all).\n   *                   - strict: should enforce latest spec parsing\n   *                             (default: false).\n   * @return {Object} parsed out object (see above).\n   * @throws {TypeError} on invalid input.\n   * @throws {InvalidHeaderError} on an invalid Authorization header error.\n   * @throws {InvalidParamsError} if the params in the scheme are invalid.\n   * @throws {MissingHeaderError} if the params indicate a header not present,\n   *                              either in the request headers from the params,\n   *                              or not in the params from a required header\n   *                              in options.\n   * @throws {StrictParsingError} if old attributes are used in strict parsing\n   *                              mode.\n   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.\n   */\n  parseRequest: function parseRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(request.headers, 'request.headers');\n    if (options === undefined) {\n      options = {};\n    }\n    if (options.headers === undefined) {\n      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];\n    }\n    assert.object(options, 'options');\n    assert.arrayOfString(options.headers, 'options.headers');\n    assert.optionalFinite(options.clockSkew, 'options.clockSkew');\n\n    var authzHeaderName = options.authorizationHeaderName || 'authorization';\n\n    if (!request.headers[authzHeaderName]) {\n      throw new MissingHeaderError('no ' + authzHeaderName + ' header ' +\n                                   'present in the request');\n    }\n\n    options.clockSkew = options.clockSkew || 300;\n\n\n    var i = 0;\n    var state = State.New;\n    var substate = ParamsState.Name;\n    var tmpName = '';\n    var tmpValue = '';\n\n    var parsed = {\n      scheme: '',\n      params: {},\n      signingString: ''\n    };\n\n    var authz = request.headers[authzHeaderName];\n    for (i = 0; i < authz.length; i++) {\n      var c = authz.charAt(i);\n\n      switch (Number(state)) {\n\n      case State.New:\n        if (c !== ' ') parsed.scheme += c;\n        else state = State.Params;\n        break;\n\n      case State.Params:\n        switch (Number(substate)) {\n\n        case ParamsState.Name:\n          var code = c.charCodeAt(0);\n          // restricted name of A-Z / a-z\n          if ((code >= 0x41 && code <= 0x5a) || // A-Z\n              (code >= 0x61 && code <= 0x7a)) { // a-z\n            tmpName += c;\n          } else if (c === '=') {\n            if (tmpName.length === 0)\n              throw new InvalidHeaderError('bad param format');\n            substate = ParamsState.Quote;\n          } else {\n            throw new InvalidHeaderError('bad param format');\n          }\n          break;\n\n        case ParamsState.Quote:\n          if (c === '\"') {\n            tmpValue = '';\n            substate = ParamsState.Value;\n          } else {\n            throw new InvalidHeaderError('bad param format');\n          }\n          break;\n\n        case ParamsState.Value:\n          if (c === '\"') {\n            parsed.params[tmpName] = tmpValue;\n            substate = ParamsState.Comma;\n          } else {\n            tmpValue += c;\n          }\n          break;\n\n        case ParamsState.Comma:\n          if (c === ',') {\n            tmpName = '';\n            substate = ParamsState.Name;\n          } else {\n            throw new InvalidHeaderError('bad param format');\n          }\n          break;\n\n        default:\n          throw new Error('Invalid substate');\n        }\n        break;\n\n      default:\n        throw new Error('Invalid substate');\n      }\n\n    }\n\n    if (!parsed.params.headers || parsed.params.headers === '') {\n      if (request.headers['x-date']) {\n        parsed.params.headers = ['x-date'];\n      } else {\n        parsed.params.headers = ['date'];\n      }\n    } else {\n      parsed.params.headers = parsed.params.headers.split(' ');\n    }\n\n    // Minimally validate the parsed object\n    if (!parsed.scheme || parsed.scheme !== 'Signature')\n      throw new InvalidHeaderError('scheme was not \"Signature\"');\n\n    if (!parsed.params.keyId)\n      throw new InvalidHeaderError('keyId was not specified');\n\n    if (!parsed.params.algorithm)\n      throw new InvalidHeaderError('algorithm was not specified');\n\n    if (!parsed.params.signature)\n      throw new InvalidHeaderError('signature was not specified');\n\n    // Check the algorithm against the official list\n    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();\n    try {\n      validateAlgorithm(parsed.params.algorithm);\n    } catch (e) {\n      if (e instanceof InvalidAlgorithmError)\n        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +\n          'supported'));\n      else\n        throw (e);\n    }\n\n    // Build the signingString\n    for (i = 0; i < parsed.params.headers.length; i++) {\n      var h = parsed.params.headers[i].toLowerCase();\n      parsed.params.headers[i] = h;\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /*\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          parsed.signingString +=\n            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        parsed.signingString +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.url;\n      } else {\n        var value = request.headers[h];\n        if (value === undefined)\n          throw new MissingHeaderError(h + ' was not in the request');\n        parsed.signingString += h + ': ' + value;\n      }\n\n      if ((i + 1) < parsed.params.headers.length)\n        parsed.signingString += '\\n';\n    }\n\n    // Check against the constraints\n    var date;\n    if (request.headers.date || request.headers['x-date']) {\n        if (request.headers['x-date']) {\n          date = new Date(request.headers['x-date']);\n        } else {\n          date = new Date(request.headers.date);\n        }\n      var now = new Date();\n      var skew = Math.abs(now.getTime() - date.getTime());\n\n      if (skew > options.clockSkew * 1000) {\n        throw new ExpiredRequestError('clock skew of ' +\n                                      (skew / 1000) +\n                                      's was greater than ' +\n                                      options.clockSkew + 's');\n      }\n    }\n\n    options.headers.forEach(function (hdr) {\n      // Remember that we already checked any headers in the params\n      // were in the request, so if this passes we're good.\n      if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0)\n        throw new MissingHeaderError(hdr + ' was not a signed header');\n    });\n\n    if (options.algorithms) {\n      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)\n        throw new InvalidParamsError(parsed.params.algorithm +\n                                     ' is not a supported algorithm');\n    }\n\n    parsed.algorithm = parsed.params.algorithm.toUpperCase();\n    parsed.keyId = parsed.params.keyId;\n    return parsed;\n  }\n\n};\n","// Named EC curves\n\n// Requires ec.js, jsbn.js, and jsbn2.js\nvar BigInteger = require('jsbn').BigInteger\nvar ECCurveFp = require('./ec.js').ECCurveFp\n\n\n// ----------------\n// X9ECParameters\n\n// constructor\nfunction X9ECParameters(curve,g,n,h) {\n    this.curve = curve;\n    this.g = g;\n    this.n = n;\n    this.h = h;\n}\n\nfunction x9getCurve() {\n    return this.curve;\n}\n\nfunction x9getG() {\n    return this.g;\n}\n\nfunction x9getN() {\n    return this.n;\n}\n\nfunction x9getH() {\n    return this.h;\n}\n\nX9ECParameters.prototype.getCurve = x9getCurve;\nX9ECParameters.prototype.getG = x9getG;\nX9ECParameters.prototype.getN = x9getN;\nX9ECParameters.prototype.getH = x9getH;\n\n// ----------------\n// SECNamedCurves\n\nfunction fromHex(s) { return new BigInteger(s, 16); }\n\nfunction secp128r1() {\n    // p = 2^128 - 2^97 - 1\n    var p = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"E87579C11079F43DD824993C2CEE5ED3\");\n    //byte[] S = Hex.decode(\"000E0D4D696E6768756151750CC03A4473D03679\");\n    var n = fromHex(\"FFFFFFFE0000000075A30D1B9038A115\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"161FF7528B899B2D0C28607CA52C5B86\"\n\t\t+ \"CF5AC8395BAFEB13C02DA292DDED7A83\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp160k1() {\n    // p = 2^160 - 2^32 - 2^14 - 2^12 - 2^9 - 2^8 - 2^7 - 2^3 - 2^2 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"7\");\n    //byte[] S = null;\n    var n = fromHex(\"0100000000000000000001B8FA16DFAB9ACA16B6B3\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\"\n                + \"938CF935318FDCED6BC28286531733C3F03C4FEE\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp160r1() {\n    // p = 2^160 - 2^31 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\");\n    var b = fromHex(\"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\");\n    //byte[] S = Hex.decode(\"1053CDE42C14D696E67687561517533BF3F83345\");\n    var n = fromHex(\"0100000000000000000001F4C8F927AED3CA752257\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n\t\t+ \"4A96B5688EF573284664698968C38BB913CBFC82\"\n\t\t+ \"23A628553168947D59DCC912042351377AC5FB32\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp192k1() {\n    // p = 2^192 - 2^32 - 2^12 - 2^8 - 2^7 - 2^6 - 2^3 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"3\");\n    //byte[] S = null;\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\"\n                + \"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp192r1() {\n    // p = 2^192 - 2^64 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\");\n    //byte[] S = Hex.decode(\"3045AE6FC8422F64ED579528D38120EAE12196D5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\"\n                + \"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp224r1() {\n    // p = 2^224 - 2^96 + 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\");\n    var b = fromHex(\"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\");\n    //byte[] S = Hex.decode(\"BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\"\n                + \"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp256r1() {\n    // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1\n    var p = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\");\n    //byte[] S = Hex.decode(\"C49D360886E704936A6678E1139D26B7819F7E90\");\n    var n = fromHex(\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\"\n\t\t+ \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\n// TODO: make this into a proper hashtable\nfunction getSECCurveByName(name) {\n    if(name == \"secp128r1\") return secp128r1();\n    if(name == \"secp160k1\") return secp160k1();\n    if(name == \"secp160r1\") return secp160r1();\n    if(name == \"secp192k1\") return secp192k1();\n    if(name == \"secp192r1\") return secp192r1();\n    if(name == \"secp224r1\") return secp224r1();\n    if(name == \"secp256r1\") return secp256r1();\n    return null;\n}\n\nmodule.exports = {\n  \"secp128r1\":secp128r1,\n  \"secp160k1\":secp160k1,\n  \"secp160r1\":secp160r1,\n  \"secp192k1\":secp192k1,\n  \"secp192r1\":secp192r1,\n  \"secp224r1\":secp224r1,\n  \"secp256r1\":secp256r1\n}\n","// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar errors = require('./errors');\nvar types = require('./types');\n\nvar Reader = require('./reader');\nvar Writer = require('./writer');\n\n\n///--- Exports\n\nmodule.exports = {\n\n  Reader: Reader,\n\n  Writer: Writer\n\n};\n\nfor (var t in types) {\n  if (types.hasOwnProperty(t))\n    module.exports[t] = types[t];\n}\nfor (var e in errors) {\n  if (errors.hasOwnProperty(e))\n    module.exports[e] = errors[e];\n}\n","// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = require('assert');\n\nvar ASN1 = require('./types');\nvar errors = require('./errors');\n\n\n///--- Globals\n\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n\n\n\n///--- API\n\nfunction Reader(data) {\n  if (!data || !Buffer.isBuffer(data))\n    throw new TypeError('data must be a node Buffer');\n\n  this._buf = data;\n  this._size = data.length;\n\n  // These hold the \"current\" state\n  this._len = 0;\n  this._offset = 0;\n}\n\nObject.defineProperty(Reader.prototype, 'length', {\n  enumerable: true,\n  get: function () { return (this._len); }\n});\n\nObject.defineProperty(Reader.prototype, 'offset', {\n  enumerable: true,\n  get: function () { return (this._offset); }\n});\n\nObject.defineProperty(Reader.prototype, 'remain', {\n  get: function () { return (this._size - this._offset); }\n});\n\nObject.defineProperty(Reader.prototype, 'buffer', {\n  get: function () { return (this._buf.slice(this._offset)); }\n});\n\n\n/**\n * Reads a single byte and advances offset; you can pass in `true` to make this\n * a \"peek\" operation (i.e., get the byte, but don't advance the offset).\n *\n * @param {Boolean} peek true means don't move offset.\n * @return {Number} the next byte, null if not enough data.\n */\nReader.prototype.readByte = function(peek) {\n  if (this._size - this._offset < 1)\n    return null;\n\n  var b = this._buf[this._offset] & 0xff;\n\n  if (!peek)\n    this._offset += 1;\n\n  return b;\n};\n\n\nReader.prototype.peek = function() {\n  return this.readByte(true);\n};\n\n\n/**\n * Reads a (potentially) variable length off the BER buffer.  This call is\n * not really meant to be called directly, as callers have to manipulate\n * the internal buffer afterwards.\n *\n * As a result of this call, you can call `Reader.length`, until the\n * next thing called that does a readLength.\n *\n * @return {Number} the amount of offset to advance the buffer.\n * @throws {InvalidAsn1Error} on bad ASN.1\n */\nReader.prototype.readLength = function(offset) {\n  if (offset === undefined)\n    offset = this._offset;\n\n  if (offset >= this._size)\n    return null;\n\n  var lenB = this._buf[offset++] & 0xff;\n  if (lenB === null)\n    return null;\n\n  if ((lenB & 0x80) == 0x80) {\n    lenB &= 0x7f;\n\n    if (lenB == 0)\n      throw newInvalidAsn1Error('Indefinite length not supported');\n\n    if (lenB > 4)\n      throw newInvalidAsn1Error('encoding too long');\n\n    if (this._size - offset < lenB)\n      return null;\n\n    this._len = 0;\n    for (var i = 0; i < lenB; i++)\n      this._len = (this._len << 8) + (this._buf[offset++] & 0xff);\n\n  } else {\n    // Wasn't a variable length\n    this._len = lenB;\n  }\n\n  return offset;\n};\n\n\n/**\n * Parses the next sequence in this BER buffer.\n *\n * To get the length of the sequence, call `Reader.length`.\n *\n * @return {Number} the sequence's tag.\n */\nReader.prototype.readSequence = function(tag) {\n  var seq = this.peek();\n  if (seq === null)\n    return null;\n  if (tag !== undefined && tag !== seq)\n    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n                              ': got 0x' + seq.toString(16));\n\n  var o = this.readLength(this._offset + 1); // stored in `length`\n  if (o === null)\n    return null;\n\n  this._offset = o;\n  return seq;\n};\n\n\nReader.prototype.readInt = function() {\n  return this._readTag(ASN1.Integer);\n};\n\n\nReader.prototype.readBoolean = function() {\n  return (this._readTag(ASN1.Boolean) === 0 ? false : true);\n};\n\n\nReader.prototype.readEnumeration = function() {\n  return this._readTag(ASN1.Enumeration);\n};\n\n\nReader.prototype.readString = function(tag, retbuf) {\n  if (!tag)\n    tag = ASN1.OctetString;\n\n  var b = this.peek();\n  if (b === null)\n    return null;\n\n  if (b !== tag)\n    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n                              ': got 0x' + b.toString(16));\n\n  var o = this.readLength(this._offset + 1); // stored in `length`\n\n  if (o === null)\n    return null;\n\n  if (this.length > this._size - o)\n    return null;\n\n  this._offset = o;\n\n  if (this.length === 0)\n    return retbuf ? new Buffer(0) : '';\n\n  var str = this._buf.slice(this._offset, this._offset + this.length);\n  this._offset += this.length;\n\n  return retbuf ? str : str.toString('utf8');\n};\n\nReader.prototype.readOID = function(tag) {\n  if (!tag)\n    tag = ASN1.OID;\n\n  var b = this.readString(tag, true);\n  if (b === null)\n    return null;\n\n  var values = [];\n  var value = 0;\n\n  for (var i = 0; i < b.length; i++) {\n    var byte = b[i] & 0xff;\n\n    value <<= 7;\n    value += byte & 0x7f;\n    if ((byte & 0x80) == 0) {\n      values.push(value);\n      value = 0;\n    }\n  }\n\n  value = values.shift();\n  values.unshift(value % 40);\n  values.unshift((value / 40) >> 0);\n\n  return values.join('.');\n};\n\n\nReader.prototype._readTag = function(tag) {\n  assert.ok(tag !== undefined);\n\n  var b = this.peek();\n\n  if (b === null)\n    return null;\n\n  if (b !== tag)\n    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n                              ': got 0x' + b.toString(16));\n\n  var o = this.readLength(this._offset + 1); // stored in `length`\n  if (o === null)\n    return null;\n\n  if (this.length > 4)\n    throw newInvalidAsn1Error('Integer too long: ' + this.length);\n\n  if (this.length > this._size - o)\n    return null;\n  this._offset = o;\n\n  var fb = this._buf[this._offset];\n  var value = 0;\n\n  for (var i = 0; i < this.length; i++) {\n    value <<= 8;\n    value |= (this._buf[this._offset++] & 0xff);\n  }\n\n  if ((fb & 0x80) == 0x80 && i !== 4)\n    value -= (1 << (i * 8));\n\n  return value >> 0;\n};\n\n\n\n///--- Exported API\n\nmodule.exports = Reader;\n","// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = require('assert');\nvar ASN1 = require('./types');\nvar errors = require('./errors');\n\n\n///--- Globals\n\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n\nvar DEFAULT_OPTS = {\n  size: 1024,\n  growthFactor: 8\n};\n\n\n///--- Helpers\n\nfunction merge(from, to) {\n  assert.ok(from);\n  assert.equal(typeof(from), 'object');\n  assert.ok(to);\n  assert.equal(typeof(to), 'object');\n\n  var keys = Object.getOwnPropertyNames(from);\n  keys.forEach(function(key) {\n    if (to[key])\n      return;\n\n    var value = Object.getOwnPropertyDescriptor(from, key);\n    Object.defineProperty(to, key, value);\n  });\n\n  return to;\n}\n\n\n\n///--- API\n\nfunction Writer(options) {\n  options = merge(DEFAULT_OPTS, options || {});\n\n  this._buf = new Buffer(options.size || 1024);\n  this._size = this._buf.length;\n  this._offset = 0;\n  this._options = options;\n\n  // A list of offsets in the buffer where we need to insert\n  // sequence tag/len pairs.\n  this._seq = [];\n}\n\nObject.defineProperty(Writer.prototype, 'buffer', {\n  get: function () {\n    if (this._seq.length)\n      throw new InvalidAsn1Error(this._seq.length + ' unended sequence(s)');\n\n    return (this._buf.slice(0, this._offset));\n  }\n});\n\nWriter.prototype.writeByte = function(b) {\n  if (typeof(b) !== 'number')\n    throw new TypeError('argument must be a Number');\n\n  this._ensure(1);\n  this._buf[this._offset++] = b;\n};\n\n\nWriter.prototype.writeInt = function(i, tag) {\n  if (typeof(i) !== 'number')\n    throw new TypeError('argument must be a Number');\n  if (typeof(tag) !== 'number')\n    tag = ASN1.Integer;\n\n  var sz = 4;\n\n  while ((((i & 0xff800000) === 0) || ((i & 0xff800000) === 0xff800000 >> 0)) &&\n         (sz > 1)) {\n    sz--;\n    i <<= 8;\n  }\n\n  if (sz > 4)\n    throw new InvalidAsn1Error('BER ints cannot be > 0xffffffff');\n\n  this._ensure(2 + sz);\n  this._buf[this._offset++] = tag;\n  this._buf[this._offset++] = sz;\n\n  while (sz-- > 0) {\n    this._buf[this._offset++] = ((i & 0xff000000) >>> 24);\n    i <<= 8;\n  }\n\n};\n\n\nWriter.prototype.writeNull = function() {\n  this.writeByte(ASN1.Null);\n  this.writeByte(0x00);\n};\n\n\nWriter.prototype.writeEnumeration = function(i, tag) {\n  if (typeof(i) !== 'number')\n    throw new TypeError('argument must be a Number');\n  if (typeof(tag) !== 'number')\n    tag = ASN1.Enumeration;\n\n  return this.writeInt(i, tag);\n};\n\n\nWriter.prototype.writeBoolean = function(b, tag) {\n  if (typeof(b) !== 'boolean')\n    throw new TypeError('argument must be a Boolean');\n  if (typeof(tag) !== 'number')\n    tag = ASN1.Boolean;\n\n  this._ensure(3);\n  this._buf[this._offset++] = tag;\n  this._buf[this._offset++] = 0x01;\n  this._buf[this._offset++] = b ? 0xff : 0x00;\n};\n\n\nWriter.prototype.writeString = function(s, tag) {\n  if (typeof(s) !== 'string')\n    throw new TypeError('argument must be a string (was: ' + typeof(s) + ')');\n  if (typeof(tag) !== 'number')\n    tag = ASN1.OctetString;\n\n  var len = Buffer.byteLength(s);\n  this.writeByte(tag);\n  this.writeLength(len);\n  if (len) {\n    this._ensure(len);\n    this._buf.write(s, this._offset);\n    this._offset += len;\n  }\n};\n\n\nWriter.prototype.writeBuffer = function(buf, tag) {\n  if (typeof(tag) !== 'number')\n    throw new TypeError('tag must be a number');\n  if (!Buffer.isBuffer(buf))\n    throw new TypeError('argument must be a buffer');\n\n  this.writeByte(tag);\n  this.writeLength(buf.length);\n  this._ensure(buf.length);\n  buf.copy(this._buf, this._offset, 0, buf.length);\n  this._offset += buf.length;\n};\n\n\nWriter.prototype.writeStringArray = function(strings) {\n  if ((!strings instanceof Array))\n    throw new TypeError('argument must be an Array[String]');\n\n  var self = this;\n  strings.forEach(function(s) {\n    self.writeString(s);\n  });\n};\n\n// This is really to solve DER cases, but whatever for now\nWriter.prototype.writeOID = function(s, tag) {\n  if (typeof(s) !== 'string')\n    throw new TypeError('argument must be a string');\n  if (typeof(tag) !== 'number')\n    tag = ASN1.OID;\n\n  if (!/^([0-9]+\\.){3,}[0-9]+$/.test(s))\n    throw new Error('argument is not a valid OID string');\n\n  function encodeOctet(bytes, octet) {\n    if (octet < 128) {\n        bytes.push(octet);\n    } else if (octet < 16384) {\n        bytes.push((octet >>> 7) | 0x80);\n        bytes.push(octet & 0x7F);\n    } else if (octet < 2097152) {\n      bytes.push((octet >>> 14) | 0x80);\n      bytes.push(((octet >>> 7) | 0x80) & 0xFF);\n      bytes.push(octet & 0x7F);\n    } else if (octet < 268435456) {\n      bytes.push((octet >>> 21) | 0x80);\n      bytes.push(((octet >>> 14) | 0x80) & 0xFF);\n      bytes.push(((octet >>> 7) | 0x80) & 0xFF);\n      bytes.push(octet & 0x7F);\n    } else {\n      bytes.push(((octet >>> 28) | 0x80) & 0xFF);\n      bytes.push(((octet >>> 21) | 0x80) & 0xFF);\n      bytes.push(((octet >>> 14) | 0x80) & 0xFF);\n      bytes.push(((octet >>> 7) | 0x80) & 0xFF);\n      bytes.push(octet & 0x7F);\n    }\n  }\n\n  var tmp = s.split('.');\n  var bytes = [];\n  bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));\n  tmp.slice(2).forEach(function(b) {\n    encodeOctet(bytes, parseInt(b, 10));\n  });\n\n  var self = this;\n  this._ensure(2 + bytes.length);\n  this.writeByte(tag);\n  this.writeLength(bytes.length);\n  bytes.forEach(function(b) {\n    self.writeByte(b);\n  });\n};\n\n\nWriter.prototype.writeLength = function(len) {\n  if (typeof(len) !== 'number')\n    throw new TypeError('argument must be a Number');\n\n  this._ensure(4);\n\n  if (len <= 0x7f) {\n    this._buf[this._offset++] = len;\n  } else if (len <= 0xff) {\n    this._buf[this._offset++] = 0x81;\n    this._buf[this._offset++] = len;\n  } else if (len <= 0xffff) {\n    this._buf[this._offset++] = 0x82;\n    this._buf[this._offset++] = len >> 8;\n    this._buf[this._offset++] = len;\n  } else if (len <= 0xffffff) {\n    this._buf[this._offset++] = 0x83;\n    this._buf[this._offset++] = len >> 16;\n    this._buf[this._offset++] = len >> 8;\n    this._buf[this._offset++] = len;\n  } else {\n    throw new InvalidAsn1ERror('Length too long (> 4 bytes)');\n  }\n};\n\nWriter.prototype.startSequence = function(tag) {\n  if (typeof(tag) !== 'number')\n    tag = ASN1.Sequence | ASN1.Constructor;\n\n  this.writeByte(tag);\n  this._seq.push(this._offset);\n  this._ensure(3);\n  this._offset += 3;\n};\n\n\nWriter.prototype.endSequence = function() {\n  var seq = this._seq.pop();\n  var start = seq + 3;\n  var len = this._offset - start;\n\n  if (len <= 0x7f) {\n    this._shift(start, len, -2);\n    this._buf[seq] = len;\n  } else if (len <= 0xff) {\n    this._shift(start, len, -1);\n    this._buf[seq] = 0x81;\n    this._buf[seq + 1] = len;\n  } else if (len <= 0xffff) {\n    this._buf[seq] = 0x82;\n    this._buf[seq + 1] = len >> 8;\n    this._buf[seq + 2] = len;\n  } else if (len <= 0xffffff) {\n    this._shift(start, len, 1);\n    this._buf[seq] = 0x83;\n    this._buf[seq + 1] = len >> 16;\n    this._buf[seq + 2] = len >> 8;\n    this._buf[seq + 3] = len;\n  } else {\n    throw new InvalidAsn1Error('Sequence too long');\n  }\n};\n\n\nWriter.prototype._shift = function(start, len, shift) {\n  assert.ok(start !== undefined);\n  assert.ok(len !== undefined);\n  assert.ok(shift);\n\n  this._buf.copy(this._buf, start + shift, start, start + len);\n  this._offset += shift;\n};\n\nWriter.prototype._ensure = function(len) {\n  assert.ok(len);\n\n  if (this._size - this._offset < len) {\n    var sz = this._size * this._options.growthFactor;\n    if (sz - this._offset < len)\n      sz += len;\n\n    var buf = new Buffer(sz);\n\n    this._buf.copy(buf, 0, 0, this._offset);\n    this._buf = buf;\n    this._size = sz;\n  }\n};\n\n\n\n///--- Exported API\n\nmodule.exports = Writer;\n","// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\tverify: verify,\n\tsign: sign,\n\tsignAsync: signAsync,\n\twrite: write,\n\n\t/* Internal private API */\n\tfromBuffer: fromBuffer,\n\ttoBuffer: toBuffer\n};\n\nvar assert = require('assert-plus');\nvar SSHBuffer = require('../ssh-buffer');\nvar crypto = require('crypto');\nvar algs = require('../algs');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar Identity = require('../identity');\nvar rfc4253 = require('./rfc4253');\nvar Signature = require('../signature');\nvar utils = require('../utils');\nvar Certificate = require('../certificate');\n\nfunction verify(cert, key) {\n\t/*\n\t * We always give an issuerKey, so if our verify() is being called then\n\t * there was no signature. Return false.\n\t */\n\treturn (false);\n}\n\nvar TYPES = {\n\t'user': 1,\n\t'host': 2\n};\nObject.keys(TYPES).forEach(function (k) { TYPES[TYPES[k]] = k; });\n\nvar ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;\n\nfunction read(buf, options) {\n\tif (Buffer.isBuffer(buf))\n\t\tbuf = buf.toString('ascii');\n\tvar parts = buf.trim().split(/[ \\t\\n]+/g);\n\tif (parts.length < 2 || parts.length > 3)\n\t\tthrow (new Error('Not a valid SSH certificate line'));\n\n\tvar algo = parts[0];\n\tvar data = parts[1];\n\n\tdata = new Buffer(data, 'base64');\n\treturn (fromBuffer(data, algo));\n}\n\nfunction fromBuffer(data, algo, partial) {\n\tvar sshbuf = new SSHBuffer({ buffer: data });\n\tvar innerAlgo = sshbuf.readString();\n\tif (algo !== undefined && innerAlgo !== algo)\n\t\tthrow (new Error('SSH certificate algorithm mismatch'));\n\tif (algo === undefined)\n\t\talgo = innerAlgo;\n\n\tvar cert = {};\n\tcert.signatures = {};\n\tcert.signatures.openssh = {};\n\n\tcert.signatures.openssh.nonce = sshbuf.readBuffer();\n\n\tvar key = {};\n\tvar parts = (key.parts = []);\n\tkey.type = getAlg(algo);\n\n\tvar partCount = algs.info[key.type].parts.length;\n\twhile (parts.length < partCount)\n\t\tparts.push(sshbuf.readPart());\n\tassert.ok(parts.length >= 1, 'key must have at least one part');\n\n\tvar algInfo = algs.info[key.type];\n\tif (key.type === 'ecdsa') {\n\t\tvar res = ECDSA_ALGO.exec(algo);\n\t\tassert.ok(res !== null);\n\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t}\n\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tparts[i].name = algInfo.parts[i];\n\t\tif (parts[i].name !== 'curve' &&\n\t\t    algInfo.normalize !== false) {\n\t\t\tvar p = parts[i];\n\t\t\tp.data = utils.mpNormalize(p.data);\n\t\t}\n\t}\n\n\tcert.subjectKey = new Key(key);\n\n\tcert.serial = sshbuf.readInt64();\n\n\tvar type = TYPES[sshbuf.readInt()];\n\tassert.string(type, 'valid cert type');\n\n\tcert.signatures.openssh.keyId = sshbuf.readString();\n\n\tvar principals = [];\n\tvar pbuf = sshbuf.readBuffer();\n\tvar psshbuf = new SSHBuffer({ buffer: pbuf });\n\twhile (!psshbuf.atEnd())\n\t\tprincipals.push(psshbuf.readString());\n\tif (principals.length === 0)\n\t\tprincipals = ['*'];\n\n\tcert.subjects = principals.map(function (pr) {\n\t\tif (type === 'user')\n\t\t\treturn (Identity.forUser(pr));\n\t\telse if (type === 'host')\n\t\t\treturn (Identity.forHost(pr));\n\t\tthrow (new Error('Unknown identity type ' + type));\n\t});\n\n\tcert.validFrom = int64ToDate(sshbuf.readInt64());\n\tcert.validUntil = int64ToDate(sshbuf.readInt64());\n\n\tcert.signatures.openssh.critical = sshbuf.readBuffer();\n\tcert.signatures.openssh.exts = sshbuf.readBuffer();\n\n\t/* reserved */\n\tsshbuf.readBuffer();\n\n\tvar signingKeyBuf = sshbuf.readBuffer();\n\tcert.issuerKey = rfc4253.read(signingKeyBuf);\n\n\t/*\n\t * OpenSSH certs don't give the identity of the issuer, just their\n\t * public key. So, we use an Identity that matches anything. The\n\t * isSignedBy() function will later tell you if the key matches.\n\t */\n\tcert.issuer = Identity.forHost('**');\n\n\tvar sigBuf = sshbuf.readBuffer();\n\tcert.signatures.openssh.signature =\n\t    Signature.parse(sigBuf, cert.issuerKey.type, 'ssh');\n\n\tif (partial !== undefined) {\n\t\tpartial.remainder = sshbuf.remainder();\n\t\tpartial.consumed = sshbuf._offset;\n\t}\n\n\treturn (new Certificate(cert));\n}\n\nfunction int64ToDate(buf) {\n\tvar i = buf.readUInt32BE(0) * 4294967296;\n\ti += buf.readUInt32BE(4);\n\tvar d = new Date();\n\td.setTime(i * 1000);\n\td.sourceInt64 = buf;\n\treturn (d);\n}\n\nfunction dateToInt64(date) {\n\tif (date.sourceInt64 !== undefined)\n\t\treturn (date.sourceInt64);\n\tvar i = Math.round(date.getTime() / 1000);\n\tvar upper = Math.floor(i / 4294967296);\n\tvar lower = Math.floor(i % 4294967296);\n\tvar buf = new Buffer(8);\n\tbuf.writeUInt32BE(upper, 0);\n\tbuf.writeUInt32BE(lower, 4);\n\treturn (buf);\n}\n\nfunction sign(cert, key) {\n\tif (cert.signatures.openssh === undefined)\n\t\tcert.signatures.openssh = {};\n\ttry {\n\t\tvar blob = toBuffer(cert, true);\n\t} catch (e) {\n\t\tdelete (cert.signatures.openssh);\n\t\treturn (false);\n\t}\n\tvar sig = cert.signatures.openssh;\n\tvar hashAlgo = undefined;\n\tif (key.type === 'rsa' || key.type === 'dsa')\n\t\thashAlgo = 'sha1';\n\tvar signer = key.createSign(hashAlgo);\n\tsigner.write(blob);\n\tsig.signature = signer.sign();\n\treturn (true);\n}\n\nfunction signAsync(cert, signer, done) {\n\tif (cert.signatures.openssh === undefined)\n\t\tcert.signatures.openssh = {};\n\ttry {\n\t\tvar blob = toBuffer(cert, true);\n\t} catch (e) {\n\t\tdelete (cert.signatures.openssh);\n\t\tdone(e);\n\t\treturn;\n\t}\n\tvar sig = cert.signatures.openssh;\n\n\tsigner(blob, function (err, signature) {\n\t\tif (err) {\n\t\t\tdone(err);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\t/*\n\t\t\t * This will throw if the signature isn't of a\n\t\t\t * type/algo that can be used for SSH.\n\t\t\t */\n\t\t\tsignature.toBuffer('ssh');\n\t\t} catch (e) {\n\t\t\tdone(e);\n\t\t\treturn;\n\t\t}\n\t\tsig.signature = signature;\n\t\tdone();\n\t});\n}\n\nfunction write(cert, options) {\n\tif (options === undefined)\n\t\toptions = {};\n\n\tvar blob = toBuffer(cert);\n\tvar out = getCertType(cert.subjectKey) + ' ' + blob.toString('base64');\n\tif (options.comment)\n\t\tout = out + ' ' + options.comment;\n\treturn (out);\n}\n\n\nfunction toBuffer(cert, noSig) {\n\tassert.object(cert.signatures.openssh, 'signature for openssh format');\n\tvar sig = cert.signatures.openssh;\n\n\tif (sig.nonce === undefined)\n\t\tsig.nonce = crypto.randomBytes(16);\n\tvar buf = new SSHBuffer({});\n\tbuf.writeString(getCertType(cert.subjectKey));\n\tbuf.writeBuffer(sig.nonce);\n\n\tvar key = cert.subjectKey;\n\tvar algInfo = algs.info[key.type];\n\talgInfo.parts.forEach(function (part) {\n\t\tbuf.writePart(key.part[part]);\n\t});\n\n\tbuf.writeInt64(cert.serial);\n\n\tvar type = cert.subjects[0].type;\n\tassert.notStrictEqual(type, 'unknown');\n\tcert.subjects.forEach(function (id) {\n\t\tassert.strictEqual(id.type, type);\n\t});\n\ttype = TYPES[type];\n\tbuf.writeInt(type);\n\n\tif (sig.keyId === undefined) {\n\t\tsig.keyId = cert.subjects[0].type + '_' +\n\t\t    (cert.subjects[0].uid || cert.subjects[0].hostname);\n\t}\n\tbuf.writeString(sig.keyId);\n\n\tvar sub = new SSHBuffer({});\n\tcert.subjects.forEach(function (id) {\n\t\tif (type === TYPES.host)\n\t\t\tsub.writeString(id.hostname);\n\t\telse if (type === TYPES.user)\n\t\t\tsub.writeString(id.uid);\n\t});\n\tbuf.writeBuffer(sub.toBuffer());\n\n\tbuf.writeInt64(dateToInt64(cert.validFrom));\n\tbuf.writeInt64(dateToInt64(cert.validUntil));\n\n\tif (sig.critical === undefined)\n\t\tsig.critical = new Buffer(0);\n\tbuf.writeBuffer(sig.critical);\n\n\tif (sig.exts === undefined)\n\t\tsig.exts = new Buffer(0);\n\tbuf.writeBuffer(sig.exts);\n\n\t/* reserved */\n\tbuf.writeBuffer(new Buffer(0));\n\n\tsub = rfc4253.write(cert.issuerKey);\n\tbuf.writeBuffer(sub);\n\n\tif (!noSig)\n\t\tbuf.writeBuffer(sig.signature.toBuffer('ssh'));\n\n\treturn (buf.toBuffer());\n}\n\nfunction getAlg(certType) {\n\tif (certType === 'ssh-rsa-cert-v01@openssh.com')\n\t\treturn ('rsa');\n\tif (certType === 'ssh-dss-cert-v01@openssh.com')\n\t\treturn ('dsa');\n\tif (certType.match(ECDSA_ALGO))\n\t\treturn ('ecdsa');\n\tif (certType === 'ssh-ed25519-cert-v01@openssh.com')\n\t\treturn ('ed25519');\n\tthrow (new Error('Unsupported cert type ' + certType));\n}\n\nfunction getCertType(key) {\n\tif (key.type === 'rsa')\n\t\treturn ('ssh-rsa-cert-v01@openssh.com');\n\tif (key.type === 'dsa')\n\t\treturn ('ssh-dss-cert-v01@openssh.com');\n\tif (key.type === 'ecdsa')\n\t\treturn ('ecdsa-sha2-' + key.curve + '-cert-v01@openssh.com');\n\tif (key.type === 'ed25519')\n\t\treturn ('ssh-ed25519-cert-v01@openssh.com');\n\tthrow (new Error('Unsupported key type ' + key.type));\n}\n","// Copyright 2016 Joyent, Inc.\n\nvar x509 = require('./x509');\n\nmodule.exports = {\n\tread: read,\n\tverify: x509.verify,\n\tsign: x509.sign,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar Identity = require('../identity');\nvar Signature = require('../signature');\nvar Certificate = require('../certificate');\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar lines = buf.trim().split(/[\\r\\n]+/g);\n\n\tvar m = lines[0].match(/*JSSTYLED*/\n\t    /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);\n\tassert.ok(m, 'invalid PEM header');\n\n\tvar m2 = lines[lines.length - 1].match(/*JSSTYLED*/\n\t    /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);\n\tassert.ok(m2, 'invalid PEM footer');\n\n\tvar headers = {};\n\twhile (true) {\n\t\tlines = lines.slice(1);\n\t\tm = lines[0].match(/*JSSTYLED*/\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\n\t\tif (!m)\n\t\t\tbreak;\n\t\theaders[m[1].toLowerCase()] = m[2];\n\t}\n\n\t/* Chop off the first and last lines */\n\tlines = lines.slice(0, -1).join('');\n\tbuf = new Buffer(lines, 'base64');\n\n\treturn (x509.read(buf, options));\n}\n\nfunction write(cert, options) {\n\tvar dbuf = x509.write(cert, options);\n\n\tvar header = 'CERTIFICATE';\n\tvar tmp = dbuf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 64) +\n\t    18 + 16 + header.length*2 + 10;\n\tvar buf = new Buffer(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 64;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n","// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\n\nvar sprintf = require('util').format;\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_FMT =\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return ({\n        hashAlgorithm: alg[1],\n        toString: function () { return (digest); }\n      });\n    };\n\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n      key = sshpk.parsePrivateKey(key);\n\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n      'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (!PK_ALGOS[key.type]) {\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n        'keys are not supported'));\n    }\n\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw (new InvalidAlgorithmError('options.key must be a ' +\n        alg[0].toUpperCase() + ' key, was given a ' +\n        key.type.toUpperCase() + ' key instead'));\n    }\n\n    this.rs_signer = key.createSign(alg[1]);\n\n  } else {\n    throw (new TypeError('options.sign (func) or options.key is required'));\n  }\n\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n\n  this.rs_headers.push(header);\n\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0)\n      line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n\n  return (value);\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n\n  if (this.rs_headers.length < 1)\n    throw (new Error('At least one header must be signed'));\n\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n\n        authz = sprintf(AUTHZ_FMT,\n          sig.keyId,\n          sig.algorithm,\n          self.rs_headers.join(' '),\n          sig.signature);\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = sprintf(AUTHZ_FMT,\n      this.rs_keyId,\n      alg,\n      this.rs_headers.join(' '),\n      signature);\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n      return (true);\n    return (false);\n  },\n\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return (new RequestSigner(options));\n  },\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\n    if (!options.headers)\n      options.headers = ['date'];\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof (options.headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = options.headers[i].toLowerCase();\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign +=\n            request.method + ' ' + request.path + ' HTTP/' +\n            options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        stringToSign +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.path;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n\n      if ((i + 1) < options.headers.length)\n        stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n\n    var signature;\n    if (alg[0] === 'hmac') {\n      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n        throw (new TypeError('options.key must be a string or Buffer'));\n\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n\n    } else {\n      var key = options.key;\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n        key = sshpk.parsePrivateKey(options.key);\n\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n        'options.key must be a sshpk.PrivateKey');\n\n      if (!PK_ALGOS[key.type]) {\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n          'keys are not supported'));\n      }\n\n      if (alg[0] !== undefined && key.type !== alg[0]) {\n        throw (new InvalidAlgorithmError('options.key must be a ' +\n          alg[0].toUpperCase() + ' key, was given a ' +\n          key.type.toUpperCase() + ' key instead'));\n      }\n\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n          ' is not a supported hash algorithm'));\n      }\n      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n\n    var authzHeaderName = options.authorizationHeaderName || 'Authorization';\n\n    request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT,\n                                               options.keyId,\n                                               options.algorithm,\n                                               options.headers.join(' '),\n                                               signature));\n\n    return true;\n  }\n\n};\n","/*\n * lib/jsprim.js: utilities for primitive JavaScript types\n */\n\nvar mod_assert = require('assert-plus');\nvar mod_util = require('util');\n\nvar mod_extsprintf = require('extsprintf');\nvar mod_verror = require('verror');\nvar mod_jsonschema = require('json-schema');\n\n/*\n * Public interface\n */\nexports.deepCopy = deepCopy;\nexports.deepEqual = deepEqual;\nexports.isEmpty = isEmpty;\nexports.hasKey = hasKey;\nexports.forEachKey = forEachKey;\nexports.pluck = pluck;\nexports.flattenObject = flattenObject;\nexports.flattenIter = flattenIter;\nexports.validateJsonObject = validateJsonObjectJS;\nexports.validateJsonObjectJS = validateJsonObjectJS;\nexports.randElt = randElt;\nexports.extraProperties = extraProperties;\nexports.mergeObjects = mergeObjects;\n\nexports.startsWith = startsWith;\nexports.endsWith = endsWith;\n\nexports.parseInteger = parseInteger;\n\nexports.iso8601 = iso8601;\nexports.rfc1123 = rfc1123;\nexports.parseDateTime = parseDateTime;\n\nexports.hrtimediff = hrtimeDiff;\nexports.hrtimeDiff = hrtimeDiff;\nexports.hrtimeAccum = hrtimeAccum;\nexports.hrtimeAdd = hrtimeAdd;\nexports.hrtimeNanosec = hrtimeNanosec;\nexports.hrtimeMicrosec = hrtimeMicrosec;\nexports.hrtimeMillisec = hrtimeMillisec;\n\n\n/*\n * Deep copy an acyclic *basic* Javascript object.  This only handles basic\n * scalars (strings, numbers, booleans) and arbitrarily deep arrays and objects\n * containing these.  This does *not* handle instances of other classes.\n */\nfunction deepCopy(obj)\n{\n\tvar ret, key;\n\tvar marker = '__deepCopy';\n\n\tif (obj && obj[marker])\n\t\tthrow (new Error('attempted deep copy of cyclic object'));\n\n\tif (obj && obj.constructor == Object) {\n\t\tret = {};\n\t\tobj[marker] = true;\n\n\t\tfor (key in obj) {\n\t\t\tif (key == marker)\n\t\t\t\tcontinue;\n\n\t\t\tret[key] = deepCopy(obj[key]);\n\t\t}\n\n\t\tdelete (obj[marker]);\n\t\treturn (ret);\n\t}\n\n\tif (obj && obj.constructor == Array) {\n\t\tret = [];\n\t\tobj[marker] = true;\n\n\t\tfor (key = 0; key < obj.length; key++)\n\t\t\tret.push(deepCopy(obj[key]));\n\n\t\tdelete (obj[marker]);\n\t\treturn (ret);\n\t}\n\n\t/*\n\t * It must be a primitive type -- just return it.\n\t */\n\treturn (obj);\n}\n\nfunction deepEqual(obj1, obj2)\n{\n\tif (typeof (obj1) != typeof (obj2))\n\t\treturn (false);\n\n\tif (obj1 === null || obj2 === null || typeof (obj1) != 'object')\n\t\treturn (obj1 === obj2);\n\n\tif (obj1.constructor != obj2.constructor)\n\t\treturn (false);\n\n\tvar k;\n\tfor (k in obj1) {\n\t\tif (!obj2.hasOwnProperty(k))\n\t\t\treturn (false);\n\n\t\tif (!deepEqual(obj1[k], obj2[k]))\n\t\t\treturn (false);\n\t}\n\n\tfor (k in obj2) {\n\t\tif (!obj1.hasOwnProperty(k))\n\t\t\treturn (false);\n\t}\n\n\treturn (true);\n}\n\nfunction isEmpty(obj)\n{\n\tvar key;\n\tfor (key in obj)\n\t\treturn (false);\n\treturn (true);\n}\n\nfunction hasKey(obj, key)\n{\n\tmod_assert.equal(typeof (key), 'string');\n\treturn (Object.prototype.hasOwnProperty.call(obj, key));\n}\n\nfunction forEachKey(obj, callback)\n{\n\tfor (var key in obj) {\n\t\tif (hasKey(obj, key)) {\n\t\t\tcallback(key, obj[key]);\n\t\t}\n\t}\n}\n\nfunction pluck(obj, key)\n{\n\tmod_assert.equal(typeof (key), 'string');\n\treturn (pluckv(obj, key));\n}\n\nfunction pluckv(obj, key)\n{\n\tif (obj === null || typeof (obj) !== 'object')\n\t\treturn (undefined);\n\n\tif (obj.hasOwnProperty(key))\n\t\treturn (obj[key]);\n\n\tvar i = key.indexOf('.');\n\tif (i == -1)\n\t\treturn (undefined);\n\n\tvar key1 = key.substr(0, i);\n\tif (!obj.hasOwnProperty(key1))\n\t\treturn (undefined);\n\n\treturn (pluckv(obj[key1], key.substr(i + 1)));\n}\n\n/*\n * Invoke callback(row) for each entry in the array that would be returned by\n * flattenObject(data, depth).  This is just like flattenObject(data,\n * depth).forEach(callback), except that the intermediate array is never\n * created.\n */\nfunction flattenIter(data, depth, callback)\n{\n\tdoFlattenIter(data, depth, [], callback);\n}\n\nfunction doFlattenIter(data, depth, accum, callback)\n{\n\tvar each;\n\tvar key;\n\n\tif (depth === 0) {\n\t\teach = accum.slice(0);\n\t\teach.push(data);\n\t\tcallback(each);\n\t\treturn;\n\t}\n\n\tmod_assert.ok(data !== null);\n\tmod_assert.equal(typeof (data), 'object');\n\tmod_assert.equal(typeof (depth), 'number');\n\tmod_assert.ok(depth >= 0);\n\n\tfor (key in data) {\n\t\teach = accum.slice(0);\n\t\teach.push(key);\n\t\tdoFlattenIter(data[key], depth - 1, each, callback);\n\t}\n}\n\nfunction flattenObject(data, depth)\n{\n\tif (depth === 0)\n\t\treturn ([ data ]);\n\n\tmod_assert.ok(data !== null);\n\tmod_assert.equal(typeof (data), 'object');\n\tmod_assert.equal(typeof (depth), 'number');\n\tmod_assert.ok(depth >= 0);\n\n\tvar rv = [];\n\tvar key;\n\n\tfor (key in data) {\n\t\tflattenObject(data[key], depth - 1).forEach(function (p) {\n\t\t\trv.push([ key ].concat(p));\n\t\t});\n\t}\n\n\treturn (rv);\n}\n\nfunction startsWith(str, prefix)\n{\n\treturn (str.substr(0, prefix.length) == prefix);\n}\n\nfunction endsWith(str, suffix)\n{\n\treturn (str.substr(\n\t    str.length - suffix.length, suffix.length) == suffix);\n}\n\nfunction iso8601(d)\n{\n\tif (typeof (d) == 'number')\n\t\td = new Date(d);\n\tmod_assert.ok(d.constructor === Date);\n\treturn (mod_extsprintf.sprintf('%4d-%02d-%02dT%02d:%02d:%02d.%03dZ',\n\t    d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate(),\n\t    d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(),\n\t    d.getUTCMilliseconds()));\n}\n\nvar RFC1123_MONTHS = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nvar RFC1123_DAYS = [\n    'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nfunction rfc1123(date) {\n\treturn (mod_extsprintf.sprintf('%s, %02d %s %04d %02d:%02d:%02d GMT',\n\t    RFC1123_DAYS[date.getUTCDay()], date.getUTCDate(),\n\t    RFC1123_MONTHS[date.getUTCMonth()], date.getUTCFullYear(),\n\t    date.getUTCHours(), date.getUTCMinutes(),\n\t    date.getUTCSeconds()));\n}\n\n/*\n * Parses a date expressed as a string, as either a number of milliseconds since\n * the epoch or any string format that Date accepts, giving preference to the\n * former where these two sets overlap (e.g., small numbers).\n */\nfunction parseDateTime(str)\n{\n\t/*\n\t * This is irritatingly implicit, but significantly more concise than\n\t * alternatives.  The \"+str\" will convert a string containing only a\n\t * number directly to a Number, or NaN for other strings.  Thus, if the\n\t * conversion succeeds, we use it (this is the milliseconds-since-epoch\n\t * case).  Otherwise, we pass the string directly to the Date\n\t * constructor to parse.\n\t */\n\tvar numeric = +str;\n\tif (!isNaN(numeric)) {\n\t\treturn (new Date(numeric));\n\t} else {\n\t\treturn (new Date(str));\n\t}\n}\n\n\n/*\n * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode\n * the ES6 definitions here, while allowing for them to someday be higher.\n */\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\n\n\n/*\n * Default options for parseInteger().\n */\nvar PI_DEFAULTS = {\n\tbase: 10,\n\tallowSign: true,\n\tallowPrefix: false,\n\tallowTrailing: false,\n\tallowImprecise: false,\n\ttrimWhitespace: false,\n\tleadingZeroIsOctal: false\n};\n\nvar CP_0 = 0x30;\nvar CP_9 = 0x39;\n\nvar CP_A = 0x41;\nvar CP_B = 0x42;\nvar CP_O = 0x4f;\nvar CP_T = 0x54;\nvar CP_X = 0x58;\nvar CP_Z = 0x5a;\n\nvar CP_a = 0x61;\nvar CP_b = 0x62;\nvar CP_o = 0x6f;\nvar CP_t = 0x74;\nvar CP_x = 0x78;\nvar CP_z = 0x7a;\n\nvar PI_CONV_DEC = 0x30;\nvar PI_CONV_UC = 0x37;\nvar PI_CONV_LC = 0x57;\n\n\n/*\n * A stricter version of parseInt() that provides options for changing what\n * is an acceptable string (for example, disallowing trailing characters).\n */\nfunction parseInteger(str, uopts)\n{\n\tmod_assert.string(str, 'str');\n\tmod_assert.optionalObject(uopts, 'options');\n\n\tvar baseOverride = false;\n\tvar options = PI_DEFAULTS;\n\n\tif (uopts) {\n\t\tbaseOverride = hasKey(uopts, 'base');\n\t\toptions = mergeObjects(options, uopts);\n\t\tmod_assert.number(options.base, 'options.base');\n\t\tmod_assert.ok(options.base >= 2, 'options.base >= 2');\n\t\tmod_assert.ok(options.base <= 36, 'options.base <= 36');\n\t\tmod_assert.bool(options.allowSign, 'options.allowSign');\n\t\tmod_assert.bool(options.allowPrefix, 'options.allowPrefix');\n\t\tmod_assert.bool(options.allowTrailing,\n\t\t    'options.allowTrailing');\n\t\tmod_assert.bool(options.allowImprecise,\n\t\t    'options.allowImprecise');\n\t\tmod_assert.bool(options.trimWhitespace,\n\t\t    'options.trimWhitespace');\n\t\tmod_assert.bool(options.leadingZeroIsOctal,\n\t\t    'options.leadingZeroIsOctal');\n\n\t\tif (options.leadingZeroIsOctal) {\n\t\t\tmod_assert.ok(!baseOverride,\n\t\t\t    '\"base\" and \"leadingZeroIsOctal\" are ' +\n\t\t\t    'mutually exclusive');\n\t\t}\n\t}\n\n\tvar c;\n\tvar pbase = -1;\n\tvar base = options.base;\n\tvar start;\n\tvar mult = 1;\n\tvar value = 0;\n\tvar idx = 0;\n\tvar len = str.length;\n\n\t/* Trim any whitespace on the left side. */\n\tif (options.trimWhitespace) {\n\t\twhile (idx < len && isSpace(str.charCodeAt(idx))) {\n\t\t\t++idx;\n\t\t}\n\t}\n\n\t/* Check the number for a leading sign. */\n\tif (options.allowSign) {\n\t\tif (str[idx] === '-') {\n\t\t\tidx += 1;\n\t\t\tmult = -1;\n\t\t} else if (str[idx] === '+') {\n\t\t\tidx += 1;\n\t\t}\n\t}\n\n\t/* Parse the base-indicating prefix if there is one. */\n\tif (str[idx] === '0') {\n\t\tif (options.allowPrefix) {\n\t\t\tpbase = prefixToBase(str.charCodeAt(idx + 1));\n\t\t\tif (pbase !== -1 && (!baseOverride || pbase === base)) {\n\t\t\t\tbase = pbase;\n\t\t\t\tidx += 2;\n\t\t\t}\n\t\t}\n\n\t\tif (pbase === -1 && options.leadingZeroIsOctal) {\n\t\t\tbase = 8;\n\t\t}\n\t}\n\n\t/* Parse the actual digits. */\n\tfor (start = idx; idx < len; ++idx) {\n\t\tc = translateDigit(str.charCodeAt(idx));\n\t\tif (c !== -1 && c < base) {\n\t\t\tvalue *= base;\n\t\t\tvalue += c;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* If we didn't parse any digits, we have an invalid number. */\n\tif (start === idx) {\n\t\treturn (new Error('invalid number: ' + JSON.stringify(str)));\n\t}\n\n\t/* Trim any whitespace on the right side. */\n\tif (options.trimWhitespace) {\n\t\twhile (idx < len && isSpace(str.charCodeAt(idx))) {\n\t\t\t++idx;\n\t\t}\n\t}\n\n\t/* Check for trailing characters. */\n\tif (idx < len && !options.allowTrailing) {\n\t\treturn (new Error('trailing characters after number: ' +\n\t\t    JSON.stringify(str.slice(idx))));\n\t}\n\n\t/* If our value is 0, we return now, to avoid returning -0. */\n\tif (value === 0) {\n\t\treturn (0);\n\t}\n\n\t/* Calculate our final value. */\n\tvar result = value * mult;\n\n\t/*\n\t * If the string represents a value that cannot be precisely represented\n\t * by JavaScript, then we want to check that:\n\t *\n\t * - We never increased the value past MAX_SAFE_INTEGER\n\t * - We don't make the result negative and below MIN_SAFE_INTEGER\n\t *\n\t * Because we only ever increment the value during parsing, there's no\n\t * chance of moving past MAX_SAFE_INTEGER and then dropping below it\n\t * again, losing precision in the process. This means that we only need\n\t * to do our checks here, at the end.\n\t */\n\tif (!options.allowImprecise &&\n\t    (value > MAX_SAFE_INTEGER || result < MIN_SAFE_INTEGER)) {\n\t\treturn (new Error('number is outside of the supported range: ' +\n\t\t    JSON.stringify(str.slice(start, idx))));\n\t}\n\n\treturn (result);\n}\n\n\n/*\n * Interpret a character code as a base-36 digit.\n */\nfunction translateDigit(d)\n{\n\tif (d >= CP_0 && d <= CP_9) {\n\t\t/* '0' to '9' -> 0 to 9 */\n\t\treturn (d - PI_CONV_DEC);\n\t} else if (d >= CP_A && d <= CP_Z) {\n\t\t/* 'A' - 'Z' -> 10 to 35 */\n\t\treturn (d - PI_CONV_UC);\n\t} else if (d >= CP_a && d <= CP_z) {\n\t\t/* 'a' - 'z' -> 10 to 35 */\n\t\treturn (d - PI_CONV_LC);\n\t} else {\n\t\t/* Invalid character code */\n\t\treturn (-1);\n\t}\n}\n\n\n/*\n * Test if a value matches the ECMAScript definition of trimmable whitespace.\n */\nfunction isSpace(c)\n{\n\treturn (c === 0x20) ||\n\t    (c >= 0x0009 && c <= 0x000d) ||\n\t    (c === 0x00a0) ||\n\t    (c === 0x1680) ||\n\t    (c === 0x180e) ||\n\t    (c >= 0x2000 && c <= 0x200a) ||\n\t    (c === 0x2028) ||\n\t    (c === 0x2029) ||\n\t    (c === 0x202f) ||\n\t    (c === 0x205f) ||\n\t    (c === 0x3000) ||\n\t    (c === 0xfeff);\n}\n\n\n/*\n * Determine which base a character indicates (e.g., 'x' indicates hex).\n */\nfunction prefixToBase(c)\n{\n\tif (c === CP_b || c === CP_B) {\n\t\t/* 0b/0B (binary) */\n\t\treturn (2);\n\t} else if (c === CP_o || c === CP_O) {\n\t\t/* 0o/0O (octal) */\n\t\treturn (8);\n\t} else if (c === CP_t || c === CP_T) {\n\t\t/* 0t/0T (decimal) */\n\t\treturn (10);\n\t} else if (c === CP_x || c === CP_X) {\n\t\t/* 0x/0X (hexadecimal) */\n\t\treturn (16);\n\t} else {\n\t\t/* Not a meaningful character */\n\t\treturn (-1);\n\t}\n}\n\n\nfunction validateJsonObjectJS(schema, input)\n{\n\tvar report = mod_jsonschema.validate(input, schema);\n\n\tif (report.errors.length === 0)\n\t\treturn (null);\n\n\t/* Currently, we only do anything useful with the first error. */\n\tvar error = report.errors[0];\n\n\t/* The failed property is given by a URI with an irrelevant prefix. */\n\tvar propname = error['property'];\n\tvar reason = error['message'].toLowerCase();\n\tvar i, j;\n\n\t/*\n\t * There's at least one case where the property error message is\n\t * confusing at best.  We work around this here.\n\t */\n\tif ((i = reason.indexOf('the property ')) != -1 &&\n\t    (j = reason.indexOf(' is not defined in the schema and the ' +\n\t    'schema does not allow additional properties')) != -1) {\n\t\ti += 'the property '.length;\n\t\tif (propname === '')\n\t\t\tpropname = reason.substr(i, j - i);\n\t\telse\n\t\t\tpropname = propname + '.' + reason.substr(i, j - i);\n\n\t\treason = 'unsupported property';\n\t}\n\n\tvar rv = new mod_verror.VError('property \"%s\": %s', propname, reason);\n\trv.jsv_details = error;\n\treturn (rv);\n}\n\nfunction randElt(arr)\n{\n\tmod_assert.ok(Array.isArray(arr) && arr.length > 0,\n\t    'randElt argument must be a non-empty array');\n\n\treturn (arr[Math.floor(Math.random() * arr.length)]);\n}\n\nfunction assertHrtime(a)\n{\n\tmod_assert.ok(a[0] >= 0 && a[1] >= 0,\n\t    'negative numbers not allowed in hrtimes');\n\tmod_assert.ok(a[1] < 1e9, 'nanoseconds column overflow');\n}\n\n/*\n * Compute the time elapsed between hrtime readings A and B, where A is later\n * than B.  hrtime readings come from Node's process.hrtime().  There is no\n * defined way to represent negative deltas, so it's illegal to diff B from A\n * where the time denoted by B is later than the time denoted by A.  If this\n * becomes valuable, we can define a representation and extend the\n * implementation to support it.\n */\nfunction hrtimeDiff(a, b)\n{\n\tassertHrtime(a);\n\tassertHrtime(b);\n\tmod_assert.ok(a[0] > b[0] || (a[0] == b[0] && a[1] >= b[1]),\n\t    'negative differences not allowed');\n\n\tvar rv = [ a[0] - b[0], 0 ];\n\n\tif (a[1] >= b[1]) {\n\t\trv[1] = a[1] - b[1];\n\t} else {\n\t\trv[0]--;\n\t\trv[1] = 1e9 - (b[1] - a[1]);\n\t}\n\n\treturn (rv);\n}\n\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of nanoseconds.\n */\nfunction hrtimeNanosec(a)\n{\n\tassertHrtime(a);\n\n\treturn (Math.floor(a[0] * 1e9 + a[1]));\n}\n\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of microseconds.\n */\nfunction hrtimeMicrosec(a)\n{\n\tassertHrtime(a);\n\n\treturn (Math.floor(a[0] * 1e6 + a[1] / 1e3));\n}\n\n/*\n * Convert a hrtime reading from the array format returned by Node's\n * process.hrtime() into a scalar number of milliseconds.\n */\nfunction hrtimeMillisec(a)\n{\n\tassertHrtime(a);\n\n\treturn (Math.floor(a[0] * 1e3 + a[1] / 1e6));\n}\n\n/*\n * Add two hrtime readings A and B, overwriting A with the result of the\n * addition.  This function is useful for accumulating several hrtime intervals\n * into a counter.  Returns A.\n */\nfunction hrtimeAccum(a, b)\n{\n\tassertHrtime(a);\n\tassertHrtime(b);\n\n\t/*\n\t * Accumulate the nanosecond component.\n\t */\n\ta[1] += b[1];\n\tif (a[1] >= 1e9) {\n\t\t/*\n\t\t * The nanosecond component overflowed, so carry to the seconds\n\t\t * field.\n\t\t */\n\t\ta[0]++;\n\t\ta[1] -= 1e9;\n\t}\n\n\t/*\n\t * Accumulate the seconds component.\n\t */\n\ta[0] += b[0];\n\n\treturn (a);\n}\n\n/*\n * Add two hrtime readings A and B, returning the result as a new hrtime array.\n * Does not modify either input argument.\n */\nfunction hrtimeAdd(a, b)\n{\n\tassertHrtime(a);\n\n\tvar rv = [ a[0], a[1] ];\n\n\treturn (hrtimeAccum(rv, b));\n}\n\n\n/*\n * Check an object for unexpected properties.  Accepts the object to check, and\n * an array of allowed property names (strings).  Returns an array of key names\n * that were found on the object, but did not appear in the list of allowed\n * properties.  If no properties were found, the returned array will be of\n * zero length.\n */\nfunction extraProperties(obj, allowed)\n{\n\tmod_assert.ok(typeof (obj) === 'object' && obj !== null,\n\t    'obj argument must be a non-null object');\n\tmod_assert.ok(Array.isArray(allowed),\n\t    'allowed argument must be an array of strings');\n\tfor (var i = 0; i < allowed.length; i++) {\n\t\tmod_assert.ok(typeof (allowed[i]) === 'string',\n\t\t    'allowed argument must be an array of strings');\n\t}\n\n\treturn (Object.keys(obj).filter(function (key) {\n\t\treturn (allowed.indexOf(key) === -1);\n\t}));\n}\n\n/*\n * Given three sets of properties \"provided\" (may be undefined), \"overrides\"\n * (required), and \"defaults\" (may be undefined), construct an object containing\n * the union of these sets with \"overrides\" overriding \"provided\", and\n * \"provided\" overriding \"defaults\".  None of the input objects are modified.\n */\nfunction mergeObjects(provided, overrides, defaults)\n{\n\tvar rv, k;\n\n\trv = {};\n\tif (defaults) {\n\t\tfor (k in defaults)\n\t\t\trv[k] = defaults[k];\n\t}\n\n\tif (provided) {\n\t\tfor (k in provided)\n\t\t\trv[k] = provided[k];\n\t}\n\n\tif (overrides) {\n\t\tfor (k in overrides)\n\t\t\trv[k] = overrides[k];\n\t}\n\n\treturn (rv);\n}\n","/*\n * verror.js: richer JavaScript errors\n */\n\nvar mod_assertplus = require('assert-plus');\nvar mod_util = require('util');\n\nvar mod_extsprintf = require('extsprintf');\nvar mod_isError = require('core-util-is').isError;\nvar sprintf = mod_extsprintf.sprintf;\n\n/*\n * Public interface\n */\n\n/* So you can 'var VError = require('verror')' */\nmodule.exports = VError;\n/* For compatibility */\nVError.VError = VError;\n/* Other exported classes */\nVError.SError = SError;\nVError.WError = WError;\nVError.MultiError = MultiError;\n\n/*\n * Common function used to parse constructor arguments for VError, WError, and\n * SError.  Named arguments to this function:\n *\n *     strict\t\tforce strict interpretation of sprintf arguments, even\n *     \t\t\tif the options in \"argv\" don't say so\n *\n *     argv\t\terror's constructor arguments, which are to be\n *     \t\t\tinterpreted as described in README.md.  For quick\n *     \t\t\treference, \"argv\" has one of the following forms:\n *\n *          [ sprintf_args... ]           (argv[0] is a string)\n *          [ cause, sprintf_args... ]    (argv[0] is an Error)\n *          [ options, sprintf_args... ]  (argv[0] is an object)\n *\n * This function normalizes these forms, producing an object with the following\n * properties:\n *\n *    options           equivalent to \"options\" in third form.  This will never\n *    \t\t\tbe a direct reference to what the caller passed in\n *    \t\t\t(i.e., it may be a shallow copy), so it can be freely\n *    \t\t\tmodified.\n *\n *    shortmessage      result of sprintf(sprintf_args), taking options.strict\n *    \t\t\tinto account as described in README.md.\n */\nfunction parseConstructorArguments(args)\n{\n\tvar argv, options, sprintf_args, shortmessage, k;\n\n\tmod_assertplus.object(args, 'args');\n\tmod_assertplus.bool(args.strict, 'args.strict');\n\tmod_assertplus.array(args.argv, 'args.argv');\n\targv = args.argv;\n\n\t/*\n\t * First, figure out which form of invocation we've been given.\n\t */\n\tif (argv.length === 0) {\n\t\toptions = {};\n\t\tsprintf_args = [];\n\t} else if (mod_isError(argv[0])) {\n\t\toptions = { 'cause': argv[0] };\n\t\tsprintf_args = argv.slice(1);\n\t} else if (typeof (argv[0]) === 'object') {\n\t\toptions = {};\n\t\tfor (k in argv[0]) {\n\t\t\toptions[k] = argv[0][k];\n\t\t}\n\t\tsprintf_args = argv.slice(1);\n\t} else {\n\t\tmod_assertplus.string(argv[0],\n\t\t    'first argument to VError, SError, or WError ' +\n\t\t    'constructor must be a string, object, or Error');\n\t\toptions = {};\n\t\tsprintf_args = argv;\n\t}\n\n\t/*\n\t * Now construct the error's message.\n\t *\n\t * extsprintf (which we invoke here with our caller's arguments in order\n\t * to construct this Error's message) is strict in its interpretation of\n\t * values to be processed by the \"%s\" specifier.  The value passed to\n\t * extsprintf must actually be a string or something convertible to a\n\t * String using .toString().  Passing other values (notably \"null\" and\n\t * \"undefined\") is considered a programmer error.  The assumption is\n\t * that if you actually want to print the string \"null\" or \"undefined\",\n\t * then that's easy to do that when you're calling extsprintf; on the\n\t * other hand, if you did NOT want that (i.e., there's actually a bug\n\t * where the program assumes some variable is non-null and tries to\n\t * print it, which might happen when constructing a packet or file in\n\t * some specific format), then it's better to stop immediately than\n\t * produce bogus output.\n\t *\n\t * However, sometimes the bug is only in the code calling VError, and a\n\t * programmer might prefer to have the error message contain \"null\" or\n\t * \"undefined\" rather than have the bug in the error path crash the\n\t * program (making the first bug harder to identify).  For that reason,\n\t * by default VError converts \"null\" or \"undefined\" arguments to their\n\t * string representations and passes those to extsprintf.  Programmers\n\t * desiring the strict behavior can use the SError class or pass the\n\t * \"strict\" option to the VError constructor.\n\t */\n\tmod_assertplus.object(options);\n\tif (!options.strict && !args.strict) {\n\t\tsprintf_args = sprintf_args.map(function (a) {\n\t\t\treturn (a === null ? 'null' :\n\t\t\t    a === undefined ? 'undefined' : a);\n\t\t});\n\t}\n\n\tif (sprintf_args.length === 0) {\n\t\tshortmessage = '';\n\t} else {\n\t\tshortmessage = sprintf.apply(null, sprintf_args);\n\t}\n\n\treturn ({\n\t    'options': options,\n\t    'shortmessage': shortmessage\n\t});\n}\n\n/*\n * See README.md for reference documentation.\n */\nfunction VError()\n{\n\tvar args, obj, parsed, cause, ctor, message, k;\n\n\targs = Array.prototype.slice.call(arguments, 0);\n\n\t/*\n\t * This is a regrettable pattern, but JavaScript's built-in Error class\n\t * is defined to work this way, so we allow the constructor to be called\n\t * without \"new\".\n\t */\n\tif (!(this instanceof VError)) {\n\t\tobj = Object.create(VError.prototype);\n\t\tVError.apply(obj, arguments);\n\t\treturn (obj);\n\t}\n\n\t/*\n\t * For convenience and backwards compatibility, we support several\n\t * different calling forms.  Normalize them here.\n\t */\n\tparsed = parseConstructorArguments({\n\t    'argv': args,\n\t    'strict': false\n\t});\n\n\t/*\n\t * If we've been given a name, apply it now.\n\t */\n\tif (parsed.options.name) {\n\t\tmod_assertplus.string(parsed.options.name,\n\t\t    'error\\'s \"name\" must be a string');\n\t\tthis.name = parsed.options.name;\n\t}\n\n\t/*\n\t * For debugging, we keep track of the original short message (attached\n\t * this Error particularly) separately from the complete message (which\n\t * includes the messages of our cause chain).\n\t */\n\tthis.jse_shortmsg = parsed.shortmessage;\n\tmessage = parsed.shortmessage;\n\n\t/*\n\t * If we've been given a cause, record a reference to it and update our\n\t * message appropriately.\n\t */\n\tcause = parsed.options.cause;\n\tif (cause) {\n\t\tmod_assertplus.ok(mod_isError(cause), 'cause is not an Error');\n\t\tthis.jse_cause = cause;\n\n\t\tif (!parsed.options.skipCauseMessage) {\n\t\t\tmessage += ': ' + cause.message;\n\t\t}\n\t}\n\n\t/*\n\t * If we've been given an object with properties, shallow-copy that\n\t * here.  We don't want to use a deep copy in case there are non-plain\n\t * objects here, but we don't want to use the original object in case\n\t * the caller modifies it later.\n\t */\n\tthis.jse_info = {};\n\tif (parsed.options.info) {\n\t\tfor (k in parsed.options.info) {\n\t\t\tthis.jse_info[k] = parsed.options.info[k];\n\t\t}\n\t}\n\n\tthis.message = message;\n\tError.call(this, message);\n\n\tif (Error.captureStackTrace) {\n\t\tctor = parsed.options.constructorOpt || this.constructor;\n\t\tError.captureStackTrace(this, ctor);\n\t}\n\n\treturn (this);\n}\n\nmod_util.inherits(VError, Error);\nVError.prototype.name = 'VError';\n\nVError.prototype.toString = function ve_toString()\n{\n\tvar str = (this.hasOwnProperty('name') && this.name ||\n\t\tthis.constructor.name || this.constructor.prototype.name);\n\tif (this.message)\n\t\tstr += ': ' + this.message;\n\n\treturn (str);\n};\n\n/*\n * This method is provided for compatibility.  New callers should use\n * VError.cause() instead.  That method also uses the saner `null` return value\n * when there is no cause.\n */\nVError.prototype.cause = function ve_cause()\n{\n\tvar cause = VError.cause(this);\n\treturn (cause === null ? undefined : cause);\n};\n\n/*\n * Static methods\n *\n * These class-level methods are provided so that callers can use them on\n * instances of Errors that are not VErrors.  New interfaces should be provided\n * only using static methods to eliminate the class of programming mistake where\n * people fail to check whether the Error object has the corresponding methods.\n */\n\nVError.cause = function (err)\n{\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\treturn (mod_isError(err.jse_cause) ? err.jse_cause : null);\n};\n\nVError.info = function (err)\n{\n\tvar rv, cause, k;\n\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\tcause = VError.cause(err);\n\tif (cause !== null) {\n\t\trv = VError.info(cause);\n\t} else {\n\t\trv = {};\n\t}\n\n\tif (typeof (err.jse_info) == 'object' && err.jse_info !== null) {\n\t\tfor (k in err.jse_info) {\n\t\t\trv[k] = err.jse_info[k];\n\t\t}\n\t}\n\n\treturn (rv);\n};\n\nVError.findCauseByName = function (err, name)\n{\n\tvar cause;\n\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\tmod_assertplus.string(name, 'name');\n\tmod_assertplus.ok(name.length > 0, 'name cannot be empty');\n\n\tfor (cause = err; cause !== null; cause = VError.cause(cause)) {\n\t\tmod_assertplus.ok(mod_isError(cause));\n\t\tif (cause.name == name) {\n\t\t\treturn (cause);\n\t\t}\n\t}\n\n\treturn (null);\n};\n\nVError.hasCauseWithName = function (err, name)\n{\n\treturn (VError.findCauseByName(err, name) !== null);\n};\n\nVError.fullStack = function (err)\n{\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\n\tvar cause = VError.cause(err);\n\n\tif (cause) {\n\t\treturn (err.stack + '\\ncaused by: ' + VError.fullStack(cause));\n\t}\n\n\treturn (err.stack);\n};\n\nVError.errorFromList = function (errors)\n{\n\tmod_assertplus.arrayOfObject(errors, 'errors');\n\n\tif (errors.length === 0) {\n\t\treturn (null);\n\t}\n\n\terrors.forEach(function (e) {\n\t\tmod_assertplus.ok(mod_isError(e));\n\t});\n\n\tif (errors.length == 1) {\n\t\treturn (errors[0]);\n\t}\n\n\treturn (new MultiError(errors));\n};\n\nVError.errorForEach = function (err, func)\n{\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\tmod_assertplus.func(func, 'func');\n\n\tif (err instanceof MultiError) {\n\t\terr.errors().forEach(function iterError(e) { func(e); });\n\t} else {\n\t\tfunc(err);\n\t}\n};\n\n\n/*\n * SError is like VError, but stricter about types.  You cannot pass \"null\" or\n * \"undefined\" as string arguments to the formatter.\n */\nfunction SError()\n{\n\tvar args, obj, parsed, options;\n\n\targs = Array.prototype.slice.call(arguments, 0);\n\tif (!(this instanceof SError)) {\n\t\tobj = Object.create(SError.prototype);\n\t\tSError.apply(obj, arguments);\n\t\treturn (obj);\n\t}\n\n\tparsed = parseConstructorArguments({\n\t    'argv': args,\n\t    'strict': true\n\t});\n\n\toptions = parsed.options;\n\tVError.call(this, options, '%s', parsed.shortmessage);\n\n\treturn (this);\n}\n\n/*\n * We don't bother setting SError.prototype.name because once constructed,\n * SErrors are just like VErrors.\n */\nmod_util.inherits(SError, VError);\n\n\n/*\n * Represents a collection of errors for the purpose of consumers that generally\n * only deal with one error.  Callers can extract the individual errors\n * contained in this object, but may also just treat it as a normal single\n * error, in which case a summary message will be printed.\n */\nfunction MultiError(errors)\n{\n\tmod_assertplus.array(errors, 'list of errors');\n\tmod_assertplus.ok(errors.length > 0, 'must be at least one error');\n\tthis.ase_errors = errors;\n\n\tVError.call(this, {\n\t    'cause': errors[0]\n\t}, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');\n}\n\nmod_util.inherits(MultiError, VError);\nMultiError.prototype.name = 'MultiError';\n\nMultiError.prototype.errors = function me_errors()\n{\n\treturn (this.ase_errors.slice(0));\n};\n\n\n/*\n * See README.md for reference details.\n */\nfunction WError()\n{\n\tvar args, obj, parsed, options;\n\n\targs = Array.prototype.slice.call(arguments, 0);\n\tif (!(this instanceof WError)) {\n\t\tobj = Object.create(WError.prototype);\n\t\tWError.apply(obj, args);\n\t\treturn (obj);\n\t}\n\n\tparsed = parseConstructorArguments({\n\t    'argv': args,\n\t    'strict': false\n\t});\n\n\toptions = parsed.options;\n\toptions['skipCauseMessage'] = true;\n\tVError.call(this, options, '%s', parsed.shortmessage);\n\n\treturn (this);\n}\n\nmod_util.inherits(WError, VError);\nWError.prototype.name = 'WError';\n\nWError.prototype.toString = function we_toString()\n{\n\tvar str = (this.hasOwnProperty('name') && this.name ||\n\t\tthis.constructor.name || this.constructor.prototype.name);\n\tif (this.message)\n\t\tstr += ': ' + this.message;\n\tif (this.jse_cause && this.jse_cause.message)\n\t\tstr += '; caused by ' + this.jse_cause.toString();\n\n\treturn (str);\n};\n\n/*\n * For purely historical reasons, WError's cause() function allows you to set\n * the cause.\n */\nWError.prototype.cause = function we_cause(c)\n{\n\tif (mod_isError(c))\n\t\tthis.jse_cause = c;\n\n\treturn (this.jse_cause);\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","/**\r\n * JSONSchema Validator - Validates JavaScript objects using JSON Schemas\r\n *\t(http://www.json.com/json-schema-proposal/)\r\n *\r\n * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)\r\n * Licensed under the MIT (MIT-LICENSE.txt) license.\r\nTo use the validator call the validate function with an instance object and an optional schema object.\r\nIf a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),\r\nthat schema will be used to validate and the schema parameter is not necessary (if both exist,\r\nboth validations will occur).\r\nThe validate method will return an array of validation errors. If there are no errors, then an\r\nempty list will be returned. A validation error will have two properties:\r\n\"property\" which indicates which property had the error\r\n\"message\" which indicates what the error was\r\n */\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define([], function () {\r\n            return factory();\r\n        });\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like environments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals\r\n        root.jsonSchema = factory();\r\n    }\r\n}(this, function () {// setup primitive classes to be JSON Schema types\r\nvar exports = validate\r\nexports.Integer = {type:\"integer\"};\r\nvar primitiveConstructors = {\r\n\tString: String,\r\n\tBoolean: Boolean,\r\n\tNumber: Number,\r\n\tObject: Object,\r\n\tArray: Array,\r\n\tDate: Date\r\n}\r\nexports.validate = validate;\r\nfunction validate(/*Any*/instance,/*Object*/schema) {\r\n\t\t// Summary:\r\n\t\t//  \tTo use the validator call JSONSchema.validate with an instance object and an optional schema object.\r\n\t\t// \t\tIf a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),\r\n\t\t// \t\tthat schema will be used to validate and the schema parameter is not necessary (if both exist,\r\n\t\t// \t\tboth validations will occur).\r\n\t\t// \t\tThe validate method will return an object with two properties:\r\n\t\t// \t\t\tvalid: A boolean indicating if the instance is valid by the schema\r\n\t\t// \t\t\terrors: An array of validation errors. If there are no errors, then an\r\n\t\t// \t\t\t\t\tempty list will be returned. A validation error will have two properties:\r\n\t\t// \t\t\t\t\t\tproperty: which indicates which property had the error\r\n\t\t// \t\t\t\t\t\tmessage: which indicates what the error was\r\n\t\t//\r\n\t\treturn validate(instance, schema, {changing: false});//, coerce: false, existingOnly: false});\r\n\t};\r\nexports.checkPropertyChange = function(/*Any*/value,/*Object*/schema, /*String*/property) {\r\n\t\t// Summary:\r\n\t\t// \t\tThe checkPropertyChange method will check to see if an value can legally be in property with the given schema\r\n\t\t// \t\tThis is slightly different than the validate method in that it will fail if the schema is readonly and it will\r\n\t\t// \t\tnot check for self-validation, it is assumed that the passed in value is already internally valid.\r\n\t\t// \t\tThe checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for\r\n\t\t// \t\tinformation.\r\n\t\t//\r\n\t\treturn validate(value, schema, {changing: property || \"property\"});\r\n\t};\r\nvar validate = exports._validate = function(/*Any*/instance,/*Object*/schema,/*Object*/options) {\r\n\r\n\tif (!options) options = {};\r\n\tvar _changing = options.changing;\r\n\r\n\tfunction getType(schema){\r\n\t\treturn schema.type || (primitiveConstructors[schema.name] == schema && schema.name.toLowerCase());\r\n\t}\r\n\tvar errors = [];\r\n\t// validate a value against a property definition\r\n\tfunction checkProp(value, schema, path,i){\r\n\r\n\t\tvar l;\r\n\t\tpath += path ? typeof i == 'number' ? '[' + i + ']' : typeof i == 'undefined' ? '' : '.' + i : i;\r\n\t\tfunction addError(message){\r\n\t\t\terrors.push({property:path,message:message});\r\n\t\t}\r\n\r\n\t\tif((typeof schema != 'object' || schema instanceof Array) && (path || typeof schema != 'function') && !(schema && getType(schema))){\r\n\t\t\tif(typeof schema == 'function'){\r\n\t\t\t\tif(!(value instanceof schema)){\r\n\t\t\t\t\taddError(\"is not an instance of the class/constructor \" + schema.name);\r\n\t\t\t\t}\r\n\t\t\t}else if(schema){\r\n\t\t\t\taddError(\"Invalid schema/property definition \" + schema);\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif(_changing && schema.readonly){\r\n\t\t\taddError(\"is a readonly field, it can not be changed\");\r\n\t\t}\r\n\t\tif(schema['extends']){ // if it extends another schema, it must pass that schema as well\r\n\t\t\tcheckProp(value,schema['extends'],path,i);\r\n\t\t}\r\n\t\t// validate a value against a type definition\r\n\t\tfunction checkType(type,value){\r\n\t\t\tif(type){\r\n\t\t\t\tif(typeof type == 'string' && type != 'any' &&\r\n\t\t\t\t\t\t(type == 'null' ? value !== null : typeof value != type) &&\r\n\t\t\t\t\t\t!(value instanceof Array && type == 'array') &&\r\n\t\t\t\t\t\t!(value instanceof Date && type == 'date') &&\r\n\t\t\t\t\t\t!(type == 'integer' && value%1===0)){\r\n\t\t\t\t\treturn [{property:path,message:(typeof value) + \" value found, but a \" + type + \" is required\"}];\r\n\t\t\t\t}\r\n\t\t\t\tif(type instanceof Array){\r\n\t\t\t\t\tvar unionErrors=[];\r\n\t\t\t\t\tfor(var j = 0; j < type.length; j++){ // a union type\r\n\t\t\t\t\t\tif(!(unionErrors=checkType(type[j],value)).length){\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(unionErrors.length){\r\n\t\t\t\t\t\treturn unionErrors;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(typeof type == 'object'){\r\n\t\t\t\t\tvar priorErrors = errors;\r\n\t\t\t\t\terrors = [];\r\n\t\t\t\t\tcheckProp(value,type,path);\r\n\t\t\t\t\tvar theseErrors = errors;\r\n\t\t\t\t\terrors = priorErrors;\r\n\t\t\t\t\treturn theseErrors;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\tif(value === undefined){\r\n\t\t\tif(schema.required){\r\n\t\t\t\taddError(\"is missing and it is required\");\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\terrors = errors.concat(checkType(getType(schema),value));\r\n\t\t\tif(schema.disallow && !checkType(schema.disallow,value).length){\r\n\t\t\t\taddError(\" disallowed value was matched\");\r\n\t\t\t}\r\n\t\t\tif(value !== null){\r\n\t\t\t\tif(value instanceof Array){\r\n\t\t\t\t\tif(schema.items){\r\n\t\t\t\t\t\tvar itemsIsArray = schema.items instanceof Array;\r\n\t\t\t\t\t\tvar propDef = schema.items;\r\n\t\t\t\t\t\tfor (i = 0, l = value.length; i < l; i += 1) {\r\n\t\t\t\t\t\t\tif (itemsIsArray)\r\n\t\t\t\t\t\t\t\tpropDef = schema.items[i];\r\n\t\t\t\t\t\t\tif (options.coerce)\r\n\t\t\t\t\t\t\t\tvalue[i] = options.coerce(value[i], propDef);\r\n\t\t\t\t\t\t\terrors.concat(checkProp(value[i],propDef,path,i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(schema.minItems && value.length < schema.minItems){\r\n\t\t\t\t\t\taddError(\"There must be a minimum of \" + schema.minItems + \" in the array\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(schema.maxItems && value.length > schema.maxItems){\r\n\t\t\t\t\t\taddError(\"There must be a maximum of \" + schema.maxItems + \" in the array\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(schema.properties || schema.additionalProperties){\r\n\t\t\t\t\terrors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));\r\n\t\t\t\t}\r\n\t\t\t\tif(schema.pattern && typeof value == 'string' && !value.match(schema.pattern)){\r\n\t\t\t\t\taddError(\"does not match the regex pattern \" + schema.pattern);\r\n\t\t\t\t}\r\n\t\t\t\tif(schema.maxLength && typeof value == 'string' && value.length > schema.maxLength){\r\n\t\t\t\t\taddError(\"may only be \" + schema.maxLength + \" characters long\");\r\n\t\t\t\t}\r\n\t\t\t\tif(schema.minLength && typeof value == 'string' && value.length < schema.minLength){\r\n\t\t\t\t\taddError(\"must be at least \" + schema.minLength + \" characters long\");\r\n\t\t\t\t}\r\n\t\t\t\tif(typeof schema.minimum !== undefined && typeof value == typeof schema.minimum &&\r\n\t\t\t\t\t\tschema.minimum > value){\r\n\t\t\t\t\taddError(\"must have a minimum value of \" + schema.minimum);\r\n\t\t\t\t}\r\n\t\t\t\tif(typeof schema.maximum !== undefined && typeof value == typeof schema.maximum &&\r\n\t\t\t\t\t\tschema.maximum < value){\r\n\t\t\t\t\taddError(\"must have a maximum value of \" + schema.maximum);\r\n\t\t\t\t}\r\n\t\t\t\tif(schema['enum']){\r\n\t\t\t\t\tvar enumer = schema['enum'];\r\n\t\t\t\t\tl = enumer.length;\r\n\t\t\t\t\tvar found;\r\n\t\t\t\t\tfor(var j = 0; j < l; j++){\r\n\t\t\t\t\t\tif(enumer[j]===value){\r\n\t\t\t\t\t\t\tfound=1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!found){\r\n\t\t\t\t\t\taddError(\"does not have a value in the enumeration \" + enumer.join(\", \"));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(typeof schema.maxDecimal == 'number' &&\r\n\t\t\t\t\t(value.toString().match(new RegExp(\"\\\\.[0-9]{\" + (schema.maxDecimal + 1) + \",}\")))){\r\n\t\t\t\t\taddError(\"may only have \" + schema.maxDecimal + \" digits of decimal places\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t// validate an object against a schema\r\n\tfunction checkObj(instance,objTypeDef,path,additionalProp){\r\n\r\n\t\tif(typeof objTypeDef =='object'){\r\n\t\t\tif(typeof instance != 'object' || instance instanceof Array){\r\n\t\t\t\terrors.push({property:path,message:\"an object is required\"});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(var i in objTypeDef){ \r\n\t\t\t\tif(objTypeDef.hasOwnProperty(i)){\r\n\t\t\t\t\tvar value = instance[i];\r\n\t\t\t\t\t// skip _not_ specified properties\r\n\t\t\t\t\tif (value === undefined && options.existingOnly) continue;\r\n\t\t\t\t\tvar propDef = objTypeDef[i];\r\n\t\t\t\t\t// set default\r\n\t\t\t\t\tif(value === undefined && propDef[\"default\"]){\r\n\t\t\t\t\t\tvalue = instance[i] = propDef[\"default\"];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(options.coerce && i in instance){\r\n\t\t\t\t\t\tvalue = instance[i] = options.coerce(value, propDef);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcheckProp(value,propDef,path,i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(i in instance){\r\n\t\t\tif(instance.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_') && objTypeDef && !objTypeDef[i] && additionalProp===false){\r\n\t\t\t\tif (options.filter) {\r\n\t\t\t\t\tdelete instance[i];\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\terrors.push({property:path,message:(typeof value) + \"The property \" + i +\r\n\t\t\t\t\t\t\" is not defined in the schema and the schema does not allow additional properties\"});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;\r\n\t\t\tif(requires && !(requires in instance)){\r\n\t\t\t\terrors.push({property:path,message:\"the presence of the property \" + i + \" requires that \" + requires + \" also be present\"});\r\n\t\t\t}\r\n\t\t\tvalue = instance[i];\r\n\t\t\tif(additionalProp && (!(objTypeDef && typeof objTypeDef == 'object') || !(i in objTypeDef))){\r\n\t\t\t\tif(options.coerce){\r\n\t\t\t\t\tvalue = instance[i] = options.coerce(value, additionalProp);\r\n\t\t\t\t}\r\n\t\t\t\tcheckProp(value,additionalProp,path,i);\r\n\t\t\t}\r\n\t\t\tif(!_changing && value && value.$schema){\r\n\t\t\t\terrors = errors.concat(checkProp(value,value.$schema,path,i));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn errors;\r\n\t}\r\n\tif(schema){\r\n\t\tcheckProp(instance,schema,'',_changing || '');\r\n\t}\r\n\tif(!_changing && instance && instance.$schema){\r\n\t\tcheckProp(instance,instance.$schema,'','');\r\n\t}\r\n\treturn {valid:!errors.length,errors:errors};\r\n};\r\nexports.mustBeValid = function(result){\r\n\t//\tsummary:\r\n\t//\t\tThis checks to ensure that the result is valid and will throw an appropriate error message if it is not\r\n\t// result: the result returned from checkPropertyChange or validate\r\n\tif(!result.valid){\r\n\t\tthrow new TypeError(result.errors.map(function(error){return \"for property \" + error.property + ': ' + error.message;}).join(\", \\n\"));\r\n\t}\r\n}\r\n\r\nreturn exports;\r\n}));\r\n","// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar sshpk = require('sshpk');\nvar utils = require('./utils');\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\n    assert.object(parsedSignature, 'parsedSignature');\n    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n      pubkey = sshpk.parseKey(pubkey);\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n      return (false);\n\n    var v = pubkey.createVerify(alg[1]);\n    v.update(parsedSignature.signingString);\n    return (v.verify(parsedSignature.params.signature, 'base64'));\n  },\n\n  /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n    assert.object(parsedSignature, 'parsedHMAC');\n    assert.string(secret, 'secret');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] !== 'hmac')\n      return (false);\n\n    var hashAlg = alg[1].toUpperCase();\n\n    var hmac = crypto.createHmac(hashAlg, secret);\n    hmac.update(parsedSignature.signingString);\n\n    /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */\n    var h1 = crypto.createHmac(hashAlg, secret);\n    h1.update(hmac.digest());\n    h1 = h1.digest();\n    var h2 = crypto.createHmac(hashAlg, secret);\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n    h2 = h2.digest();\n\n    /* Node 0.8 returns strings from .digest(). */\n    if (typeof (h1) === 'string')\n      return (h1 === h2);\n    /* And node 0.10 lacks the .equals() method on Buffers. */\n    if (Buffer.isBuffer(h1) && !h1.equals)\n      return (h1.toString('binary') === h2.toString('binary'));\n\n    return (h1.equals(h2));\n  }\n};\n","module.exports = ForeverAgent\nForeverAgent.SSL = ForeverAgentSSL\n\nvar util = require('util')\n  , Agent = require('http').Agent\n  , net = require('net')\n  , tls = require('tls')\n  , AgentSSL = require('https').Agent\n  \nfunction getConnectionName(host, port) {  \n  var name = ''\n  if (typeof host === 'string') {\n    name = host + ':' + port\n  } else {\n    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.\n    name = host.host + ':' + host.port + ':' + (host.localAddress ? (host.localAddress + ':') : ':')\n  }\n  return name\n}    \n\nfunction ForeverAgent(options) {\n  var self = this\n  self.options = options || {}\n  self.requests = {}\n  self.sockets = {}\n  self.freeSockets = {}\n  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets\n  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets\n  self.on('free', function(socket, host, port) {\n    var name = getConnectionName(host, port)\n\n    if (self.requests[name] && self.requests[name].length) {\n      self.requests[name].shift().onSocket(socket)\n    } else if (self.sockets[name].length < self.minSockets) {\n      if (!self.freeSockets[name]) self.freeSockets[name] = []\n      self.freeSockets[name].push(socket)\n      \n      // if an error happens while we don't use the socket anyway, meh, throw the socket away\n      var onIdleError = function() {\n        socket.destroy()\n      }\n      socket._onIdleError = onIdleError\n      socket.on('error', onIdleError)\n    } else {\n      // If there are no pending requests just destroy the\n      // socket and it will get removed from the pool. This\n      // gets us out of timeout issues and allows us to\n      // default to Connection:keep-alive.\n      socket.destroy()\n    }\n  })\n\n}\nutil.inherits(ForeverAgent, Agent)\n\nForeverAgent.defaultMinSockets = 5\n\n\nForeverAgent.prototype.createConnection = net.createConnection\nForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest\nForeverAgent.prototype.addRequest = function(req, host, port) {\n  var name = getConnectionName(host, port)\n  \n  if (typeof host !== 'string') {\n    var options = host\n    port = options.port\n    host = options.host\n  }\n\n  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {\n    var idleSocket = this.freeSockets[name].pop()\n    idleSocket.removeListener('error', idleSocket._onIdleError)\n    delete idleSocket._onIdleError\n    req._reusedSocket = true\n    req.onSocket(idleSocket)\n  } else {\n    this.addRequestNoreuse(req, host, port)\n  }\n}\n\nForeverAgent.prototype.removeSocket = function(s, name, host, port) {\n  if (this.sockets[name]) {\n    var index = this.sockets[name].indexOf(s)\n    if (index !== -1) {\n      this.sockets[name].splice(index, 1)\n    }\n  } else if (this.sockets[name] && this.sockets[name].length === 0) {\n    // don't leak\n    delete this.sockets[name]\n    delete this.requests[name]\n  }\n  \n  if (this.freeSockets[name]) {\n    var index = this.freeSockets[name].indexOf(s)\n    if (index !== -1) {\n      this.freeSockets[name].splice(index, 1)\n      if (this.freeSockets[name].length === 0) {\n        delete this.freeSockets[name]\n      }\n    }\n  }\n\n  if (this.requests[name] && this.requests[name].length) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(name, host, port).emit('free')\n  }\n}\n\nfunction ForeverAgentSSL (options) {\n  ForeverAgent.call(this, options)\n}\nutil.inherits(ForeverAgentSSL, ForeverAgent)\n\nForeverAgentSSL.prototype.createConnection = createConnectionSSL\nForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest\n\nfunction createConnectionSSL (port, host, options) {\n  if (typeof port === 'object') {\n    options = port;\n  } else if (typeof host === 'object') {\n    options = host;\n  } else if (typeof options === 'object') {\n    options = options;\n  } else {\n    options = {};\n  }\n\n  if (typeof port === 'number') {\n    options.port = port;\n  }\n\n  if (typeof host === 'string') {\n    options.host = host;\n  }\n\n  return tls.connect(options);\n}\n","var CombinedStream = require('combined-stream');\nvar util = require('util');\nvar path = require('path');\nvar http = require('http');\nvar https = require('https');\nvar parseUrl = require('url').parse;\nvar fs = require('fs');\nvar mime = require('mime-types');\nvar asynckit = require('asynckit');\nvar populate = require('./populate.js');\n\n// Public API\nmodule.exports = FormData;\n\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */\nfunction FormData(options) {\n  if (!(this instanceof FormData)) {\n    return new FormData();\n  }\n\n  this._overheadLength = 0;\n  this._valueLength = 0;\n  this._valuesToMeasure = [];\n\n  CombinedStream.call(this);\n\n  options = options || {};\n  for (var option in options) {\n    this[option] = options[option];\n  }\n}\n\nFormData.LINE_BREAK = '\\r\\n';\nFormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';\n\nFormData.prototype.append = function(field, value, options) {\n\n  options = options || {};\n\n  // allow filename as single option\n  if (typeof options == 'string') {\n    options = {filename: options};\n  }\n\n  var append = CombinedStream.prototype.append.bind(this);\n\n  // all that streamy business can't handle numbers\n  if (typeof value == 'number') {\n    value = '' + value;\n  }\n\n  // https://github.com/felixge/node-form-data/issues/38\n  if (util.isArray(value)) {\n    // Please convert your array into string\n    // the way web server expects it\n    this._error(new Error('Arrays are not supported.'));\n    return;\n  }\n\n  var header = this._multiPartHeader(field, value, options);\n  var footer = this._multiPartFooter();\n\n  append(header);\n  append(value);\n  append(footer);\n\n  // pass along options.knownLength\n  this._trackLength(header, value, options);\n};\n\nFormData.prototype._trackLength = function(header, value, options) {\n  var valueLength = 0;\n\n  // used w/ getLengthSync(), when length is known.\n  // e.g. for streaming directly from a remote server,\n  // w/ a known file a size, and not wanting to wait for\n  // incoming file to finish to get its size.\n  if (options.knownLength != null) {\n    valueLength += +options.knownLength;\n  } else if (Buffer.isBuffer(value)) {\n    valueLength = value.length;\n  } else if (typeof value === 'string') {\n    valueLength = Buffer.byteLength(value);\n  }\n\n  this._valueLength += valueLength;\n\n  // @check why add CRLF? does this account for custom/multiple CRLFs?\n  this._overheadLength +=\n    Buffer.byteLength(header) +\n    FormData.LINE_BREAK.length;\n\n  // empty or either doesn't have path or not an http response\n  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) )) {\n    return;\n  }\n\n  // no need to bother with the length\n  if (!options.knownLength) {\n    this._valuesToMeasure.push(value);\n  }\n};\n\nFormData.prototype._lengthRetriever = function(value, callback) {\n\n  if (value.hasOwnProperty('fd')) {\n\n    // take read range into a account\n    // `end` = Infinity –> read file till the end\n    //\n    // TODO: Looks like there is bug in Node fs.createReadStream\n    // it doesn't respect `end` options without `start` options\n    // Fix it when node fixes it.\n    // https://github.com/joyent/node/issues/7819\n    if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n\n      // when end specified\n      // no need to calculate range\n      // inclusive, starts with 0\n      callback(null, value.end + 1 - (value.start ? value.start : 0));\n\n    // not that fast snoopy\n    } else {\n      // still need to fetch file size from fs\n      fs.stat(value.path, function(err, stat) {\n\n        var fileSize;\n\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        // update final size based on the range options\n        fileSize = stat.size - (value.start ? value.start : 0);\n        callback(null, fileSize);\n      });\n    }\n\n  // or http response\n  } else if (value.hasOwnProperty('httpVersion')) {\n    callback(null, +value.headers['content-length']);\n\n  // or request stream http://github.com/mikeal/request\n  } else if (value.hasOwnProperty('httpModule')) {\n    // wait till response come back\n    value.on('response', function(response) {\n      value.pause();\n      callback(null, +response.headers['content-length']);\n    });\n    value.resume();\n\n  // something else\n  } else {\n    callback('Unknown stream');\n  }\n};\n\nFormData.prototype._multiPartHeader = function(field, value, options) {\n  // custom header specified (as string)?\n  // it becomes responsible for boundary\n  // (e.g. to handle extra CRLFs on .NET servers)\n  if (typeof options.header == 'string') {\n    return options.header;\n  }\n\n  var contentDisposition = this._getContentDisposition(value, options);\n  var contentType = this._getContentType(value, options);\n\n  var contents = '';\n  var headers  = {\n    // add custom disposition as third element or keep it two elements if not\n    'Content-Disposition': ['form-data', 'name=\"' + field + '\"'].concat(contentDisposition || []),\n    // if no content type. allow it to be empty array\n    'Content-Type': [].concat(contentType || [])\n  };\n\n  // allow custom headers.\n  if (typeof options.header == 'object') {\n    populate(headers, options.header);\n  }\n\n  var header;\n  for (var prop in headers) {\n    if (!headers.hasOwnProperty(prop)) continue;\n    header = headers[prop];\n\n    // skip nullish headers.\n    if (header == null) {\n      continue;\n    }\n\n    // convert all headers to arrays.\n    if (!Array.isArray(header)) {\n      header = [header];\n    }\n\n    // add non-empty headers.\n    if (header.length) {\n      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;\n    }\n  }\n\n  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\n\nFormData.prototype._getContentDisposition = function(value, options) {\n\n  var filename\n    , contentDisposition\n    ;\n\n  if (typeof options.filepath === 'string') {\n    // custom filepath for relative paths\n    filename = path.normalize(options.filepath).replace(/\\\\/g, '/');\n  } else if (options.filename || value.name || value.path) {\n    // custom filename take precedence\n    // formidable and the browser add a name property\n    // fs- and request- streams have path property\n    filename = path.basename(options.filename || value.name || value.path);\n  } else if (value.readable && value.hasOwnProperty('httpVersion')) {\n    // or try http response\n    filename = path.basename(value.client._httpMessage.path);\n  }\n\n  if (filename) {\n    contentDisposition = 'filename=\"' + filename + '\"';\n  }\n\n  return contentDisposition;\n};\n\nFormData.prototype._getContentType = function(value, options) {\n\n  // use custom content-type above all\n  var contentType = options.contentType;\n\n  // or try `name` from formidable, browser\n  if (!contentType && value.name) {\n    contentType = mime.lookup(value.name);\n  }\n\n  // or try `path` from fs-, request- streams\n  if (!contentType && value.path) {\n    contentType = mime.lookup(value.path);\n  }\n\n  // or if it's http-reponse\n  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {\n    contentType = value.headers['content-type'];\n  }\n\n  // or guess it from the filepath or filename\n  if (!contentType && (options.filepath || options.filename)) {\n    contentType = mime.lookup(options.filepath || options.filename);\n  }\n\n  // fallback to the default content type if `value` is not simple value\n  if (!contentType && typeof value == 'object') {\n    contentType = FormData.DEFAULT_CONTENT_TYPE;\n  }\n\n  return contentType;\n};\n\nFormData.prototype._multiPartFooter = function() {\n  return function(next) {\n    var footer = FormData.LINE_BREAK;\n\n    var lastPart = (this._streams.length === 0);\n    if (lastPart) {\n      footer += this._lastBoundary();\n    }\n\n    next(footer);\n  }.bind(this);\n};\n\nFormData.prototype._lastBoundary = function() {\n  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;\n};\n\nFormData.prototype.getHeaders = function(userHeaders) {\n  var header;\n  var formHeaders = {\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n  };\n\n  for (header in userHeaders) {\n    if (userHeaders.hasOwnProperty(header)) {\n      formHeaders[header.toLowerCase()] = userHeaders[header];\n    }\n  }\n\n  return formHeaders;\n};\n\nFormData.prototype.getBoundary = function() {\n  if (!this._boundary) {\n    this._generateBoundary();\n  }\n\n  return this._boundary;\n};\n\nFormData.prototype._generateBoundary = function() {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  var boundary = '--------------------------';\n  for (var i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  this._boundary = boundary;\n};\n\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n  // so it basically checks if there is any value added to the form\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  // https://github.com/form-data/form-data/issues/40\n  if (!this.hasKnownLength()) {\n    // Some async length retrievers are present\n    // therefore synchronous length calculation is false.\n    // Please use getLength(callback) to get proper length\n    this._error(new Error('Cannot calculate proper length in synchronous way.'));\n  }\n\n  return knownLength;\n};\n\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n  var hasKnownLength = true;\n\n  if (this._valuesToMeasure.length) {\n    hasKnownLength = false;\n  }\n\n  return hasKnownLength;\n};\n\nFormData.prototype.getLength = function(cb) {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  if (!this._valuesToMeasure.length) {\n    process.nextTick(cb.bind(this, null, knownLength));\n    return;\n  }\n\n  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    values.forEach(function(length) {\n      knownLength += length;\n    });\n\n    cb(null, knownLength);\n  });\n};\n\nFormData.prototype.submit = function(params, cb) {\n  var request\n    , options\n    , defaults = {method: 'post'}\n    ;\n\n  // parse provided url if it's string\n  // or treat it as options object\n  if (typeof params == 'string') {\n\n    params = parseUrl(params);\n    options = populate({\n      port: params.port,\n      path: params.pathname,\n      host: params.hostname,\n      protocol: params.protocol\n    }, defaults);\n\n  // use custom params\n  } else {\n\n    options = populate(params, defaults);\n    // if no port provided use default one\n    if (!options.port) {\n      options.port = options.protocol == 'https:' ? 443 : 80;\n    }\n  }\n\n  // put that good code in getHeaders to some use\n  options.headers = this.getHeaders(params.headers);\n\n  // https if specified, fallback to http in any other case\n  if (options.protocol == 'https:') {\n    request = https.request(options);\n  } else {\n    request = http.request(options);\n  }\n\n  // get content length and fire away\n  this.getLength(function(err, length) {\n    if (err) {\n      this._error(err);\n      return;\n    }\n\n    // add content length\n    request.setHeader('Content-Length', length);\n\n    this.pipe(request);\n    if (cb) {\n      request.on('error', cb);\n      request.on('response', cb.bind(this, null));\n    }\n  }.bind(this));\n\n  return request;\n};\n\nFormData.prototype._error = function(err) {\n  if (!this.error) {\n    this.error = err;\n    this.pause();\n    this.emit('error', err);\n  }\n};\n\nFormData.prototype.toString = function () {\n  return '[object FormData]';\n};\n","var Stream = require('stream').Stream;\nvar util = require('util');\n\nmodule.exports = DelayedStream;\nfunction DelayedStream() {\n  this.source = null;\n  this.dataSize = 0;\n  this.maxDataSize = 1024 * 1024;\n  this.pauseStream = true;\n\n  this._maxDataSizeExceeded = false;\n  this._released = false;\n  this._bufferedEvents = [];\n}\nutil.inherits(DelayedStream, Stream);\n\nDelayedStream.create = function(source, options) {\n  var delayedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    delayedStream[option] = options[option];\n  }\n\n  delayedStream.source = source;\n\n  var realEmit = source.emit;\n  source.emit = function() {\n    delayedStream._handleEmit(arguments);\n    return realEmit.apply(source, arguments);\n  };\n\n  source.on('error', function() {});\n  if (delayedStream.pauseStream) {\n    source.pause();\n  }\n\n  return delayedStream;\n};\n\nObject.defineProperty(DelayedStream.prototype, 'readable', {\n  configurable: true,\n  enumerable: true,\n  get: function() {\n    return this.source.readable;\n  }\n});\n\nDelayedStream.prototype.setEncoding = function() {\n  return this.source.setEncoding.apply(this.source, arguments);\n};\n\nDelayedStream.prototype.resume = function() {\n  if (!this._released) {\n    this.release();\n  }\n\n  this.source.resume();\n};\n\nDelayedStream.prototype.pause = function() {\n  this.source.pause();\n};\n\nDelayedStream.prototype.release = function() {\n  this._released = true;\n\n  this._bufferedEvents.forEach(function(args) {\n    this.emit.apply(this, args);\n  }.bind(this));\n  this._bufferedEvents = [];\n};\n\nDelayedStream.prototype.pipe = function() {\n  var r = Stream.prototype.pipe.apply(this, arguments);\n  this.resume();\n  return r;\n};\n\nDelayedStream.prototype._handleEmit = function(args) {\n  if (this._released) {\n    this.emit.apply(this, args);\n    return;\n  }\n\n  if (args[0] === 'data') {\n    this.dataSize += args[1].length;\n    this._checkIfMaxDataSizeExceeded();\n  }\n\n  this._bufferedEvents.push(args);\n};\n\nDelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {\n  if (this._maxDataSizeExceeded) {\n    return;\n  }\n\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  this._maxDataSizeExceeded = true;\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n  this.emit('error', new Error(message));\n};\n","module.exports = defer;\n\n/**\n * Runs provided function on next iteration of the event loop\n *\n * @param {function} fn - function to run\n */\nfunction defer(fn)\n{\n  var nextTick = typeof setImmediate == 'function'\n    ? setImmediate\n    : (\n      typeof process == 'object' && typeof process.nextTick == 'function'\n      ? process.nextTick\n      : null\n    );\n\n  if (nextTick)\n  {\n    nextTick(fn);\n  }\n  else\n  {\n    setTimeout(fn, 0);\n  }\n}\n","/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","module.exports =\n{\n  parallel      : require('./parallel.js'),\n  serial        : require('./serial.js'),\n  serialOrdered : require('./serialOrdered.js')\n};\n","var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n","module.exports = defer;\n\n/**\n * Runs provided function on next iteration of the event loop\n *\n * @param {function} fn - function to run\n */\nfunction defer(fn)\n{\n  var nextTick = typeof setImmediate == 'function'\n    ? setImmediate\n    : (\n      typeof process == 'object' && typeof process.nextTick == 'function'\n      ? process.nextTick\n      : null\n    );\n\n  if (nextTick)\n  {\n    nextTick(fn);\n  }\n  else\n  {\n    setTimeout(fn, 0);\n  }\n}\n","var serialOrdered = require('./serialOrdered.js');\n\n// Public API\nmodule.exports = serial;\n\n/**\n * Runs iterator over provided array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serial(list, iterator, callback)\n{\n  return serialOrdered(list, iterator, null, callback);\n}\n","// populates missing values\nmodule.exports = function(dst, src) {\n\n  Object.keys(src).forEach(function(prop)\n  {\n    dst[prop] = dst[prop] || src[prop];\n  });\n\n  return dst;\n};\n","module.exports      = isTypedArray\nisTypedArray.strict = isStrictTypedArray\nisTypedArray.loose  = isLooseTypedArray\n\nvar toString = Object.prototype.toString\nvar names = {\n    '[object Int8Array]': true\n  , '[object Int16Array]': true\n  , '[object Int32Array]': true\n  , '[object Uint8Array]': true\n  , '[object Uint8ClampedArray]': true\n  , '[object Uint16Array]': true\n  , '[object Uint32Array]': true\n  , '[object Float32Array]': true\n  , '[object Float64Array]': true\n}\n\nfunction isTypedArray(arr) {\n  return (\n       isStrictTypedArray(arr)\n    || isLooseTypedArray(arr)\n  )\n}\n\nfunction isStrictTypedArray(arr) {\n  return (\n       arr instanceof Int8Array\n    || arr instanceof Int16Array\n    || arr instanceof Int32Array\n    || arr instanceof Uint8Array\n    || arr instanceof Uint8ClampedArray\n    || arr instanceof Uint16Array\n    || arr instanceof Uint32Array\n    || arr instanceof Float32Array\n    || arr instanceof Float64Array\n  )\n}\n\nfunction isLooseTypedArray(arr) {\n  return names[toString.call(arr)]\n}\n","'use strict';\n\nvar utils = require('./utils');\nvar formats = require('./formats');\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) { // eslint-disable-line func-name-matching\n        return prefix + '[]';\n    },\n    indices: function indices(prefix, key) { // eslint-disable-line func-name-matching\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) { // eslint-disable-line func-name-matching\n        return prefix;\n    }\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaults = {\n    delimiter: '&',\n    encode: true,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar stringify = function stringify( // eslint-disable-line func-name-matching\n    object,\n    prefix,\n    generateArrayPrefix,\n    strictNullHandling,\n    skipNulls,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    formatter,\n    encodeValuesOnly\n) {\n    var obj = object;\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (Array.isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (skipNulls && obj[key] === null) {\n            continue;\n        }\n\n        if (Array.isArray(obj)) {\n            values = values.concat(stringify(\n                obj[key],\n                generateArrayPrefix(prefix, key),\n                generateArrayPrefix,\n                strictNullHandling,\n                skipNulls,\n                encoder,\n                filter,\n                sort,\n                allowDots,\n                serializeDate,\n                formatter,\n                encodeValuesOnly\n            ));\n        } else {\n            values = values.concat(stringify(\n                obj[key],\n                prefix + (allowDots ? '.' + key : '[' + key + ']'),\n                generateArrayPrefix,\n                strictNullHandling,\n                skipNulls,\n                encoder,\n                filter,\n                sort,\n                allowDots,\n                serializeDate,\n                formatter,\n                encodeValuesOnly\n            ));\n        }\n    }\n\n    return values;\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = opts ? utils.assign({}, opts) : {};\n\n    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;\n    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;\n    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;\n    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;\n    var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;\n    var sort = typeof options.sort === 'function' ? options.sort : null;\n    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;\n    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;\n    var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;\n    if (typeof options.format === 'undefined') {\n        options.format = formats['default'];\n    } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {\n        throw new TypeError('Unknown format option provided.');\n    }\n    var formatter = formats.formatters[options.format];\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (Array.isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var arrayFormat;\n    if (options.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = options.arrayFormat;\n    } else if ('indices' in options) {\n        arrayFormat = options.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = 'indices';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (sort) {\n        objKeys.sort(sort);\n    }\n\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (skipNulls && obj[key] === null) {\n            continue;\n        }\n\n        keys = keys.concat(stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            strictNullHandling,\n            skipNulls,\n            encode ? encoder : null,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            formatter,\n            encodeValuesOnly\n        ));\n    }\n\n    var joined = keys.join(delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n","'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\n\nvar defaults = {\n    allowDots: false,\n    allowPrototypes: false,\n    arrayLimit: 20,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    parameterLimit: 1000,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = {};\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n\n    for (var i = 0; i < parts.length; ++i) {\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder);\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder);\n            val = options.decoder(part.slice(pos + 1), defaults.decoder);\n        }\n        if (has.call(obj, key)) {\n            obj[key] = [].concat(obj[key]).concat(val);\n        } else {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options) {\n    var leaf = val;\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]') {\n            obj = [];\n            obj = obj.concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var index = parseInt(cleanRoot, 10);\n            if (\n                !isNaN(index)\n                && root !== cleanRoot\n                && String(index) === cleanRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else {\n                obj[cleanRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys\n        // that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while ((segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options);\n};\n\nmodule.exports = function (str, opts) {\n    var options = opts ? utils.assign({}, opts) : {};\n\n    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;\n    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;\n    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;\n    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;\n    options.parseArrays = options.parseArrays !== false;\n    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;\n    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;\n    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;\n    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;\n    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;\n    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options);\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    return utils.compact(obj);\n};\n","'use strict';\n\nvar compileSchema = require('./compile')\n  , resolve = require('./compile/resolve')\n  , Cache = require('./cache')\n  , SchemaObject = require('./compile/schema_obj')\n  , stableStringify = require('fast-json-stable-stringify')\n  , formats = require('./compile/formats')\n  , rules = require('./compile/rules')\n  , $dataMetaSchema = require('./$data')\n  , patternGroups = require('./patternGroups')\n  , util = require('./compile/util')\n  , co = require('co');\n\nmodule.exports = Ajv;\n\nAjv.prototype.validate = validate;\nAjv.prototype.compile = compile;\nAjv.prototype.addSchema = addSchema;\nAjv.prototype.addMetaSchema = addMetaSchema;\nAjv.prototype.validateSchema = validateSchema;\nAjv.prototype.getSchema = getSchema;\nAjv.prototype.removeSchema = removeSchema;\nAjv.prototype.addFormat = addFormat;\nAjv.prototype.errorsText = errorsText;\n\nAjv.prototype._addSchema = _addSchema;\nAjv.prototype._compile = _compile;\n\nAjv.prototype.compileAsync = require('./compile/async');\nvar customKeyword = require('./keyword');\nAjv.prototype.addKeyword = customKeyword.add;\nAjv.prototype.getKeyword = customKeyword.get;\nAjv.prototype.removeKeyword = customKeyword.remove;\n\nvar errorClasses = require('./compile/error_classes');\nAjv.ValidationError = errorClasses.Validation;\nAjv.MissingRefError = errorClasses.MissingRef;\nAjv.$dataMetaSchema = $dataMetaSchema;\n\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-06/schema';\n\nvar META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes' ];\nvar META_SUPPORT_DATA = ['/properties'];\n\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  opts = this._opts = util.copy(opts) || {};\n  setLogger(this);\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats(opts.format);\n  var schemaUriFormat = this._schemaUriFormat = this._formats['uri-reference'];\n  this._schemaUriFormatFunc = function (str) { return schemaUriFormat.test(str); };\n\n  this._cache = opts.cache || new Cache;\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n  this._getId = chooseGetId(opts);\n\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  if (opts.serialize === undefined) opts.serialize = stableStringify;\n  this._metaOpts = getMetaSchemaOptions(this);\n\n  if (opts.formats) addInitialFormats(this);\n  addDraft6MetaSchema(this);\n  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\n  addInitialSchemas(this);\n  if (opts.patternGroups) patternGroups(this);\n}\n\n\n\n/**\n * Validate data using schema\n * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\n * @this   Ajv\n * @param  {String|Object} schemaKeyRef key, ref or schema object\n * @param  {Any} data to be validated\n * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n */\nfunction validate(schemaKeyRef, data) {\n  var v;\n  if (typeof schemaKeyRef == 'string') {\n    v = this.getSchema(schemaKeyRef);\n    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n  } else {\n    var schemaObj = this._addSchema(schemaKeyRef);\n    v = schemaObj.validate || this._compile(schemaObj);\n  }\n\n  var valid = v(data);\n  if (v.$async === true)\n    return this._opts.async == '*' ? co(valid) : valid;\n  this.errors = v.errors;\n  return valid;\n}\n\n\n/**\n * Create validating function for passed schema.\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n * @return {Function} validating function\n */\nfunction compile(schema, _meta) {\n  var schemaObj = this._addSchema(schema, undefined, _meta);\n  return schemaObj.validate || this._compile(schemaObj);\n}\n\n\n/**\n * Adds schema to the instance.\n * @this   Ajv\n * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n * @return {Ajv} this for method chaining\n */\nfunction addSchema(schema, key, _skipValidation, _meta) {\n  if (Array.isArray(schema)){\n    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);\n    return this;\n  }\n  var id = this._getId(schema);\n  if (id !== undefined && typeof id != 'string')\n    throw new Error('schema id must be string');\n  key = resolve.normalizeId(key || id);\n  checkUnique(this, key);\n  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n  return this;\n}\n\n\n/**\n * Add schema that will be used to validate other schemas\n * options in META_IGNORE_OPTIONS are alway set to false\n * @this   Ajv\n * @param {Object} schema schema object\n * @param {String} key optional schema key\n * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n * @return {Ajv} this for method chaining\n */\nfunction addMetaSchema(schema, key, skipValidation) {\n  this.addSchema(schema, key, skipValidation, true);\n  return this;\n}\n\n\n/**\n * Validate schema\n * @this   Ajv\n * @param {Object} schema schema to validate\n * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n * @return {Boolean} true if schema is valid\n */\nfunction validateSchema(schema, throwOrLogError) {\n  var $schema = schema.$schema;\n  if ($schema !== undefined && typeof $schema != 'string')\n    throw new Error('$schema must be a string');\n  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n  if (!$schema) {\n    this.logger.warn('meta-schema not available');\n    this.errors = null;\n    return true;\n  }\n  var currentUriFormat = this._formats.uri;\n  this._formats.uri = typeof currentUriFormat == 'function'\n                      ? this._schemaUriFormatFunc\n                      : this._schemaUriFormat;\n  var valid;\n  try { valid = this.validate($schema, schema); }\n  finally { this._formats.uri = currentUriFormat; }\n  if (!valid && throwOrLogError) {\n    var message = 'schema is invalid: ' + this.errorsText();\n    if (this._opts.validateSchema == 'log') this.logger.error(message);\n    else throw new Error(message);\n  }\n  return valid;\n}\n\n\nfunction defaultMeta(self) {\n  var meta = self._opts.meta;\n  self._opts.defaultMeta = typeof meta == 'object'\n                            ? self._getId(meta) || meta\n                            : self.getSchema(META_SCHEMA_ID)\n                              ? META_SCHEMA_ID\n                              : undefined;\n  return self._opts.defaultMeta;\n}\n\n\n/**\n * Get compiled schema from the instance by `key` or `ref`.\n * @this   Ajv\n * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n * @return {Function} schema validating function (with property `schema`).\n */\nfunction getSchema(keyRef) {\n  var schemaObj = _getSchemaObj(this, keyRef);\n  switch (typeof schemaObj) {\n    case 'object': return schemaObj.validate || this._compile(schemaObj);\n    case 'string': return this.getSchema(schemaObj);\n    case 'undefined': return _getSchemaFragment(this, keyRef);\n  }\n}\n\n\nfunction _getSchemaFragment(self, ref) {\n  var res = resolve.schema.call(self, { schema: {} }, ref);\n  if (res) {\n    var schema = res.schema\n      , root = res.root\n      , baseId = res.baseId;\n    var v = compileSchema.call(self, schema, root, undefined, baseId);\n    self._fragments[ref] = new SchemaObject({\n      ref: ref,\n      fragment: true,\n      schema: schema,\n      root: root,\n      baseId: baseId,\n      validate: v\n    });\n    return v;\n  }\n}\n\n\nfunction _getSchemaObj(self, keyRef) {\n  keyRef = resolve.normalizeId(keyRef);\n  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n}\n\n\n/**\n * Remove cached schema(s).\n * If no parameter is passed all schemas but meta-schemas are removed.\n * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n * @this   Ajv\n * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n * @return {Ajv} this for method chaining\n */\nfunction removeSchema(schemaKeyRef) {\n  if (schemaKeyRef instanceof RegExp) {\n    _removeAllSchemas(this, this._schemas, schemaKeyRef);\n    _removeAllSchemas(this, this._refs, schemaKeyRef);\n    return this;\n  }\n  switch (typeof schemaKeyRef) {\n    case 'undefined':\n      _removeAllSchemas(this, this._schemas);\n      _removeAllSchemas(this, this._refs);\n      this._cache.clear();\n      return this;\n    case 'string':\n      var schemaObj = _getSchemaObj(this, schemaKeyRef);\n      if (schemaObj) this._cache.del(schemaObj.cacheKey);\n      delete this._schemas[schemaKeyRef];\n      delete this._refs[schemaKeyRef];\n      return this;\n    case 'object':\n      var serialize = this._opts.serialize;\n      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n      this._cache.del(cacheKey);\n      var id = this._getId(schemaKeyRef);\n      if (id) {\n        id = resolve.normalizeId(id);\n        delete this._schemas[id];\n        delete this._refs[id];\n      }\n  }\n  return this;\n}\n\n\nfunction _removeAllSchemas(self, schemas, regex) {\n  for (var keyRef in schemas) {\n    var schemaObj = schemas[keyRef];\n    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n      self._cache.del(schemaObj.cacheKey);\n      delete schemas[keyRef];\n    }\n  }\n}\n\n\n/* @this   Ajv */\nfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n  if (typeof schema != 'object' && typeof schema != 'boolean')\n    throw new Error('schema should be object or boolean');\n  var serialize = this._opts.serialize;\n  var cacheKey = serialize ? serialize(schema) : schema;\n  var cached = this._cache.get(cacheKey);\n  if (cached) return cached;\n\n  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n\n  var id = resolve.normalizeId(this._getId(schema));\n  if (id && shouldAddSchema) checkUnique(this, id);\n\n  var willValidate = this._opts.validateSchema !== false && !skipValidation;\n  var recursiveMeta;\n  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))\n    this.validateSchema(schema, true);\n\n  var localRefs = resolve.ids.call(this, schema);\n\n  var schemaObj = new SchemaObject({\n    id: id,\n    schema: schema,\n    localRefs: localRefs,\n    cacheKey: cacheKey,\n    meta: meta\n  });\n\n  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\n  this._cache.put(cacheKey, schemaObj);\n\n  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\n\n  return schemaObj;\n}\n\n\n/* @this   Ajv */\nfunction _compile(schemaObj, root) {\n  if (schemaObj.compiling) {\n    schemaObj.validate = callValidate;\n    callValidate.schema = schemaObj.schema;\n    callValidate.errors = null;\n    callValidate.root = root ? root : callValidate;\n    if (schemaObj.schema.$async === true)\n      callValidate.$async = true;\n    return callValidate;\n  }\n  schemaObj.compiling = true;\n\n  var currentOpts;\n  if (schemaObj.meta) {\n    currentOpts = this._opts;\n    this._opts = this._metaOpts;\n  }\n\n  var v;\n  try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }\n  finally {\n    schemaObj.compiling = false;\n    if (schemaObj.meta) this._opts = currentOpts;\n  }\n\n  schemaObj.validate = v;\n  schemaObj.refs = v.refs;\n  schemaObj.refVal = v.refVal;\n  schemaObj.root = v.root;\n  return v;\n\n\n  function callValidate() {\n    var _validate = schemaObj.validate;\n    var result = _validate.apply(null, arguments);\n    callValidate.errors = _validate.errors;\n    return result;\n  }\n}\n\n\nfunction chooseGetId(opts) {\n  switch (opts.schemaId) {\n    case '$id': return _get$Id;\n    case 'id': return _getId;\n    default: return _get$IdOrId;\n  }\n}\n\n/* @this   Ajv */\nfunction _getId(schema) {\n  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\n  return schema.id;\n}\n\n/* @this   Ajv */\nfunction _get$Id(schema) {\n  if (schema.id) this.logger.warn('schema id ignored', schema.id);\n  return schema.$id;\n}\n\n\nfunction _get$IdOrId(schema) {\n  if (schema.$id && schema.id && schema.$id != schema.id)\n    throw new Error('schema $id is different from id');\n  return schema.$id || schema.id;\n}\n\n\n/**\n * Convert array of error message objects to string\n * @this   Ajv\n * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n * @param  {Object} options optional options with properties `separator` and `dataVar`.\n * @return {String} human readable string with all errors descriptions\n */\nfunction errorsText(errors, options) {\n  errors = errors || this.errors;\n  if (!errors) return 'No errors';\n  options = options || {};\n  var separator = options.separator === undefined ? ', ' : options.separator;\n  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n\n  var text = '';\n  for (var i=0; i<errors.length; i++) {\n    var e = errors[i];\n    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n  }\n  return text.slice(0, -separator.length);\n}\n\n\n/**\n * Add custom format\n * @this   Ajv\n * @param {String} name format name\n * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n * @return {Ajv} this for method chaining\n */\nfunction addFormat(name, format) {\n  if (typeof format == 'string') format = new RegExp(format);\n  this._formats[name] = format;\n  return this;\n}\n\n\nfunction addDraft6MetaSchema(self) {\n  var $dataSchema;\n  if (self._opts.$data) {\n    $dataSchema = require('./refs/$data.json');\n    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\n  }\n  if (self._opts.meta === false) return;\n  var metaSchema = require('./refs/json-schema-draft-06.json');\n  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\n  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n}\n\n\nfunction addInitialSchemas(self) {\n  var optsSchemas = self._opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);\n  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);\n}\n\n\nfunction addInitialFormats(self) {\n  for (var name in self._opts.formats) {\n    var format = self._opts.formats[name];\n    self.addFormat(name, format);\n  }\n}\n\n\nfunction checkUnique(self, id) {\n  if (self._schemas[id] || self._refs[id])\n    throw new Error('schema with key or id \"' + id + '\" already exists');\n}\n\n\nfunction getMetaSchemaOptions(self) {\n  var metaOpts = util.copy(self._opts);\n  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)\n    delete metaOpts[META_IGNORE_OPTIONS[i]];\n  return metaOpts;\n}\n\n\nfunction setLogger(self) {\n  var logger = self._opts.logger;\n  if (logger === false) {\n    self.logger = {log: noop, warn: noop, error: noop};\n  } else {\n    if (logger === undefined) logger = console;\n    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))\n      throw new Error('logger must implement log, warn and error methods');\n    self.logger = logger;\n  }\n}\n\n\nfunction noop() {}\n","'use strict';\n\nvar resolve = require('./resolve')\n  , util = require('./util')\n  , errorClasses = require('./error_classes')\n  , stableStringify = require('fast-json-stable-stringify');\n\nvar validateGenerator = require('../dotjs/validate');\n\n/**\n * Functions below are used inside compiled validations function\n */\n\nvar co = require('co');\nvar ucs2length = util.ucs2length;\nvar equal = require('fast-deep-equal');\n\n// this error is thrown by async schemas to return validation errors via exception\nvar ValidationError = errorClasses.Validation;\n\nmodule.exports = compile;\n\n\n/**\n * Compiles schema to validation function\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Object} root object with information about the root schema for this schema\n * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution\n * @param  {String} baseId base ID for IDs in the schema\n * @return {Function} validation function\n */\nfunction compile(schema, root, localRefs, baseId) {\n  /* jshint validthis: true, evil: true */\n  /* eslint no-shadow: 0 */\n  var self = this\n    , opts = this._opts\n    , refVal = [ undefined ]\n    , refs = {}\n    , patterns = []\n    , patternsHash = {}\n    , defaults = []\n    , defaultsHash = {}\n    , customRules = [];\n\n  root = root || { schema: schema, refVal: refVal, refs: refs };\n\n  var c = checkCompiling.call(this, schema, root, baseId);\n  var compilation = this._compilations[c.index];\n  if (c.compiling) return (compilation.callValidate = callValidate);\n\n  var formats = this._formats;\n  var RULES = this.RULES;\n\n  try {\n    var v = localCompile(schema, root, localRefs, baseId);\n    compilation.validate = v;\n    var cv = compilation.callValidate;\n    if (cv) {\n      cv.schema = v.schema;\n      cv.errors = null;\n      cv.refs = v.refs;\n      cv.refVal = v.refVal;\n      cv.root = v.root;\n      cv.$async = v.$async;\n      if (opts.sourceCode) cv.source = v.source;\n    }\n    return v;\n  } finally {\n    endCompiling.call(this, schema, root, baseId);\n  }\n\n  function callValidate() {\n    var validate = compilation.validate;\n    var result = validate.apply(null, arguments);\n    callValidate.errors = validate.errors;\n    return result;\n  }\n\n  function localCompile(_schema, _root, localRefs, baseId) {\n    var isRoot = !_root || (_root && _root.schema == _schema);\n    if (_root.schema != root.schema)\n      return compile.call(self, _schema, _root, localRefs, baseId);\n\n    var $async = _schema.$async === true;\n\n    var sourceCode = validateGenerator({\n      isTop: true,\n      schema: _schema,\n      isRoot: isRoot,\n      baseId: baseId,\n      root: _root,\n      schemaPath: '',\n      errSchemaPath: '#',\n      errorPath: '\"\"',\n      MissingRefError: errorClasses.MissingRef,\n      RULES: RULES,\n      validate: validateGenerator,\n      util: util,\n      resolve: resolve,\n      resolveRef: resolveRef,\n      usePattern: usePattern,\n      useDefault: useDefault,\n      useCustomRule: useCustomRule,\n      opts: opts,\n      formats: formats,\n      logger: self.logger,\n      self: self\n    });\n\n    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)\n                   + vars(defaults, defaultCode) + vars(customRules, customRuleCode)\n                   + sourceCode;\n\n    if (opts.processCode) sourceCode = opts.processCode(sourceCode);\n    // console.log('\\n\\n\\n *** \\n', JSON.stringify(sourceCode));\n    var validate;\n    try {\n      var makeValidate = new Function(\n        'self',\n        'RULES',\n        'formats',\n        'root',\n        'refVal',\n        'defaults',\n        'customRules',\n        'co',\n        'equal',\n        'ucs2length',\n        'ValidationError',\n        sourceCode\n      );\n\n      validate = makeValidate(\n        self,\n        RULES,\n        formats,\n        root,\n        refVal,\n        defaults,\n        customRules,\n        co,\n        equal,\n        ucs2length,\n        ValidationError\n      );\n\n      refVal[0] = validate;\n    } catch(e) {\n      self.logger.error('Error compiling schema, function code:', sourceCode);\n      throw e;\n    }\n\n    validate.schema = _schema;\n    validate.errors = null;\n    validate.refs = refs;\n    validate.refVal = refVal;\n    validate.root = isRoot ? validate : _root;\n    if ($async) validate.$async = true;\n    if (opts.sourceCode === true) {\n      validate.source = {\n        code: sourceCode,\n        patterns: patterns,\n        defaults: defaults\n      };\n    }\n\n    return validate;\n  }\n\n  function resolveRef(baseId, ref, isRoot) {\n    ref = resolve.url(baseId, ref);\n    var refIndex = refs[ref];\n    var _refVal, refCode;\n    if (refIndex !== undefined) {\n      _refVal = refVal[refIndex];\n      refCode = 'refVal[' + refIndex + ']';\n      return resolvedRef(_refVal, refCode);\n    }\n    if (!isRoot && root.refs) {\n      var rootRefId = root.refs[ref];\n      if (rootRefId !== undefined) {\n        _refVal = root.refVal[rootRefId];\n        refCode = addLocalRef(ref, _refVal);\n        return resolvedRef(_refVal, refCode);\n      }\n    }\n\n    refCode = addLocalRef(ref);\n    var v = resolve.call(self, localCompile, root, ref);\n    if (v === undefined) {\n      var localSchema = localRefs && localRefs[ref];\n      if (localSchema) {\n        v = resolve.inlineRef(localSchema, opts.inlineRefs)\n            ? localSchema\n            : compile.call(self, localSchema, root, localRefs, baseId);\n      }\n    }\n\n    if (v === undefined) {\n      removeLocalRef(ref);\n    } else {\n      replaceLocalRef(ref, v);\n      return resolvedRef(v, refCode);\n    }\n  }\n\n  function addLocalRef(ref, v) {\n    var refId = refVal.length;\n    refVal[refId] = v;\n    refs[ref] = refId;\n    return 'refVal' + refId;\n  }\n\n  function removeLocalRef(ref) {\n    delete refs[ref];\n  }\n\n  function replaceLocalRef(ref, v) {\n    var refId = refs[ref];\n    refVal[refId] = v;\n  }\n\n  function resolvedRef(refVal, code) {\n    return typeof refVal == 'object' || typeof refVal == 'boolean'\n            ? { code: code, schema: refVal, inline: true }\n            : { code: code, $async: refVal && refVal.$async };\n  }\n\n  function usePattern(regexStr) {\n    var index = patternsHash[regexStr];\n    if (index === undefined) {\n      index = patternsHash[regexStr] = patterns.length;\n      patterns[index] = regexStr;\n    }\n    return 'pattern' + index;\n  }\n\n  function useDefault(value) {\n    switch (typeof value) {\n      case 'boolean':\n      case 'number':\n        return '' + value;\n      case 'string':\n        return util.toQuotedString(value);\n      case 'object':\n        if (value === null) return 'null';\n        var valueStr = stableStringify(value);\n        var index = defaultsHash[valueStr];\n        if (index === undefined) {\n          index = defaultsHash[valueStr] = defaults.length;\n          defaults[index] = value;\n        }\n        return 'default' + index;\n    }\n  }\n\n  function useCustomRule(rule, schema, parentSchema, it) {\n    var validateSchema = rule.definition.validateSchema;\n    if (validateSchema && self._opts.validateSchema !== false) {\n      var valid = validateSchema(schema);\n      if (!valid) {\n        var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);\n        if (self._opts.validateSchema == 'log') self.logger.error(message);\n        else throw new Error(message);\n      }\n    }\n\n    var compile = rule.definition.compile\n      , inline = rule.definition.inline\n      , macro = rule.definition.macro;\n\n    var validate;\n    if (compile) {\n      validate = compile.call(self, schema, parentSchema, it);\n    } else if (macro) {\n      validate = macro.call(self, schema, parentSchema, it);\n      if (opts.validateSchema !== false) self.validateSchema(validate, true);\n    } else if (inline) {\n      validate = inline.call(self, it, rule.keyword, schema, parentSchema);\n    } else {\n      validate = rule.definition.validate;\n      if (!validate) return;\n    }\n\n    if (validate === undefined)\n      throw new Error('custom keyword \"' + rule.keyword + '\"failed to compile');\n\n    var index = customRules.length;\n    customRules[index] = validate;\n\n    return {\n      code: 'customRule' + index,\n      validate: validate\n    };\n  }\n}\n\n\n/**\n * Checks if the schema is currently compiled\n * @this   Ajv\n * @param  {Object} schema schema to compile\n * @param  {Object} root root object\n * @param  {String} baseId base schema ID\n * @return {Object} object with properties \"index\" (compilation index) and \"compiling\" (boolean)\n */\nfunction checkCompiling(schema, root, baseId) {\n  /* jshint validthis: true */\n  var index = compIndex.call(this, schema, root, baseId);\n  if (index >= 0) return { index: index, compiling: true };\n  index = this._compilations.length;\n  this._compilations[index] = {\n    schema: schema,\n    root: root,\n    baseId: baseId\n  };\n  return { index: index, compiling: false };\n}\n\n\n/**\n * Removes the schema from the currently compiled list\n * @this   Ajv\n * @param  {Object} schema schema to compile\n * @param  {Object} root root object\n * @param  {String} baseId base schema ID\n */\nfunction endCompiling(schema, root, baseId) {\n  /* jshint validthis: true */\n  var i = compIndex.call(this, schema, root, baseId);\n  if (i >= 0) this._compilations.splice(i, 1);\n}\n\n\n/**\n * Index of schema compilation in the currently compiled list\n * @this   Ajv\n * @param  {Object} schema schema to compile\n * @param  {Object} root root object\n * @param  {String} baseId base schema ID\n * @return {Integer} compilation index\n */\nfunction compIndex(schema, root, baseId) {\n  /* jshint validthis: true */\n  for (var i=0; i<this._compilations.length; i++) {\n    var c = this._compilations[i];\n    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;\n  }\n  return -1;\n}\n\n\nfunction patternCode(i, patterns) {\n  return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';\n}\n\n\nfunction defaultCode(i) {\n  return 'var default' + i + ' = defaults[' + i + '];';\n}\n\n\nfunction refValCode(i, refVal) {\n  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';\n}\n\n\nfunction customRuleCode(i) {\n  return 'var customRule' + i + ' = customRules[' + i + '];';\n}\n\n\nfunction vars(arr, statement) {\n  if (!arr.length) return '';\n  var code = '';\n  for (var i=0; i<arr.length; i++)\n    code += statement(i, arr);\n  return code;\n}\n","'use strict';\n\n// https://mathiasbynens.be/notes/javascript-encoding\n// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode\nmodule.exports = function ucs2length(str) {\n  var length = 0\n    , len = str.length\n    , pos = 0\n    , value;\n  while (pos < len) {\n    length++;\n    value = str.charCodeAt(pos++);\n    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {\n      // high surrogate, and there is a next character\n      value = str.charCodeAt(pos);\n      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate\n    }\n  }\n  return length;\n};\n","'use strict';\n\n\nvar Cache = module.exports = function Cache() {\n  this._cache = {};\n};\n\n\nCache.prototype.put = function Cache_put(key, value) {\n  this._cache[key] = value;\n};\n\n\nCache.prototype.get = function Cache_get(key) {\n  return this._cache[key];\n};\n\n\nCache.prototype.del = function Cache_del(key) {\n  delete this._cache[key];\n};\n\n\nCache.prototype.clear = function Cache_clear() {\n  this._cache = {};\n};\n","'use strict';\n\nvar util = require('./util');\n\nvar DATE = /^\\d\\d\\d\\d-(\\d\\d)-(\\d\\d)$/;\nvar DAYS = [0,31,29,31,30,31,30,31,31,30,31,30,31];\nvar TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d:\\d\\d)?$/i;\nvar HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;\nvar URI = /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\nvar URIREF = /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'\"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\n// uri-template: https://tools.ietf.org/html/rfc6570\nvar URITEMPLATE = /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i;\n// For the source: https://gist.github.com/dperini/729294\n// For test cases: https://mathiasbynens.be/demo/url-regex\n// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.\n// var URL = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu;\nvar URL = /^(?:(?:http[s\\u017F]?|ftp):\\/\\/)(?:(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+(?::(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?@)?(?:(?!10(?:\\.[0-9]{1,3}){3})(?!127(?:\\.[0-9]{1,3}){3})(?!169\\.254(?:\\.[0-9]{1,3}){2})(?!192\\.168(?:\\.[0-9]{1,3}){2})(?!172\\.(?:1[6-9]|2[0-9]|3[01])(?:\\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)(?:\\.(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)*(?:\\.(?:(?:[KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\\/(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?$/i;\nvar UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;\nvar JSON_POINTER = /^(?:\\/(?:[^~/]|~0|~1)*)*$|^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;\nvar RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/;\n\n\nmodule.exports = formats;\n\nfunction formats(mode) {\n  mode = mode == 'full' ? 'full' : 'fast';\n  return util.copy(formats[mode]);\n}\n\n\nformats.fast = {\n  // date: http://tools.ietf.org/html/rfc3339#section-5.6\n  date: /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/,\n  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6\n  time: /^[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:z|[+-]\\d\\d:\\d\\d)?$/i,\n  'date-time': /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s][0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:z|[+-]\\d\\d:\\d\\d)$/i,\n  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js\n  uri: /^(?:[a-z][a-z0-9+-.]*)(?::|\\/)\\/?[^\\s]*$/i,\n  'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\\/\\/)?[^\\s]*$/i,\n  'uri-template': URITEMPLATE,\n  url: URL,\n  // email (sources from jsen validator):\n  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363\n  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')\n  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,\n  hostname: HOSTNAME,\n  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses\n  ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\n  regex: regex,\n  // uuid: http://tools.ietf.org/html/rfc4122\n  uuid: UUID,\n  // JSON-pointer: https://tools.ietf.org/html/rfc6901\n  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A\n  'json-pointer': JSON_POINTER,\n  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00\n  'relative-json-pointer': RELATIVE_JSON_POINTER\n};\n\n\nformats.full = {\n  date: date,\n  time: time,\n  'date-time': date_time,\n  uri: uri,\n  'uri-reference': URIREF,\n  'uri-template': URITEMPLATE,\n  url: URL,\n  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&''*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,\n  hostname: hostname,\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n  ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\n  regex: regex,\n  uuid: UUID,\n  'json-pointer': JSON_POINTER,\n  'relative-json-pointer': RELATIVE_JSON_POINTER\n};\n\n\nfunction date(str) {\n  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n  var matches = str.match(DATE);\n  if (!matches) return false;\n\n  var month = +matches[1];\n  var day = +matches[2];\n  return month >= 1 && month <= 12 && day >= 1 && day <= DAYS[month];\n}\n\n\nfunction time(str, full) {\n  var matches = str.match(TIME);\n  if (!matches) return false;\n\n  var hour = matches[1];\n  var minute = matches[2];\n  var second = matches[3];\n  var timeZone = matches[5];\n  return hour <= 23 && minute <= 59 && second <= 59 && (!full || timeZone);\n}\n\n\nvar DATE_TIME_SEPARATOR = /t|\\s/i;\nfunction date_time(str) {\n  // http://tools.ietf.org/html/rfc3339#section-5.6\n  var dateTime = str.split(DATE_TIME_SEPARATOR);\n  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);\n}\n\n\nfunction hostname(str) {\n  // https://tools.ietf.org/html/rfc1034#section-3.5\n  // https://tools.ietf.org/html/rfc1123#section-2\n  return str.length <= 255 && HOSTNAME.test(str);\n}\n\n\nvar NOT_URI_FRAGMENT = /\\/|:/;\nfunction uri(str) {\n  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required \".\"\n  return NOT_URI_FRAGMENT.test(str) && URI.test(str);\n}\n\n\nvar Z_ANCHOR = /[^\\\\]\\\\Z/;\nfunction regex(str) {\n  if (Z_ANCHOR.test(str)) return false;\n  try {\n    new RegExp(str);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n","'use strict';\n\nvar ruleModules = require('./_rules')\n  , toHash = require('./util').toHash;\n\nmodule.exports = function rules() {\n  var RULES = [\n    { type: 'number',\n      rules: [ { 'maximum': ['exclusiveMaximum'] },\n               { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },\n    { type: 'string',\n      rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },\n    { type: 'array',\n      rules: [ 'maxItems', 'minItems', 'uniqueItems', 'contains', 'items' ] },\n    { type: 'object',\n      rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',\n               { 'properties': ['additionalProperties', 'patternProperties'] } ] },\n    { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf' ] }\n  ];\n\n  var ALL = [ 'type' ];\n  var KEYWORDS = [\n    'additionalItems', '$schema', '$id', 'id', 'title',\n    'description', 'default', 'definitions'\n  ];\n  var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];\n  RULES.all = toHash(ALL);\n  RULES.types = toHash(TYPES);\n\n  RULES.forEach(function (group) {\n    group.rules = group.rules.map(function (keyword) {\n      var implKeywords;\n      if (typeof keyword == 'object') {\n        var key = Object.keys(keyword)[0];\n        implKeywords = keyword[key];\n        keyword = key;\n        implKeywords.forEach(function (k) {\n          ALL.push(k);\n          RULES.all[k] = true;\n        });\n      }\n      ALL.push(keyword);\n      var rule = RULES.all[keyword] = {\n        keyword: keyword,\n        code: ruleModules[keyword],\n        implements: implKeywords\n      };\n      return rule;\n    });\n\n    if (group.type) RULES.types[group.type] = group;\n  });\n\n  RULES.keywords = toHash(ALL.concat(KEYWORDS));\n  RULES.custom = {};\n\n  return RULES;\n};\n","'use strict';\n\n//all requires must be explicit because browserify won't work with dynamic requires\nmodule.exports = {\n  '$ref': require('../dotjs/ref'),\n  allOf: require('../dotjs/allOf'),\n  anyOf: require('../dotjs/anyOf'),\n  const: require('../dotjs/const'),\n  contains: require('../dotjs/contains'),\n  dependencies: require('../dotjs/dependencies'),\n  'enum': require('../dotjs/enum'),\n  format: require('../dotjs/format'),\n  items: require('../dotjs/items'),\n  maximum: require('../dotjs/_limit'),\n  minimum: require('../dotjs/_limit'),\n  maxItems: require('../dotjs/_limitItems'),\n  minItems: require('../dotjs/_limitItems'),\n  maxLength: require('../dotjs/_limitLength'),\n  minLength: require('../dotjs/_limitLength'),\n  maxProperties: require('../dotjs/_limitProperties'),\n  minProperties: require('../dotjs/_limitProperties'),\n  multipleOf: require('../dotjs/multipleOf'),\n  not: require('../dotjs/not'),\n  oneOf: require('../dotjs/oneOf'),\n  pattern: require('../dotjs/pattern'),\n  properties: require('../dotjs/properties'),\n  propertyNames: require('../dotjs/propertyNames'),\n  required: require('../dotjs/required'),\n  uniqueItems: require('../dotjs/uniqueItems'),\n  validate: require('../dotjs/validate')\n};\n","'use strict';\nmodule.exports = function generate_ref(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $async, $refCode;\n  if ($schema == '#' || $schema == '#/') {\n    if (it.isRoot) {\n      $async = it.async;\n      $refCode = 'validate';\n    } else {\n      $async = it.root.schema.$async === true;\n      $refCode = 'root.refVal[0]';\n    }\n  } else {\n    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);\n    if ($refVal === undefined) {\n      var $message = it.MissingRefError.message(it.baseId, $schema);\n      if (it.opts.missingRefs == 'fail') {\n        it.logger.error($message);\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ('$ref') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \\'' + (it.util.escapeQuotes($schema)) + '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'can\\\\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        if ($breakOnError) {\n          out += ' if (false) { ';\n        }\n      } else if (it.opts.missingRefs == 'ignore') {\n        it.logger.warn($message);\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n      } else {\n        throw new it.MissingRefError(it.baseId, $schema, $message);\n      }\n    } else if ($refVal.inline) {\n      var $it = it.util.copy(it);\n      $it.level++;\n      var $nextValid = 'valid' + $it.level;\n      $it.schema = $refVal.schema;\n      $it.schemaPath = '';\n      $it.errSchemaPath = $schema;\n      var $code = it.validate($it).replace(/validate\\.schema/g, $refVal.code);\n      out += ' ' + ($code) + ' ';\n      if ($breakOnError) {\n        out += ' if (' + ($nextValid) + ') { ';\n      }\n    } else {\n      $async = $refVal.$async === true;\n      $refCode = $refVal.code;\n    }\n  }\n  if ($refCode) {\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    if (it.opts.passContext) {\n      out += ' ' + ($refCode) + '.call(this, ';\n    } else {\n      out += ' ' + ($refCode) + '( ';\n    }\n    out += ' ' + ($data) + ', (dataPath || \\'\\')';\n    if (it.errorPath != '\"\"') {\n      out += ' + ' + (it.errorPath);\n    }\n    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\n      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';\n    var __callValidate = out;\n    out = $$outStack.pop();\n    if ($async) {\n      if (!it.async) throw new Error('async schema referenced by sync schema');\n      if ($breakOnError) {\n        out += ' var ' + ($valid) + '; ';\n      }\n      out += ' try { ' + (it.yieldAwait) + ' ' + (__callValidate) + '; ';\n      if ($breakOnError) {\n        out += ' ' + ($valid) + ' = true; ';\n      }\n      out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';\n      if ($breakOnError) {\n        out += ' ' + ($valid) + ' = false; ';\n      }\n      out += ' } ';\n      if ($breakOnError) {\n        out += ' if (' + ($valid) + ') { ';\n      }\n    } else {\n      out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';\n      if ($breakOnError) {\n        out += ' else { ';\n      }\n    }\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_allOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $currentBaseId = $it.baseId,\n    $allSchemasEmpty = true;\n  var arr1 = $schema;\n  if (arr1) {\n    var $sch, $i = -1,\n      l1 = arr1.length - 1;\n    while ($i < l1) {\n      $sch = arr1[$i += 1];\n      if (it.util.schemaHasRules($sch, it.RULES.all)) {\n        $allSchemasEmpty = false;\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + (it.validate($it)) + ' ';\n        $it.baseId = $currentBaseId;\n        if ($breakOnError) {\n          out += ' if (' + ($nextValid) + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    if ($allSchemasEmpty) {\n      out += ' if (true) { ';\n    } else {\n      out += ' ' + ($closingBraces.slice(0, -1)) + ' ';\n    }\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_anyOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $noEmptySchema = $schema.every(function($sch) {\n    return it.util.schemaHasRules($sch, it.RULES.all);\n  });\n  if ($noEmptySchema) {\n    var $currentBaseId = $it.baseId;\n    out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    var arr1 = $schema;\n    if (arr1) {\n      var $sch, $i = -1,\n        l1 = arr1.length - 1;\n      while ($i < l1) {\n        $sch = arr1[$i += 1];\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + (it.validate($it)) + ' ';\n        $it.baseId = $currentBaseId;\n        out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';\n        $closingBraces += '}';\n      }\n    }\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('anyOf') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should match some schema in anyOf\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError(vErrors); ';\n      } else {\n        out += ' validate.errors = vErrors; return false; ';\n      }\n    }\n    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';\n    if (it.opts.allErrors) {\n      out += ' } ';\n    }\n    out = it.util.cleanUpCode(out);\n  } else {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_const(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  if (!$isData) {\n    out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';\n  }\n  out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('const') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be equal to constant\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' }';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_contains(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $idx = 'i' + $lvl,\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\n    $nextData = 'data' + $dataNxt,\n    $currentBaseId = it.baseId,\n    $nonEmptySchema = it.util.schemaHasRules($schema, it.RULES.all);\n  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';\n  if ($nonEmptySchema) {\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';\n    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n    var $passData = $data + '[' + $idx + ']';\n    $it.dataPathArr[$dataNxt] = $idx;\n    var $code = it.validate($it);\n    $it.baseId = $currentBaseId;\n    if (it.util.varOccurences($code, $nextData) < 2) {\n      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n    } else {\n      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n    }\n    out += ' if (' + ($nextValid) + ') break; }  ';\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';\n  } else {\n    out += ' if (' + ($data) + '.length == 0) {';\n  }\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('contains') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should contain a valid item\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' } else { ';\n  if ($nonEmptySchema) {\n    out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';\n  }\n  if (it.opts.allErrors) {\n    out += ' } ';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_dependencies(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $schemaDeps = {},\n    $propertyDeps = {},\n    $ownProperties = it.opts.ownProperties;\n  for ($property in $schema) {\n    var $sch = $schema[$property];\n    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;\n    $deps[$property] = $sch;\n  }\n  out += 'var ' + ($errs) + ' = errors;';\n  var $currentErrorPath = it.errorPath;\n  out += 'var missing' + ($lvl) + ';';\n  for (var $property in $propertyDeps) {\n    $deps = $propertyDeps[$property];\n    if ($deps.length) {\n      out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';\n      if ($ownProperties) {\n        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($property)) + '\\') ';\n      }\n      if ($breakOnError) {\n        out += ' && ( ';\n        var arr1 = $deps;\n        if (arr1) {\n          var $propertyKey, $i = -1,\n            l1 = arr1.length - 1;\n          while ($i < l1) {\n            $propertyKey = arr1[$i += 1];\n            if ($i) {\n              out += ' || ';\n            }\n            var $prop = it.util.getProperty($propertyKey),\n              $useData = $data + $prop;\n            out += ' ( ( ' + ($useData) + ' === undefined ';\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n            }\n            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';\n          }\n        }\n        out += ')) {  ';\n        var $propertyPath = 'missing' + $lvl,\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;\n        }\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ('dependencies') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \\'' + (it.util.escapeQuotes($property)) + '\\', missingProperty: \\'' + ($missingProperty) + '\\', depsCount: ' + ($deps.length) + ', deps: \\'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\", \"))) + '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should have ';\n            if ($deps.length == 1) {\n              out += 'property ' + (it.util.escapeQuotes($deps[0]));\n            } else {\n              out += 'properties ' + (it.util.escapeQuotes($deps.join(\", \")));\n            }\n            out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n      } else {\n        out += ' ) { ';\n        var arr2 = $deps;\n        if (arr2) {\n          var $propertyKey, i2 = -1,\n            l2 = arr2.length - 1;\n          while (i2 < l2) {\n            $propertyKey = arr2[i2 += 1];\n            var $prop = it.util.getProperty($propertyKey),\n              $missingProperty = it.util.escapeQuotes($propertyKey),\n              $useData = $data + $prop;\n            if (it.opts._errorDataPathProperty) {\n              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n            }\n            out += ' if ( ' + ($useData) + ' === undefined ';\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n            }\n            out += ') {  var err =   '; /* istanbul ignore else */\n            if (it.createErrors !== false) {\n              out += ' { keyword: \\'' + ('dependencies') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \\'' + (it.util.escapeQuotes($property)) + '\\', missingProperty: \\'' + ($missingProperty) + '\\', depsCount: ' + ($deps.length) + ', deps: \\'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\", \"))) + '\\' } ';\n              if (it.opts.messages !== false) {\n                out += ' , message: \\'should have ';\n                if ($deps.length == 1) {\n                  out += 'property ' + (it.util.escapeQuotes($deps[0]));\n                } else {\n                  out += 'properties ' + (it.util.escapeQuotes($deps.join(\", \")));\n                }\n                out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\\' ';\n              }\n              if (it.opts.verbose) {\n                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n              }\n              out += ' } ';\n            } else {\n              out += ' {} ';\n            }\n            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';\n          }\n        }\n      }\n      out += ' }   ';\n      if ($breakOnError) {\n        $closingBraces += '}';\n        out += ' else { ';\n      }\n    }\n  }\n  it.errorPath = $currentErrorPath;\n  var $currentBaseId = $it.baseId;\n  for (var $property in $schemaDeps) {\n    var $sch = $schemaDeps[$property];\n    if (it.util.schemaHasRules($sch, it.RULES.all)) {\n      out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';\n      if ($ownProperties) {\n        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($property)) + '\\') ';\n      }\n      out += ') { ';\n      $it.schema = $sch;\n      $it.schemaPath = $schemaPath + it.util.getProperty($property);\n      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);\n      out += '  ' + (it.validate($it)) + ' ';\n      $it.baseId = $currentBaseId;\n      out += ' }  ';\n      if ($breakOnError) {\n        out += ' if (' + ($nextValid) + ') { ';\n        $closingBraces += '}';\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_enum(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $i = 'i' + $lvl,\n    $vSchema = 'schema' + $lvl;\n  if (!$isData) {\n    out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';\n  }\n  out += 'var ' + ($valid) + ';';\n  if ($isData) {\n    out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';\n  }\n  out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';\n  if ($isData) {\n    out += '  }  ';\n  }\n  out += ' if (!' + ($valid) + ') {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('enum') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be equal to one of the allowed values\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' }';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_format(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  if (it.opts.format === false) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n    return out;\n  }\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $unknownFormats = it.opts.unknownFormats,\n    $allowUnknown = Array.isArray($unknownFormats);\n  if ($isData) {\n    var $format = 'format' + $lvl,\n      $isObject = 'isObject' + $lvl,\n      $formatType = 'formatType' + $lvl;\n    out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \\'object\\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \\'string\\'; if (' + ($isObject) + ') { ';\n    if (it.async) {\n      out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';\n    }\n    out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';\n    if ($isData) {\n      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'string\\') || ';\n    }\n    out += ' (';\n    if ($unknownFormats != 'ignore') {\n      out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';\n      if ($allowUnknown) {\n        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';\n      }\n      out += ') || ';\n    }\n    out += ' (' + ($format) + ' && ' + ($formatType) + ' == \\'' + ($ruleType) + '\\' && !(typeof ' + ($format) + ' == \\'function\\' ? ';\n    if (it.async) {\n      out += ' (async' + ($lvl) + ' ? ' + (it.yieldAwait) + ' ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';\n    } else {\n      out += ' ' + ($format) + '(' + ($data) + ') ';\n    }\n    out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';\n  } else {\n    var $format = it.formats[$schema];\n    if (!$format) {\n      if ($unknownFormats == 'ignore') {\n        it.logger.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n        return out;\n      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n        return out;\n      } else {\n        throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\n      }\n    }\n    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;\n    var $formatType = $isObject && $format.type || 'string';\n    if ($isObject) {\n      var $async = $format.async === true;\n      $format = $format.validate;\n    }\n    if ($formatType != $ruleType) {\n      if ($breakOnError) {\n        out += ' if (true) { ';\n      }\n      return out;\n    }\n    if ($async) {\n      if (!it.async) throw new Error('async format in sync schema');\n      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\n      out += ' if (!(' + (it.yieldAwait) + ' ' + ($formatRef) + '(' + ($data) + '))) { ';\n    } else {\n      out += ' if (! ';\n      var $formatRef = 'formats' + it.util.getProperty($schema);\n      if ($isObject) $formatRef += '.validate';\n      if (typeof $format == 'function') {\n        out += ' ' + ($formatRef) + '(' + ($data) + ') ';\n      } else {\n        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';\n      }\n      out += ') { ';\n    }\n  }\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('format') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';\n    if ($isData) {\n      out += '' + ($schemaValue);\n    } else {\n      out += '' + (it.util.toQuotedString($schema));\n    }\n    out += '  } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match format \"';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + (it.util.escapeQuotes($schema));\n      }\n      out += '\"\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + (it.util.toQuotedString($schema));\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' } ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_items(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $idx = 'i' + $lvl,\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\n    $nextData = 'data' + $dataNxt,\n    $currentBaseId = it.baseId;\n  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';\n  if (Array.isArray($schema)) {\n    var $additionalItems = it.schema.additionalItems;\n    if ($additionalItems === false) {\n      out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';\n      var $currErrSchemaPath = $errSchemaPath;\n      $errSchemaPath = it.errSchemaPath + '/additionalItems';\n      out += '  if (!' + ($valid) + ') {   ';\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = ''; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ('additionalItems') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'should NOT have more than ' + ($schema.length) + ' items\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError([' + (__err) + ']); ';\n        } else {\n          out += ' validate.errors = [' + (__err) + ']; return false; ';\n        }\n      } else {\n        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      }\n      out += ' } ';\n      $errSchemaPath = $currErrSchemaPath;\n      if ($breakOnError) {\n        $closingBraces += '}';\n        out += ' else { ';\n      }\n    }\n    var arr1 = $schema;\n    if (arr1) {\n      var $sch, $i = -1,\n        l1 = arr1.length - 1;\n      while ($i < l1) {\n        $sch = arr1[$i += 1];\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';\n          var $passData = $data + '[' + $i + ']';\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + '[' + $i + ']';\n          $it.errSchemaPath = $errSchemaPath + '/' + $i;\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);\n          $it.dataPathArr[$dataNxt] = $i;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          out += ' }  ';\n          if ($breakOnError) {\n            out += ' if (' + ($nextValid) + ') { ';\n            $closingBraces += '}';\n          }\n        }\n      }\n    }\n    if (typeof $additionalItems == 'object' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {\n      $it.schema = $additionalItems;\n      $it.schemaPath = it.schemaPath + '.additionalItems';\n      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';\n      out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';\n      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n      var $passData = $data + '[' + $idx + ']';\n      $it.dataPathArr[$dataNxt] = $idx;\n      var $code = it.validate($it);\n      $it.baseId = $currentBaseId;\n      if (it.util.varOccurences($code, $nextData) < 2) {\n        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n      } else {\n        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n      }\n      if ($breakOnError) {\n        out += ' if (!' + ($nextValid) + ') break; ';\n      }\n      out += ' } }  ';\n      if ($breakOnError) {\n        out += ' if (' + ($nextValid) + ') { ';\n        $closingBraces += '}';\n      }\n    }\n  } else if (it.util.schemaHasRules($schema, it.RULES.all)) {\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';\n    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n    var $passData = $data + '[' + $idx + ']';\n    $it.dataPathArr[$dataNxt] = $idx;\n    var $code = it.validate($it);\n    $it.baseId = $currentBaseId;\n    if (it.util.varOccurences($code, $nextData) < 2) {\n      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n    } else {\n      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n    }\n    if ($breakOnError) {\n      out += ' if (!' + ($nextValid) + ') break; ';\n    }\n    out += ' }';\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_multipleOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  out += 'var division' + ($lvl) + ';if (';\n  if ($isData) {\n    out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \\'number\\' || ';\n  }\n  out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';\n  if (it.opts.multipleOfPrecision) {\n    out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';\n  } else {\n    out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';\n  }\n  out += ' ) ';\n  if ($isData) {\n    out += '  )  ';\n  }\n  out += ' ) {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('multipleOf') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be multiple of ';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue);\n      } else {\n        out += '' + ($schemaValue) + '\\'';\n      }\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + ($schema);\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '} ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_not(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  if (it.util.schemaHasRules($schema, it.RULES.all)) {\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += ' var ' + ($errs) + ' = errors;  ';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    $it.createErrors = false;\n    var $allErrorsOption;\n    if ($it.opts.allErrors) {\n      $allErrorsOption = $it.opts.allErrors;\n      $it.opts.allErrors = false;\n    }\n    out += ' ' + (it.validate($it)) + ' ';\n    $it.createErrors = true;\n    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' if (' + ($nextValid) + ') {   ';\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = ''; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('not') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should NOT be valid\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + (__err) + ']); ';\n      } else {\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';\n    if (it.opts.allErrors) {\n      out += ' } ';\n    }\n  } else {\n    out += '  var err =   '; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('not') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should NOT be valid\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    if ($breakOnError) {\n      out += ' if (false) { ';\n    }\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_oneOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  out += 'var ' + ($errs) + ' = errors;var prevValid' + ($lvl) + ' = false;var ' + ($valid) + ' = false;';\n  var $currentBaseId = $it.baseId;\n  var $wasComposite = it.compositeRule;\n  it.compositeRule = $it.compositeRule = true;\n  var arr1 = $schema;\n  if (arr1) {\n    var $sch, $i = -1,\n      l1 = arr1.length - 1;\n    while ($i < l1) {\n      $sch = arr1[$i += 1];\n      if (it.util.schemaHasRules($sch, it.RULES.all)) {\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + (it.validate($it)) + ' ';\n        $it.baseId = $currentBaseId;\n      } else {\n        out += ' var ' + ($nextValid) + ' = true; ';\n      }\n      if ($i) {\n        out += ' if (' + ($nextValid) + ' && prevValid' + ($lvl) + ') ' + ($valid) + ' = false; else { ';\n        $closingBraces += '}';\n      }\n      out += ' if (' + ($nextValid) + ') ' + ($valid) + ' = prevValid' + ($lvl) + ' = true;';\n    }\n  }\n  it.compositeRule = $it.compositeRule = $wasComposite;\n  out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('oneOf') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match exactly one schema in oneOf\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError(vErrors); ';\n    } else {\n      out += ' validate.errors = vErrors; return false; ';\n    }\n  }\n  out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';\n  if (it.opts.allErrors) {\n    out += ' } ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_pattern(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);\n  out += 'if ( ';\n  if ($isData) {\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'string\\') || ';\n  }\n  out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('pattern') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';\n    if ($isData) {\n      out += '' + ($schemaValue);\n    } else {\n      out += '' + (it.util.toQuotedString($schema));\n    }\n    out += '  } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match pattern \"';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + (it.util.escapeQuotes($schema));\n      }\n      out += '\"\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + (it.util.toQuotedString($schema));\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '} ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_properties(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $key = 'key' + $lvl,\n    $idx = 'idx' + $lvl,\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\n    $nextData = 'data' + $dataNxt,\n    $dataProperties = 'dataProperties' + $lvl;\n  var $schemaKeys = Object.keys($schema || {}),\n    $pProperties = it.schema.patternProperties || {},\n    $pPropertyKeys = Object.keys($pProperties),\n    $aProperties = it.schema.additionalProperties,\n    $someProperties = $schemaKeys.length || $pPropertyKeys.length,\n    $noAdditional = $aProperties === false,\n    $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,\n    $removeAdditional = it.opts.removeAdditional,\n    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,\n    $ownProperties = it.opts.ownProperties,\n    $currentBaseId = it.baseId;\n  var $required = it.schema.required;\n  if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);\n  if (it.opts.patternGroups) {\n    var $pgProperties = it.schema.patternGroups || {},\n      $pgPropertyKeys = Object.keys($pgProperties);\n  }\n  out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';\n  if ($ownProperties) {\n    out += ' var ' + ($dataProperties) + ' = undefined;';\n  }\n  if ($checkAdditional) {\n    if ($ownProperties) {\n      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n    } else {\n      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n    }\n    if ($someProperties) {\n      out += ' var isAdditional' + ($lvl) + ' = !(false ';\n      if ($schemaKeys.length) {\n        if ($schemaKeys.length > 5) {\n          out += ' || validate.schema' + ($schemaPath) + '[' + ($key) + '] ';\n        } else {\n          var arr1 = $schemaKeys;\n          if (arr1) {\n            var $propertyKey, i1 = -1,\n              l1 = arr1.length - 1;\n            while (i1 < l1) {\n              $propertyKey = arr1[i1 += 1];\n              out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';\n            }\n          }\n        }\n      }\n      if ($pPropertyKeys.length) {\n        var arr2 = $pPropertyKeys;\n        if (arr2) {\n          var $pProperty, $i = -1,\n            l2 = arr2.length - 1;\n          while ($i < l2) {\n            $pProperty = arr2[$i += 1];\n            out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';\n          }\n        }\n      }\n      if (it.opts.patternGroups && $pgPropertyKeys.length) {\n        var arr3 = $pgPropertyKeys;\n        if (arr3) {\n          var $pgProperty, $i = -1,\n            l3 = arr3.length - 1;\n          while ($i < l3) {\n            $pgProperty = arr3[$i += 1];\n            out += ' || ' + (it.usePattern($pgProperty)) + '.test(' + ($key) + ') ';\n          }\n        }\n      }\n      out += ' ); if (isAdditional' + ($lvl) + ') { ';\n    }\n    if ($removeAdditional == 'all') {\n      out += ' delete ' + ($data) + '[' + ($key) + ']; ';\n    } else {\n      var $currentErrorPath = it.errorPath;\n      var $additionalProperty = '\\' + ' + $key + ' + \\'';\n      if (it.opts._errorDataPathProperty) {\n        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n      }\n      if ($noAdditional) {\n        if ($removeAdditional) {\n          out += ' delete ' + ($data) + '[' + ($key) + ']; ';\n        } else {\n          out += ' ' + ($nextValid) + ' = false; ';\n          var $currErrSchemaPath = $errSchemaPath;\n          $errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = ''; /* istanbul ignore else */\n          if (it.createErrors !== false) {\n            out += ' { keyword: \\'' + ('additionalProperties') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \\'' + ($additionalProperty) + '\\' } ';\n            if (it.opts.messages !== false) {\n              out += ' , message: \\'should NOT have additional properties\\' ';\n            }\n            if (it.opts.verbose) {\n              out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n            }\n            out += ' } ';\n          } else {\n            out += ' {} ';\n          }\n          var __err = out;\n          out = $$outStack.pop();\n          if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n            if (it.async) {\n              out += ' throw new ValidationError([' + (__err) + ']); ';\n            } else {\n              out += ' validate.errors = [' + (__err) + ']; return false; ';\n            }\n          } else {\n            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n          }\n          $errSchemaPath = $currErrSchemaPath;\n          if ($breakOnError) {\n            out += ' break; ';\n          }\n        }\n      } else if ($additionalIsSchema) {\n        if ($removeAdditional == 'failing') {\n          out += ' var ' + ($errs) + ' = errors;  ';\n          var $wasComposite = it.compositeRule;\n          it.compositeRule = $it.compositeRule = true;\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';\n          it.compositeRule = $it.compositeRule = $wasComposite;\n        } else {\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          if ($breakOnError) {\n            out += ' if (!' + ($nextValid) + ') break; ';\n          }\n        }\n      }\n      it.errorPath = $currentErrorPath;\n    }\n    if ($someProperties) {\n      out += ' } ';\n    }\n    out += ' }  ';\n    if ($breakOnError) {\n      out += ' if (' + ($nextValid) + ') { ';\n      $closingBraces += '}';\n    }\n  }\n  var $useDefaults = it.opts.useDefaults && !it.compositeRule;\n  if ($schemaKeys.length) {\n    var arr4 = $schemaKeys;\n    if (arr4) {\n      var $propertyKey, i4 = -1,\n        l4 = arr4.length - 1;\n      while (i4 < l4) {\n        $propertyKey = arr4[i4 += 1];\n        var $sch = $schema[$propertyKey];\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          var $prop = it.util.getProperty($propertyKey),\n            $passData = $data + $prop,\n            $hasDefault = $useDefaults && $sch.default !== undefined;\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + $prop;\n          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);\n          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\n          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            $code = it.util.varReplace($code, $nextData, $passData);\n            var $useData = $passData;\n          } else {\n            var $useData = $nextData;\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';\n          }\n          if ($hasDefault) {\n            out += ' ' + ($code) + ' ';\n          } else {\n            if ($requiredHash && $requiredHash[$propertyKey]) {\n              out += ' if ( ' + ($useData) + ' === undefined ';\n              if ($ownProperties) {\n                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n              }\n              out += ') { ' + ($nextValid) + ' = false; ';\n              var $currentErrorPath = it.errorPath,\n                $currErrSchemaPath = $errSchemaPath,\n                $missingProperty = it.util.escapeQuotes($propertyKey);\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n              $errSchemaPath = it.errSchemaPath + '/required';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'';\n                  if (it.opts._errorDataPathProperty) {\n                    out += 'is a required property';\n                  } else {\n                    out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n                  }\n                  out += '\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              $errSchemaPath = $currErrSchemaPath;\n              it.errorPath = $currentErrorPath;\n              out += ' } else { ';\n            } else {\n              if ($breakOnError) {\n                out += ' if ( ' + ($useData) + ' === undefined ';\n                if ($ownProperties) {\n                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n                }\n                out += ') { ' + ($nextValid) + ' = true; } else { ';\n              } else {\n                out += ' if (' + ($useData) + ' !== undefined ';\n                if ($ownProperties) {\n                  out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n                }\n                out += ' ) { ';\n              }\n            }\n            out += ' ' + ($code) + ' } ';\n          }\n        }\n        if ($breakOnError) {\n          out += ' if (' + ($nextValid) + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n  if ($pPropertyKeys.length) {\n    var arr5 = $pPropertyKeys;\n    if (arr5) {\n      var $pProperty, i5 = -1,\n        l5 = arr5.length - 1;\n      while (i5 < l5) {\n        $pProperty = arr5[i5 += 1];\n        var $sch = $pProperties[$pProperty];\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          $it.schema = $sch;\n          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);\n          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);\n          if ($ownProperties) {\n            out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n          } else {\n            out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n          }\n          out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          if ($breakOnError) {\n            out += ' if (!' + ($nextValid) + ') break; ';\n          }\n          out += ' } ';\n          if ($breakOnError) {\n            out += ' else ' + ($nextValid) + ' = true; ';\n          }\n          out += ' }  ';\n          if ($breakOnError) {\n            out += ' if (' + ($nextValid) + ') { ';\n            $closingBraces += '}';\n          }\n        }\n      }\n    }\n  }\n  if (it.opts.patternGroups && $pgPropertyKeys.length) {\n    var arr6 = $pgPropertyKeys;\n    if (arr6) {\n      var $pgProperty, i6 = -1,\n        l6 = arr6.length - 1;\n      while (i6 < l6) {\n        $pgProperty = arr6[i6 += 1];\n        var $pgSchema = $pgProperties[$pgProperty],\n          $sch = $pgSchema.schema;\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          $it.schema = $sch;\n          $it.schemaPath = it.schemaPath + '.patternGroups' + it.util.getProperty($pgProperty) + '.schema';\n          $it.errSchemaPath = it.errSchemaPath + '/patternGroups/' + it.util.escapeFragment($pgProperty) + '/schema';\n          out += ' var pgPropCount' + ($lvl) + ' = 0;  ';\n          if ($ownProperties) {\n            out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n          } else {\n            out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n          }\n          out += ' if (' + (it.usePattern($pgProperty)) + '.test(' + ($key) + ')) { pgPropCount' + ($lvl) + '++; ';\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          if ($breakOnError) {\n            out += ' if (!' + ($nextValid) + ') break; ';\n          }\n          out += ' } ';\n          if ($breakOnError) {\n            out += ' else ' + ($nextValid) + ' = true; ';\n          }\n          out += ' }  ';\n          if ($breakOnError) {\n            out += ' if (' + ($nextValid) + ') { ';\n            $closingBraces += '}';\n          }\n          var $pgMin = $pgSchema.minimum,\n            $pgMax = $pgSchema.maximum;\n          if ($pgMin !== undefined || $pgMax !== undefined) {\n            out += ' var ' + ($valid) + ' = true; ';\n            var $currErrSchemaPath = $errSchemaPath;\n            if ($pgMin !== undefined) {\n              var $limit = $pgMin,\n                $reason = 'minimum',\n                $moreOrLess = 'less';\n              out += ' ' + ($valid) + ' = pgPropCount' + ($lvl) + ' >= ' + ($pgMin) + '; ';\n              $errSchemaPath = it.errSchemaPath + '/patternGroups/minimum';\n              out += '  if (!' + ($valid) + ') {   ';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ('patternGroups') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: \\'' + ($reason) + '\\', limit: ' + ($limit) + ', pattern: \\'' + (it.util.escapeQuotes($pgProperty)) + '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern \"' + (it.util.escapeQuotes($pgProperty)) + '\"\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n              if ($pgMax !== undefined) {\n                out += ' else ';\n              }\n            }\n            if ($pgMax !== undefined) {\n              var $limit = $pgMax,\n                $reason = 'maximum',\n                $moreOrLess = 'more';\n              out += ' ' + ($valid) + ' = pgPropCount' + ($lvl) + ' <= ' + ($pgMax) + '; ';\n              $errSchemaPath = it.errSchemaPath + '/patternGroups/maximum';\n              out += '  if (!' + ($valid) + ') {   ';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ('patternGroups') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: \\'' + ($reason) + '\\', limit: ' + ($limit) + ', pattern: \\'' + (it.util.escapeQuotes($pgProperty)) + '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern \"' + (it.util.escapeQuotes($pgProperty)) + '\"\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n            }\n            $errSchemaPath = $currErrSchemaPath;\n            if ($breakOnError) {\n              out += ' if (' + ($valid) + ') { ';\n              $closingBraces += '}';\n            }\n          }\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_propertyNames(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  if (it.util.schemaHasRules($schema, it.RULES.all)) {\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    var $key = 'key' + $lvl,\n      $idx = 'idx' + $lvl,\n      $i = 'i' + $lvl,\n      $invalidName = '\\' + ' + $key + ' + \\'',\n      $dataNxt = $it.dataLevel = it.dataLevel + 1,\n      $nextData = 'data' + $dataNxt,\n      $dataProperties = 'dataProperties' + $lvl,\n      $ownProperties = it.opts.ownProperties,\n      $currentBaseId = it.baseId;\n    out += ' var ' + ($errs) + ' = errors; ';\n    if ($ownProperties) {\n      out += ' var ' + ($dataProperties) + ' = undefined; ';\n    }\n    if ($ownProperties) {\n      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n    } else {\n      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n    }\n    out += ' var startErrs' + ($lvl) + ' = errors; ';\n    var $passData = $key;\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    var $code = it.validate($it);\n    $it.baseId = $currentBaseId;\n    if (it.util.varOccurences($code, $nextData) < 2) {\n      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n    } else {\n      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n    }\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('propertyNames') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \\'' + ($invalidName) + '\\' } ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'property name \\\\\\'' + ($invalidName) + '\\\\\\' is invalid\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError(vErrors); ';\n      } else {\n        out += ' validate.errors = vErrors; return false; ';\n      }\n    }\n    if ($breakOnError) {\n      out += ' break; ';\n    }\n    out += ' } }';\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_required(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $vSchema = 'schema' + $lvl;\n  if (!$isData) {\n    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {\n      var $required = [];\n      var arr1 = $schema;\n      if (arr1) {\n        var $property, i1 = -1,\n          l1 = arr1.length - 1;\n        while (i1 < l1) {\n          $property = arr1[i1 += 1];\n          var $propertySch = it.schema.properties[$property];\n          if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {\n            $required[$required.length] = $property;\n          }\n        }\n      }\n    } else {\n      var $required = $schema;\n    }\n  }\n  if ($isData || $required.length) {\n    var $currentErrorPath = it.errorPath,\n      $loopRequired = $isData || $required.length >= it.opts.loopRequired,\n      $ownProperties = it.opts.ownProperties;\n    if ($breakOnError) {\n      out += ' var missing' + ($lvl) + '; ';\n      if ($loopRequired) {\n        if (!$isData) {\n          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';\n        }\n        var $i = 'i' + $lvl,\n          $propertyPath = 'schema' + $lvl + '[' + $i + ']',\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);\n        }\n        out += ' var ' + ($valid) + ' = true; ';\n        if ($isData) {\n          out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';\n        }\n        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';\n        if ($ownProperties) {\n          out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';\n        }\n        out += '; if (!' + ($valid) + ') break; } ';\n        if ($isData) {\n          out += '  }  ';\n        }\n        out += '  if (!' + ($valid) + ') {   ';\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'';\n            if (it.opts._errorDataPathProperty) {\n              out += 'is a required property';\n            } else {\n              out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        out += ' } else { ';\n      } else {\n        out += ' if ( ';\n        var arr2 = $required;\n        if (arr2) {\n          var $propertyKey, $i = -1,\n            l2 = arr2.length - 1;\n          while ($i < l2) {\n            $propertyKey = arr2[$i += 1];\n            if ($i) {\n              out += ' || ';\n            }\n            var $prop = it.util.getProperty($propertyKey),\n              $useData = $data + $prop;\n            out += ' ( ( ' + ($useData) + ' === undefined ';\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n            }\n            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';\n          }\n        }\n        out += ') {  ';\n        var $propertyPath = 'missing' + $lvl,\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;\n        }\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'';\n            if (it.opts._errorDataPathProperty) {\n              out += 'is a required property';\n            } else {\n              out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        out += ' } else { ';\n      }\n    } else {\n      if ($loopRequired) {\n        if (!$isData) {\n          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';\n        }\n        var $i = 'i' + $lvl,\n          $propertyPath = 'schema' + $lvl + '[' + $i + ']',\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);\n        }\n        if ($isData) {\n          out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */\n          if (it.createErrors !== false) {\n            out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n            if (it.opts.messages !== false) {\n              out += ' , message: \\'';\n              if (it.opts._errorDataPathProperty) {\n                out += 'is a required property';\n              } else {\n                out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n              }\n              out += '\\' ';\n            }\n            if (it.opts.verbose) {\n              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n            }\n            out += ' } ';\n          } else {\n            out += ' {} ';\n          }\n          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';\n        }\n        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';\n        if ($ownProperties) {\n          out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';\n        }\n        out += ') {  var err =   '; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'';\n            if (it.opts._errorDataPathProperty) {\n              out += 'is a required property';\n            } else {\n              out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';\n        if ($isData) {\n          out += '  }  ';\n        }\n      } else {\n        var arr3 = $required;\n        if (arr3) {\n          var $propertyKey, i3 = -1,\n            l3 = arr3.length - 1;\n          while (i3 < l3) {\n            $propertyKey = arr3[i3 += 1];\n            var $prop = it.util.getProperty($propertyKey),\n              $missingProperty = it.util.escapeQuotes($propertyKey),\n              $useData = $data + $prop;\n            if (it.opts._errorDataPathProperty) {\n              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n            }\n            out += ' if ( ' + ($useData) + ' === undefined ';\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n            }\n            out += ') {  var err =   '; /* istanbul ignore else */\n            if (it.createErrors !== false) {\n              out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n              if (it.opts.messages !== false) {\n                out += ' , message: \\'';\n                if (it.opts._errorDataPathProperty) {\n                  out += 'is a required property';\n                } else {\n                  out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n                }\n                out += '\\' ';\n              }\n              if (it.opts.verbose) {\n                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n              }\n              out += ' } ';\n            } else {\n              out += ' {} ';\n            }\n            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';\n          }\n        }\n      }\n    }\n    it.errorPath = $currentErrorPath;\n  } else if ($breakOnError) {\n    out += ' if (true) {';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_uniqueItems(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  if (($schema || $isData) && it.opts.uniqueItems !== false) {\n    if ($isData) {\n      out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \\'boolean\\') ' + ($valid) + ' = false; else { ';\n    }\n    out += ' var ' + ($valid) + ' = true; if (' + ($data) + '.length > 1) { var i = ' + ($data) + '.length, j; outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } } ';\n    if ($isData) {\n      out += '  }  ';\n    }\n    out += ' if (!' + ($valid) + ') {   ';\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = ''; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('uniqueItems') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should NOT have duplicate items (items ## \\' + j + \\' and \\' + i + \\' are identical)\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema:  ';\n        if ($isData) {\n          out += 'validate.schema' + ($schemaPath);\n        } else {\n          out += '' + ($schema);\n        }\n        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + (__err) + ']); ';\n      } else {\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n    out += ' } ';\n    if ($breakOnError) {\n      out += ' else { ';\n    }\n  } else {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  }\n  return out;\n}\n","'use strict';\n\nvar KEYWORDS = [\n  'multipleOf',\n  'maximum',\n  'exclusiveMaximum',\n  'minimum',\n  'exclusiveMinimum',\n  'maxLength',\n  'minLength',\n  'pattern',\n  'additionalItems',\n  'maxItems',\n  'minItems',\n  'uniqueItems',\n  'maxProperties',\n  'minProperties',\n  'required',\n  'additionalProperties',\n  'enum',\n  'format',\n  'const'\n];\n\nmodule.exports = function (metaSchema, keywordsJsonPointers) {\n  for (var i=0; i<keywordsJsonPointers.length; i++) {\n    metaSchema = JSON.parse(JSON.stringify(metaSchema));\n    var segments = keywordsJsonPointers[i].split('/');\n    var keywords = metaSchema;\n    var j;\n    for (j=1; j<segments.length; j++)\n      keywords = keywords[segments[j]];\n\n    for (j=0; j<KEYWORDS.length; j++) {\n      var key = KEYWORDS[j];\n      var schema = keywords[key];\n      if (schema) {\n        keywords[key] = {\n          anyOf: [\n            schema,\n            { $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#' }\n          ]\n        };\n      }\n    }\n  }\n\n  return metaSchema;\n};\n","'use strict';\n\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-06/schema';\n\nmodule.exports = function (ajv) {\n  var defaultMeta = ajv._opts.defaultMeta;\n  var metaSchemaRef = typeof defaultMeta == 'string'\n                      ? { $ref: defaultMeta }\n                      : ajv.getSchema(META_SCHEMA_ID)\n                        ? { $ref: META_SCHEMA_ID }\n                        : {};\n\n  ajv.addKeyword('patternGroups', {\n    // implemented in properties.jst\n    metaSchema: {\n      type: 'object',\n      additionalProperties: {\n        type: 'object',\n        required: [ 'schema' ],\n        properties: {\n          maximum: {\n            type: 'integer',\n            minimum: 0\n          },\n          minimum: {\n            type: 'integer',\n            minimum: 0\n          },\n          schema: metaSchemaRef\n        },\n        additionalProperties: false\n      }\n    }\n  });\n  ajv.RULES.all.properties.implements.push('patternGroups');\n};\n","'use strict';\n\nvar MissingRefError = require('./error_classes').MissingRef;\n\nmodule.exports = compileAsync;\n\n\n/**\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n * @this  Ajv\n * @param {Object}   schema schema object\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n * @return {Promise} promise that resolves with a validating function.\n */\nfunction compileAsync(schema, meta, callback) {\n  /* eslint no-shadow: 0 */\n  /* global Promise */\n  /* jshint validthis: true */\n  var self = this;\n  if (typeof this._opts.loadSchema != 'function')\n    throw new Error('options.loadSchema should be a function');\n\n  if (typeof meta == 'function') {\n    callback = meta;\n    meta = undefined;\n  }\n\n  var p = loadMetaSchemaOf(schema).then(function () {\n    var schemaObj = self._addSchema(schema, undefined, meta);\n    return schemaObj.validate || _compileAsync(schemaObj);\n  });\n\n  if (callback) {\n    p.then(\n      function(v) { callback(null, v); },\n      callback\n    );\n  }\n\n  return p;\n\n\n  function loadMetaSchemaOf(sch) {\n    var $schema = sch.$schema;\n    return $schema && !self.getSchema($schema)\n            ? compileAsync.call(self, { $ref: $schema }, true)\n            : Promise.resolve();\n  }\n\n\n  function _compileAsync(schemaObj) {\n    try { return self._compile(schemaObj); }\n    catch(e) {\n      if (e instanceof MissingRefError) return loadMissingSchema(e);\n      throw e;\n    }\n\n\n    function loadMissingSchema(e) {\n      var ref = e.missingSchema;\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n\n      var schemaPromise = self._loadingSchemas[ref];\n      if (!schemaPromise) {\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n        schemaPromise.then(removePromise, removePromise);\n      }\n\n      return schemaPromise.then(function (sch) {\n        if (!added(ref)) {\n          return loadMetaSchemaOf(sch).then(function () {\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n          });\n        }\n      }).then(function() {\n        return _compileAsync(schemaObj);\n      });\n\n      function removePromise() {\n        delete self._loadingSchemas[ref];\n      }\n\n      function added(ref) {\n        return self._refs[ref] || self._schemas[ref];\n      }\n    }\n  }\n}\n","'use strict';\n\nvar IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;\nvar customRuleCode = require('./dotjs/custom');\n\nmodule.exports = {\n  add: addKeyword,\n  get: getKeyword,\n  remove: removeKeyword\n};\n\n/**\n * Define custom keyword\n * @this  Ajv\n * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).\n * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.\n * @return {Ajv} this for method chaining\n */\nfunction addKeyword(keyword, definition) {\n  /* jshint validthis: true */\n  /* eslint no-shadow: 0 */\n  var RULES = this.RULES;\n\n  if (RULES.keywords[keyword])\n    throw new Error('Keyword ' + keyword + ' is already defined');\n\n  if (!IDENTIFIER.test(keyword))\n    throw new Error('Keyword ' + keyword + ' is not a valid identifier');\n\n  if (definition) {\n    if (definition.macro && definition.valid !== undefined)\n      throw new Error('\"valid\" option cannot be used with macro keywords');\n\n    var dataType = definition.type;\n    if (Array.isArray(dataType)) {\n      var i, len = dataType.length;\n      for (i=0; i<len; i++) checkDataType(dataType[i]);\n      for (i=0; i<len; i++) _addRule(keyword, dataType[i], definition);\n    } else {\n      if (dataType) checkDataType(dataType);\n      _addRule(keyword, dataType, definition);\n    }\n\n    var $data = definition.$data === true && this._opts.$data;\n    if ($data && !definition.validate)\n      throw new Error('$data support: \"validate\" function is not defined');\n\n    var metaSchema = definition.metaSchema;\n    if (metaSchema) {\n      if ($data) {\n        metaSchema = {\n          anyOf: [\n            metaSchema,\n            { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#' }\n          ]\n        };\n      }\n      definition.validateSchema = this.compile(metaSchema, true);\n    }\n  }\n\n  RULES.keywords[keyword] = RULES.all[keyword] = true;\n\n\n  function _addRule(keyword, dataType, definition) {\n    var ruleGroup;\n    for (var i=0; i<RULES.length; i++) {\n      var rg = RULES[i];\n      if (rg.type == dataType) {\n        ruleGroup = rg;\n        break;\n      }\n    }\n\n    if (!ruleGroup) {\n      ruleGroup = { type: dataType, rules: [] };\n      RULES.push(ruleGroup);\n    }\n\n    var rule = {\n      keyword: keyword,\n      definition: definition,\n      custom: true,\n      code: customRuleCode,\n      implements: definition.implements\n    };\n    ruleGroup.rules.push(rule);\n    RULES.custom[keyword] = rule;\n  }\n\n\n  function checkDataType(dataType) {\n    if (!RULES.types[dataType]) throw new Error('Unknown type ' + dataType);\n  }\n\n  return this;\n}\n\n\n/**\n * Get keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.\n */\nfunction getKeyword(keyword) {\n  /* jshint validthis: true */\n  var rule = this.RULES.custom[keyword];\n  return rule ? rule.definition : this.RULES.keywords[keyword] || false;\n}\n\n\n/**\n * Remove keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Ajv} this for method chaining\n */\nfunction removeKeyword(keyword) {\n  /* jshint validthis: true */\n  var RULES = this.RULES;\n  delete RULES.keywords[keyword];\n  delete RULES.all[keyword];\n  delete RULES.custom[keyword];\n  for (var i=0; i<RULES.length; i++) {\n    var rules = RULES[i].rules;\n    for (var j=0; j<rules.length; j++) {\n      if (rules[j].keyword == keyword) {\n        rules.splice(j, 1);\n        break;\n      }\n    }\n  }\n  return this;\n}\n","'use strict';\nmodule.exports = function generate_custom(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $rule = this,\n    $definition = 'definition' + $lvl,\n    $rDef = $rule.definition,\n    $closingBraces = '';\n  var $compile, $inline, $macro, $ruleValidate, $validateCode;\n  if ($isData && $rDef.$data) {\n    $validateCode = 'keywordValidate' + $lvl;\n    var $validateSchema = $rDef.validateSchema;\n    out += ' var ' + ($definition) + ' = RULES.custom[\\'' + ($keyword) + '\\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';\n  } else {\n    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);\n    if (!$ruleValidate) return;\n    $schemaValue = 'validate.schema' + $schemaPath;\n    $validateCode = $ruleValidate.code;\n    $compile = $rDef.compile;\n    $inline = $rDef.inline;\n    $macro = $rDef.macro;\n  }\n  var $ruleErrs = $validateCode + '.errors',\n    $i = 'i' + $lvl,\n    $ruleErr = 'ruleErr' + $lvl,\n    $asyncKeyword = $rDef.async;\n  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');\n  if (!($inline || $macro)) {\n    out += '' + ($ruleErrs) + ' = null;';\n  }\n  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';\n  if ($isData && $rDef.$data) {\n    $closingBraces += '}';\n    out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';\n    if ($validateSchema) {\n      $closingBraces += '}';\n      out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';\n    }\n  }\n  if ($inline) {\n    if ($rDef.statements) {\n      out += ' ' + ($ruleValidate.validate) + ' ';\n    } else {\n      out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';\n    }\n  } else if ($macro) {\n    var $it = it.util.copy(it);\n    var $closingBraces = '';\n    $it.level++;\n    var $nextValid = 'valid' + $it.level;\n    $it.schema = $ruleValidate.validate;\n    $it.schemaPath = '';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    var $code = it.validate($it).replace(/validate\\.schema/g, $validateCode);\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' ' + ($code);\n  } else {\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    out += '  ' + ($validateCode) + '.call( ';\n    if (it.opts.passContext) {\n      out += 'this';\n    } else {\n      out += 'self';\n    }\n    if ($compile || $rDef.schema === false) {\n      out += ' , ' + ($data) + ' ';\n    } else {\n      out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';\n    }\n    out += ' , (dataPath || \\'\\')';\n    if (it.errorPath != '\"\"') {\n      out += ' + ' + (it.errorPath);\n    }\n    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\n      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';\n    var def_callRuleValidate = out;\n    out = $$outStack.pop();\n    if ($rDef.errors === false) {\n      out += ' ' + ($valid) + ' = ';\n      if ($asyncKeyword) {\n        out += '' + (it.yieldAwait);\n      }\n      out += '' + (def_callRuleValidate) + '; ';\n    } else {\n      if ($asyncKeyword) {\n        $ruleErrs = 'customErrors' + $lvl;\n        out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = ' + (it.yieldAwait) + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';\n      } else {\n        out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';\n      }\n    }\n  }\n  if ($rDef.modifying) {\n    out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';\n  }\n  out += '' + ($closingBraces);\n  if ($rDef.valid) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  } else {\n    out += ' if ( ';\n    if ($rDef.valid === undefined) {\n      out += ' !';\n      if ($macro) {\n        out += '' + ($nextValid);\n      } else {\n        out += '' + ($valid);\n      }\n    } else {\n      out += ' ' + (!$rDef.valid) + ' ';\n    }\n    out += ') { ';\n    $errorKeyword = $rule.keyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = ''; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ($errorKeyword || 'custom') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \\'' + ($rule.keyword) + '\\' } ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should pass \"' + ($rule.keyword) + '\" keyword validation\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + (__err) + ']); ';\n      } else {\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n    var def_customError = out;\n    out = $$outStack.pop();\n    if ($inline) {\n      if ($rDef.errors) {\n        if ($rDef.errors != 'full') {\n          out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\'\\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = \"' + ($errSchemaPath) + '\"; } ';\n          if (it.opts.verbose) {\n            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';\n          }\n          out += ' } ';\n        }\n      } else {\n        if ($rDef.errors === false) {\n          out += ' ' + (def_customError) + ' ';\n        } else {\n          out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\'\\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = \"' + ($errSchemaPath) + '\"; } ';\n          if (it.opts.verbose) {\n            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';\n          }\n          out += ' } } ';\n        }\n      }\n    } else if ($macro) {\n      out += '   var err =   '; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ($errorKeyword || 'custom') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \\'' + ($rule.keyword) + '\\' } ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'should pass \"' + ($rule.keyword) + '\" keyword validation\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError(vErrors); ';\n        } else {\n          out += ' validate.errors = vErrors; return false; ';\n        }\n      }\n    } else {\n      if ($rDef.errors === false) {\n        out += ' ' + (def_customError) + ' ';\n      } else {\n        out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\'\\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = \"' + ($errSchemaPath) + '\";  ';\n        if (it.opts.verbose) {\n          out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';\n        }\n        out += ' } } else { ' + (def_customError) + ' } ';\n      }\n    }\n    out += ' } ';\n    if ($breakOnError) {\n      out += ' else { ';\n    }\n  }\n  return out;\n}\n","'use strict'\n\nmodule.exports = {\n  afterRequest: require('./afterRequest.json'),\n  beforeRequest: require('./beforeRequest.json'),\n  browser: require('./browser.json'),\n  cache: require('./cache.json'),\n  content: require('./content.json'),\n  cookie: require('./cookie.json'),\n  creator: require('./creator.json'),\n  entry: require('./entry.json'),\n  har: require('./har.json'),\n  header: require('./header.json'),\n  log: require('./log.json'),\n  page: require('./page.json'),\n  pageTimings: require('./pageTimings.json'),\n  postData: require('./postData.json'),\n  query: require('./query.json'),\n  request: require('./request.json'),\n  response: require('./response.json'),\n  timings: require('./timings.json')\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","'use strict'\n\nvar net = require('net')\n  , tls = require('tls')\n  , http = require('http')\n  , https = require('https')\n  , events = require('events')\n  , assert = require('assert')\n  , util = require('util')\n  , Buffer = require('safe-buffer').Buffer\n  ;\n\nexports.httpOverHttp = httpOverHttp\nexports.httpsOverHttp = httpsOverHttp\nexports.httpOverHttps = httpOverHttps\nexports.httpsOverHttps = httpsOverHttps\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options)\n  agent.request = http.request\n  return agent\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options)\n  agent.request = http.request\n  agent.createSocket = createSecureSocket\n  agent.defaultPort = 443\n  return agent\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options)\n  agent.request = https.request\n  return agent\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options)\n  agent.request = https.request\n  agent.createSocket = createSecureSocket\n  agent.defaultPort = 443\n  return agent\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this\n  self.options = options || {}\n  self.proxyOptions = self.options.proxy || {}\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets\n  self.requests = []\n  self.sockets = []\n\n  self.on('free', function onFree(socket, host, port) {\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i]\n      if (pending.host === host && pending.port === port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1)\n        pending.request.onSocket(socket)\n        return\n      }\n    }\n    socket.destroy()\n    self.removeSocket(socket)\n  })\n}\nutil.inherits(TunnelingAgent, events.EventEmitter)\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, options) {\n  var self = this\n\n   // Legacy API: addRequest(req, host, port, path)\n  if (typeof options === 'string') {\n    options = {\n      host: options,\n      port: arguments[2],\n      path: arguments[3]\n    };\n  }\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push({host: options.host, port: options.port, request: req})\n    return\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createConnection({host: options.host, port: options.port, request: req})\n}\n\nTunnelingAgent.prototype.createConnection = function createConnection(pending) {\n  var self = this\n\n  self.createSocket(pending, function(socket) {\n    socket.on('free', onFree)\n    socket.on('close', onCloseOrRemove)\n    socket.on('agentRemove', onCloseOrRemove)\n    pending.request.onSocket(socket)\n\n    function onFree() {\n      self.emit('free', socket, pending.host, pending.port)\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket)\n      socket.removeListener('free', onFree)\n      socket.removeListener('close', onCloseOrRemove)\n      socket.removeListener('agentRemove', onCloseOrRemove)\n    }\n  })\n}\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this\n  var placeholder = {}\n  self.sockets.push(placeholder)\n\n  var connectOptions = mergeOptions({}, self.proxyOptions,\n    { method: 'CONNECT'\n    , path: options.host + ':' + options.port\n    , agent: false\n    }\n  )\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {}\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        Buffer.from(connectOptions.proxyAuth).toString('base64')\n  }\n\n  debug('making CONNECT request')\n  var connectReq = self.request(connectOptions)\n  connectReq.useChunkedEncodingByDefault = false // for v0.6\n  connectReq.once('response', onResponse) // for v0.6\n  connectReq.once('upgrade', onUpgrade)   // for v0.6\n  connectReq.once('connect', onConnect)   // for v0.7 or later\n  connectReq.once('error', onError)\n  connectReq.end()\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head)\n    })\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners()\n    socket.removeAllListeners()\n\n    if (res.statusCode === 200) {\n      assert.equal(head.length, 0)\n      debug('tunneling connection has established')\n      self.sockets[self.sockets.indexOf(placeholder)] = socket\n      cb(socket)\n    } else {\n      debug('tunneling socket could not be established, statusCode=%d', res.statusCode)\n      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode)\n      error.code = 'ECONNRESET'\n      options.request.emit('error', error)\n      self.removeSocket(placeholder)\n    }\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners()\n\n    debug('tunneling socket could not be established, cause=%s\\n', cause.message, cause.stack)\n    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message)\n    error.code = 'ECONNRESET'\n    options.request.emit('error', error)\n    self.removeSocket(placeholder)\n  }\n}\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) return\n\n  this.sockets.splice(pos, 1)\n\n  var pending = this.requests.shift()\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createConnection(pending)\n  }\n}\n\nfunction createSecureSocket(options, cb) {\n  var self = this\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, mergeOptions({}, self.options,\n      { servername: options.host\n      , socket: socket\n      }\n    ))\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket\n    cb(secureSocket)\n  })\n}\n\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i]\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides)\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j]\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k]\n        }\n      }\n    }\n  }\n  return target\n}\n\n\nvar debug\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments)\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0]\n    } else {\n      args.unshift('TUNNEL:')\n    }\n    console.error.apply(console, args)\n  }\n} else {\n  debug = function() {}\n}\nexports.debug = debug // for test\n","// Generated by CoffeeScript 1.12.2\n(function() {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n  if ((typeof performance !== \"undefined\" && performance !== null) && performance.now) {\n    module.exports = function() {\n      return performance.now();\n    };\n  } else if ((typeof process !== \"undefined\" && process !== null) && process.hrtime) {\n    module.exports = function() {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function() {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    module.exports = function() {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    module.exports = function() {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n\n}).call(this);\n\n//# sourceMappingURL=performance-now.js.map\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar _ = require('underscore');\r\nvar util = require('util');\r\n\r\nvar constants = require('./../util/constants');\r\nvar blobConstants = constants.BlobConstants;\r\nvar BlobUtilities = require('./../../services/blob/blobutilities');\r\nvar FileUtilities = require('./../../services/file/fileutilities');\r\nvar azureutil = require('./util');\r\nvar SR = require('./sr');\r\nvar check = require('validator');\r\nvar errors = require('../errors/errors');\r\nvar ArgumentError = errors.ArgumentError;\r\nvar ArgumentNullError = errors.ArgumentNullError;\r\n\r\nexports = module.exports;\r\n\r\nfunction initCallback(callbackParam, resultsCb) {\r\n  var fail;\r\n  if (callbackParam) {\r\n    fail = function (err) {\r\n      callbackParam(err);\r\n      return false;\r\n    };\r\n  } else {\r\n    fail = function (err) {\r\n      throw err;\r\n    };\r\n    callbackParam = function () {};\r\n  }\r\n\r\n  resultsCb(fail, callbackParam);\r\n}\r\n\r\n/**\r\n* Checks if the given value is a valid enumeration or not.\r\n*\r\n* @param {object} value     The value to validate.\r\n* @param {object} list      The enumeration values.\r\n* @return {boolean}\r\n*/\r\nexports.isValidEnumValue = function (value, list, callback) {\r\n  var fail;\r\n  \r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n\r\n  if (!list.some(function (current) {\r\n    return current.toLowerCase() === value.toLowerCase();\r\n  })) {\r\n    return fail(new RangeError(util.format('Invalid value: %s. Options are: %s.', value, list)));\r\n  }\r\n\r\n  callback();\r\n  return true;\r\n};\r\n\r\n/**\r\n* Creates a anonymous function that check if the given uri is valid or not.\r\n*\r\n* @param {string} uri     The uri to validate.\r\n* @return {boolean}\r\n*/\r\nexports.isValidUri = function (uri) {\r\n  if (!check.isURL(uri, { 'require_tld': false })){\r\n    throw new URIError('The provided URI \"' + uri + '\" is invalid.');\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n* Checks if the given host is valid or not.\r\n*\r\n* @param {string|object} host     The host to validate.\r\n* @return {boolean}\r\n*/\r\nexports.isValidHost= function (host) {\r\n  if (azureutil.objectIsNull(host)) {\r\n    throw new ArgumentNullError('host', SR.STORAGE_HOST_LOCATION_REQUIRED);\r\n  } else {\r\n    var storageHost = {};\r\n    storageHost.primaryHost = _.isString(host) ? host : host.primaryHost;\r\n    if (storageHost.primaryHost && !check.isURL(storageHost.primaryHost, { 'require_tld': false })){\r\n      throw new URIError('The provided URI \"' + storageHost.primaryHost + '\" is invalid.');\r\n    }\r\n\r\n    storageHost.secondaryHost = _.isString(host) ? undefined : host.secondaryHost;\r\n    if (storageHost.secondaryHost && !check.isURL(storageHost.secondaryHost, { 'require_tld': false })){\r\n      throw new URIError('The provided URI \"' + storageHost.secondaryHost + '\" is invalid.');\r\n    }\r\n\r\n    if (!storageHost.primaryHost && !storageHost.secondaryHost) {\r\n      throw new ArgumentNullError('host', SR.STORAGE_HOST_LOCATION_REQUIRED);\r\n    }\r\n  } \r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n* Checks if the given value is a valid UUID or not.\r\n*\r\n* @param {string|object} uuid     The uuid to validate.\r\n* @return {boolean}\r\n*/\r\nexports.isValidUuid = function(uuid, callback) {\r\n  var validUuidRegex = /^[a-zA-Z0-9]{8}\\-[a-zA-Z0-9]{4}\\-[a-zA-Z0-9]{4}\\-[a-zA-Z0-9]{4}\\-[a-zA-Z0-9]{12}$/;\r\n\r\n  var fail;\r\n\r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n\r\n  if (!validUuidRegex.test(uuid)) {\r\n    return fail(new SyntaxError('The value is not a valid UUID format.'));\r\n  }\r\n  \r\n  callback();\r\n  return true;\r\n};\r\n\r\n/**\r\n* Creates a anonymous function that check if a given key is base 64 encoded.\r\n*\r\n* @param {string} key The key to validate.\r\n* @return {function}\r\n*/\r\nexports.isBase64Encoded = function (key) {\r\n  var isValidBase64String = key.match(/^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/);\r\n\r\n  if (isValidBase64String) {\r\n    return true;\r\n  } else {\r\n    throw new SyntaxError('The provided account key ' + key + ' is not a valid base64 string.');\r\n  }\r\n};\r\n\r\n/**\r\n* Validates a function.\r\n*\r\n* @param {object} function The function to validate.\r\n* @return {function}\r\n*/\r\nexports.isValidFunction = function (functionObject, functionName) {\r\n  if (!functionObject) {\r\n    throw new ArgumentNullError('functionObject', functionName + ' must be specified.');\r\n  }\r\n  if(!_.isFunction(functionObject)){\r\n    throw new TypeError(functionName + ' specified should be a function.');\r\n  }\r\n  return true;\r\n};\r\n\r\nvar getNameError = function(name, typeName) {\r\n  // checks if name is null, undefined or empty\r\n  if (azureutil.stringIsEmpty(name)) {\r\n    return new ArgumentNullError('name', util.format('%s name must be a non empty string.', typeName));\r\n  }\r\n\r\n  // check if name is between 3 and 63 characters\r\n  if (name.length < 3 || name.length > 63) {\r\n    return new ArgumentError('name', util.format('%s name must be between 3 and 63 characters long.', typeName));\r\n  }\r\n\r\n  // check if name follows naming rules\r\n  if (name.match(/^([a-z0-9]+(-[a-z0-9]+)*)$/) === null) {\r\n    return new SyntaxError(util.format('%s name format is incorrect.', typeName));\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n* Validates a container name.\r\n*\r\n* @param {string} containerName The container name.\r\n*/\r\nexports.containerNameIsValid = function (containerName, callback) {\r\n  var fail;\r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n\r\n  var nameError = getNameError(containerName, 'Container');\r\n\r\n  if (!nameError || containerName.match(/^(\\$root|\\$logs|\\$web)$/)) {\r\n    callback();\r\n    return true;\r\n  } else {\r\n    return fail(nameError);\r\n  }\r\n};\r\n\r\n/**\r\n* Validates a blob name.\r\n*\r\n* @param {string} containerName The container name.\r\n* @param {string} blobname      The blob name.\r\n*/\r\nexports.blobNameIsValid = function (containerName, blobName, callback) {\r\n  var fail;\r\n  \r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n  \r\n  if (!blobName) {\r\n    return fail(new ArgumentNullError('blobName', 'Blob name is not specified.'));\r\n  }\r\n  \r\n  if (containerName === '$root' && blobName.indexOf('/') !== -1) {\r\n    return fail(new SyntaxError('Blob name format is incorrect.'));\r\n  }\r\n  \r\n  callback();\r\n  return true;\r\n};\r\n\r\n/**\r\n* Validates a blob tier name.\r\n*\r\n* @param {string} blobTier The blob tier name.\r\n*/\r\nexports.blobTierNameIsValid = function (blobTier, callback) {\r\n  var fail;\r\n  \r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n  \r\n  if (!blobTier) {\r\n    return fail(new ArgumentNullError('blobTier', 'Blob tier is not specified.'));\r\n  }\r\n\r\n  if (!_.chain(_.union(\r\n    _.values(BlobUtilities.BlobTier.PremiumPageBlobTier),\r\n    _.values(BlobUtilities.BlobTier.StandardBlobTier)\r\n  ))\r\n    .map(function (val) { return val.toString().toUpperCase(); })\r\n    .contains(blobTier.toString().toUpperCase())\r\n    .value()) {\r\n    return fail(new SyntaxError('Blob tier is incorrect. Refer to BlobUtilities.BlobTier for possible values.'));\r\n  }\r\n\r\n  callback();\r\n  return true;\r\n};\r\n\r\n/**\r\n* Validates a share name.\r\n*\r\n* @param {string} shareName The share name.\r\n*/\r\nexports.shareNameIsValid = function (shareName, callback) {\r\n  var fail;\r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n\r\n  var nameError = getNameError(shareName, 'Share');\r\n\r\n  if (!nameError) {\r\n    callback();\r\n    return true;\r\n  } else {\r\n    return fail(nameError);\r\n  }\r\n};\r\n\r\n/**\r\n* Validates a queue name.\r\n*\r\n* @param {string} queueName The queue name.\r\n*/\r\nexports.queueNameIsValid = function (queueName, callback) {\r\n  var fail;\r\n\r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n\r\n  var nameError = getNameError(queueName, 'Queue');\r\n\r\n  if (!nameError) {\r\n    callback();\r\n    return true;\r\n  } else {\r\n    return fail(nameError);\r\n  }\r\n};\r\n\r\n/**\r\n* Validates a table name.\r\n*\r\n* @param {string} table  The table name.\r\n*/\r\nexports.tableNameIsValid = function (table, callback) {\r\n  var fail;\r\n\r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n\r\n  if (azureutil.stringIsEmpty(table)) {\r\n    return fail(new ArgumentNullError('table', 'Table name must be a non empty string.'));\r\n  }\r\n\r\n  if (table.length < 3 || table.length > 63) {\r\n    return fail(new ArgumentError('table', 'Table name must be between 3 and 63 characters long.'));\r\n  }\r\n\r\n  if(table.toLowerCase() === 'tables') {\r\n    return fail(new RangeError('Table name cannot be \\'Tables\\'.'));\r\n  }\r\n\r\n  if (table.match(/^([A-Za-z][A-Za-z0-9]{2,62})$/) !== null || table === '$MetricsCapacityBlob' || table.match(/^(\\$Metrics(HourPrimary|MinutePrimary|HourSecondary|MinuteSecondary)?(Transactions)(Blob|Queue|Table|File))$/) !== null)\r\n  {\r\n    callback();\r\n    return true;\r\n  } else {\r\n    return fail(new SyntaxError('Table name format is incorrect.'));\r\n  }\r\n};\r\n\r\n/**\r\n* Validates an HTML File object.\r\n*\r\n* @param {File} browserFile  The HTML File object.\r\n*/\r\nexports.browserFileIsValid = function (browserFile, callback) {\r\n  var fail;\r\n\r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n\r\n  // IE doesn't support File.constructor.name\r\n  if (!azureutil.isBrowser() ||\r\n    !browserFile ||\r\n    !browserFile.constructor ||\r\n    (!azureutil.isIE() && !browserFile.constructor.name) ||\r\n    (!azureutil.isIE() && browserFile.constructor.name !== 'File' && browserFile.constructor.name !== 'Blob') ||\r\n    !azureutil.objectIsInt(browserFile.size)) {\r\n    return fail(new ArgumentError('type', 'Invalid HTML File object.'));\r\n  } else {\r\n    callback();\r\n    return true;\r\n  }\r\n};\r\n\r\n/**\r\n* Validates page ranges.\r\n*\r\n* @param {int} rangeStart             The range starting position.\r\n* @param {int} rangeEnd               The range ending position.\r\n* @param {int} writeBlockSizeInBytes  The block size.\r\n*/\r\nexports.pageRangesAreValid = function (rangeStart, rangeEnd, writeBlockSizeInBytes, callback) {\r\n  var fail;\r\n\r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n\r\n  if (rangeStart % 512 !== 0) {\r\n    return fail(new RangeError('Start byte offset must be a multiple of 512.'));\r\n  }\r\n\r\n  var size = null;\r\n  if (!azureutil.objectIsNull(rangeEnd)) {\r\n    if ((rangeEnd + 1) % 512 !== 0) {\r\n      return fail(new RangeError('End byte offset must be a multiple of 512 minus 1.'));\r\n    }\r\n\r\n    size = (rangeEnd - rangeStart) + 1;\r\n    if (size > writeBlockSizeInBytes) {\r\n      return fail(new RangeError('Page blob size cannot be larger than ' + writeBlockSizeInBytes + ' bytes.'));\r\n    }\r\n  }\r\n  \r\n  callback();\r\n  return true;\r\n};\r\n\r\n/**\r\n* Validates a blob type.\r\n*\r\n* @param {string} type  The type name.\r\n*/\r\nexports.blobTypeIsValid = function (type, callback) {\r\n  var getEnumValues = function (obj) {\r\n    var values = [];\r\n    for (var prop in obj) {\r\n      if (obj.hasOwnProperty(prop)) {\r\n        values.push(obj[prop]);\r\n      }\r\n    }\r\n    return values;\r\n  };\r\n  \r\n  return this.isValidEnumValue(type, getEnumValues(blobConstants.BlobTypes), callback);\r\n};\r\n\r\n/**\r\n* Validates share ACL type.\r\n*\r\n* @param {string} type  The type name.\r\n*/\r\nexports.shareACLIsValid = function (type, callback) {\r\n  var fail;\r\n  \r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n  \r\n  if (type != FileUtilities.SharePublicAccessType.OFF) {\r\n    fail(new ArgumentError('type', 'The access type is not supported.'));\r\n  }\r\n\r\n  callback();\r\n  return true;\r\n};\r\n\r\n/**\r\n* Validates share quota value.\r\n*\r\n* @param {int} type  The quota value.\r\n*/\r\nexports.shareQuotaIsValid = function (quota, callback) {\r\n  var fail;\r\n  \r\n  initCallback(callback, function (f, cb) {\r\n    fail = f;\r\n    callback = cb;\r\n  });\r\n  \r\n  if (quota && quota <= 0) {\r\n    fail(new RangeError('The share quota value, in GB, must be greater than 0.'));\r\n  }\r\n  \r\n  callback();\r\n  return true;\r\n};\r\n\r\n// common functions for validating arguments\r\n\r\nfunction throwMissingArgument(name, func) {\r\n  throw new ArgumentNullError(name, 'Required argument ' + name + ' for function ' + func + ' is not defined');\r\n}\r\n\r\nfunction ArgumentValidator(functionName) {\r\n  this.func = functionName;\r\n}\r\n\r\n_.extend(ArgumentValidator.prototype, {\r\n  string: function (val, name) {\r\n    this.exists(val, name);\r\n    if (typeof val !== 'string') {\r\n      throw new TypeError('Parameter ' + name + ' for function ' + this.func + ' should be a non-empty string');\r\n    }\r\n  },\r\n\r\n  stringAllowEmpty: function (val, name) {\r\n    if (typeof val !== 'string') {\r\n      throw new TypeError('Parameter ' + name + ' for function ' + this.func + ' should be a string');\r\n    }\r\n  },\r\n\r\n  object: function (val, name) {\r\n    this.exists(val, name);\r\n    if (typeof val !== 'object') {\r\n      throw new TypeError('Parameter ' + name + ' for function ' + this.func + ' should be an object');\r\n    }\r\n  },\r\n\r\n  exists: function (val, name) {\r\n    if (!val) {\r\n      throwMissingArgument(name, this.func);\r\n    }\r\n  },\r\n\r\n  function: function (val, name) {\r\n    this.exists(val, name);\r\n    if (typeof val !== 'function') {\r\n      throw new TypeError('Parameter ' + name + ' for function ' + this.func + ' should be a function');\r\n    }\r\n  },\r\n\r\n  value: function (val, name) {\r\n    if (!val && val !== 0) {\r\n      throwMissingArgument(name, this.func);\r\n    }\r\n  },\r\n\r\n  nonEmptyArray: function (val, name) {\r\n    if (!val || val.length === 0) {\r\n      throw new TypeError('Required array argument ' + name + ' for function ' + this.func + ' is either not defined or empty');\r\n    }\r\n  },\r\n\r\n  callback: function (val) {\r\n    this.exists(val, 'callback');\r\n    this.function(val, 'callback');\r\n  },\r\n\r\n  test: function (predicate, message) {\r\n    if (!predicate()) {\r\n      throw new Error(message + ' in function ' + this.func);\r\n    }\r\n  },\r\n\r\n  tableNameIsValid: exports.tableNameIsValid,\r\n  browserFileIsValid: exports.browserFileIsValid,\r\n  containerNameIsValid: exports.containerNameIsValid,\r\n  shareNameIsValid: exports.shareNameIsValid,\r\n  blobNameIsValid: exports.blobNameIsValid,\r\n  blobTierNameIsValid: exports.blobTierNameIsValid,\r\n  pageRangesAreValid: exports.pageRangesAreValid,\r\n  queueNameIsValid: exports.queueNameIsValid,\r\n  blobTypeIsValid: exports.blobTypeIsValid,\r\n  shareACLIsValid: exports.shareACLIsValid,\r\n  shareQuotaIsValid: exports.shareQuotaIsValid,\r\n  isValidEnumValue: exports.isValidEnumValue\r\n});\r\n\r\nfunction validateArgs(functionName, validationRules) {\r\n  var validator = new ArgumentValidator(functionName);\r\n  validationRules(validator);\r\n}\r\n\r\nexports.ArgumentValidator = ArgumentValidator;\r\nexports.validateArgs = validateArgs;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toDate;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toDate(date) {\n  (0, _assertString2.default)(date);\n  date = Date.parse(date);\n  return !isNaN(date) ? new Date(date) : null;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = toString;\nfunction toString(input) {\n  if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input !== null) {\n    if (typeof input.toString === 'function') {\n      input = input.toString();\n    } else {\n      input = '[object Object]';\n    }\n  } else if (input === null || typeof input === 'undefined' || isNaN(input) && !input.length) {\n    input = '';\n  }\n  return String(input);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFQDN;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false\n};\n\nfunction isFQDN(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_fqdn_options);\n\n  /* Remove the optional trailing dot before checking validity */\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  var parts = str.split('.');\n  if (options.require_tld) {\n    var tld = parts.pop();\n    if (!parts.length || !/^([a-z\\u00a1-\\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    }\n    // disallow spaces\n    if (/[\\s\\u2002-\\u200B\\u202F\\u205F\\u3000\\uFEFF\\uDB40\\uDC20]/.test(tld)) {\n      return false;\n    }\n  }\n  for (var part, i = 0; i < parts.length; i++) {\n    part = parts[i];\n    if (options.allow_underscores) {\n      part = part.replace(/_/g, '');\n    }\n    if (!/^[a-z\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    }\n    // disallow full-width chars\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    }\n    if (part[0] === '-' || part[part.length - 1] === '-') {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = exports['default'];","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar azureutil = require('../util/util');\r\nvar Constants = require('../util/constants');\r\nvar StorageUtilities = require('../util/storageutilities');\r\nvar extend = require('util')._extend;\r\n\r\n/**\r\n* Creates a new RetryPolicyFilter instance.\r\n* @class\r\n* The RetryPolicyFilter allows you to retry operations,\r\n* using a custom retry policy. Users are responsible to \r\n* define the shouldRetry method.\r\n* To apply a filter to service operations, use `withFilter`\r\n* and specify the filter to be used when creating a service.\r\n* @constructor\r\n* @param {number} [retryCount=30000]        The client retry count.\r\n* @param {number} [retryInterval=3]     The client retry interval, in milliseconds.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var retryPolicy = new azure.RetryPolicyFilter();\r\n* retryPolicy.retryCount = 3;\r\n* retryPolicy.retryInterval = 3000;\r\n* retryPolicy.shouldRetry = function(statusCode, retryContext) {\r\n*\r\n* };\r\n* var blobService = azure.createBlobService().withFilter(retryPolicy);\r\n*/\r\nfunction RetryPolicyFilter(retryCount, retryInterval) {\r\n  this.retryCount = retryCount ? retryCount : RetryPolicyFilter.DEFAULT_CLIENT_RETRY_COUNT;\r\n  this.retryInterval = retryInterval ? retryInterval : RetryPolicyFilter.DEFAULT_CLIENT_RETRY_INTERVAL;\r\n}\r\n\r\n/**\r\n* Represents the default client retry interval, in milliseconds.\r\n*/\r\nRetryPolicyFilter.DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\r\n\r\n/**\r\n* Represents the default client retry count.\r\n*/\r\nRetryPolicyFilter.DEFAULT_CLIENT_RETRY_COUNT = 3;\r\n\r\n/**\r\n* Handles an operation with a retry policy.\r\n*\r\n* @param {Object}   requestOptions The original request options.\r\n* @param {function} next           The next filter to be handled.\r\n*/\r\nRetryPolicyFilter.prototype.handle = function (requestOptions, next) {\r\n  RetryPolicyFilter._handle(this, requestOptions, next);\r\n};\r\n\r\n/**\r\n* Handles an operation with a retry policy.\r\n*\r\n* @param {Object}   requestOptions The original request options.\r\n* @param {function} next           The next filter to be handled.\r\n*/\r\nRetryPolicyFilter._handle = function (self, requestOptions, next) {\r\n\r\n  var retryRequestOptions = extend({}, requestOptions);\r\n  retryRequestOptions.retryInterval = 0;\r\n\r\n  // Initialize retryContext because that will be passed to the shouldRetry method which users will implement \r\n  retryRequestOptions.retryContext = {\r\n    retryCount: 0,\r\n    error: null,\r\n    retryInterval: retryRequestOptions.retryInterval,\r\n    locationMode: retryRequestOptions.locationMode,\r\n    currentLocation: retryRequestOptions.currentLocation\r\n  };\r\n\r\n  var lastPrimaryAttempt;\r\n  var lastSecondaryAttempt;\r\n  var operation = function () {\r\n    // retry policies dont really do anything to the request options\r\n    // so move on to next\r\n    if (next) {\r\n      next(retryRequestOptions, function (returnObject, finalCallback, nextPostCallback) {\r\n        // Previous operation ended so update the retry data\r\n        if (returnObject.error) {\r\n          if (retryRequestOptions.retryContext.error) {\r\n            returnObject.error.innerError = retryRequestOptions.retryContext.error;\r\n          }\r\n\r\n          retryRequestOptions.retryContext.error = returnObject.error;\r\n        }\r\n\r\n        // If a request sent to the secondary location fails with 404 (Not Found), it is possible\r\n        // that the resource replication is not finished yet. So, in case of 404 only in the secondary\r\n        // location, the failure should still be retryable.\r\n        var secondaryNotFound = (retryRequestOptions.currentLocation === Constants.StorageLocation.SECONDARY) && ((returnObject.response && returnObject.response.statusCode === 404) || (returnObject.error && returnObject.error.code === 'ENOTFOUND'));\r\n \r\n        var notExceedMaxRetryCount = retryRequestOptions.retryContext.retryCount ? retryRequestOptions.retryContext.retryCount <= self.retryCount : true;\r\n        var retryInfo = self.shouldRetry(secondaryNotFound ? 500 : (azureutil.objectIsNull(returnObject.response) ? 306 : returnObject.response.statusCode), retryRequestOptions);\r\n        retryRequestOptions.retryContext.retryCount++;\r\n\r\n        if (retryInfo.ignore) {\r\n          returnObject.error = null;\r\n        }\r\n\r\n        // If the custom retry logic(shouldRetry) does not return a targetLocation, calculate based on the previous location and locationMode.\r\n        if(azureutil.objectIsNull(retryInfo.targetLocation)) {\r\n          retryInfo.targetLocation = azureutil.getNextLocation(retryRequestOptions.currentLocation, retryRequestOptions.locationMode);\r\n        }\r\n\r\n        // If the custom retry logic(shouldRetry) does not return a retryInterval, try to set it to the value on the instance if it is available. Otherwise, the default(30000) will be used.\r\n        if(azureutil.objectIsNull(retryInfo.retryInterval)) {\r\n          retryInfo.retryInterval = self.retryInterval;\r\n        }\r\n        \r\n        // Only in the case of success from server but client side failure like MD5 or length mismatch, returnObject.retryable has a value(we explicitly set it to false). \r\n        // In this case, we should not retry the request.\r\n        // If the output stream already get sent to server and get error back, \r\n        // we should NOT retry within the SDK as the stream data is not valid anymore if we retry directly.\r\n        if (\r\n            !returnObject.outputStreamSent && returnObject.error && azureutil.objectIsNull(returnObject.retryable) && notExceedMaxRetryCount &&\r\n            (\r\n              (!azureutil.objectIsNull(returnObject.response) && retryInfo.retryable) || \r\n              (\r\n                returnObject.error.code === 'ECONNREFUSED' ||\r\n                returnObject.error.code === 'ETIMEDOUT' ||\r\n                returnObject.error.code === 'ESOCKETTIMEDOUT' || \r\n                returnObject.error.code === 'ECONNRESET' || \r\n                returnObject.error.code === 'EAI_AGAIN' ||\r\n                returnObject.error.message === 'XHR error' // stream-http XHR network error message in browsers\r\n              )\r\n            )\r\n          ) {\r\n          if (retryRequestOptions.currentLocation === Constants.StorageLocation.PRIMARY) {\r\n            lastPrimaryAttempt = returnObject.operationEndTime;\r\n          } else {\r\n            lastSecondaryAttempt = returnObject.operationEndTime;\r\n          }\r\n\r\n          // Moreover, in case of 404 when trying the secondary location, instead of retrying on the\r\n          // secondary, further requests should be sent only to the primary location, as it most\r\n          // probably has a higher chance of succeeding there.\r\n          if (secondaryNotFound && (retryRequestOptions.locationMode !== StorageUtilities.LocationMode.SECONDARY_ONLY))\r\n          {\r\n            retryInfo.locationMode = StorageUtilities.LocationMode.PRIMARY_ONLY;\r\n            retryInfo.targetLocation = Constants.StorageLocation.PRIMARY;\r\n          }\r\n\r\n          // Now is the time to calculate the exact retry interval. ShouldRetry call above already\r\n          // returned back how long two requests to the same location should be apart from each other.\r\n          // However, for the reasons explained above, the time spent between the last attempt to\r\n          // the target location and current time must be subtracted from the total retry interval\r\n          // that ShouldRetry returned.\r\n          var lastAttemptTime = retryInfo.targetLocation === Constants.StorageLocation.PRIMARY ? lastPrimaryAttempt : lastSecondaryAttempt;\r\n          if (!azureutil.objectIsNull(lastAttemptTime)) {\r\n            var sinceLastAttempt = new Date().getTime() - lastAttemptTime.getTime();\r\n            if (sinceLastAttempt < 0) {\r\n              sinceLastAttempt = 0;\r\n            }\r\n\r\n            retryRequestOptions.retryInterval = retryInfo.retryInterval - sinceLastAttempt;\r\n          }\r\n          else {\r\n            retryRequestOptions.retryInterval = 0;\r\n          }\r\n\r\n          if(!azureutil.objectIsNull(retryInfo.locationMode)) {\r\n            retryRequestOptions.locationMode = retryInfo.locationMode;\r\n          }\r\n\r\n          retryRequestOptions.currentLocation = retryInfo.targetLocation;\r\n          operation();\r\n        } else {\r\n          if (nextPostCallback) {\r\n            nextPostCallback(returnObject);\r\n          } else if (finalCallback) {\r\n            finalCallback(returnObject);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  operation();\r\n};\r\n\r\nRetryPolicyFilter._shouldRetryOnError = function (statusCode, requestOptions) {\r\n  var retryInfo = (requestOptions && requestOptions.retryContext) ? requestOptions.retryContext : {};\r\n\r\n  // Non-timeout Cases\r\n  if (statusCode >= 300 && statusCode != 408) {\r\n    // Always no retry on \"not implemented\" and \"version not supported\"\r\n    if (statusCode == 501 || statusCode == 505) {\r\n      retryInfo.retryable = false;\r\n      return retryInfo;\r\n    }\r\n    \r\n    // When absorbConditionalErrorsOnRetry is set (for append blob)\r\n    if (requestOptions && requestOptions.absorbConditionalErrorsOnRetry) {\r\n      if (statusCode == 412) {\r\n        // When appending block with precondition failure and their was a server error before, we ignore the error.\r\n        if (retryInfo.lastServerError) {\r\n          retryInfo.ignore = true;\r\n          retryInfo.retryable = true;\r\n        } else {\r\n          retryInfo.retryable = false;\r\n        }\r\n      } else if (retryInfo.retryable && statusCode >= 500 && statusCode < 600) {\r\n        // Retry on the server error\r\n        retryInfo.retryable = true;\r\n        retryInfo.lastServerError = true;\r\n      }\r\n    } else if (statusCode < 500) {\r\n      // No retry on the client error\r\n      retryInfo.retryable = false;\r\n    }\r\n  }\r\n\r\n  return retryInfo;\r\n};\r\n\r\nmodule.exports = RetryPolicyFilter;\r\n","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar Constants = azureCommon.Constants;\r\nvar TableConstants = Constants.TableConstants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar odataHandler = require('../internal/odatahandler');\r\n\r\nexports = module.exports;\r\n\r\nexports.serialize = function (entity) {\r\n  return odataHandler.serializeJson(entity);\r\n};\r\n\r\nexports.parseQuery = function (response, autoResolveProperties, propertyResolver, entityResolver) {\r\n  var result = {};\r\n  if (response.body) {\r\n    result = odataHandler.parseJsonEntities(response.body, autoResolveProperties, propertyResolver, entityResolver);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexports.parseEntity = function (response, autoResolveProperties, propertyResolver, entityResolver) {\r\n  var result = {};\r\n  if (response.body) {\r\n    result = odataHandler.parseJsonSingleEntity(response.body, autoResolveProperties, propertyResolver, entityResolver);\r\n  }\r\n\r\n  if (response.headers && response.headers[HeaderConstants.ETAG.toLowerCase()]) {\r\n    if (!result[TableConstants.ODATA_METADATA_MARKER]) {\r\n      result[TableConstants.ODATA_METADATA_MARKER] = {};\r\n    }\r\n\r\n    result[TableConstants.ODATA_METADATA_MARKER].etag = response.headers[HeaderConstants.ETAG.toLowerCase()];\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexports.getEtag = function (entity) {\r\n  var etag;\r\n  if (entity && entity[TableConstants.ODATA_METADATA_MARKER]) {\r\n    etag = entity[TableConstants.ODATA_METADATA_MARKER].etag;\r\n  } \r\n  return etag;\r\n};","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar azureCommon = require('./common.core');\r\n\r\n// Streams\r\nazureCommon.FileReadStream = require('./streams/filereadstream');\r\n\r\nmodule.exports = azureCommon;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar azureCommon = require('./../common.core');\r\nvar azureutil = azureCommon.util;\r\nvar Constants = require('./../util/constants');\r\nvar EventEmitter = require('events').EventEmitter;\r\n\r\n/**\r\n* Range stream\r\n*/\r\nfunction RangeStream(serviceClient, container, blob, options) {\r\n  this.serviceClient = serviceClient;\r\n  this._emitter = new EventEmitter();\r\n  this._paused = false;\r\n  this._emittedAll = false;\r\n  this._emittedRangeIndex = 0;\r\n  this._rangelist = [];\r\n  this._resourcePath = [];\r\n  this._isEmitting = false;\r\n  this._rangeStreamEnded = false;\r\n  this._lengthHeader = Constants.HeaderConstants.CONTENT_LENGTH;\r\n  this._minRangeSize = Constants.BlobConstants.MIN_WRITE_PAGE_SIZE_IN_BYTES;\r\n  this._maxRangeSize = Constants.BlobConstants.DEFAULT_WRITE_PAGE_SIZE_IN_BYTES;\r\n  if (options.rangeStart) {\r\n    this._startOffset = options.rangeStart;\r\n  } else {\r\n    this._startOffset = 0;\r\n  }\r\n  this._dataOffset = this._startOffset;\r\n  if (options.rangeEnd) {\r\n    this._endOffset = options.rangeEnd;\r\n  } else {\r\n    this._endOffset = Number.MAX_VALUE;\r\n  }\r\n  if (container) {\r\n    this._resourcePath.push(container);\r\n  }\r\n  if (blob) {\r\n    this._resourcePath.push(blob); \r\n  }\r\n}\r\n\r\n/**\r\n* Get range list\r\n*/\r\nRangeStream.prototype.list = function (options, callback) {\r\n  var start = this._startOffset;\r\n  var end;\r\n  var singleRangeSize = Constants.BlobConstants.MAX_SINGLE_GET_PAGE_RANGE_SIZE;\r\n\r\n  if (this._listFunc === undefined) {\r\n    // the default function puts the whole blob into a single list item\r\n    this._listFunc = this._defaultListFunc;\r\n    end = this._endOffset;\r\n  } else {\r\n    end = Math.min(this._startOffset + singleRangeSize - 1, this._endOffset);\r\n  }\r\n  options.rangeStart = start;\r\n  if (end != Number.MAX_VALUE) {\r\n    options.rangeEnd = end;\r\n  }\r\n\r\n  var self = this;\r\n  var onList = function (error, ranges, response) {\r\n    if (error) {\r\n      callback(error);\r\n    } else {\r\n      if (self._rangeStreamEnded) {\r\n        return;\r\n      }\r\n\r\n      var totalSize = parseInt(response.headers[self._lengthHeader], 10);\r\n      var endOffset = Math.min(totalSize - 1, self._endOffset);\r\n      var rangeEnd = Math.min(end, endOffset);\r\n  \r\n      if (!ranges.length) {\r\n        // convert single object to range\r\n        // start >= end means there is no valid regions\r\n        ranges.push({ start : start, end : rangeEnd, dataSize: 0 });\r\n      } else if (ranges[ranges.length - 1].end !== rangeEnd) {\r\n        // don't forget the zero chunk at the end of range\r\n        ranges.push({ start : ranges[ranges.length - 1].end + 1, end : rangeEnd, dataSize: 0 });\r\n      }\r\n      \r\n      if (end >= endOffset) {\r\n        self._rangeStreamEnded = true;\r\n      }\r\n      self.resizeAndSaveRanges(ranges);\r\n      self._startOffset += singleRangeSize;\r\n      self._emitRange();\r\n      \r\n      // This is only valid when listing pages because when listing with the default function, the \"endOffset\" will always equal to or greater than the \"end\". \r\n      if (end < endOffset && !self._rangeStreamEnded) {\r\n        process.nextTick(function () {\r\n          ranges = null;\r\n          self.list(options, callback);\r\n          self = null;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  var callArguments = Array.prototype.slice.call(this._resourcePath);\r\n  callArguments.push(options);\r\n  callArguments.push(onList);\r\n  this._listFunc.apply(this.serviceClient, callArguments);\r\n};\r\n\r\n/**\r\n* Resize regions:\r\n*   1. Merge small pieces into a range no less than this._minRangeSize\r\n*   2. Split large pieces into ranges no more than this._maxRangeSize\r\n*/\r\nRangeStream.prototype.resizeAndSaveRanges = function (ranges) {\r\n  var rangeList = this._rangelist;\r\n  var holdingRange = { type : 'range', size : 0, dataSize : 0, start : this._startOffset, end : -1 };\r\n  var readingRange = null;\r\n  var rangeSize = 0;\r\n\r\n  for (var index = 0; index < ranges.length; index++) {\r\n    readingRange = ranges[index];\r\n    rangeSize = readingRange.end - holdingRange.start + 1;\r\n    \r\n    if (rangeSize < this._minRangeSize) {\r\n      // merge fragment ranges\r\n      this.mergeRanges(holdingRange, readingRange);\r\n    } else {\r\n      if (holdingRange.end != -1) {\r\n        // save the holding range list and hold the reading range\r\n        this.splitAndSaveRanges(holdingRange, rangeList);\r\n        holdingRange = readingRange;\r\n      }\r\n      \r\n      if (this._dataOffset != readingRange.start) {\r\n        // padding zero for empty range and hold the reading range \r\n        this.putZeroRange(this._dataOffset, readingRange.start - 1, rangeList);\r\n        holdingRange = readingRange;\r\n      } else if (holdingRange.end == -1) {\r\n        // if holdingRange is never set, it means readingRange exceeds MIN_WRITE_FILE_SIZE_IN_BYTES\r\n        this.splitAndSaveRanges(readingRange, rangeList);\r\n        // reading range has been saved, offset the holding start position for calculating the range size in next loop\r\n        holdingRange.start = readingRange.end + 1;\r\n      }\r\n    }\r\n    \r\n    // If it is the last range, put the holding range into list anyway\r\n    if (index == ranges.length - 1 && holdingRange.end > holdingRange.start) {\r\n      this.splitAndSaveRanges(holdingRange, rangeList);\r\n    }\r\n    \r\n    this._dataOffset = readingRange.end + 1;\r\n  }\r\n};\r\n\r\n/**\r\n* Put a zero range into range list\r\n*/\r\nRangeStream.prototype.putZeroRange = function (startOffset, endOffset, rangeList) {\r\n  var zeroDataRange = { type : 'range', size : -1, dataSize : 0, start : startOffset, end : endOffset };\r\n  this.splitAndSaveRanges(zeroDataRange, rangeList);\r\n};\r\n\r\n/**\r\n* Merge small ranges\r\n*/\r\nRangeStream.prototype.mergeRanges = function (holdingRange, readingRange) {\r\n  holdingRange.size = readingRange.end - holdingRange.start + 1;\r\n  holdingRange.dataSize += readingRange.dataSize;\r\n  holdingRange.end = readingRange.end;\r\n  return holdingRange;\r\n};\r\n\r\n/**\r\n* Split range into small pieces with maximum _maxRangeSize and minimum _minRangeSize size.\r\n* For example, [0, 10G - 1] => [0, 4MB - 1], [4MB, 8MB - 1] ... [10GB - 4MB, 10GB - 1]\r\n*/\r\nRangeStream.prototype.splitAndSaveRanges = function (range, rangeList) {\r\n  var rangeSize = range.end - range.start + 1;\r\n  var offset = range.start;\r\n  var limitedSize = 0;\r\n\r\n  while (rangeSize > 0) {\r\n    var newRange = { type : 'range', size : 0, dataSize : 0, start : -1, end : -1 };\r\n    limitedSize = Math.min(rangeSize, this._maxRangeSize);\r\n    newRange.start = offset;\r\n    newRange.size = limitedSize;\r\n    if (range.dataSize === 0) {\r\n      newRange.dataSize = 0;\r\n    } else {\r\n      newRange.dataSize = limitedSize;\r\n    }\r\n    offset += limitedSize;\r\n    newRange.end = offset - 1;\r\n    rangeList.push(newRange);\r\n    rangeSize -= limitedSize;\r\n  }\r\n};\r\n\r\n/**\r\n* Emit a range\r\n*/\r\nRangeStream.prototype._emitRange = function () {\r\n  if (this._paused || this._emittedAll || this._isEmitting) return;\r\n  this._isEmitting = true;\r\n  try {\r\n    for (; this._emittedRangeIndex < this._rangelist.length; this._emittedRangeIndex++) {\r\n      if (this._paused) {\r\n        return;\r\n      }\r\n      var range = this._rangelist[this._emittedRangeIndex];\r\n      this._emitter.emit('range', range);\r\n      this._rangelist[this._emittedRangeIndex] = null;\r\n    }\r\n    \r\n    if (this._rangeStreamEnded) {\r\n      this._rangelist = null;\r\n      this._emittedAll = true;\r\n      this._emitter.emit('end');\r\n    }\r\n  } finally {\r\n    this._isEmitting = false;\r\n  }\r\n};\r\n\r\n/**\r\n* The Default list function which puts the whole blob into one range.\r\n*/\r\nRangeStream.prototype._defaultListFunc = function (container, blob, optionsOrCallback, callback) {\r\n  var options;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { options = o; callback = c; });\r\n  \r\n  this.getBlobProperties(container, blob, options, function (error, result, response) {\r\n    if (error) {\r\n      callback(error);\r\n    } else {\r\n      var range = [{}];\r\n      range[0].start = options.rangeStart ? Math.max(options.rangeStart, 0) : 0;\r\n      range[0].end = options.rangeEnd ? Math.min(options.rangeEnd, result.contentLength - 1) : result.contentLength - 1;\r\n      range[0].size = range[0].end - range[0].start + 1;\r\n      range[0].dataSize = range[0].size;\r\n      callback(error, range, response);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Add event listener\r\n*/\r\nRangeStream.prototype.on = function (event, listener) {\r\n  this._emitter.on(event, listener);\r\n};\r\n\r\n/**\r\n* Pause the stream\r\n*/\r\nRangeStream.prototype.pause = function () {\r\n  this._paused = true;\r\n};\r\n\r\n/**\r\n* Resume the stream\r\n*/\r\nRangeStream.prototype.resume = function () {\r\n  this._paused = false;\r\n  if (!this._isEmitting) {\r\n    this._emitRange();\r\n  }\r\n};\r\n\r\n/**\r\n* Stop the stream\r\n*/\r\nRangeStream.prototype.stop = function () {\r\n  this.pause();\r\n  this._emittedAll = true;\r\n  this._emitter.emit('end');\r\n};\r\n\r\nmodule.exports = RangeStream;\r\n","// Generated by CoffeeScript 1.3.3\n(function() {\n  var XMLBuilder, XMLFragment,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  XMLFragment = require('./XMLFragment');\n\n  XMLBuilder = (function() {\n\n    function XMLBuilder(name, xmldec, doctype, options) {\n      this.assertLegalChar = __bind(this.assertLegalChar, this);\n\n      var att, child, _ref;\n      this.children = [];\n      this.rootObject = null;\n      if (this.is(name, 'Object')) {\n        _ref = [name, xmldec], xmldec = _ref[0], doctype = _ref[1];\n        name = null;\n      }\n      if (name != null) {\n        name = '' + name || '';\n        if (xmldec == null) {\n          xmldec = {\n            'version': '1.0'\n          };\n        }\n      }\n      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;\n      if ((xmldec != null) && !(xmldec.version != null)) {\n        throw new Error(\"Version number is required\");\n      }\n      if (xmldec != null) {\n        xmldec.version = '' + xmldec.version || '';\n        if (!xmldec.version.match(/1\\.[0-9]+/)) {\n          throw new Error(\"Invalid version number: \" + xmldec.version);\n        }\n        att = {\n          version: xmldec.version\n        };\n        if (xmldec.encoding != null) {\n          xmldec.encoding = '' + xmldec.encoding || '';\n          if (!xmldec.encoding.match(/[A-Za-z](?:[A-Za-z0-9._-]|-)*/)) {\n            throw new Error(\"Invalid encoding: \" + xmldec.encoding);\n          }\n          att.encoding = xmldec.encoding;\n        }\n        if (xmldec.standalone != null) {\n          att.standalone = xmldec.standalone ? \"yes\" : \"no\";\n        }\n        child = new XMLFragment(this, '?xml', att);\n        this.children.push(child);\n      }\n      if (doctype != null) {\n        att = {};\n        if (name != null) {\n          att.name = name;\n        }\n        if (doctype.ext != null) {\n          doctype.ext = '' + doctype.ext || '';\n          att.ext = doctype.ext;\n        }\n        child = new XMLFragment(this, '!DOCTYPE', att);\n        this.children.push(child);\n      }\n      if (name != null) {\n        this.begin(name);\n      }\n    }\n\n    XMLBuilder.prototype.begin = function(name, xmldec, doctype) {\n      var doc, root;\n      if (!(name != null)) {\n        throw new Error(\"Root element needs a name\");\n      }\n      if (this.rootObject) {\n        this.children = [];\n        this.rootObject = null;\n      }\n      if (xmldec != null) {\n        doc = new XMLBuilder(name, xmldec, doctype);\n        return doc.root();\n      }\n      name = '' + name || '';\n      root = new XMLFragment(this, name, {});\n      root.isRoot = true;\n      root.documentObject = this;\n      this.children.push(root);\n      this.rootObject = root;\n      return root;\n    };\n\n    XMLBuilder.prototype.root = function() {\n      return this.rootObject;\n    };\n\n    XMLBuilder.prototype.end = function(options) {\n      return toString(options);\n    };\n\n    XMLBuilder.prototype.toString = function(options) {\n      var child, r, _i, _len, _ref;\n      r = '';\n      _ref = this.children;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        child = _ref[_i];\n        r += child.toString(options);\n      }\n      return r;\n    };\n\n    XMLBuilder.prototype.is = function(obj, type) {\n      var clas;\n      clas = Object.prototype.toString.call(obj).slice(8, -1);\n      return (obj != null) && clas === type;\n    };\n\n    XMLBuilder.prototype.assertLegalChar = function(str) {\n      var chars, chr;\n      if (this.allowSurrogateChars) {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uFFFE-\\uFFFF]/;\n      } else {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/;\n      }\n      chr = str.match(chars);\n      if (chr) {\n        throw new Error(\"Invalid character (\" + chr + \") in string: \" + str + \" at index \" + chr.index);\n      }\n    };\n\n    return XMLBuilder;\n\n  })();\n\n  module.exports = XMLBuilder;\n\n}).call(this);\n","// Generated by CoffeeScript 1.6.3\n(function() {\n  var events, isEmpty, sax,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  sax = require('sax');\n\n  events = require('events');\n\n  isEmpty = function(thing) {\n    return typeof thing === \"object\" && (thing != null) && Object.keys(thing).length === 0;\n  };\n\n  exports.defaults = {\n    \"0.1\": {\n      explicitCharkey: false,\n      trim: true,\n      normalize: true,\n      normalizeTags: false,\n      attrkey: \"@\",\n      charkey: \"#\",\n      explicitArray: false,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: false,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      childkey: '@@',\n      charsAsChildren: false,\n      async: false,\n      strict: true\n    },\n    \"0.2\": {\n      explicitCharkey: false,\n      trim: false,\n      normalize: false,\n      normalizeTags: false,\n      attrkey: \"$\",\n      charkey: \"_\",\n      explicitArray: true,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: true,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      childkey: '$$',\n      charsAsChildren: false,\n      async: false,\n      strict: true\n    }\n  };\n\n  exports.ValidationError = (function(_super) {\n    __extends(ValidationError, _super);\n\n    function ValidationError(message) {\n      this.message = message;\n    }\n\n    return ValidationError;\n\n  })(Error);\n\n  exports.Parser = (function(_super) {\n    __extends(Parser, _super);\n\n    function Parser(opts) {\n      this.parseString = __bind(this.parseString, this);\n      this.reset = __bind(this.reset, this);\n      var key, value, _ref;\n      if (!(this instanceof exports.Parser)) {\n        return new exports.Parser(opts);\n      }\n      this.options = {};\n      _ref = exports.defaults[\"0.2\"];\n      for (key in _ref) {\n        if (!__hasProp.call(_ref, key)) continue;\n        value = _ref[key];\n        this.options[key] = value;\n      }\n      for (key in opts) {\n        if (!__hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n      if (this.options.xmlns) {\n        this.options.xmlnskey = this.options.attrkey + \"ns\";\n      }\n      this.reset();\n    }\n\n    Parser.prototype.reset = function() {\n      var attrkey, charkey, err, ontext, stack,\n        _this = this;\n      this.removeAllListeners();\n      this.saxParser = sax.parser(this.options.strict, {\n        trim: false,\n        normalize: false,\n        xmlns: this.options.xmlns\n      });\n      err = false;\n      this.saxParser.onerror = function(error) {\n        if (!err) {\n          err = true;\n          return _this.emit(\"error\", error);\n        }\n      };\n      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;\n      this.resultObject = null;\n      stack = [];\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n      this.saxParser.onopentag = function(node) {\n        var key, obj, _ref;\n        obj = {};\n        obj[charkey] = \"\";\n        if (!_this.options.ignoreAttrs) {\n          _ref = node.attributes;\n          for (key in _ref) {\n            if (!__hasProp.call(_ref, key)) continue;\n            if (!(attrkey in obj) && !_this.options.mergeAttrs) {\n              obj[attrkey] = {};\n            }\n            if (_this.options.mergeAttrs) {\n              obj[key] = node.attributes[key];\n            } else {\n              obj[attrkey][key] = node.attributes[key];\n            }\n          }\n        }\n        obj[\"#name\"] = _this.options.normalizeTags ? node.name.toLowerCase() : node.name;\n        if (_this.options.xmlns) {\n          obj[_this.options.xmlnskey] = {\n            uri: node.uri,\n            local: node.local\n          };\n        }\n        return stack.push(obj);\n      };\n      this.saxParser.onclosetag = function() {\n        var cdata, emptyStr, node, nodeName, obj, old, s, xpath;\n        obj = stack.pop();\n        nodeName = obj[\"#name\"];\n        delete obj[\"#name\"];\n        cdata = obj.cdata;\n        delete obj.cdata;\n        s = stack[stack.length - 1];\n        if (obj[charkey].match(/^\\s*$/) && !cdata) {\n          emptyStr = obj[charkey];\n          delete obj[charkey];\n        } else {\n          if (_this.options.trim) {\n            obj[charkey] = obj[charkey].trim();\n          }\n          if (_this.options.normalize) {\n            obj[charkey] = obj[charkey].replace(/\\s{2,}/g, \" \").trim();\n          }\n          if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n            obj = obj[charkey];\n          }\n        }\n        if (isEmpty(obj)) {\n          obj = _this.options.emptyTag !== void 0 ? _this.options.emptyTag : emptyStr;\n        }\n        if (_this.options.validator != null) {\n          xpath = \"/\" + ((function() {\n            var _i, _len, _results;\n            _results = [];\n            for (_i = 0, _len = stack.length; _i < _len; _i++) {\n              node = stack[_i];\n              _results.push(node[\"#name\"]);\n            }\n            return _results;\n          })()).concat(nodeName).join(\"/\");\n          try {\n            obj = _this.options.validator(xpath, s && s[nodeName], obj);\n          } catch (_error) {\n            err = _error;\n            _this.emit(\"error\", err);\n          }\n        }\n        if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {\n          node = {};\n          if (_this.options.attrkey in obj) {\n            node[_this.options.attrkey] = obj[_this.options.attrkey];\n            delete obj[_this.options.attrkey];\n          }\n          if (!_this.options.charsAsChildren && _this.options.charkey in obj) {\n            node[_this.options.charkey] = obj[_this.options.charkey];\n            delete obj[_this.options.charkey];\n          }\n          if (Object.getOwnPropertyNames(obj).length > 0) {\n            node[_this.options.childkey] = obj;\n          }\n          obj = node;\n        }\n        if (stack.length > 0) {\n          if (!_this.options.explicitArray) {\n            if (!(nodeName in s)) {\n              return s[nodeName] = obj;\n            } else if (s[nodeName] instanceof Array) {\n              return s[nodeName].push(obj);\n            } else {\n              old = s[nodeName];\n              s[nodeName] = [old];\n              return s[nodeName].push(obj);\n            }\n          } else {\n            if (!(s[nodeName] instanceof Array)) {\n              s[nodeName] = [];\n            }\n            return s[nodeName].push(obj);\n          }\n        } else {\n          if (_this.options.explicitRoot) {\n            old = obj;\n            obj = {};\n            obj[nodeName] = old;\n          }\n          _this.resultObject = obj;\n          return _this.emit(\"end\", _this.resultObject);\n        }\n      };\n      ontext = function(text) {\n        var s;\n        s = stack[stack.length - 1];\n        if (s) {\n          s[charkey] += text;\n          return s;\n        }\n      };\n      this.saxParser.ontext = ontext;\n      return this.saxParser.oncdata = function(text) {\n        var s;\n        s = ontext(text);\n        if (s) {\n          return s.cdata = true;\n        }\n      };\n    };\n\n    Parser.prototype.parseString = function(str, cb) {\n      if ((cb != null) && typeof cb === \"function\") {\n        this.on(\"end\", function(result) {\n          this.reset();\n          if (this.options.async) {\n            return process.nextTick(function() {\n              return cb(null, result);\n            });\n          } else {\n            return cb(null, result);\n          }\n        });\n        this.on(\"error\", function(err) {\n          this.reset();\n          if (this.options.async) {\n            return process.nextTick(function() {\n              return cb(err);\n            });\n          } else {\n            return cb(err);\n          }\n        });\n      }\n      if (str.toString().trim() === '') {\n        this.emit(\"end\", null);\n        return true;\n      }\n      return this.saxParser.write(str.toString());\n    };\n\n    return Parser;\n\n  })(events.EventEmitter);\n\n  exports.parseString = function(str, a, b) {\n    var cb, options, parser;\n    if (b != null) {\n      if (typeof b === 'function') {\n        cb = b;\n      }\n      if (typeof a === 'object') {\n        options = a;\n      }\n    } else {\n      if (typeof a === 'function') {\n        cb = a;\n      }\n      options = {};\n    }\n    parser = new exports.Parser(options);\n    return parser.parseString(str, cb);\n  };\n\n}).call(this);\n","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar azureutil = require('../util/util');\r\nvar SR = require('../util/sr');\r\nvar Constants = require('../util/constants');\r\nvar errors = require('../errors/errors');\r\nvar ArgumentError = errors.ArgumentError;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar HttpConstants = Constants.HttpConstants;\r\nvar HttpConstants = Constants.HttpConstants;\r\nvar HttpVerbs = HttpConstants.HttpVerbs;\r\n\r\nfunction encodeSpecialCharacters(path) {\r\n  return path.replace(/'/g, '%27');\r\n}\r\n\r\n/**\r\n* Creates a new WebResource object.\r\n*\r\n* This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\r\n* properties to initiate a request.\r\n*\r\n* @constructor\r\n*/\r\nfunction WebResource() {\r\n  this.rawResponse = false;\r\n  this.queryString = {};\r\n}\r\n\r\n/**\r\n* Creates a new put request web resource.\r\n*\r\n* @param {string} path The path for the put operation.\r\n* @return {WebResource} A new webresource with a put operation for the given path.\r\n*/\r\nWebResource.put = function (path) {\r\n  var webResource = new WebResource();\r\n  webResource.path = path ? encodeSpecialCharacters(path) : null;\r\n  webResource.method = HttpConstants.HttpVerbs.PUT;\r\n  return webResource;\r\n};\r\n\r\n/**\r\n* Creates a new get request web resource.\r\n*\r\n* @param {string} path The path for the get operation.\r\n* @return {WebResource} A new webresource with a get operation for the given path.\r\n*/\r\nWebResource.get = function (path) {\r\n  var webResource = new WebResource();\r\n  webResource.path = path ? encodeSpecialCharacters(path) : null;\r\n  webResource.method = HttpConstants.HttpVerbs.GET;\r\n  return webResource;\r\n};\r\n\r\n/**\r\n* Creates a new head request web resource.\r\n*\r\n* @param {string} path The path for the head operation.\r\n* @return {WebResource} A new webresource with a head operation for the given path.\r\n*/\r\nWebResource.head = function (path) {\r\n  var webResource = new WebResource();\r\n  webResource.path = path ? encodeSpecialCharacters(path) : null;\r\n  webResource.method = HttpConstants.HttpVerbs.HEAD;\r\n  return webResource;\r\n};\r\n\r\n/**\r\n* Creates a new delete request web resource.\r\n*\r\n* @param {string} path The path for the delete operation.\r\n* @return {WebResource} A new webresource with a delete operation for the given path.\r\n*/\r\nWebResource.del = function (path) {\r\n  var webResource = new WebResource();\r\n  webResource.path = path ? encodeSpecialCharacters(path) : null;\r\n  webResource.method = HttpConstants.HttpVerbs.DELETE;\r\n  return webResource;\r\n};\r\n\r\n/**\r\n* Creates a new post request web resource.\r\n*\r\n* @param {string} path The path for the post operation.\r\n* @return {WebResource} A new webresource with a post operation for the given path.\r\n*/\r\nWebResource.post = function (path) {\r\n  var webResource = new WebResource();\r\n  webResource.path = path ? encodeSpecialCharacters(path) : null;\r\n  webResource.method = HttpConstants.HttpVerbs.POST;\r\n  return webResource;\r\n};\r\n\r\n/**\r\n* Creates a new merge request web resource.\r\n*\r\n* @param {string} path The path for the merge operation.\r\n* @return {WebResource} A new webresource with a merge operation for the given path.\r\n*/\r\nWebResource.merge = function (path) {\r\n  var webResource = new WebResource();\r\n  webResource.path = path ? encodeSpecialCharacters(path) : null;\r\n  webResource.method = HttpConstants.HttpVerbs.MERGE;\r\n  return webResource;\r\n};\r\n\r\n/**\r\n* Specifies a custom property in the web resource.\r\n*\r\n* @param {string} name  The property name.\r\n* @param {string} value The property value.\r\n* @return {WebResource} The webresource.\r\n*/\r\nWebResource.prototype.withProperty = function (name, value) {\r\n  if (!this.properties) {\r\n    this.properties = {};\r\n  }\r\n\r\n  this.properties[name] = value;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n* Specifies if the response should be parsed or not.\r\n*\r\n* @param {bool} rawResponse true if the response should not be parsed; false otherwise.\r\n* @return {WebResource} The webresource.\r\n*/\r\nWebResource.prototype.withRawResponse = function (rawResponse) {\r\n  this.rawResponse = rawResponse;\r\n\r\n  if (azureutil.objectIsNull(this.rawResponse)) {\r\n    this.rawResponse = true;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nWebResource.prototype.withHeadersOnly = function (headersOnly) {\r\n  if (headersOnly !== undefined) {\r\n    this.headersOnly = headersOnly;\r\n  } else {\r\n    this.headersOnly = true;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n* Adds an optional query string parameter.\r\n*\r\n* @param {Object} name          The name of the query string parameter.\r\n* @param {Object} value         The value of the query string parameter.\r\n* @param {Object} defaultValue  The default value for the query string parameter to be used if no value is passed.\r\n* @return {Object} The web resource.\r\n*/\r\nWebResource.prototype.withQueryOption = function (name, value, defaultValue) {\r\n  if (!azureutil.objectIsNull(value)) {\r\n    this.queryString[name] = value;\r\n  } else if (defaultValue) {\r\n    this.queryString[name] = defaultValue;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n* Adds optional query string parameters.\r\n*\r\n* Additional arguments will be the needles to search in the haystack. \r\n*\r\n* @param {Object} object  The haystack of query string parameters.\r\n* @return {Object} The web resource.\r\n*/\r\nWebResource.prototype.withQueryOptions = function (object) {\r\n  if (object) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      if (object[arguments[i]]) {\r\n        this.withQueryOption(arguments[i], object[arguments[i]]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n* Adds an optional header parameter.\r\n*\r\n* @param {Object} name  The name of the header parameter.\r\n* @param {Object} value The value of the header parameter.\r\n* @return {Object} The web resource.\r\n*/\r\nWebResource.prototype.withHeader = function (name, value) {\r\n  if (!this.headers) {\r\n    this.headers = {};\r\n  }\r\n\r\n  if (!azureutil.IsNullOrEmptyOrUndefinedOrWhiteSpace(value)) {\r\n    value = value instanceof Date ? value.toUTCString() : value;\r\n    \r\n    this.headers[name] = value;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n* Adds an optional body.\r\n*\r\n* @param {Object} body  The request body.\r\n* @return {Object} The web resource.\r\n*/\r\nWebResource.prototype.withBody = function (body) {\r\n  this.body = body;\r\n  return this;\r\n};\r\n\r\n/**\r\n* Adds optional query string parameters.\r\n*\r\n* Additional arguments will be the needles to search in the haystack. \r\n*\r\n* @param {Object} object  The haystack of headers.\r\n* @return {Object} The web resource.\r\n*/\r\nWebResource.prototype.withHeaders = function (object) {\r\n  if (object) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      if (object[arguments[i]]) {\r\n        this.withHeader(arguments[i], object[arguments[i]]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nWebResource.prototype.addOptionalMetadataHeaders = function (metadata) {\r\n  var self = this;\r\n\r\n  if (metadata) {\r\n    Object.keys(metadata).forEach(function (metadataKey) {\r\n      if (azureutil.IsNullOrEmptyOrUndefinedOrWhiteSpace(metadataKey)) {\r\n        throw new ArgumentError('metadata', SR.METADATA_KEY_INVALID);\r\n      }\r\n\r\n      var value = metadata[metadataKey];\r\n      if (azureutil.IsNullOrEmptyOrUndefinedOrWhiteSpace(value)) {\r\n        throw new ArgumentError('metadata', SR.METADATA_VALUE_INVALID);\r\n      }\r\n      \r\n      var metadataHeaderName = HeaderConstants.PREFIX_FOR_STORAGE_METADATA + metadataKey;\r\n      var existingMetadataHeaderName = '';\r\n      var headers = self.headers ? self.headers : {};\r\n      if (Object.keys(headers).some(function (headerName) {\r\n        existingMetadataHeaderName = headerName;\r\n        return headerName.toString().toLowerCase() === metadataHeaderName.toLowerCase();\r\n      })) {        \r\n        self.withHeader(existingMetadataHeaderName, self.headers[existingMetadataHeaderName] + ',' + value);\r\n      } else {\r\n        self.withHeader(metadataHeaderName, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n* Determines if a status code corresponds to a valid response according to the WebResource's expected status codes.\r\n*\r\n* @param {int} statusCode The response status code.\r\n* @return true if the response is valid; false otherwise.\r\n*/\r\nWebResource.validResponse = function (statusCode) {\r\n  if (statusCode >= 200 && statusCode < 300) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nfunction isMethodWithBody(verb) {\r\n  return verb === HttpVerbs.PUT ||\r\n    verb === HttpVerbs.POST ||\r\n    verb === HttpVerbs.MERGE;\r\n}\r\n\r\n/**\r\n* Hook up the given input stream to a destination output stream if the WebResource method\r\n* requires a request body and a body is not already set.\r\n*\r\n* @param {Stream} inputStream the stream to pipe from\r\n* @param {Stream} outputStream the stream to pipe to\r\n*\r\n* @return destStream\r\n*/\r\nWebResource.prototype.pipeInput = function(inputStream, destStream) {\r\n  if (isMethodWithBody(this.method) && !this.hasOwnProperty('body')) {\r\n    inputStream.pipe(destStream);\r\n  }\r\n\r\n  return destStream;\r\n};\r\n\r\nmodule.exports = WebResource;","'use strict'\n\nvar tough = require('tough-cookie')\n\nvar Cookie = tough.Cookie\nvar CookieJar = tough.CookieJar\n\nexports.parse = function (str) {\n  if (str && str.uri) {\n    str = str.uri\n  }\n  if (typeof str !== 'string') {\n    throw new Error('The cookie function only accepts STRING as param')\n  }\n  return Cookie.parse(str, {loose: true})\n}\n\n// Adapt the sometimes-Async api of tough.CookieJar to our requirements\nfunction RequestJar (store) {\n  var self = this\n  self._jar = new CookieJar(store, {looseMode: true})\n}\nRequestJar.prototype.setCookie = function (cookieOrStr, uri, options) {\n  var self = this\n  return self._jar.setCookieSync(cookieOrStr, uri, options || {})\n}\nRequestJar.prototype.getCookieString = function (uri) {\n  var self = this\n  return self._jar.getCookieStringSync(uri)\n}\nRequestJar.prototype.getCookies = function (uri) {\n  var self = this\n  return self._jar.getCookiesSync(uri)\n}\n\nexports.jar = function (store) {\n  return new RequestJar(store)\n}\n","/*!\n * Copyright (c) 2018, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\nvar psl = require('psl');\n\nfunction getPublicSuffix(domain) {\n  return psl.get(domain);\n}\n\nexports.getPublicSuffix = getPublicSuffix;\n","/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\n/*jshint unused:false */\n\nfunction Store() {\n}\nexports.Store = Store;\n\n// Stores may be synchronous, but are still required to use a\n// Continuation-Passing Style API.  The CookieJar itself will expose a \"*Sync\"\n// API that converts from synchronous-callbacks to imperative style.\nStore.prototype.synchronous = false;\n\nStore.prototype.findCookie = function(domain, path, key, cb) {\n  throw new Error('findCookie is not implemented');\n};\n\nStore.prototype.findCookies = function(domain, path, cb) {\n  throw new Error('findCookies is not implemented');\n};\n\nStore.prototype.putCookie = function(cookie, cb) {\n  throw new Error('putCookie is not implemented');\n};\n\nStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {\n  // recommended default implementation:\n  // return this.putCookie(newCookie, cb);\n  throw new Error('updateCookie is not implemented');\n};\n\nStore.prototype.removeCookie = function(domain, path, key, cb) {\n  throw new Error('removeCookie is not implemented');\n};\n\nStore.prototype.removeCookies = function(domain, path, cb) {\n  throw new Error('removeCookies is not implemented');\n};\n\nStore.prototype.getAllCookies = function(cb) {\n  throw new Error('getAllCookies is not implemented (therefore jar cannot be serialized)');\n};\n","/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\"use strict\";\nvar pubsuffix = require('./pubsuffix-psl');\n\n// Gives the permutation of all possible domainMatch()es of a given domain. The\n// array is in shortest-to-longest order.  Handy for indexing.\nfunction permuteDomain (domain) {\n  var pubSuf = pubsuffix.getPublicSuffix(domain);\n  if (!pubSuf) {\n    return null;\n  }\n  if (pubSuf == domain) {\n    return [domain];\n  }\n\n  var prefix = domain.slice(0, -(pubSuf.length + 1)); // \".example.com\"\n  var parts = prefix.split('.').reverse();\n  var cur = pubSuf;\n  var permutations = [cur];\n  while (parts.length) {\n    cur = parts.shift() + '.' + cur;\n    permutations.push(cur);\n  }\n  return permutations;\n}\n\nexports.permuteDomain = permuteDomain;\n","/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\"use strict\";\n/*\n * \"A request-path path-matches a given cookie-path if at least one of the\n * following conditions holds:\"\n */\nfunction pathMatch (reqPath, cookiePath) {\n  // \"o  The cookie-path and the request-path are identical.\"\n  if (cookiePath === reqPath) {\n    return true;\n  }\n\n  var idx = reqPath.indexOf(cookiePath);\n  if (idx === 0) {\n    // \"o  The cookie-path is a prefix of the request-path, and the last\n    // character of the cookie-path is %x2F (\"/\").\"\n    if (cookiePath.substr(-1) === \"/\") {\n      return true;\n    }\n\n    // \" o  The cookie-path is a prefix of the request-path, and the first\n    // character of the request-path that is not included in the cookie- path\n    // is a %x2F (\"/\") character.\"\n    if (reqPath.substr(cookiePath.length, 1) === \"/\") {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.pathMatch = pathMatch;\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Expose 'FileUtilities'.\r\nexports = module.exports;\r\n\r\n/**\r\n* Defines constants, enums, and utility functions for use with the File service.\r\n* @namespace FileUtilities\r\n*/\r\nvar FileUtilities = {\r\n  /**\r\n  * Permission types\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  SharedAccessPermissions: {\r\n    READ: 'r',\r\n    CREATE: 'c',\r\n    WRITE: 'w',\r\n    DELETE: 'd',\r\n    LIST: 'l'\r\n  },\r\n\r\n  /**\r\n  * Listing details.\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  ListingDetails: {\r\n    METADATA: 'metadata'\r\n  },\r\n\r\n  /**\r\n  * File and share public access types.\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  SharePublicAccessType: {\r\n    OFF: null,\r\n    SHARE: 'share',\r\n    FILE: 'file'\r\n  },\r\n\r\n  /**\r\n  * Deletion options for share snapshots\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  ShareSnapshotDeleteOptions: {\r\n    SHARE_AND_SNAPSHOTS: 'include'\r\n  },\r\n};\r\n\r\nmodule.exports = FileUtilities;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _toDate = require('./lib/toDate');\n\nvar _toDate2 = _interopRequireDefault(_toDate);\n\nvar _toFloat = require('./lib/toFloat');\n\nvar _toFloat2 = _interopRequireDefault(_toFloat);\n\nvar _toInt = require('./lib/toInt');\n\nvar _toInt2 = _interopRequireDefault(_toInt);\n\nvar _toBoolean = require('./lib/toBoolean');\n\nvar _toBoolean2 = _interopRequireDefault(_toBoolean);\n\nvar _equals = require('./lib/equals');\n\nvar _equals2 = _interopRequireDefault(_equals);\n\nvar _contains = require('./lib/contains');\n\nvar _contains2 = _interopRequireDefault(_contains);\n\nvar _matches = require('./lib/matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nvar _isEmail = require('./lib/isEmail');\n\nvar _isEmail2 = _interopRequireDefault(_isEmail);\n\nvar _isURL = require('./lib/isURL');\n\nvar _isURL2 = _interopRequireDefault(_isURL);\n\nvar _isMACAddress = require('./lib/isMACAddress');\n\nvar _isMACAddress2 = _interopRequireDefault(_isMACAddress);\n\nvar _isIP = require('./lib/isIP');\n\nvar _isIP2 = _interopRequireDefault(_isIP);\n\nvar _isFQDN = require('./lib/isFQDN');\n\nvar _isFQDN2 = _interopRequireDefault(_isFQDN);\n\nvar _isBoolean = require('./lib/isBoolean');\n\nvar _isBoolean2 = _interopRequireDefault(_isBoolean);\n\nvar _isAlpha = require('./lib/isAlpha');\n\nvar _isAlpha2 = _interopRequireDefault(_isAlpha);\n\nvar _isAlphanumeric = require('./lib/isAlphanumeric');\n\nvar _isAlphanumeric2 = _interopRequireDefault(_isAlphanumeric);\n\nvar _isNumeric = require('./lib/isNumeric');\n\nvar _isNumeric2 = _interopRequireDefault(_isNumeric);\n\nvar _isPort = require('./lib/isPort');\n\nvar _isPort2 = _interopRequireDefault(_isPort);\n\nvar _isLowercase = require('./lib/isLowercase');\n\nvar _isLowercase2 = _interopRequireDefault(_isLowercase);\n\nvar _isUppercase = require('./lib/isUppercase');\n\nvar _isUppercase2 = _interopRequireDefault(_isUppercase);\n\nvar _isAscii = require('./lib/isAscii');\n\nvar _isAscii2 = _interopRequireDefault(_isAscii);\n\nvar _isFullWidth = require('./lib/isFullWidth');\n\nvar _isFullWidth2 = _interopRequireDefault(_isFullWidth);\n\nvar _isHalfWidth = require('./lib/isHalfWidth');\n\nvar _isHalfWidth2 = _interopRequireDefault(_isHalfWidth);\n\nvar _isVariableWidth = require('./lib/isVariableWidth');\n\nvar _isVariableWidth2 = _interopRequireDefault(_isVariableWidth);\n\nvar _isMultibyte = require('./lib/isMultibyte');\n\nvar _isMultibyte2 = _interopRequireDefault(_isMultibyte);\n\nvar _isSurrogatePair = require('./lib/isSurrogatePair');\n\nvar _isSurrogatePair2 = _interopRequireDefault(_isSurrogatePair);\n\nvar _isInt = require('./lib/isInt');\n\nvar _isInt2 = _interopRequireDefault(_isInt);\n\nvar _isFloat = require('./lib/isFloat');\n\nvar _isFloat2 = _interopRequireDefault(_isFloat);\n\nvar _isDecimal = require('./lib/isDecimal');\n\nvar _isDecimal2 = _interopRequireDefault(_isDecimal);\n\nvar _isHexadecimal = require('./lib/isHexadecimal');\n\nvar _isHexadecimal2 = _interopRequireDefault(_isHexadecimal);\n\nvar _isDivisibleBy = require('./lib/isDivisibleBy');\n\nvar _isDivisibleBy2 = _interopRequireDefault(_isDivisibleBy);\n\nvar _isHexColor = require('./lib/isHexColor');\n\nvar _isHexColor2 = _interopRequireDefault(_isHexColor);\n\nvar _isISRC = require('./lib/isISRC');\n\nvar _isISRC2 = _interopRequireDefault(_isISRC);\n\nvar _isMD = require('./lib/isMD5');\n\nvar _isMD2 = _interopRequireDefault(_isMD);\n\nvar _isHash = require('./lib/isHash');\n\nvar _isHash2 = _interopRequireDefault(_isHash);\n\nvar _isJSON = require('./lib/isJSON');\n\nvar _isJSON2 = _interopRequireDefault(_isJSON);\n\nvar _isEmpty = require('./lib/isEmpty');\n\nvar _isEmpty2 = _interopRequireDefault(_isEmpty);\n\nvar _isLength = require('./lib/isLength');\n\nvar _isLength2 = _interopRequireDefault(_isLength);\n\nvar _isByteLength = require('./lib/isByteLength');\n\nvar _isByteLength2 = _interopRequireDefault(_isByteLength);\n\nvar _isUUID = require('./lib/isUUID');\n\nvar _isUUID2 = _interopRequireDefault(_isUUID);\n\nvar _isMongoId = require('./lib/isMongoId');\n\nvar _isMongoId2 = _interopRequireDefault(_isMongoId);\n\nvar _isAfter = require('./lib/isAfter');\n\nvar _isAfter2 = _interopRequireDefault(_isAfter);\n\nvar _isBefore = require('./lib/isBefore');\n\nvar _isBefore2 = _interopRequireDefault(_isBefore);\n\nvar _isIn = require('./lib/isIn');\n\nvar _isIn2 = _interopRequireDefault(_isIn);\n\nvar _isCreditCard = require('./lib/isCreditCard');\n\nvar _isCreditCard2 = _interopRequireDefault(_isCreditCard);\n\nvar _isISIN = require('./lib/isISIN');\n\nvar _isISIN2 = _interopRequireDefault(_isISIN);\n\nvar _isISBN = require('./lib/isISBN');\n\nvar _isISBN2 = _interopRequireDefault(_isISBN);\n\nvar _isISSN = require('./lib/isISSN');\n\nvar _isISSN2 = _interopRequireDefault(_isISSN);\n\nvar _isMobilePhone = require('./lib/isMobilePhone');\n\nvar _isMobilePhone2 = _interopRequireDefault(_isMobilePhone);\n\nvar _isCurrency = require('./lib/isCurrency');\n\nvar _isCurrency2 = _interopRequireDefault(_isCurrency);\n\nvar _isISO = require('./lib/isISO8601');\n\nvar _isISO2 = _interopRequireDefault(_isISO);\n\nvar _isISO31661Alpha = require('./lib/isISO31661Alpha2');\n\nvar _isISO31661Alpha2 = _interopRequireDefault(_isISO31661Alpha);\n\nvar _isBase = require('./lib/isBase64');\n\nvar _isBase2 = _interopRequireDefault(_isBase);\n\nvar _isDataURI = require('./lib/isDataURI');\n\nvar _isDataURI2 = _interopRequireDefault(_isDataURI);\n\nvar _isMimeType = require('./lib/isMimeType');\n\nvar _isMimeType2 = _interopRequireDefault(_isMimeType);\n\nvar _isLatLong = require('./lib/isLatLong');\n\nvar _isLatLong2 = _interopRequireDefault(_isLatLong);\n\nvar _isPostalCode = require('./lib/isPostalCode');\n\nvar _isPostalCode2 = _interopRequireDefault(_isPostalCode);\n\nvar _ltrim = require('./lib/ltrim');\n\nvar _ltrim2 = _interopRequireDefault(_ltrim);\n\nvar _rtrim = require('./lib/rtrim');\n\nvar _rtrim2 = _interopRequireDefault(_rtrim);\n\nvar _trim = require('./lib/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _escape = require('./lib/escape');\n\nvar _escape2 = _interopRequireDefault(_escape);\n\nvar _unescape = require('./lib/unescape');\n\nvar _unescape2 = _interopRequireDefault(_unescape);\n\nvar _stripLow = require('./lib/stripLow');\n\nvar _stripLow2 = _interopRequireDefault(_stripLow);\n\nvar _whitelist = require('./lib/whitelist');\n\nvar _whitelist2 = _interopRequireDefault(_whitelist);\n\nvar _blacklist = require('./lib/blacklist');\n\nvar _blacklist2 = _interopRequireDefault(_blacklist);\n\nvar _isWhitelisted = require('./lib/isWhitelisted');\n\nvar _isWhitelisted2 = _interopRequireDefault(_isWhitelisted);\n\nvar _normalizeEmail = require('./lib/normalizeEmail');\n\nvar _normalizeEmail2 = _interopRequireDefault(_normalizeEmail);\n\nvar _toString = require('./lib/util/toString');\n\nvar _toString2 = _interopRequireDefault(_toString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar version = '9.4.1';\n\nvar validator = {\n  version: version,\n  toDate: _toDate2.default,\n  toFloat: _toFloat2.default,\n  toInt: _toInt2.default,\n  toBoolean: _toBoolean2.default,\n  equals: _equals2.default,\n  contains: _contains2.default,\n  matches: _matches2.default,\n  isEmail: _isEmail2.default,\n  isURL: _isURL2.default,\n  isMACAddress: _isMACAddress2.default,\n  isIP: _isIP2.default,\n  isFQDN: _isFQDN2.default,\n  isBoolean: _isBoolean2.default,\n  isAlpha: _isAlpha2.default,\n  isAlphanumeric: _isAlphanumeric2.default,\n  isNumeric: _isNumeric2.default,\n  isPort: _isPort2.default,\n  isLowercase: _isLowercase2.default,\n  isUppercase: _isUppercase2.default,\n  isAscii: _isAscii2.default,\n  isFullWidth: _isFullWidth2.default,\n  isHalfWidth: _isHalfWidth2.default,\n  isVariableWidth: _isVariableWidth2.default,\n  isMultibyte: _isMultibyte2.default,\n  isSurrogatePair: _isSurrogatePair2.default,\n  isInt: _isInt2.default,\n  isFloat: _isFloat2.default,\n  isDecimal: _isDecimal2.default,\n  isHexadecimal: _isHexadecimal2.default,\n  isDivisibleBy: _isDivisibleBy2.default,\n  isHexColor: _isHexColor2.default,\n  isISRC: _isISRC2.default,\n  isMD5: _isMD2.default,\n  isHash: _isHash2.default,\n  isJSON: _isJSON2.default,\n  isEmpty: _isEmpty2.default,\n  isLength: _isLength2.default,\n  isByteLength: _isByteLength2.default,\n  isUUID: _isUUID2.default,\n  isMongoId: _isMongoId2.default,\n  isAfter: _isAfter2.default,\n  isBefore: _isBefore2.default,\n  isIn: _isIn2.default,\n  isCreditCard: _isCreditCard2.default,\n  isISIN: _isISIN2.default,\n  isISBN: _isISBN2.default,\n  isISSN: _isISSN2.default,\n  isMobilePhone: _isMobilePhone2.default,\n  isPostalCode: _isPostalCode2.default,\n  isCurrency: _isCurrency2.default,\n  isISO8601: _isISO2.default,\n  isISO31661Alpha2: _isISO31661Alpha2.default,\n  isBase64: _isBase2.default,\n  isDataURI: _isDataURI2.default,\n  isMimeType: _isMimeType2.default,\n  isLatLong: _isLatLong2.default,\n  ltrim: _ltrim2.default,\n  rtrim: _rtrim2.default,\n  trim: _trim2.default,\n  escape: _escape2.default,\n  unescape: _unescape2.default,\n  stripLow: _stripLow2.default,\n  whitelist: _whitelist2.default,\n  blacklist: _blacklist2.default,\n  isWhitelisted: _isWhitelisted2.default,\n  normalizeEmail: _normalizeEmail2.default,\n  toString: _toString2.default\n};\n\nexports.default = validator;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toFloat;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toFloat(str) {\n  (0, _assertString2.default)(str);\n  return parseFloat(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = isByteLength;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable prefer-rest-params */\nfunction isByteLength(str, options) {\n  (0, _assertString2.default)(str);\n  var min = void 0;\n  var max = void 0;\n  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isByteLength(str, min [, max])\n    min = arguments[1];\n    max = arguments[2];\n  }\n  var len = encodeURI(str).split(/%..|./).length - 1;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\nvar ipv6Block = /^[0-9A-F]{1,4}$/i;\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  } else if (version === '6') {\n    var blocks = str.split(':');\n    var foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n\n    for (var i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {\n        // it has been checked before that the last\n        // block is a valid IPv4 address\n      } else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isInt;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\n\nfunction isInt(str, options) {\n  (0, _assertString2.default)(str);\n  options = options || {};\n\n  // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes;\n\n  // Check min/max/lt/gt\n  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;\n\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fullWidth = undefined;\nexports.default = isFullWidth;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar fullWidth = exports.fullWidth = /[^\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]/;\n\nfunction isFullWidth(str) {\n  (0, _assertString2.default)(str);\n  return fullWidth.test(str);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.halfWidth = undefined;\nexports.default = isHalfWidth;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar halfWidth = exports.halfWidth = /[\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]/;\n\nfunction isHalfWidth(str) {\n  (0, _assertString2.default)(str);\n  return halfWidth.test(str);\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isHexadecimal;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hexadecimal = /^[0-9A-F]+$/i;\n\nfunction isHexadecimal(str) {\n  (0, _assertString2.default)(str);\n  return hexadecimal.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ltrim;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ltrim(str, chars) {\n  (0, _assertString2.default)(str);\n  var pattern = chars ? new RegExp('^[' + chars + ']+', 'g') : /^\\s+/g;\n  return str.replace(pattern, '');\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rtrim;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction rtrim(str, chars) {\n  (0, _assertString2.default)(str);\n  var pattern = chars ? new RegExp('[' + chars + ']') : /\\s/;\n\n  var idx = str.length - 1;\n  while (idx >= 0 && pattern.test(str[idx])) {\n    idx--;\n  }\n\n  return idx < str.length ? str.substr(0, idx + 1) : str;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = blacklist;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction blacklist(str, chars) {\n  (0, _assertString2.default)(str);\n  return str.replace(new RegExp('[' + chars + ']+', 'g'), '');\n}\nmodule.exports = exports['default'];","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar stream = require('stream');\r\nvar util = require('util');\r\n\r\nfunction BufferStream(buffer, options) {\r\n    stream.Readable.call(this, options);\r\n\r\n    this._buffer = buffer;\r\n    this._offset = 0;\r\n    this._chunkSize = 4 * 1024 * 1024;\r\n    this._bufferSize = buffer.length;\r\n}\r\n\r\nutil.inherits(BufferStream, stream.Readable);\r\n\r\nBufferStream.prototype._read = function () {\r\n    while (this.push(this._readNextChunk())) {\r\n        continue;\r\n    }\r\n};\r\n\r\nBufferStream.prototype._readNextChunk = function () {\r\n    var data = null;\r\n\r\n    if (this._offset < this._bufferSize) {\r\n        var end = this._offset + this._chunkSize;\r\n        end = end > this._bufferSize ? this._bufferSize : end;\r\n        data = this._buffer.slice(this._offset, end);\r\n        this._offset = end;\r\n    }\r\n\r\n    return data;\r\n};\r\n\r\nmodule.exports = BufferStream;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar util = require('util');\r\n\r\nvar azureUtil = require('../util/util');\r\nvar errors = require('../errors/errors');\r\nvar SR = require('../util/sr');\r\nvar Constants = require('../util/constants');\r\n\r\nexports = module.exports;\r\n\r\n/**\r\n* The default protocol.\r\n*/\r\nexports.DEFAULT_PROTOCOL = Constants.HTTPS;\r\n\r\nvar NoMatchError = function (msg, constr) {\r\n  errors.captureStackTrace(this, constr || this);\r\n  this.message = msg || 'Error';\r\n};\r\n\r\nutil.inherits(NoMatchError, Error);\r\nNoMatchError.prototype.name = 'NoMatchError';\r\n\r\nexports.NoMatchError = NoMatchError;\r\n\r\n/**\r\n* Throws an exception if the connection string format does not match any of the\r\n* available formats.\r\n*\r\n* @param {string} connectionString The invalid formatted connection string.\r\n* @return none\r\n*/\r\nexports.noMatchConnectionString = function (connectionString) {\r\n  throw new NoMatchError('The provided connection string \"' + connectionString + '\" does not have complete configuration settings.');\r\n};\r\n\r\n/**\r\n* Throws an exception if the settings dont match any of the\r\n* available formats.\r\n*\r\n* @param {object} settings The invalid settings.\r\n* @return none\r\n*/\r\nexports.noMatchSettings = function (settings) {\r\n  throw new NoMatchError('The provided settings ' + JSON.stringify(settings) + ' are not complete.');\r\n};\r\n\r\n/**\r\n* Parses the connection string and then validate that the parsed keys belong to\r\n* the validSettingKeys\r\n*\r\n* @param {string} connectionString The user provided connection string.\r\n* @param {array}  validKeys        The valid keys.\r\n* @return {array} The tokenized connection string keys.\r\n*/\r\nexports.parseAndValidateKeys = function (connectionString, validKeys) {\r\n  var parsedConnectionString = { };\r\n\r\n  // parse key/value pairs from connection string\r\n  var pairs = connectionString.split(';');\r\n  for (var m = 0; m < pairs.length; m++) {\r\n    if (pairs[m].length === 0) {\r\n        continue;\r\n    }\r\n\r\n    var equalDex = pairs[m].indexOf('=');\r\n    if (equalDex < 0) {\r\n        throw new SyntaxError(SR.INVALID_CONNECTION_STRING);\r\n    } else if (equalDex === 0) {\r\n      // empty key name.\r\n      throw new SyntaxError(SR.INVALID_CONNECTION_STRING_EMPTY_KEY);\r\n    }\r\n\r\n    var key = pairs[m].substring(0, equalDex);\r\n\r\n    // assure that all given keys are valid.\r\n    if (!azureUtil.inArrayInsensitive(key, validKeys)) {\r\n      throw new SyntaxError(util.format(SR.INVALID_CONNECTION_STRING_BAD_KEY, key));\r\n    }\r\n\r\n    var value = pairs[m].substring(equalDex + 1);\r\n    \r\n    if(typeof parsedConnectionString[key] === 'undefined'){\r\n      parsedConnectionString[key] = value;\r\n    } else {\r\n      // duplicate key name\r\n      throw new SyntaxError(util.format(SR.INVALID_CONNECTION_STRING_DUPLICATE_KEY, key));\r\n    }\r\n  }\r\n\r\n  return parsedConnectionString;\r\n};\r\n\r\n/**\r\n* Creates an anonymous function that acts as predicate to perform a validation.\r\n*\r\n* @param array   {requirements} The array of conditions to satisfy.\r\n* @param boolean {isRequired}   Either these conditions are all required or all\r\n* optional.\r\n* @param boolean {atLeastOne}   Indicates that at least one requirement must\r\n* succeed.\r\n* @return {function}\r\n*/\r\nexports.getValidator = function (requirements, isRequired, atLeastOne) {\r\n  return function (userSettings) {\r\n    var oneFound = false;\r\n    var result = { };\r\n\r\n    for (var key in userSettings) {\r\n      if (userSettings.hasOwnProperty(key)) {\r\n        result[key.toLowerCase()] = userSettings[key];\r\n      }\r\n    }\r\n\r\n    for (var requirement in requirements) {\r\n      if (requirements.hasOwnProperty(requirement)) {\r\n        var settingName = requirements[requirement].SettingName.toLowerCase();\r\n\r\n        // Check if the setting name exists in the provided user settings.\r\n        if (result[settingName]) {\r\n          // Check if the provided user setting value is valid.\r\n          var validationFunc = requirements[requirement].SettingConstraint;\r\n          var isValid = validationFunc(result[settingName]);\r\n\r\n          if (isValid) {\r\n            // Remove the setting as indicator for successful validation.\r\n            delete result[settingName];\r\n            oneFound = true;\r\n          }\r\n        } else if (isRequired) {\r\n          // If required then fail because the setting does not exist\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (atLeastOne) {\r\n      // At least one requirement must succeed, otherwise fail.\r\n      return oneFound ? result : null;\r\n    } else {\r\n      return result;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n* Creates a setting value condition that validates it is one of the\r\n* passed valid values.\r\n*\r\n* @param {string} name The setting key name.\r\n* @return {array}\r\n*/\r\nexports.setting = function (name) {\r\n  var validValues = Array.prototype.slice.call(arguments, 1, arguments.length);\r\n\r\n  var predicate = function (settingValue) {\r\n    var validValuesString = JSON.stringify(validValues);\r\n    if (validValues.length === 0) {\r\n      // No restrictions, succeed.\r\n      return true;\r\n    }\r\n\r\n    // Check to find if the settingValue is valid or not.\r\n    for (var index = 0; index < validValues.length; index++) {\r\n      if (settingValue.toString() == validValues[index].toString()) {\r\n        // SettingValue is found in valid values set, succeed.\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // settingValue is missing in valid values set, fail.\r\n    throw new RangeError('The provided config value ' + settingValue + ' does not belong to the valid values subset:\\n' + validValuesString);\r\n  };\r\n\r\n  return exports.settingWithFunc(name, predicate);\r\n};\r\n\r\n/**\r\n* Creates an \"at lease one\" predicate for the provided list of requirements.\r\n*\r\n* @return callable\r\n*/\r\nexports.atLeastOne = function () {\r\n  var allSettings = arguments;\r\n  return exports.getValidator(allSettings, false, true);\r\n};\r\n\r\n/**\r\n* Creates an optional predicate for the provided list of requirements.\r\n*\r\n* @return {function}\r\n*/\r\nexports.optional = function () {\r\n  var optionalSettings = arguments;\r\n  return exports.getValidator(optionalSettings, false, false);\r\n};\r\n\r\n/**\r\n* Creates an required predicate for the provided list of requirements.\r\n*\r\n* @return {function}\r\n*/\r\nexports.allRequired = function () {\r\n  var requiredSettings = arguments;\r\n  return exports.getValidator(requiredSettings, true, false);\r\n};\r\n\r\n/**\r\n* Creates a setting value condition using the passed predicate.\r\n*\r\n* @param {string}   name      The setting key name.\r\n* @param {function} predicate The setting value predicate.\r\n* @return {array}\r\n*/\r\nexports.settingWithFunc = function (name, predicate) {\r\n  var requirement = {};\r\n  requirement.SettingName = name;\r\n  requirement.SettingConstraint = predicate;\r\n\r\n  return requirement;\r\n};\r\n\r\n\r\n/**\r\n* Tests to see if a given list of settings matches a set of filters exactly.\r\n*\r\n* @param array $settings The settings to check.\r\n* @return boolean If any filter returns null, false. If there are any settings\r\n* left over after all filters are processed, false. Otherwise true.\r\n*/\r\nexports.matchedSpecification = function (settings) {\r\n  var constraints = Array.prototype.slice.call(arguments, 1, arguments.length);\r\n\r\n  for (var constraint in constraints) {\r\n    if (constraints.hasOwnProperty(constraint)) {\r\n      var remainingSettings = constraints[constraint](settings);\r\n\r\n      if (!remainingSettings) {\r\n        return false;\r\n      } else {\r\n        settings = remainingSettings;\r\n      }\r\n    }\r\n  }\r\n\r\n  return azureUtil.objectKeysLength(settings) === 0;\r\n};","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n/**\r\n* Creates a new TokenCredential object.\r\n* @class\r\n* The TokenCredential class is used to store the access token string.\r\n* \r\n* @constructor\r\n* @param {string} token The access token, such as an OAuth access token in string type.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var tokenCredential = new azure.TokenCredential('myOAuthAccessToken');\r\n* var blobService = azure.createBlobServiceWithTokenCredential('https://account.blob.core.windows.net', tokenCredential);\r\n* tokenCredential.set('updatedOAuthAccessToken');\r\n*/\r\nfunction TokenCredential (token) {\r\n  this.token = token;\r\n}\r\n\r\n/**\r\n* Get current access token.\r\n*\r\n* @return {string} The current access token in string type.\r\n*/\r\nTokenCredential.prototype.get = function () {\r\n  return this.token;\r\n};\r\n\r\n/**\r\n* Renew the access token.\r\n*\r\n* @param {string} token The new access token in string.\r\n*/\r\nTokenCredential.prototype.set = function (token) {\r\n  this.token = token;\r\n};\r\n\r\nmodule.exports = TokenCredential;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar _ = require('underscore');\r\nvar xmlbuilder = require('xmlbuilder');\r\n\r\nvar Constants = require('../util/constants');\r\nvar ServicePropertiesConstants = Constants.ServicePropertiesConstants;\r\n\r\nexports = module.exports;\r\n\r\nfunction serializeRetentionPolicy(doc, policy) {\r\n  if (policy !== null) {\r\n    if (typeof policy === 'undefined') {\r\n      policy = {};\r\n    }\r\n\r\n    doc = doc.ele(ServicePropertiesConstants.RETENTION_POLICY_ELEMENT);\r\n    if (typeof policy.Enabled !== 'undefined') {\r\n      doc = doc.ele(ServicePropertiesConstants.ENABLED_ELEMENT)\r\n        .txt(policy.Enabled)\r\n        .up();\r\n    } else {\r\n      doc = doc.ele(ServicePropertiesConstants.ENABLED_ELEMENT)\r\n        .txt(false)\r\n        .up();\r\n    }\r\n\r\n    if (typeof policy.Days !== 'undefined') {\r\n      doc = doc.ele(ServicePropertiesConstants.DAYS_ELEMENT)\r\n        .txt(policy.Days)\r\n        .up();\r\n    } else if (policy.Enabled === true) {\r\n      doc = doc.ele(ServicePropertiesConstants.DAYS_ELEMENT)\r\n        .txt(1)\r\n        .up();\r\n    }\r\n\r\n    doc = doc.up();\r\n  }\r\n}\r\n\r\nfunction serializeDeleteRetentionPolicy(doc, policy) {\r\n  if (policy !== null) {\r\n    if (typeof policy === 'undefined') {\r\n      policy = {};\r\n    }\r\n\r\n    if (typeof policy.Enabled !== 'undefined') {\r\n      doc = doc.ele(ServicePropertiesConstants.ENABLED_ELEMENT)\r\n        .txt(policy.Enabled)\r\n        .up();\r\n    } else {\r\n      doc = doc.ele(ServicePropertiesConstants.ENABLED_ELEMENT)\r\n        .txt(false)\r\n        .up();\r\n    }\r\n\r\n    if (typeof policy.Days !== 'undefined') {\r\n      doc = doc.ele(ServicePropertiesConstants.DAYS_ELEMENT)\r\n        .txt(policy.Days)\r\n        .up();\r\n    } else if (policy.Enabled === true) {\r\n      doc = doc.ele(ServicePropertiesConstants.DAYS_ELEMENT)\r\n        .txt(1)\r\n        .up();\r\n    }\r\n\r\n    doc = doc.up();\r\n  }\r\n}\r\n\r\nfunction serializeStaticWebsite(doc, staticWebsite) {\r\n  if (staticWebsite !== null) {\r\n    if (typeof staticWebsite === 'undefined') {\r\n      staticWebsite = {};\r\n    }\r\n\r\n    if (typeof staticWebsite.Enabled !== 'undefined') {\r\n      doc = doc.ele(ServicePropertiesConstants.ENABLED_ELEMENT)\r\n        .txt(staticWebsite.Enabled)\r\n        .up();\r\n    } else {\r\n      doc = doc.ele(ServicePropertiesConstants.ENABLED_ELEMENT)\r\n        .txt(false)\r\n        .up();\r\n    }\r\n\r\n    if (typeof staticWebsite.IndexDocument !== 'undefined') {\r\n      doc = doc.ele(ServicePropertiesConstants.DEFAULT_INDEX_DOCUMENT_ELEMENT)\r\n        .txt(staticWebsite.IndexDocument)\r\n        .up();\r\n    }\r\n\r\n    if (typeof staticWebsite.ErrorDocument404Path !== 'undefined') {\r\n      doc = doc.ele(ServicePropertiesConstants.DEFAULT_ERROR_DOCUMENT_404_PATH_ELEMENT)\r\n        .txt(staticWebsite.ErrorDocument404Path)\r\n        .up();\r\n    }\r\n\r\n    doc = doc.up();\r\n  }\r\n}\r\n\r\nfunction serializeLogging(doc, logging) {\r\n  if (typeof logging.Version !== 'undefined') {\r\n    doc = doc.ele(ServicePropertiesConstants.VERSION_ELEMENT)\r\n      .txt(logging.Version)\r\n      .up();\r\n  } else {\r\n    doc = doc.ele(ServicePropertiesConstants.VERSION_ELEMENT)\r\n      .txt(ServicePropertiesConstants.DEFAULT_ANALYTICS_VERSION)\r\n      .up();\r\n  }\r\n\r\n  if (typeof logging.Delete !== 'undefined') {\r\n    doc = doc.ele(ServicePropertiesConstants.DELETE_ELEMENT)\r\n      .txt(logging.Delete)\r\n      .up();\r\n  } else {\r\n    doc = doc.ele(ServicePropertiesConstants.DELETE_ELEMENT)\r\n      .txt(false)\r\n      .up();\r\n  }\r\n\r\n  if (typeof logging.Read !== 'undefined') {\r\n    doc = doc.ele(ServicePropertiesConstants.READ_ELEMENT)\r\n      .txt(logging.Read)\r\n      .up();\r\n  } else {\r\n    doc = doc.ele(ServicePropertiesConstants.READ_ELEMENT)\r\n      .txt(false)\r\n      .up();\r\n  }\r\n\r\n  if (typeof logging.Write !== 'undefined') {\r\n    doc = doc.ele(ServicePropertiesConstants.WRITE_ELEMENT)\r\n      .txt(logging.Write)\r\n      .up();\r\n  } else {\r\n    doc = doc.ele(ServicePropertiesConstants.WRITE_ELEMENT)\r\n      .txt(false)\r\n      .up();\r\n  }\r\n\r\n  serializeRetentionPolicy(doc, logging.RetentionPolicy);\r\n\r\n  doc = doc.up();\r\n}\r\n\r\nfunction serializeMetrics(doc, metrics) {\r\n  if (typeof metrics.Version !== 'undefined') {\r\n    doc = doc.ele(ServicePropertiesConstants.VERSION_ELEMENT)\r\n      .txt(metrics.Version)\r\n      .up();\r\n  } else {\r\n    doc = doc.ele(ServicePropertiesConstants.VERSION_ELEMENT)\r\n      .txt(ServicePropertiesConstants.DEFAULT_ANALYTICS_VERSION)\r\n      .up();\r\n  }\r\n\r\n  if (typeof metrics.Enabled !== 'undefined') {\r\n    doc = doc.ele(ServicePropertiesConstants.ENABLED_ELEMENT)\r\n      .txt(metrics.Enabled)\r\n      .up();\r\n  } else {\r\n    doc = doc.ele(ServicePropertiesConstants.ENABLED_ELEMENT)\r\n      .txt(false)\r\n      .up();\r\n  }\r\n\r\n  if (metrics.Enabled) {\r\n    if (typeof metrics.IncludeAPIs !== 'undefined') {\r\n      doc = doc.ele(ServicePropertiesConstants.INCLUDE_APIS_ELEMENT)\r\n        .txt(metrics.IncludeAPIs)\r\n        .up();\r\n    } else if (metrics.Enabled === true) {\r\n      doc = doc.ele(ServicePropertiesConstants.INCLUDE_APIS_ELEMENT)\r\n        .txt(false)\r\n        .up();\r\n    }\r\n  }\r\n  serializeRetentionPolicy(doc, metrics.RetentionPolicy);\r\n}\r\n\r\nfunction serializeCorsRules(doc, rules) {\r\n  if (typeof rules !== 'undefined' && rules !== null && _.isArray(rules)) {\r\n    rules.forEach(function (rule) {\r\n      doc = doc.ele(ServicePropertiesConstants.CORS_RULE_ELEMENT);\r\n\r\n      if (typeof rule.AllowedMethods !== 'undefined' && _.isArray(rule.AllowedMethods)) {\r\n        doc = doc.ele(ServicePropertiesConstants.ALLOWED_METHODS_ELEMENT)\r\n          .txt(rule.AllowedMethods.join(','))\r\n          .up();\r\n      }\r\n\r\n      if (typeof rule.AllowedOrigins !== 'undefined' && _.isArray(rule.AllowedOrigins)) {\r\n        doc = doc.ele(ServicePropertiesConstants.ALLOWED_ORIGINS_ELEMENT)\r\n          .txt(rule.AllowedOrigins.join(','))\r\n          .up();\r\n      }\r\n\r\n      if (typeof rule.AllowedHeaders !== 'undefined' && _.isArray(rule.AllowedHeaders)) {\r\n        doc = doc.ele(ServicePropertiesConstants.ALLOWED_HEADERS_ELEMENT)\r\n          .txt(rule.AllowedHeaders.join(','))\r\n          .up();\r\n      } else {\r\n        doc = doc.ele(ServicePropertiesConstants.ALLOWED_HEADERS_ELEMENT)\r\n          .txt('')\r\n          .up();\r\n      }\r\n\r\n      if (typeof rule.ExposedHeaders !== 'undefined' && _.isArray(rule.ExposedHeaders)) {\r\n        doc = doc.ele(ServicePropertiesConstants.EXPOSED_HEADERS_ELEMENT)\r\n          .txt(rule.ExposedHeaders.join(','))\r\n          .up();\r\n      } else {\r\n        doc = doc.ele(ServicePropertiesConstants.EXPOSED_HEADERS_ELEMENT)\r\n          .txt('')\r\n          .up();\r\n      }\r\n\r\n      if (typeof rule.MaxAgeInSeconds !== 'undefined') {\r\n        doc = doc.ele(ServicePropertiesConstants.MAX_AGE_IN_SECONDS_ELEMENT)\r\n          .txt(rule.MaxAgeInSeconds)\r\n          .up();\r\n      } else {\r\n        doc = doc.ele(ServicePropertiesConstants.MAX_AGE_IN_SECONDS_ELEMENT)\r\n          .txt('0')\r\n          .up();\r\n      }\r\n\r\n      doc = doc.up();\r\n    });\r\n  }\r\n}\r\n\r\nexports.serialize = function (servicePropertiesJs) {\r\n  var doc = xmlbuilder.create();\r\n  doc = doc.begin(ServicePropertiesConstants.STORAGE_SERVICE_PROPERTIES_ELEMENT, { version: '1.0', encoding: 'utf-8' });\r\n\r\n  if (servicePropertiesJs.Logging) {\r\n    doc = doc.ele(ServicePropertiesConstants.LOGGING_ELEMENT);\r\n    serializeLogging(doc, servicePropertiesJs.Logging);\r\n    doc = doc.up();\r\n  }\r\n\r\n  if (servicePropertiesJs.HourMetrics) {\r\n    doc = doc.ele(ServicePropertiesConstants.HOUR_METRICS_ELEMENT);\r\n    serializeMetrics(doc, servicePropertiesJs.HourMetrics);\r\n    doc = doc.up();\r\n  }\r\n\r\n  if (servicePropertiesJs.MinuteMetrics) {\r\n    doc = doc.ele(ServicePropertiesConstants.MINUTE_METRICS_ELEMENT);\r\n    serializeMetrics(doc, servicePropertiesJs.MinuteMetrics);\r\n    doc = doc.up();\r\n  }\r\n\r\n  if (servicePropertiesJs.Cors) {\r\n    doc = doc.ele(ServicePropertiesConstants.CORS_ELEMENT);\r\n    serializeCorsRules(doc, servicePropertiesJs.Cors.CorsRule);\r\n    doc = doc.up();\r\n  }\r\n\r\n  if (servicePropertiesJs.DefaultServiceVersion) {\r\n    doc = doc.ele(ServicePropertiesConstants.DEFAULT_SERVICE_VERSION_ELEMENT)\r\n      .txt(servicePropertiesJs.DefaultServiceVersion)\r\n      .up();\r\n  }\r\n\r\n  if (servicePropertiesJs.DeleteRetentionPolicy) {\r\n    doc = doc.ele(ServicePropertiesConstants.DEFAULT_DELETE_RETENTION_POLICY_ELEMENT);\r\n    serializeDeleteRetentionPolicy(doc, servicePropertiesJs.DeleteRetentionPolicy);\r\n    doc = doc.up();\r\n  }\r\n\r\n  if (servicePropertiesJs.StaticWebsite) {\r\n    doc = doc.ele(ServicePropertiesConstants.DEFAULT_STATIC_WEBSITE_ELEMENT);\r\n    serializeStaticWebsite(doc, servicePropertiesJs.StaticWebsite);\r\n    doc = doc.up();\r\n  }\r\n\r\n  return doc.doc().toString();\r\n};\r\n\r\nfunction parseRetentionPolicy(policyXml) {\r\n  var policy = {};\r\n\r\n  if (typeof policyXml.Enabled !== 'undefined') {\r\n    policy.Enabled = policyXml.Enabled === 'true';\r\n  }\r\n\r\n  if (typeof policyXml.Days !== 'undefined') {\r\n    policy.Days = parseInt(policyXml.Days, 10);\r\n  }\r\n\r\n  return policy;\r\n}\r\n\r\nfunction parseLogging(loggingXml) {\r\n  var logging = {};\r\n\r\n  if (typeof loggingXml.Version !== 'undefined') {\r\n    logging.Version = loggingXml.Version;\r\n  }\r\n\r\n  if (typeof loggingXml.Delete !== 'undefined') {\r\n    logging.Delete = loggingXml.Delete === 'true';\r\n  }\r\n\r\n  if (typeof loggingXml.Read !== 'undefined') {\r\n    logging.Read = loggingXml.Read === 'true';\r\n  }\r\n\r\n  if (typeof loggingXml.Write !== 'undefined') {\r\n    logging.Write = loggingXml.Write === 'true';\r\n  }\r\n\r\n  if (typeof loggingXml.RetentionPolicy !== 'undefined') {\r\n    logging.RetentionPolicy = parseRetentionPolicy(loggingXml.RetentionPolicy);\r\n  }\r\n\r\n  return logging;\r\n}\r\n\r\nfunction parseMetrics(metricsXml) {\r\n  var metrics = {};\r\n\r\n  if (typeof metricsXml.Version !== 'undefined') {\r\n    metrics.Version = metricsXml.Version;\r\n  }\r\n\r\n  if (typeof metricsXml.Enabled !== 'undefined') {\r\n    metrics.Enabled = metricsXml.Enabled === 'true';\r\n  }\r\n\r\n  if (typeof metricsXml.IncludeAPIs !== 'undefined') {\r\n    metrics.IncludeAPIs = metricsXml.IncludeAPIs === 'true';\r\n  }\r\n\r\n  if (typeof metricsXml.RetentionPolicy !== 'undefined') {\r\n    metrics.RetentionPolicy = parseRetentionPolicy(metricsXml.RetentionPolicy);\r\n  }\r\n\r\n  return metrics;\r\n}\r\n\r\nfunction parseCors(corsXml) {\r\n  var cors = {};\r\n\r\n  if (typeof corsXml.CorsRule !== 'undefined') {\r\n    var rulesXml = corsXml.CorsRule;\r\n    if (!_.isArray(rulesXml)) {\r\n      rulesXml = [rulesXml];\r\n    }\r\n\r\n    cors.CorsRule = [];\r\n    rulesXml.forEach(function (ruleXml) {\r\n      var rule = {};\r\n\r\n      if (typeof ruleXml.AllowedMethods !== 'undefined') {\r\n        if (ruleXml.AllowedMethods !== '') {\r\n          rule.AllowedMethods = ruleXml.AllowedMethods.split(',');\r\n        }\r\n        else {\r\n          rule.AllowedMethods = [];\r\n        }\r\n      }\r\n\r\n      if (typeof ruleXml.AllowedOrigins !== 'undefined') {\r\n        if (ruleXml.AllowedOrigins !== '') {\r\n          rule.AllowedOrigins = ruleXml.AllowedOrigins.split(',');\r\n        }\r\n        else {\r\n          rule.AllowedOrigins = [];\r\n        }\r\n      }\r\n\r\n      if (typeof ruleXml.AllowedHeaders !== 'undefined') {\r\n        if (ruleXml.AllowedHeaders !== '') {\r\n          rule.AllowedHeaders = ruleXml.AllowedHeaders.split(',');\r\n        }\r\n        else {\r\n          rule.AllowedHeaders = [];\r\n        }\r\n      }\r\n\r\n      if (typeof ruleXml.ExposedHeaders !== 'undefined') {\r\n        if (ruleXml.ExposedHeaders !== '') {\r\n          rule.ExposedHeaders = ruleXml.ExposedHeaders.split(',');\r\n        }\r\n        else {\r\n          rule.ExposedHeaders = [];\r\n        }\r\n      }\r\n\r\n      if (typeof ruleXml.MaxAgeInSeconds !== 'undefined') {\r\n        rule.MaxAgeInSeconds = parseInt(ruleXml.MaxAgeInSeconds, 10);\r\n      }\r\n\r\n      cors.CorsRule.push(rule);\r\n    });\r\n  }\r\n\r\n  return cors;\r\n}\r\n\r\nfunction parseDeleteRetentionPolicy(deleteRetentionPolicyXml) {\r\n  var deleteRetentionPolicy = {};\r\n\r\n  if (typeof deleteRetentionPolicyXml.Enabled !== 'undefined') {\r\n    deleteRetentionPolicy.Enabled = deleteRetentionPolicyXml.Enabled === 'true';\r\n  }\r\n\r\n  if (typeof deleteRetentionPolicyXml.Days !== 'undefined') {\r\n    deleteRetentionPolicy.Days = parseInt(deleteRetentionPolicyXml.Days);\r\n  }\r\n\r\n  return deleteRetentionPolicy;\r\n}\r\n\r\nfunction parseStaticWebsite(staticWebsiteXml) {\r\n  var staticWebsite = {};\r\n\r\n  if (typeof staticWebsiteXml.Enabled !== 'undefined') {\r\n    staticWebsite.Enabled = staticWebsiteXml.Enabled === 'true';\r\n  }\r\n\r\n  if (typeof staticWebsiteXml.IndexDocument !== 'undefined') {\r\n    staticWebsite.IndexDocument = staticWebsiteXml.IndexDocument;\r\n  }\r\n\r\n  if (typeof staticWebsiteXml.ErrorDocument404Path !== 'undefined') {\r\n    staticWebsite.ErrorDocument404Path = staticWebsiteXml.ErrorDocument404Path;\r\n  }\r\n\r\n  return staticWebsite;\r\n}\r\n\r\nexports.parse = function (servicePropertiesXml) {\r\n  var serviceProperties = {};\r\n\r\n  if (typeof servicePropertiesXml.Logging !== 'undefined') {\r\n    serviceProperties.Logging = parseLogging(servicePropertiesXml.Logging);\r\n  }\r\n\r\n  if (typeof servicePropertiesXml.HourMetrics !== 'undefined') {\r\n    serviceProperties.HourMetrics = parseMetrics(servicePropertiesXml.HourMetrics);\r\n  }\r\n\r\n  if (typeof servicePropertiesXml.MinuteMetrics !== 'undefined') {\r\n    serviceProperties.MinuteMetrics = parseMetrics(servicePropertiesXml.MinuteMetrics);\r\n  }\r\n\r\n  if (typeof servicePropertiesXml.Cors !== 'undefined') {\r\n    serviceProperties.Cors = parseCors(servicePropertiesXml.Cors);\r\n  }\r\n\r\n  if (typeof servicePropertiesXml.DefaultServiceVersion !== 'undefined') {\r\n    serviceProperties.DefaultServiceVersion = servicePropertiesXml.DefaultServiceVersion;\r\n  }\r\n\r\n  if (typeof servicePropertiesXml.DeleteRetentionPolicy !== 'undefined') {\r\n    serviceProperties.DeleteRetentionPolicy = parseDeleteRetentionPolicy(servicePropertiesXml.DeleteRetentionPolicy);\r\n  }\r\n\r\n  if (typeof servicePropertiesXml.StaticWebsite !== 'undefined') {\r\n    serviceProperties.StaticWebsite = parseStaticWebsite(servicePropertiesXml.StaticWebsite);\r\n  }\r\n\r\n  return serviceProperties;\r\n};","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar _ = require('underscore');\r\nvar qs = require('querystring');\r\n\r\nvar azureutil = require('../util/util');\r\nvar HmacSha256Sign = require('./hmacsha256sign');\r\nvar SR = require('../util/sr');\r\nvar errors = require('../errors/errors');\r\nvar ArgumentError = errors.ArgumentError;\r\n\r\nvar Constants = require('../util/constants');\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar QueryStringConstants = Constants.QueryStringConstants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar CompatibleVersionConstants = Constants.CompatibleVersionConstants;\r\n\r\n/**\r\n* Creates a new SharedKey object.\r\n*\r\n* @constructor\r\n* @param {string} storageAccount    The storage account.\r\n* @param {string} storageAccessKey  The storage account's access key.\r\n* @param {bool}   usePathStyleUri   Boolean value indicating if the path, or the hostname, should include the storage account.\r\n*/\r\nfunction SharedKey(storageAccount, storageAccessKey, usePathStyleUri) {\r\n  this.storageAccount = storageAccount;\r\n  this.storageAccessKey = storageAccessKey;\r\n  this.usePathStyleUri = usePathStyleUri;\r\n  this.signer = new HmacSha256Sign(storageAccessKey);\r\n}\r\n\r\n/**\r\n* Generates the shared access signature for a account.\r\n* For more detailed information, refer to https://msdn.microsoft.com/en-us/library/azure/mt584140.aspx\r\n*\r\n* @param {object}                     sharedAccessPolicy                                The shared access policy.\r\n* @param {SharedAccessServices}       sharedAccessPolicy.AccessPolicy.Services          The services (blob, file, queue, table) for a shared access signature associated with this shared access policy.\r\n*                                                                                       Refer to `Constants.AccountSasConstants.Services`.\r\n* @param {SharedAccessResourceTypes}  sharedAccessPolicy.AccessPolicy.ResourceTypes     The resource type for a shared access signature associated with this shared access policy.\r\n*                                                                                       Refer to `Constants.AccountSasConstants.Resources`.\r\n* @param {SharedAccessPermissions}    sharedAccessPolicy.AccessPolicy.Permissions       The permissions for a shared access signature. \r\n*                                                                                       Refer to `Constants.AccountSasConstants.Permissions`.\r\n* @param {date}                       sharedAccessPolicy.AccessPolicy.Start             The time at which the Shared Access Signature becomes valid.\r\n* @param {date}                       sharedAccessPolicy.AccessPolicy.Expiry            The time at which the Shared Access Signature becomes expired.\r\n* @param {string}                     sharedAccessPolicy.AccessPolicy.IPAddressOrRange  An IP address or a range of IP addresses from which to accept requests. When specifying a range, note that the range is inclusive.\r\n* @param {string}                     sharedAccessPolicy.AccessPolicy.Protocols         The protocols permitted for a request made with the account SAS. \r\n*                                                                                       Possible values are both HTTPS and HTTP (https,http) or HTTPS only (https). The default value is https,http. \r\n*                                                                                       Refer to `Constants.AccountSasConstants.Protocols`.\r\n* @return {string} The shared access signature.\r\n*/\r\nSharedKey.prototype.generateAccountSignedQueryString = function (sharedAccessPolicy) {\r\n  var addIfNotNull = function (queryString, name, value) {\r\n    if (!azureutil.objectIsNull(name) && !azureutil.objectIsNull(value)) {\r\n      queryString[name] = value;\r\n    }\r\n  };\r\n\r\n  var formatAccessPolicyDates = function (accessPolicy) {\r\n    if (!azureutil.objectIsNull(accessPolicy.Start)) {\r\n      if (!_.isDate(accessPolicy.Start)) {\r\n        accessPolicy.Start = new Date(accessPolicy.Start);\r\n      }\r\n \r\n      accessPolicy.Start = azureutil.truncatedISO8061Date(accessPolicy.Start);\r\n    }\r\n\r\n    if (!azureutil.objectIsNull(accessPolicy.Expiry)) {\r\n      if (!_.isDate(accessPolicy.Expiry)) {\r\n        accessPolicy.Expiry = new Date(accessPolicy.Expiry);\r\n      }\r\n\r\n      accessPolicy.Expiry = azureutil.truncatedISO8061Date(accessPolicy.Expiry);\r\n    }\r\n  };\r\n\r\n  var queryString = {};\r\n\r\n  addIfNotNull(queryString, QueryStringConstants.SIGNED_VERSION, HeaderConstants.TARGET_STORAGE_VERSION);\r\n\r\n  // add shared access policy params\r\n  if (sharedAccessPolicy.AccessPolicy) {\r\n    formatAccessPolicyDates(sharedAccessPolicy.AccessPolicy);\r\n\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_SERVICES, sharedAccessPolicy.AccessPolicy.Services);\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_RESOURCE_TYPES, sharedAccessPolicy.AccessPolicy.ResourceTypes);\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_PERMISSIONS, sharedAccessPolicy.AccessPolicy.Permissions);\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_START, sharedAccessPolicy.AccessPolicy.Start);\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_EXPIRY, sharedAccessPolicy.AccessPolicy.Expiry);\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_IP, sharedAccessPolicy.AccessPolicy.IPAddressOrRange);\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_PROTOCOL, sharedAccessPolicy.AccessPolicy.Protocols);\r\n  }\r\n  \r\n  // add signature\r\n  addIfNotNull(queryString, QueryStringConstants.SIGNATURE, this._generateAccountSharedAccessSignature(sharedAccessPolicy));\r\n\r\n  return qs.stringify(queryString);\r\n};\r\n\r\n\r\n/**\r\n* Generates the signature part of the shared access signature for a account.\r\n* For more detailed information, refer to https://msdn.microsoft.com/en-us/library/azure/mt584140.aspx\r\n*\r\n* @param {object}                     sharedAccessPolicy                                The shared access policy.\r\n* @param {SharedAccessServices}       sharedAccessPolicy.AccessPolicy.Services          The services (blob, file, queue, table) for a shared access signature associated with this shared access policy.\r\n*                                                                                       Refer to `Constants.AccountSasConstants.Services`.\r\n* @param {SharedAccessResourceTypes}  sharedAccessPolicy.AccessPolicy.ResourceTypes     The resource type for a shared access signature associated with this shared access policy.\r\n*                                                                                       Refer to `Constants.AccountSasConstants.ResourceTypes`.\r\n* @param {SharedAccessPermissions}    sharedAccessPolicy.AccessPolicy.Permissions       The permissions for a shared access signature. \r\n*                                                                                       Refer to `Constants.AccountSasConstants.Permissions`.\r\n* @param {date}                       sharedAccessPolicy.AccessPolicy.Start             The time at which the Shared Access Signature becomes valid.\r\n* @param {date}                       sharedAccessPolicy.AccessPolicy.Expiry            The time at which the Shared Access Signature becomes expired.\r\n* @param {string}                     sharedAccessPolicy.AccessPolicy.IPAddressOrRange  An IP address or a range of IP addresses from which to accept requests. When specifying a range, note that the range is inclusive.\r\n* @param {string}                     sharedAccessPolicy.AccessPolicy.Protocols         The protocols permitted for a request made with the account SAS. \r\n*                                                                                       Possible values are both HTTPS and HTTP (https,http) or HTTPS only (https). The default value is https,http. \r\n*                                                                                       Refer to `Constants.AccountSasConstants.Protocols`.\r\n* @return {string} The signature part of the shared access signature.\r\n*/\r\nSharedKey.prototype._generateAccountSharedAccessSignature = function(sharedAccessPolicy){\r\n  var getvalueToAppend = function (value, noNewLine) {\r\n    var returnValue = '';\r\n    if (!azureutil.objectIsNull(value)) {\r\n      returnValue = value;\r\n    }\r\n\r\n    if (noNewLine !== true) {\r\n      returnValue += '\\n';\r\n    }\r\n\r\n    return returnValue;\r\n  };  \r\n  \r\n  var stringToSign = getvalueToAppend(this.storageAccount) +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.Permissions : '') +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.Services : '') +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.ResourceTypes : '') +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.Start : '') +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.Expiry : '') +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.IPAddressOrRange : '') +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.Protocols : '') +\r\n      getvalueToAppend(HeaderConstants.TARGET_STORAGE_VERSION);\r\n      \r\n  return this.signer.sign(stringToSign);  \r\n};\r\n\r\n/**\r\n* Signs a request with the Authentication header.\r\n*\r\n* @param {WebResource}      webResource The webresource to be signed.\r\n* @param {function(error)}  callback    The callback function.\r\n*/\r\nSharedKey.prototype.signRequest = function (webResource, callback) {\r\n  var getvalueToAppend = function (value, headerName) {\r\n    // Do not sign content-length 0 in 2014-08-16 and later\r\n    if (headerName === HeaderConstants.CONTENT_LENGTH && (azureutil.objectIsNull(value[headerName]) || value[headerName].toString() === '0')) {\r\n      return '\\n';\r\n    } else if (azureutil.objectIsNull(value) || azureutil.objectIsNull(value[headerName])) {\r\n      return '\\n';\r\n    } else {\r\n      return value[headerName] + '\\n';\r\n    }\r\n  };\r\n\r\n  var stringToSign =\r\n    webResource.method + '\\n' +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.CONTENT_ENCODING) +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.CONTENT_LANGUAGE) +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.CONTENT_LENGTH) +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.CONTENT_MD5) +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.CONTENT_TYPE) +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.DATE) +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.IF_MODIFIED_SINCE) +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.IF_MATCH) +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.IF_NONE_MATCH) +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.IF_UNMODIFIED_SINCE) +\r\n    getvalueToAppend(webResource.headers, HeaderConstants.RANGE) +\r\n    this._getCanonicalizedHeaders(webResource) +\r\n    this._getCanonicalizedResource(webResource);\r\n\r\n  var signature = this.signer.sign(stringToSign);\r\n\r\n  webResource.withHeader(HeaderConstants.AUTHORIZATION, 'SharedKey ' + this.storageAccount + ':' + signature);\r\n  callback(null);\r\n};\r\n\r\n/*\r\n* Retrieves the webresource's canonicalized resource string.\r\n* @param {WebResource} webResource The webresource to get the canonicalized resource string from.\r\n* @return {string} The canonicalized resource string.\r\n*/\r\nSharedKey.prototype._getCanonicalizedResource = function (webResource) {\r\n  var path = '/';\r\n  if (webResource.path) {\r\n    path = webResource.path;\r\n  }\r\n\r\n  var canonicalizedResource = '/' + this.storageAccount + path;\r\n\r\n  // Get the raw query string values for signing\r\n  var queryStringValues = webResource.queryString;\r\n\r\n  // Build the canonicalized resource by sorting the values by name.\r\n  if (queryStringValues) {\r\n    var paramNames = [];\r\n    Object.keys(queryStringValues).forEach(function (n) {\r\n      paramNames.push(n);\r\n    });\r\n\r\n    paramNames = paramNames.sort();\r\n    Object.keys(paramNames).forEach(function (name) {\r\n      canonicalizedResource += '\\n' + paramNames[name] + ':' + queryStringValues[paramNames[name]];\r\n    });\r\n  }\r\n\r\n  return canonicalizedResource;\r\n};\r\n\r\n/*\r\n* Constructs the Canonicalized Headers string.\r\n*\r\n* To construct the CanonicalizedHeaders portion of the signature string,\r\n* follow these steps: 1. Retrieve all headers for the resource that begin\r\n* with x-ms-, including the x-ms-date header. 2. Convert each HTTP header\r\n* name to lowercase. 3. Sort the headers lexicographically by header name,\r\n* in ascending order. Each header may appear only once in the\r\n* string. 4. Unfold the string by replacing any breaking white space with a\r\n* single space. 5. Trim any white space around the colon in the header. 6.\r\n* Finally, append a new line character to each canonicalized header in the\r\n* resulting list. Construct the CanonicalizedHeaders string by\r\n* concatenating all headers in this list into a single string.\r\n*\r\n* @param {object} The webresource object.\r\n* @return {string} The canonicalized headers.\r\n*/\r\nSharedKey.prototype._getCanonicalizedHeaders = function (webResource) {\r\n  // Build canonicalized headers\r\n  var canonicalizedHeaders = '';\r\n  if (webResource.headers) {\r\n    var canonicalizedHeadersArray = [];\r\n    for (var header in webResource.headers) {\r\n      if (header.indexOf(HeaderConstants.PREFIX_FOR_STORAGE) === 0) {\r\n        var headerItem = { canonicalized: header.toLowerCase(), original: header };\r\n        canonicalizedHeadersArray.push(headerItem);\r\n      }\r\n    }\r\n\r\n    canonicalizedHeadersArray.sort(function(a, b) { return a.canonicalized.localeCompare(b.canonicalized); });\r\n\r\n    _.each(canonicalizedHeadersArray, function (currentHeaderItem) {\r\n      var value = webResource.headers[currentHeaderItem.original];\r\n      if (!azureutil.IsNullOrEmptyOrUndefinedOrWhiteSpace(value)) {\r\n        canonicalizedHeaders += currentHeaderItem.canonicalized + ':' + value + '\\n';\r\n      } else {\r\n        canonicalizedHeaders += currentHeaderItem.canonicalized + ':\\n';\r\n      }\r\n    });\r\n  }\r\n\r\n  return canonicalizedHeaders;\r\n};\r\n\r\n/**\r\n* Generates the query string for a shared access signature signing.\r\n*\r\n* @this {SharedAccessSignature}\r\n* @param {string}                     serviceType                                         The service type.\r\n* @param {string}                     path                                                The path to the resource.\r\n* @param {object}                     sharedAccessPolicy                                  The shared access policy.\r\n* @param {string}                     [sharedAccessPolicy.Id]                             The signed identifier.\r\n* @param {SharedAccessPermissions}    [sharedAccessPolicy.AccessPolicy.Permissions]       The permission type.\r\n* @param {date}                       [sharedAccessPolicy.AccessPolicy.Start]             The time at which the Shared Access Signature becomes valid.\r\n* @param {date}                       [sharedAccessPolicy.AccessPolicy.Expiry]            The time at which the Shared Access Signature becomes expired.\r\n* @param {string}                     [sharedAccessPolicy.AccessPolicy.IPAddressOrRange]  An IP address or a range of IP addresses from which to accept requests. When specifying a range, note that the range is inclusive.\r\n* @param {string}                     [sharedAccessPolicy.AccessPolicy.Protocols]         The protocols permitted for a request made with the account SAS. \r\n*                                                                                         Possible values are both HTTPS and HTTP (https,http) or HTTPS only (https). The default value is https,http. \r\n* @param {string}                     sasVersion                                          A string indicating the desired SAS Version to use, in storage service version format. Value must be 2012-02-12 or later.\r\n* @parma {ResourceTypes}              [args.resourceType]                                 The resource type, if the resource is a blob or container.  Null if the resource is a queue or table.\r\n* @parma {ResourceTypes}              [args.tableName]                                    The table name, if the resource is a table.  Null if the resource is a blob orqueue.\r\n* @parma {ResourceTypes}              [args.queryString]                                  The query string, if additional parameters are desired.\r\n* @param {object}                     [args.headers]                                      The optional header values to set for a blob returned wth this SAS.\r\n* @param {string}                     [args.headers.CacheControl]                         The value of the Cache-Control response header to be returned when this SAS is used.\r\n* @param {string}                     [args.headers.ContentType]                          The value of the Content-Type response header to be returned when this SAS is used.\r\n* @param {string}                     [args.headers.ContentEncoding]                      The value of the Content-Encoding response header to be returned when this SAS is used.\r\n* @param {string}                     [args.headers.ContentLanguage]                      The value of the Content-Language response header to be returned when this SAS is used.\r\n* @param {string}                     [args.headers.ContentDisposition]                   The value of the Content-Disposition response header to be returned when this SAS is used.\r\n* @return {object} The shared access signature query string.\r\n*/\r\nSharedKey.prototype.generateSignedQueryString = function (serviceType, path, sharedAccessPolicy, sasVersion, args) {\r\n  var addIfNotNull = function (queryString, name, value) {\r\n    if (!azureutil.objectIsNull(name) && !azureutil.objectIsNull(value)) {\r\n      queryString[name] = value;\r\n    }\r\n  };\r\n\r\n  var validateVersion = function (sasVersion) {\r\n    // validate and add version\r\n    if (azureutil.objectIsNull(sasVersion)) {\r\n      return HeaderConstants.TARGET_STORAGE_VERSION;\r\n    } else {\r\n      var values = _.values(CompatibleVersionConstants);\r\n      if (values.some(function(version) {\r\n        return version.toLowerCase() === sasVersion.toLowerCase();\r\n      })) {\r\n        return sasVersion;\r\n      } else {\r\n        throw new ArgumentError('sasVersion', azureutil.stringFormat(SR.INVALID_SAS_VERSION, sasVersion, values));\r\n      }\r\n    }\r\n  };\r\n\r\n  var formatAccessPolicyDates = function (accessPolicy) {\r\n    if (!azureutil.objectIsNull(accessPolicy.Start)) {\r\n      if (!_.isDate(accessPolicy.Start)) {\r\n        accessPolicy.Start = new Date(accessPolicy.Start);\r\n      }\r\n \r\n      accessPolicy.Start = azureutil.truncatedISO8061Date(accessPolicy.Start);\r\n    }\r\n\r\n    if (!azureutil.objectIsNull(accessPolicy.Expiry)) {\r\n      if (!_.isDate(accessPolicy.Expiry)) {\r\n        accessPolicy.Expiry = new Date(accessPolicy.Expiry);\r\n      }\r\n\r\n      accessPolicy.Expiry = azureutil.truncatedISO8061Date(accessPolicy.Expiry);\r\n    }\r\n  };\r\n\r\n  // set up optional args\r\n  var queryString;\r\n  var resourceType;\r\n  var headers;\r\n  var tableName;\r\n  \r\n  if(args) {\r\n    queryString = args.queryString;\r\n    resourceType = args.resourceType;\r\n    tableName = args.tableName;\r\n    headers = args.headers;\r\n  }\r\n\r\n  if(!queryString) {\r\n    queryString = {};\r\n  }\r\n\r\n  // add shared access policy params\r\n  if (sharedAccessPolicy.AccessPolicy) {\r\n    formatAccessPolicyDates(sharedAccessPolicy.AccessPolicy);\r\n\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_START, sharedAccessPolicy.AccessPolicy.Start);\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_EXPIRY, sharedAccessPolicy.AccessPolicy.Expiry);\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_PERMISSIONS, sharedAccessPolicy.AccessPolicy.Permissions);\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_IP, sharedAccessPolicy.AccessPolicy.IPAddressOrRange);\r\n    addIfNotNull(queryString, QueryStringConstants.SIGNED_PROTOCOL, sharedAccessPolicy.AccessPolicy.Protocols);\r\n\r\n    // tables only\r\n    addIfNotNull(queryString, QueryStringConstants.STARTPK, sharedAccessPolicy.AccessPolicy.StartPk);\r\n    addIfNotNull(queryString, QueryStringConstants.ENDPK, sharedAccessPolicy.AccessPolicy.EndPk);\r\n    addIfNotNull(queryString, QueryStringConstants.STARTRK, sharedAccessPolicy.AccessPolicy.StartRk);\r\n    addIfNotNull(queryString, QueryStringConstants.ENDRK, sharedAccessPolicy.AccessPolicy.EndRk);\r\n  }\r\n\r\n  // validate and add version\r\n  var validatedSASVersionString = validateVersion(sasVersion);\r\n  addIfNotNull(queryString, QueryStringConstants.SIGNED_VERSION, validatedSASVersionString);\r\n\r\n  // add signed identifier\r\n  addIfNotNull(queryString, QueryStringConstants.SIGNED_IDENTIFIER, sharedAccessPolicy.Id);\r\n\r\n  // blobs only\r\n  addIfNotNull(queryString, QueryStringConstants.SIGNED_RESOURCE, resourceType);\r\n  if (headers) {\r\n    addIfNotNull(queryString, QueryStringConstants.CACHE_CONTROL, headers.cacheControl);\r\n    addIfNotNull(queryString, QueryStringConstants.CONTENT_TYPE, headers.contentType);\r\n    addIfNotNull(queryString, QueryStringConstants.CONTENT_ENCODING, headers.contentEncoding);\r\n    addIfNotNull(queryString, QueryStringConstants.CONTENT_LANGUAGE, headers.contentLanguage);\r\n    addIfNotNull(queryString, QueryStringConstants.CONTENT_DISPOSITION, headers.contentDisposition);\r\n  }\r\n\r\n  // tables only\r\n  addIfNotNull(queryString, QueryStringConstants.TABLENAME, tableName);\r\n\r\n  // add signature\r\n  addIfNotNull(queryString, QueryStringConstants.SIGNATURE, this._generateSignature(serviceType, path, sharedAccessPolicy, validatedSASVersionString, {resourceType: resourceType, headers: headers, tableName: tableName}));\r\n\r\n  return qs.stringify(queryString);\r\n};\r\n\r\n/**\r\n* Generates the shared access signature for a resource.\r\n*\r\n* @this {SharedAccessSignature}\r\n* @param {string}                     serviceType                                         The service type.\r\n* @param {string}                     path                                                The path to the resource.\r\n* @param {object}                     sharedAccessPolicy                                  The shared access policy.\r\n* @param {string}                     [sharedAccessPolicy.Id]                             The signed identifier.\r\n* @param {SharedAccessPermissions}    [sharedAccessPolicy.AccessPolicy.Permissions]       The permission type.\r\n* @param {date}                       [sharedAccessPolicy.AccessPolicy.Start]             The time at which the Shared Access Signature becomes valid.\r\n* @param {date}                       [sharedAccessPolicy.AccessPolicy.Expiry]            The time at which the Shared Access Signature becomes expired.\r\n* @param {string}                     [sharedAccessPolicy.AccessPolicy.IPAddressOrRange]  An IP address or a range of IP addresses from which to accept requests. When specifying a range, note that the range is inclusive.\r\n* @param {string}                     [sharedAccessPolicy.AccessPolicy.Protocols]         The protocols permitted for a request made with the account SAS. \r\n*                                                                                         Possible values are both HTTPS and HTTP (https,http) or HTTPS only (https). The default value is https,http.\r\n* @param {string}                     sasVersion                                          A string indicating the desired SAS Version to use, in storage service version format. Value must be 2012-02-12 or later.\r\n* @parma {ResourceTypes}              [args.resourceType]                                 The resource type, if the resource is a blob or container.  Null if the resource is a queue or table.\r\n* @parma {ResourceTypes}              [args.tableName]                                    The table name, if the resource is a table.  Null if the resource is a blob or queue.\r\n* @param {object}                     [args.headers]                                      The optional header values to set for a blob returned wth this SAS.\r\n* @param {string}                     [args.headers.CacheControl]                         The value of the Cache-Control response header to be returned when this SAS is used.\r\n* @param {string}                     [args.headers.ContentType]                          The value of the Content-Type response header to be returned when this SAS is used.\r\n* @param {string}                     [args.headers.ContentEncoding]                      The value of the Content-Encoding response header to be returned when this SAS is used.\r\n* @param {string}                     [args.headers.ContentLanguage]                      The value of the Content-Language response header to be returned when this SAS is used.\r\n* @param {string}                     [args.headers.ContentDisposition]                   The value of the Content-Disposition response header to be returned when this SAS is used.\r\n* @return {string} The shared access signature.\r\n*/\r\nSharedKey.prototype._generateSignature = function (serviceType, path, sharedAccessPolicy, sasVersion, args) {\r\n  var getvalueToAppend = function (value, noNewLine) {\r\n    var returnValue = '';\r\n    if (!azureutil.objectIsNull(value)) {\r\n      returnValue = value;\r\n    }\r\n\r\n    if (noNewLine !== true) {\r\n      returnValue += '\\n';\r\n    }\r\n\r\n    return returnValue;\r\n  };\r\n\r\n  // set up optional args\r\n  var resourceType;\r\n  var tableName;\r\n  var headers;\r\n  if(args) {\r\n    resourceType = args.resourceType;\r\n    tableName = args.tableName;\r\n    headers = args.headers;\r\n  }\r\n\r\n  // Add leading slash to path\r\n  if (path.substr(0, 1) !== '/') {\r\n    path = '/' + path;\r\n  }\r\n\r\n  var canonicalizedResource;\r\n  if (sasVersion === CompatibleVersionConstants.FEBRUARY_2012 || sasVersion === CompatibleVersionConstants.AUGUST_2013) {\r\n    // Do not prepend service name for older versions\r\n    canonicalizedResource = '/' + this.storageAccount + path;\r\n  } else {\r\n    canonicalizedResource = '/' + serviceType + '/' + this.storageAccount + path;\r\n  }\r\n\r\n  var stringToSign = getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.Permissions : '') +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.Start : '') +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.Expiry : '') +\r\n      getvalueToAppend(canonicalizedResource) +\r\n      getvalueToAppend(sharedAccessPolicy.Id) +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.IPAddressOrRange : '') +\r\n      getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.Protocols : '') +\r\n      sasVersion;\r\n\r\n  if(sasVersion == CompatibleVersionConstants.FEBRUARY_2012) {\r\n    if(headers) {\r\n      throw new ArgumentError('args.headers', SR.INVALID_HEADERS);\r\n    }\r\n  } else if (resourceType) {\r\n    stringToSign += '\\n' +\r\n    getvalueToAppend(headers ? headers.cacheControl : '') +\r\n    getvalueToAppend(headers ? headers.contentDisposition : '') +\r\n    getvalueToAppend(headers ? headers.contentEncoding : '') +\r\n    getvalueToAppend(headers ? headers.contentLanguage : '') +\r\n    getvalueToAppend(headers ? headers.contentType : '', true);\r\n  }\r\n\r\n  if(tableName) {\r\n    stringToSign += '\\n' + \r\n    getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.StartPk : '') +\r\n    getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.StartRk : '') +\r\n    getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.EndPk : '') +\r\n    getvalueToAppend(sharedAccessPolicy.AccessPolicy ? sharedAccessPolicy.AccessPolicy.EndRk : '', true);\r\n  }\r\n\r\n  return this.signer.sign(stringToSign);\r\n};\r\n\r\nmodule.exports = SharedKey;","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar crypto = require('crypto');\r\n\r\n/**\r\n* Creates a new HmacSHA256Sign object.\r\n*\r\n* @constructor\r\n*/\r\nfunction HmacSha256Sign(accessKey) {\r\n  this._accessKey = accessKey;\r\n  this._decodedAccessKey = new Buffer(this._accessKey, 'base64');\r\n}\r\n\r\n/**\r\n* Computes a signature for the specified string using the HMAC-SHA256 algorithm.\r\n*\r\n* @param {string} stringToSign The UTF-8-encoded string to sign.\r\n* @return A String that contains the HMAC-SHA256-encoded signature.\r\n*/\r\nHmacSha256Sign.prototype.sign = function (stringToSign) {\r\n  // Encoding the Signature\r\n  // Signature=Base64(HMAC-SHA256(UTF8(StringToSign)))\r\n\r\n  return crypto.createHmac('sha256', this._decodedAccessKey).update(stringToSign, 'utf-8').digest('base64');\r\n};\r\n\r\nmodule.exports = HmacSha256Sign;","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\nvar HmacSha256Sign = require('./hmacsha256sign');\r\nvar Constants = require('./../util/constants');\r\nvar SR = require('./../util/sr');\r\n\r\n/**\r\n* Creates a new SharedAccessSignature object.\r\n*\r\n* @constructor\r\n* @param {string} sasToken    The sasToken.\r\n*/\r\nfunction SharedAccessSignature(sasToken) {\r\n  this.sasToken = sasToken;\r\n  this.signer = new HmacSha256Sign(sasToken);\r\n}\r\n\r\n/**\r\n* Signs a request with the signature header.\r\n*\r\n* @this {SharedAccessSignature}\r\n* @param {WebResource} The webresource to be signed.\r\n* @param {function(error)}  callback  The callback function.\r\n*/\r\nSharedAccessSignature.prototype.signRequest = function (webResource, callback) {\r\n  if (webResource.uri.indexOf('?') === -1) {\r\n    webResource.uri += '?';\r\n  } else {\r\n    webResource.uri += '&';\r\n  }\r\n\r\n  webResource.uri += this.sasToken;\r\n\r\n  // Add the api-version\r\n  if (this.sasToken.indexOf('api-version') == -1) {\r\n    webResource.uri += '&' + Constants.QueryStringConstants.API_VERSION + '=' + Constants.HeaderConstants.TARGET_STORAGE_VERSION;\r\n  } else {\r\n    throw new SyntaxError(SR.INVALID_SAS_TOKEN);\r\n  }\r\n  callback(null);\r\n};\r\n\r\nmodule.exports = SharedAccessSignature;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar rightPad = function (n, number) {\r\n  var currentN = '' + n;\r\n  while (currentN.length < number) {\r\n    currentN = currentN + '0';\r\n  }\r\n\r\n  return currentN;\r\n};\r\n\r\n/**\r\n* Formats a date into an iso 8061 string.\r\n*\r\n* @param {date}    date The date to format.\r\n* @param {bool}    skipMilliseconds Boolean value indicating if the miliseconds part of the date should not be included.\r\n* @param {integer} millisecondsPading Number of digits to left pad the miliseconds.\r\n* @return {string} The date formated in the ISO 8061 date format.\r\n*/\r\nexports.format = function (date) {\r\n  var dateString = date.toISOString();\r\n  return dateString.substring(0, dateString.length - 1) + '0000Z';\r\n};\r\n\r\n/**\r\n* Parses an ISO 8061 date string into a date object.\r\n*\r\n* @param {string} stringDateTime The string with the date to parse in the ISO 8061 format.\r\n* @return {date} The parsed date.\r\n*/\r\nexports.parse = function (stringDateTime) {\r\n  var parts = stringDateTime.split('T');\r\n  var ymd = parts[0].split('-');\r\n  var time = parts[1].split('.');\r\n  var hms = time[0].split(':');\r\n  var ms = 0;\r\n  if (time[1]) {\r\n    ms = time[1].split('Z');\r\n  }\r\n\r\n  var date = new Date(Date.UTC(\r\n    parseInt(ymd[0], 10),\r\n    parseInt(ymd[1], 10) - 1,\r\n    parseInt(ymd[2], 10),\r\n    parseInt(hms[0], 10),\r\n    parseInt(hms[1], 10),\r\n    parseInt(hms[2], 10),\r\n    Math.round(parseInt(rightPad(ms[0], 7), 10) / 10000)\r\n  ));\r\n\r\n  return date;\r\n};","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar stream = require('stream');\r\nvar util = require('util');\r\n\r\nvar azureutil = require('../util/util');\r\nvar Md5Wrapper = require('../md5-wrapper');\r\nvar Constants = require('../util/constants');\r\nvar bufferSize = Constants.BlobConstants.DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES;\r\n\r\n/**\r\n*  Chunk stream\r\n*  1. Calculate md5\r\n*  2. Track reading offset\r\n*  3. Work with customize memory allocator\r\n*  4. Buffer data from stream.\r\n*  @param {object} options stream.Readable options\r\n*/\r\nfunction ChunkStream(options) {\r\n  stream.Stream.call(this);\r\n  this.writable = this.readable = true;\r\n\r\n  if (!options) {\r\n    options = {};\r\n  }\r\n\r\n  this._highWaterMark = options.highWaterMark || bufferSize;\r\n\r\n  this._paused = undefined; //True/false is the external status from users.\r\n\r\n  this._isStreamOpened = false;\r\n  this._offset = 0;\r\n  this._allocator = options.allocator;\r\n  this._streamEnded = false;\r\n  this._md5hash = null;\r\n  this._buffer = null;\r\n  this._internalBufferSize = 0;\r\n  this._outputLengthLimit = 0;\r\n  this._md5sum = undefined;\r\n\r\n  if (options.calcContentMd5) {\r\n    this._md5hash = new Md5Wrapper().createMd5Hash();\r\n  }\r\n}\r\n\r\nutil.inherits(ChunkStream, stream.Stream);\r\n\r\n/**\r\n* Set the memory allocator.\r\n*/\r\nChunkStream.prototype.setMemoryAllocator = function(allocator) {\r\n  this._allocator = allocator;\r\n};\r\n\r\n/**\r\n* Set the output length.\r\n*/\r\nChunkStream.prototype.setOutputLength = function(length) {\r\n  if (length) {\r\n    this._outputLengthLimit = length;\r\n  }\r\n};\r\n\r\n/**\r\n* Internal stream ended\r\n*/\r\nChunkStream.prototype.end = function (chunk, encoding, cb) {\r\n  if (typeof chunk === 'function') {\r\n    cb = chunk;\r\n    chunk = null;\r\n    encoding = null;\r\n  } else if (typeof encoding === 'function') {\r\n    cb = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  if (chunk) {\r\n    this.write(chunk, encoding);\r\n  }\r\n\r\n  this._streamEnded = true;\r\n  this._flushInternalBuffer();\r\n  \r\n  if (cb) {\r\n    this.once('end', cb);\r\n  }\r\n\r\n  this.emit('end');\r\n};\r\n\r\nChunkStream.prototype.finish = function () {\r\n  this.emit('finish');\r\n\r\n  this.destroy();\r\n};\r\n\r\nChunkStream.prototype.error = function () {\r\n  this.emit('error');\r\n\r\n  this.destroy();\r\n};\r\n\r\nChunkStream.prototype.destroy = function () {\r\n  this.writable = this.readable = false;\r\n\r\n  if (this._allocator && azureutil.objectIsFunction(this._allocator.destroy)) {\r\n    this._allocator.destroy();\r\n  }\r\n  \r\n  this.emit('close');\r\n};\r\n\r\nChunkStream.prototype.stop = function () {\r\n  this.destroy();\r\n  this._streamEnded = true;\r\n  this.emit('end');\r\n};\r\n\r\n/**\r\n* Add event listener\r\n*/\r\nChunkStream.prototype.write = function (chunk, encoding) {\r\n  if (!this._isStreamOpened) {\r\n    this._isStreamOpened = true;\r\n  }\r\n\r\n  this._buildChunk(chunk, encoding);\r\n\r\n  return !this._paused;\r\n};\r\n\r\n/**\r\n* Buffer the data into a chunk and emit it\r\n*/\r\nChunkStream.prototype._buildChunk = function (data) {\r\n  if (typeof data == 'string') {\r\n    data = new Buffer(data);\r\n  }\r\n  var dataSize = data.length;\r\n  var dataOffset = 0;\r\n  do {\r\n    var buffer = null;\r\n    var targetSize = this._internalBufferSize + dataSize;\r\n\r\n    if (targetSize < this._highWaterMark) {\r\n      // add the data to the internal buffer and return as it is not yet full\r\n      this._copyToInternalBuffer(data, dataOffset, data.length);\r\n      return;\r\n    } else if (targetSize == this._highWaterMark){\r\n      var canReleaseInnerStreamBuffer = this._stream && this._stream._allocator && this._stream._allocator.releaseBuffer;\r\n      if(this._internalBufferSize === 0 && data.length === this._highWaterMark && !canReleaseInnerStreamBuffer) {\r\n        // set the buffer to the data passed in to avoid creating a new buffer\r\n        buffer = data;\r\n      } else {\r\n        // add the data to the internal buffer and pop that buffer\r\n        this._copyToInternalBuffer(data, dataOffset, data.length);\r\n        buffer = this._popInternalBuffer();\r\n      }\r\n      dataSize = 0;\r\n    } else {\r\n      // add data to the internal buffer until its full, then return it\r\n      // set the dataSize parameter so that additional data is not lost\r\n      var copySize = this._highWaterMark - this._internalBufferSize;\r\n      this._copyToInternalBuffer(data, dataOffset, dataOffset + copySize);\r\n      dataSize -= copySize;\r\n      dataOffset += copySize;\r\n      buffer = this._popInternalBuffer();\r\n    }\r\n    this._emitBufferData(buffer);\r\n  } while(dataSize > 0);\r\n};\r\n\r\n/**\r\n* Emit the buffer\r\n*/\r\nChunkStream.prototype._emitBufferData = function(buffer) {\r\n  var newOffset = this._offset + buffer.length;\r\n  var range = {\r\n    start : this._offset,\r\n    end : newOffset - 1,\r\n    size : buffer.length\r\n  };\r\n\r\n  this._offset = newOffset;\r\n  \r\n  if (this._outputLengthLimit > 0) {\r\n    // When the start postion is larger than the limit, no data will be consumed though there is an event to be emitted.\r\n    // So the buffer should not be calculated.\r\n    if (range.start <= this._outputLengthLimit) {\r\n      if (this._offset > this._outputLengthLimit) {\r\n        // Don't use negative end parameter which means the index starting from the end of the buffer\r\n        // to be compatible with node 0.8.\r\n        buffer = buffer.slice(0, buffer.length - (this._offset - this._outputLengthLimit));\r\n      }\r\n      if (this._md5hash) {\r\n        this._md5hash.update(buffer);\r\n      }\r\n    }\r\n  } else if (this._md5hash) {\r\n    this._md5hash.update(buffer);\r\n  }\r\n\r\n  this.emit('data', buffer, range);\r\n};\r\n\r\n/**\r\n* Copy data into internal buffer\r\n*/\r\nChunkStream.prototype._copyToInternalBuffer = function(data, start, end) {\r\n  if(start === undefined) start = 0;\r\n  if(end === undefined) end = data.length;\r\n  if (!this._buffer) {\r\n    this._buffer = this._allocateNewBuffer();\r\n    this._internalBufferSize = 0;\r\n  }\r\n  var copied = data.copy(this._buffer, this._internalBufferSize, start, end);\r\n  this._internalBufferSize += copied;\r\n\r\n  if (this._stream && this._stream._allocator && this._stream._allocator.releaseBuffer) {\r\n    this._stream._allocator.releaseBuffer(data);\r\n  }\r\n\r\n  if(copied != (end - start)) {\r\n    throw new Error('Can not copy entire data to buffer');\r\n  }\r\n};\r\n\r\n/**\r\n* Flush internal buffer\r\n*/\r\nChunkStream.prototype._flushInternalBuffer = function() {\r\n  var buffer = this._popInternalBuffer();\r\n  if (buffer) {\r\n    this._emitBufferData(buffer);\r\n  }\r\n};\r\n\r\n/**\r\n* Pop internal buffer\r\n*/\r\nChunkStream.prototype._popInternalBuffer = function () {\r\n  var buf = null;\r\n  if (!this._buffer || this._internalBufferSize === 0) {\r\n    buf = null;\r\n  } else if(this._internalBufferSize == this._highWaterMark) {\r\n    buf = this._buffer;\r\n  } else {\r\n    buf = this._buffer.slice(0, this._internalBufferSize);\r\n  }\r\n\r\n  this._buffer = null;\r\n  this._internalBufferSize = 0;\r\n\r\n  return buf;\r\n};\r\n\r\n/**\r\n* Allocate a buffer\r\n*/\r\nChunkStream.prototype._allocateNewBuffer = function() {\r\n  var size = this._highWaterMark;\r\n  if(this._allocator && azureutil.objectIsFunction(this._allocator.getBuffer)) {\r\n    return this._allocator.getBuffer(size);\r\n  } else {\r\n    var buffer = new Buffer(size);\r\n    return buffer;\r\n  }\r\n};\r\n\r\n/**\r\n* Get file content md5 when read completely.\r\n*/\r\nChunkStream.prototype.getContentMd5 = function(encoding) {\r\n  if (!encoding) encoding = 'base64';\r\n  if(!this._md5hash) {\r\n    throw new Error('Can\\'t get content md5, please set the calcContentMd5 option for FileReadStream.');\r\n  } else {\r\n    if (this._streamEnded) {\r\n      if (!this._md5sum) {\r\n        this._md5sum = this._md5hash.digest(encoding);\r\n      }\r\n      return this._md5sum;\r\n    } else {\r\n      throw new Error('Stream has not ended.');\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n* Pause chunk stream\r\n*/\r\nChunkStream.prototype.pause = function() {\r\n  this._paused = true;\r\n};\r\n\r\n/**\r\n* Resume read stream\r\n*/\r\nChunkStream.prototype.resume = function() {\r\n  if (this._paused) {\r\n    this._paused = false;\r\n\r\n    this.emit('drain');\r\n  }\r\n};\r\n\r\nmodule.exports = ChunkStream;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar util = require('util');\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar WebResource = azureCommon.WebResource;\r\nvar SR = azureCommon.SR;\r\nvar Constants = azureCommon.Constants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar TableConstants = Constants.TableConstants;\r\nvar entityResult = require('../models/entityresult');\r\n\r\nexports = module.exports;\r\n\r\n/**\r\n* Retrieves the entity path from the table name and an entity descriptor.\r\n* @ignore\r\n*\r\n* @param {string}   table         The table name.\r\n* @param {object}   entity        The entity descriptor.\r\n* @return {string} The entity path.\r\n*/\r\nfunction getEntityPath (tableName, partitionKey, rowKey) {\r\n  var path = '/' + tableName;\r\n\r\n  if (typeof (partitionKey) === 'string' && typeof (rowKey) === 'string') {\r\n    // Escape single quotes according to OData Protocol Specification: \"single quotes within string literals are represented as two consecutive single quotes\".\r\n    partitionKey = partitionKey.replace(/'/g, '\\'\\'');\r\n    rowKey = rowKey.replace(/'/g, '\\'\\'');\r\n    path = path + '(PartitionKey=\\'' + encodeURIComponent(partitionKey.toString('utf8')) + '\\',RowKey=\\'' + encodeURIComponent(rowKey.toString('utf8')) + '\\')';\r\n  } else {\r\n    throw new Error(SR.INCORRECT_ENTITY_KEYS);\r\n  }\r\n\r\n  return path;\r\n}\r\n\r\n/**\r\n* Constructs the web resource for a table operation.\r\n*\r\n* @param {string}             operation                           The operation to perform.\r\n* @param {string}             table                               The table name.\r\n* @param {object}             entityDescriptor                    The entity descriptor.\r\n* @param {object}             [options]                           The create options or callback function.\r\n* @param {boolean}            [options.checkEtag]                 Boolean value indicating weather the etag should be matched or not.\r\n* @param {string}             [options.echoContent]               Whether or not to return the entity upon a successful insert. Default to false.\r\n* @param {string}             [options.payloadFormat]             The payload format to use for the request.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @return {webResource}\r\n*/\r\nexports.constructEntityWebResource = function (operation, table, entityDescriptor, options) {\r\n  var webResource = null;\r\n  if (operation === TableConstants.Operations.INSERT) {\r\n    webResource = WebResource.post(table)\r\n      .withHeader(HeaderConstants.PREFER, options.echoContent ? HeaderConstants.PREFER_CONTENT : HeaderConstants.PREFER_NO_CONTENT);\r\n  } else {\r\n    var partitionKey;\r\n    var rowKey;\r\n\r\n    if (typeof (entityDescriptor.PartitionKey) === 'string') {\r\n      partitionKey = entityDescriptor.PartitionKey;\r\n    } else {\r\n      partitionKey = entityDescriptor.PartitionKey[TableConstants.ODATA_VALUE_MARKER];\r\n    }\r\n\r\n    if (typeof (entityDescriptor.RowKey) === 'string') {\r\n      rowKey = entityDescriptor.RowKey;\r\n    } else {\r\n      rowKey = entityDescriptor.RowKey[TableConstants.ODATA_VALUE_MARKER];\r\n    }\r\n\r\n    var path = getEntityPath(table, partitionKey, rowKey);\r\n\r\n    if (operation === TableConstants.Operations.DELETE) {\r\n      webResource = WebResource.del(path);\r\n    } else if (operation === TableConstants.Operations.MERGE || operation === TableConstants.Operations.INSERT_OR_MERGE) {\r\n      webResource = WebResource.merge(path);\r\n    } else if (operation === TableConstants.Operations.REPLACE || operation === TableConstants.Operations.INSERT_OR_REPLACE) {\r\n      webResource = WebResource.put(path);\r\n    } else if (operation === TableConstants.Operations.RETRIEVE) {\r\n      webResource = WebResource.get(path);\r\n    } else {\r\n      throw new Error(util.format(SR.INVALID_TABLE_OPERATION, operation));\r\n    }\r\n  }\r\n\r\n  if (operation === TableConstants.Operations.DELETE || operation === TableConstants.Operations.REPLACE || operation === TableConstants.Operations.MERGE) {\r\n    webResource.withHeader(HeaderConstants.IF_MATCH, entityResult.getEtag(entityDescriptor) || '*');\r\n  }\r\n\r\n  var entitySerializedDescriptor;\r\n  if (!(operation === TableConstants.Operations.DELETE || operation === TableConstants.Operations.RETRIEVE)) {\r\n    entitySerializedDescriptor = entityResult.serialize(entityDescriptor);\r\n  }\r\n\r\n  exports.setTableRequestHeadersAndBody(webResource, entitySerializedDescriptor, options.payloadFormat);\r\n\r\n  return webResource;\r\n};\r\n\r\n/**\r\n* Sets the table request headers.\r\n*\r\n* @param {string}             webResource       The webResource to add headers to.\r\n* @param {object}             [body]            The body of the request.\r\n*/\r\nexports.setTableRequestHeadersAndBody = function (webResource, body, acceptType) {\r\n  if (body) {\r\n    webResource.withHeader(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(body, 'utf8'))\r\n      .withBody(body)\r\n      .withHeader(HeaderConstants.CONTENT_TYPE, HeaderConstants.JSON_CONTENT_TYPE_VALUE);\r\n  }\r\n\r\n  webResource.withHeader(HeaderConstants.ACCEPT, acceptType)\r\n    .withHeader(HeaderConstants.MAX_DATA_SERVICE_VERSION, TableConstants.DEFAULT_DATA_SERVICE_VERSION);\r\n};","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar util = require('util');\r\n\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar SR = azureCommon.SR;\r\nvar Constants = azureCommon.Constants;\r\nvar edmHandler = require('./edmhandler');\r\n\r\nvar prefixLength = Constants.TableConstants.ODATA_PREFIX.length;\r\nvar suffixLength = Constants.TableConstants.ODATA_TYPE_SUFFIX.length;\r\n\r\nexports = module.exports;\r\n\r\n/* Serialize an entity to an Odata (Json based) payload\r\n* Input must be in the following format:\r\n* { stringValue: { '$': 'Edm.String', '_': 'my string' }, myInt: { '$': 'Edm.Int32', '_': 3 } }\r\n*/\r\nexports.serializeJson = function (entity) {\r\n  function normalizeEntityProperty(property) {\r\n    if(azureutil.objectIsNull(property)) {\r\n      return { _: property };\r\n    }\r\n\r\n    if (typeof property === 'object' && property.hasOwnProperty(Constants.TableConstants.ODATA_VALUE_MARKER)) {\r\n      return property;\r\n    }\r\n\r\n    var result = { _: property };\r\n    result[Constants.TableConstants.ODATA_TYPE_MARKER] = edmHandler.propertyType(property, true);\r\n\r\n    return result;\r\n  }\r\n\r\n  var result = {};\r\n  for (var propName in entity) {\r\n    // ignore if .metadata or null or undefined\r\n    if (propName !== Constants.TableConstants.ODATA_METADATA_MARKER) {\r\n      var property = normalizeEntityProperty(entity[propName]);\r\n      if (!azureutil.objectIsNull(property[Constants.TableConstants.ODATA_VALUE_MARKER])) {\r\n        var value = property[Constants.TableConstants.ODATA_VALUE_MARKER];\r\n        var type = property[Constants.TableConstants.ODATA_TYPE_MARKER];\r\n\r\n        if (type === undefined) {\r\n          type = edmHandler.propertyType(value, true);\r\n        }\r\n\r\n        result[propName] = edmHandler.serializeValue(type, value);\r\n        if (edmHandler.isTypeRequired(type, value)) {\r\n          result[propName + Constants.TableConstants.ODATA_TYPE_SUFFIX] = type;\r\n        }\r\n      }\r\n    } \r\n  }\r\n\r\n  var replacer = function(key, value) {\r\n    if (value === Number.POSITIVE_INFINITY) {\r\n      return 'Infinity';\r\n    }\r\n    if (value === Number.NEGATIVE_INFINITY) {\r\n      return '-Infinity';\r\n    }\r\n    if (azureutil.objectIsNaN(value)) {\r\n      return 'NaN';\r\n    }\r\n    return value;\r\n  };\r\n  \r\n  return JSON.stringify(result, replacer);\r\n};\r\n\r\n/*\r\nInput: The body of the HTTP response from the server from a table list as JSON (responseObject.response.body).\r\n\r\nReturn:\r\nThis will return an array in the following format:\r\n\r\n[\r\n  tableName1,\r\n  tableName2\r\n]\r\n\r\nFor example,\r\n\r\n[\r\n  myTable1,\r\n  myTable2\r\n]\r\n\r\n*/\r\nexports.parseJsonTables = function (response) {\r\n  var result = [];\r\n\r\n  if (response.value) {\r\n    for (var i = 0; i < response.value.length; i++) {\r\n      var entity = response.value[i].TableName;\r\n      result.push(entity);\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/*\r\nInput: The body of the HTTP response from the server from a table query as JSON (responseObject.response.body).\r\n\r\nReturn:\r\nThis will return an array in the following format:\r\n\r\n[\r\n  {{ '$': edmHandler1, '_': value1}, { '$': edmHandler2, '_': value2}, { '$': edmHandler3, '_': value3}},\r\n  {{ '$': edmHandler4, '_': value4}, { '$': edmHandler5, '_': value5}, { '$': edmHandler6, '_': value6}}\r\n]\r\n\r\nFor example,\r\n\r\n[\r\n  {{ '$': Edm.Int32, '_': 42}, { '$': Edm.String, '_': 'sample string'}, { '$': Edm.Boolean, '_': false}},\r\n  {{ '$': Edm.Int64, '_': 42}, { '$': Edm.String, '_': 'sample string 2'}, { '$': Edm.Boolean, '_': true}}\r\n]\r\n\r\n*/\r\nexports.parseJsonEntities = function (response, autoResolveProperties, propertyResolver, entityResolver) {\r\n  if (!response.value) {\r\n    return [exports.parseJsonSingleEntity(response, autoResolveProperties, propertyResolver, entityResolver)];\r\n  } else {\r\n    var result = [];\r\n\r\n    for (var i = 0; i < response.value.length; i++) {\r\n      var rawEntity = response.value[i];\r\n      var entity = exports.parseJsonSingleEntity(rawEntity, autoResolveProperties, propertyResolver, entityResolver);\r\n      result.push(entity);\r\n    }\r\n\r\n    return result;  \r\n  }\r\n};\r\n\r\nexports.parseJsonSingleEntity = function(rawEntity, autoResolveProperties, propertyResolver, entityResolver) {\r\n  var rawEntityProperties = {};\r\n  var entityPropertyTypes = {PartitionKey: 'Edm.String', RowKey: 'Edm.String', Timestamp: 'Edm.DateTime'};\r\n  var odataMetadata = {};\r\n\r\n  // parse properties\r\n  for (var entityPropertyName in rawEntity) {\r\n    if (azureutil.stringStartsWith(entityPropertyName, Constants.TableConstants.ODATA_PREFIX)) {\r\n      odataMetadata[entityPropertyName.slice(prefixLength)] = rawEntity[entityPropertyName];\r\n    } else if (azureutil.stringEndsWith(entityPropertyName, Constants.TableConstants.ODATA_TYPE_SUFFIX)) {\r\n      entityPropertyTypes[entityPropertyName.slice(0, entityPropertyName.length - suffixLength)] = rawEntity[entityPropertyName];\r\n    } else {\r\n      rawEntityProperties[entityPropertyName] = rawEntity[entityPropertyName];\r\n    }\r\n  }\r\n\r\n  // make sure etag is set\r\n  if (!odataMetadata.etag && rawEntityProperties.Timestamp) {\r\n    var timestampString = new Buffer(rawEntityProperties.Timestamp).toString();\r\n    odataMetadata.etag = 'W/\"datetime\\'' + timestampString + '\\'\"';\r\n  }\r\n\r\n  var entity = {};\r\n  for (var entityPropertyName in rawEntityProperties) {\r\n    if (rawEntityProperties.hasOwnProperty(entityPropertyName)) {\r\n      // set the type, if given in the response\r\n      var entityPropertyType = entityPropertyTypes[entityPropertyName];\r\n      entity[entityPropertyName] = {};  \r\n\r\n      // use the given property resolver if present, otherwise infer type if undefined\r\n      if (propertyResolver) {\r\n        // partition key, row key, name, value, type if present\r\n        entityPropertyType = propertyResolver(rawEntityProperties.PartitionKey, rawEntityProperties.RowKey, entityPropertyName, rawEntityProperties[entityPropertyName], entityPropertyType);\r\n      }\r\n      if (!entityPropertyType && autoResolveProperties) {\r\n        entityPropertyType = edmHandler.propertyType(rawEntityProperties[entityPropertyName], false);\r\n      } \r\n\r\n      if (entityPropertyType) {\r\n        entity[entityPropertyName][Constants.TableConstants.ODATA_TYPE_MARKER] = entityPropertyType;\r\n      } \r\n\r\n      try {\r\n        entity[entityPropertyName][Constants.TableConstants.ODATA_VALUE_MARKER] = edmHandler.deserializeValueFromJson(entityPropertyType, rawEntityProperties[entityPropertyName]);\r\n      } catch (err) {\r\n        if (propertyResolver) {\r\n          // if a property resolver was used and the type is invalid, throw an appropriate error\r\n          throw new Error(util.format(SR.INVALID_PROPERTY_RESOLVER, entityPropertyName, entityPropertyType, rawEntityProperties[entityPropertyName]));\r\n        } else {\r\n          throw err;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  entity[Constants.TableConstants.ODATA_METADATA_MARKER] = odataMetadata;\r\n\r\n  if (entityResolver) {\r\n    entity = entityResolver(entity);\r\n  }\r\n\r\n  return entity;\r\n};\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar _ = require('underscore');\r\nvar util = require('util');\r\nvar guid = require('uuid');\r\n\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar SR = azureCommon.SR;\r\n\r\nvar TableUtilities = require('../tableutilities');\r\nvar EdmType = TableUtilities.EdmType;\r\n\r\n/**\r\n* Get the Edm type of an object.\r\n*\r\n* @param {object} value A typed instance.\r\n* @return {string} The Edm type.\r\n*/\r\nexports.propertyType = function (value, guessNumberType) {\r\n  if (_.isNumber(value)) {\r\n    if (guessNumberType) {\r\n      if (azureutil.objectIsInt(value)) {\r\n        return 'Edm.Int32';\r\n      } else {\r\n        return 'Edm.Double';\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  } else if (_.isBoolean(value)) {\r\n    return 'Edm.Boolean';\r\n  } else if (_.isDate(value)) {\r\n    return 'Edm.DateTime';\r\n  } else {\r\n    return 'Edm.String';\r\n  }\r\n};\r\n\r\n/**\r\n* Convert a JSON value from over the wire into the correct EDM type.\r\n* \r\n* Note that Int64, is remaining a string.  Converting it to a Number would lose precision.\r\n* Int32, Boolean, and Double should already be the correct non-string types\r\n*\r\n* @param {string} type  The type of the value as it appears in the type attribute.\r\n* @param value The value in JSON format.\r\n* @return {object} The unserialized value.\r\n*/\r\nexports.deserializeValueFromJson = function (type, value) {\r\n  if (type) {\r\n    switch (type) {\r\n      case EdmType.BINARY:\r\n        return new Buffer(value, 'base64');\r\n      case EdmType.DATETIME:\r\n        return new Date(value);\r\n      case EdmType.GUID:\r\n        return value;\r\n      case EdmType.DOUBLE:\r\n        // Account for Infinity and NaN:\r\n        if (typeof value !== 'number') {\r\n          return parseFloat(value);\r\n        }\r\n        return value;\r\n      case EdmType.INT32:\r\n      case EdmType.INT64:\r\n      case EdmType.STRING:\r\n      case EdmType.BOOLEAN:\r\n        return value;\r\n      default:\r\n        throw new Error(util.format(SR.TYPE_NOT_SUPPORTED, type));\r\n    }\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\n/**\r\n* Convert a raw EdmType value into the JSON value expected to be sent over the wire.\r\n*\r\n* TODO: validate correct input types?\r\n* Expects Edm.Int64 and Edm.String to be string, Edm.Double and Edm.Int32 to be Number,\r\n* Edm.Guid to be an array or buffer compatible with Node.uuid, Edm.Binary to be a Node Buffer, Edm.DateTime to be a Date,\r\n* and Edm.Boolean to be a boolean.\r\n*\r\n* @param {string} type  The type of the value as it will appear in the type attribute.\r\n* @param {string} value The value\r\n* @return {object} The serialized value.\r\n*/\r\nexports.serializeValue = function (type, value) {\r\n  switch (type) {\r\n    case EdmType.BINARY:\r\n      if (Buffer.isBuffer(value)) {\r\n        return value.toString('base64');\r\n      }\r\n      return value;\r\n    case EdmType.DATETIME:\r\n      if (_.isDate(value)) {\r\n        return value.toISOString();\r\n      }\r\n      return value;\r\n    case EdmType.GUID:\r\n      if (Buffer.isBuffer(value) || _.isArray(value)) {\r\n        return guid.unparse(value);\r\n      }\r\n      return value;\r\n    case EdmType.INT64:\r\n    case EdmType.DOUBLE:\r\n      return value.toString();\r\n    case EdmType.INT32:\r\n      if (value === Number.POSITIVE_INFINITY) {\r\n        return 'Infinity';\r\n      }\r\n      if (value === Number.NEGATIVE_INFINITY) {\r\n        return '-Infinity';\r\n      }\r\n      if (azureutil.objectIsNaN(value)) {\r\n        return 'NaN';\r\n      }\r\n      return value;\r\n    case EdmType.STRING:\r\n    case EdmType.BOOLEAN:\r\n      return value;\r\n    default:\r\n      throw new Error(SR.TYPE_NOT_SUPPORTED + type);\r\n  }\r\n};\r\n\r\n/*\r\n* Determines if a type annotation is required for the input type when sending JSON data to the service. \r\n*/\r\nexports.isTypeRequired = function(type, value) {\r\n  switch (type) {\r\n  case EdmType.BINARY:\r\n  case EdmType.INT64:\r\n  case EdmType.DATETIME:\r\n  case EdmType.GUID:\r\n  case EdmType.DOUBLE:\r\n    return true;\r\n  case EdmType.INT32:\r\n    if (typeof value !== 'number' || value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY || (azureutil.objectIsNaN(value))) {\r\n      return true;\r\n    }\r\n    return false;\r\n  case EdmType.STRING:\r\n  case EdmType.BOOLEAN:\r\n    return false;\r\n  default:\r\n    throw new Error(util.format(SR.TYPE_NOT_SUPPORTED, type));\r\n  }\r\n};\r\n\r\n/**\r\n* Serializes value into proper value to be used in odata query value.\r\n*\r\n* @param {object} value The value to be serialized.\r\n* @return {string} The serialized value.\r\n*/\r\nexports.serializeQueryValue = function (value, type) {\r\n  var edmType = type || exports.propertyType(value, true);\r\n  switch (edmType) {\r\n    case EdmType.INT32:\r\n      return value.toString();\r\n    case EdmType.BOOLEAN:\r\n      return value ? 'true' : 'false';\r\n    case EdmType.DOUBLE:\r\n      return value.toString();\r\n    case EdmType.INT64:\r\n      return value.toString() + 'L';\r\n    case EdmType.DATETIME:\r\n      if(_.isDate(value)) {\r\n        var dateTimeString = value.toISOString();\r\n        return 'datetime\\'' + dateTimeString + '\\'';\r\n      }\r\n      throw new Error(util.format(SR.INVALID_EDM_TYPE, value, type));\r\n    case EdmType.GUID:\r\n      return 'guid\\'' + value.toString() + '\\'';\r\n    case EdmType.BINARY:\r\n      return 'X\\'' + value.toString('hex') + '\\'';\r\n    default:\r\n      return '\\'' + value.toString().replace(/'/g, '\\'\\'') + '\\'';\r\n  }   \r\n};","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar _ = require('underscore');\r\nvar util = require('util');\r\n\r\nvar azureCommon = require('./../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar SR = azureCommon.SR;\r\nvar QueryStringConstants =  azureCommon.Constants.QueryStringConstants;\r\n\r\nvar edmHandler = require('./internal/edmhandler');\r\nvar TableUtilities = require('./tableutilities');\r\nvar QueryComparisons = TableUtilities.QueryComparisons;\r\nvar TableOperators = TableUtilities.TableOperators;\r\nvar EdmType = TableUtilities.EdmType;\r\n\r\n/**\r\n * Creates a new TableQuery object.\r\n *\r\n * @constructor\r\n */\r\nfunction TableQuery() {\r\n  this._fields = [];\r\n  this._where = [];\r\n  this._top = null;\r\n}\r\n\r\n/**\r\n* Specifies the select clause. If no arguments are given, all fields will be selected.\r\n*\r\n* @param {array} fields The fields to be selected.\r\n* @return {TableQuery} A table query object with the select clause.\r\n* @example\r\n* var tableQuery = new TableQuery().select('field1', 'field2');\r\n*/\r\nTableQuery.prototype.select = function () {\r\n  var self = this;\r\n  if (arguments) {\r\n    _.each(arguments, function (argument) {\r\n      self._fields.push(argument);\r\n    });\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies the top clause.\r\n *\r\n * @param {int} top The number of items to fetch.\r\n * @return {TableQuery} A table query object with the top clause.\r\n * @example\r\n * var tableQuery = new TableQuery().top(10);\r\n *\r\n * // tasktable should already exist and have entities\r\n * tableService.queryEntities('tasktable', tableQuery, null \\/*currentToken*\\/, function(error, result) {\r\n *   if(!error) { \r\n *     var entities = result.entities; // there will be 10 or less entities\r\n *     // do stuff with the returned entities if there are any\r\n *     // if result.continuationToken exists, to get the next 10 (or less) entities\r\n *     // call queryEntities as above, but with the returned token instead of null\r\n *   }\r\n * });\r\n */\r\nTableQuery.prototype.top = function (top) {\r\n  this._top = top;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies the where clause.\r\n *\r\n * Valid type specifier strings include: ?string?, ?bool?, ?int32?, ?double?, ?date?, ?guid?, ?int64?, ?binary?\r\n * A type must be specified for guid, int64, and binaries or the filter produced will be incorrect.\r\n *\r\n * @param {string}       condition   The condition string.\r\n * @param {string|array} value       Value(s) to insert in question mark (?) parameters.\r\n * @return {TableQuery}  A table query object with the where clause.\r\n * @example\r\n * var tableQuery = new TableQuery().where(TableQuery.guidFilter('GuidField', QueryComparisons.EQUAL, guidVal));\r\n * OR\r\n * var tableQuery = new TableQuery().where('Name == ? or Name <= ?', name1, name2);\r\n * OR\r\n * var tableQuery = new TableQuery().where('Name == ?string? && Value == ?int64?', name1, int64Val);\r\n *\r\n * // tasktable should already exist and have entities\r\n * tableService.queryEntities('tasktable', tableQuery, null \\/*currentToken*\\/, function(error, result, response) {\r\n *   if(!error) { \r\n *     var entities = result.entities;\r\n *     // do stuff with the returned entities if there are any\r\n *   }\r\n * });\r\n */\r\nTableQuery.prototype.where = function (condition) {  \r\n  this._where.push(TableQuery._encodeConditionString(condition, arguments));\r\n  return this;\r\n};\r\n\r\n/**\r\n * Generates a property filter condition string for an 'int' value.\r\n *\r\n * @param {string}       propertyName   A string containing the name of the property to compare.\r\n * @param {string}       operation      A string containing the comparison operator to use. \r\n *                                      See Constants.TableConstants.QueryComparisons for a list of allowed operations.\r\n * @param {string|int}   value          An 'int' containing the value to compare with the property.\r\n * @return {string} A string containing the formatted filter condition.\r\n * @example\r\n * var query = TableQuery.int32Filter('IntField', QueryComparisons.EQUAL, 5);\r\n */\r\nTableQuery.int32Filter = function (propertyName, operation, value) {\r\n  return TableQuery._concatFilterString(propertyName, operation, value, EdmType.INT32);\r\n};\r\n\r\n/**\r\n * Generates a property filter condition string for a 'int64' value.\r\n *\r\n * @param {string}       propertyName   A string containing the name of the property to compare.\r\n * @param {string}       operation      A string containing the comparison operator to use. \r\n *                                      See Constants.TableConstants.QueryComparisons for a list of allowed operations.\r\n * @param {string|int64} value          An 'int64' containing the value to compare with the property.\r\n * @return {string} A string containing the formatted filter condition.\r\n * @example\r\n * var query = TableQuery.int64Filter('Int64Field', QueryComparisons.EQUAL, 123);\r\n */\r\nTableQuery.int64Filter = function (propertyName, operation, value) {\r\n  return TableQuery._concatFilterString(propertyName, operation, value, EdmType.INT64);\r\n};\r\n\r\n/**\r\n * Generates a property filter condition string for a 'double' value.\r\n *\r\n * @param {string}       propertyName   A string containing the name of the property to compare.\r\n * @param {string}       operation      A string containing the comparison operator to use. \r\n *                                      See Constants.TableConstants.QueryComparisons for a list of allowed operations.\r\n * @param {string|double}value          A 'double' containing the value to compare with the property.\r\n * @return {string} A string containing the formatted filter condition.\r\n * @example\r\n * var query = TableQuery.doubleFilter('DoubleField', QueryComparisons.EQUAL, 123.45);\r\n */\r\nTableQuery.doubleFilter = function (propertyName, operation, value) {\r\n  return TableQuery._concatFilterString(propertyName, operation, value, EdmType.DOUBLE);\r\n};\r\n\r\n/**\r\n * Generates a property filter condition string for a 'boolean' value.\r\n *\r\n * @param {string}       propertyName   A string containing the name of the property to compare.\r\n * @param {string}       operation      A string containing the comparison operator to use. \r\n *                                      See Constants.TableConstants.QueryComparisons for a list of allowed operations.\r\n * @param {string|boolean}       value          A 'boolean' containing the value to compare with the property.\r\n * @return {string} A string containing the formatted filter condition.\r\n * @example\r\n * var query = TableQuery.booleanFilter('BooleanField', QueryComparisons.EQUAL, false);\r\n */\r\nTableQuery.booleanFilter = function (propertyName, operation, value) {\r\n  return TableQuery._concatFilterString(propertyName, operation, value, EdmType.BOOLEAN);\r\n};\r\n\r\n/**\r\n * Generates a property filter condition string for a 'datetime' value.\r\n *\r\n * @param {string}       propertyName   A string containing the name of the property to compare.\r\n * @param {string}       operation      A string containing the comparison operator to use. \r\n *                                      See Constants.TableConstants.QueryComparisons for a list of allowed operations.\r\n * @param {string|date}     value              A 'datetime' containing the value to compare with the property.\r\n * @return {string} A string containing the formatted filter condition.\r\n * @example\r\n * var query = TableQuery.dateFilter('DateTimeField', QueryComparisons.EQUAL, new Date(Date.UTC(2001, 1, 3, 4, 5, 6)));\r\n */\r\nTableQuery.dateFilter = function (propertyName, operation, value) {\r\n  return TableQuery._concatFilterString(propertyName, operation, value, EdmType.DATETIME);\r\n};\r\n\r\n/**\r\n * Generates a property filter condition string for a 'guid' value.\r\n *\r\n * @param {string}       propertyName   A string containing the name of the property to compare.\r\n * @param {string}       operation      A string containing the comparison operator to use. \r\n *                                      See Constants.TableConstants.QueryComparisons for a list of allowed operations.\r\n * @param {string|guid}  value          A 'guid' containing the value to compare with the property.\r\n * @return {string} A string containing the formatted filter condition.\r\n * @example\r\n * var query = TableQuery.guidFilter('GuidField', QueryComparisons.EQUAL, guid.v1());\r\n */\r\nTableQuery.guidFilter = function (propertyName, operation, value) {\r\n  return TableQuery._concatFilterString(propertyName, operation, value, EdmType.GUID);\r\n};\r\n\r\n/**\r\n * Generates a property filter condition string for a 'binary' value.\r\n *\r\n * @param {string}       propertyName   A string containing the name of the property to compare.\r\n * @param {string}       operation      A string containing the comparison operator to use. \r\n *                                      See Constants.TableConstants.QueryComparisons for a list of allowed operations.\r\n * @param {string|buffer}value          A 'buffer' containing the value to compare with the property.\r\n * @return {string} A string containing the formatted filter condition.\r\n * @example\r\n * var query = TableQuery.binaryFilter('BinaryField', QueryComparisons.EQUAL, new Buffer('hello'));\r\n */\r\nTableQuery.binaryFilter = function (propertyName, operation, value) {\r\n  return TableQuery._concatFilterString(propertyName, operation, value, EdmType.BINARY);\r\n};\r\n\r\n/**\r\n * Generates a property filter condition string.\r\n *\r\n * @param {string}       propertyName   A string containing the name of the property to compare.\r\n * @param {string}       operation      A string containing the comparison operator to use. \r\n *                                      See Constants.TableConstants.QueryComparisons for a list of allowed operations.\r\n * @param {string}       value          A 'string' containing the value to compare with the property.\r\n * @return {string} A string containing the formatted filter condition.\r\n * @example\r\n * var query = TableQuery.stringFilter('StringField', QueryComparisons.EQUAL, 'name');\r\n */\r\nTableQuery.stringFilter = function (propertyName, operation, value) {\r\n  return TableQuery._concatFilterString(propertyName, operation, value, EdmType.STRING);\r\n};\r\n\r\n/**\r\n * Creates a filter condition using the specified logical operator on two filter conditions.\r\n *\r\n * @param {string}       filterA          A string containing the first formatted filter condition.\r\n * @param {string}       operatorString   A string containing the operator to use (AND, OR).\r\n * @param {string}       filterB          A string containing the second formatted filter condition.\r\n * @return {string} A string containing the combined filter expression.\r\n * @example\r\n * var filter1 = TableQuery.stringFilter('Name', QueryComparisons.EQUAL, 'Person');\r\n * var filter2 = TableQuery.booleanFilter('Visible', QueryComparisons.EQUAL, true);\r\n * var combinedFilter = TableQuery.combineFilters(filter1, TableUtilities.TableOperators.AND, filter2);\r\n */\r\nTableQuery.combineFilters = function (filterA, operatorString, filterB) {\r\n  return filterA + ' ' + operatorString + ' ' + filterB;\r\n};\r\n\r\n/**\r\n * Specifies an AND where condition.\r\n *\r\n * @param {string}       condition   The condition string.\r\n * @param {array}        arguments   Any number of arguments to be replaced in the condition by the question mark (?).\r\n * @return {TableQuery} A table query object with the and clause.\r\n * @example\r\n * var tableQuery = new TableQuery()\r\n *                      .where('Name == ? or Name <= ?', 'Person1', 'Person2');\r\n *                      .and('Age >= ?', 18);\r\n */\r\nTableQuery.prototype.and = function (condition) {\r\n  if (this._where.length === 0) {\r\n    throw new Error(util.format(SR.QUERY_OPERATOR_REQUIRES_WHERE, 'AND'));\r\n  }\r\n\r\n  this._where.push(' and ' + TableQuery._encodeConditionString(condition, arguments));\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies an OR where condition.\r\n *\r\n * @param {string}       condition   The condition.\r\n * @param {array}        arguments   Any number of arguments to be replaced in the condition by the question mark (?).\r\n * @return {TableQuery} A table query object with the or clause.\r\n * @example\r\n * var tableQuery = new TableQuery()\r\n *                      .where('Name == ? or Name <= ?', 'Person1', 'Person2');\r\n *                      .or('Age >= ?', 18);\r\n */\r\nTableQuery.prototype.or = function (condition) {\r\n  if (this._where.length === 0) {\r\n    throw new Error(util.format(SR.QUERY_OPERATOR_REQUIRES_WHERE, 'OR'));\r\n  }\r\n\r\n  this._where.push(' or ' + TableQuery._encodeConditionString(condition, arguments));\r\n  return this;\r\n};\r\n\r\n/**\r\n * Returns the query string object for the query.\r\n *\r\n * @return {object} JSON object representing the query string arguments for the query.\r\n */\r\nTableQuery.prototype.toQueryObject = function () {\r\n  var query = {};\r\n  if (this._fields.length > 0) {\r\n    query[QueryStringConstants.SELECT] = this._fields.join(',');\r\n  }\r\n\r\n  if (this._where.length > 0) {\r\n    query[QueryStringConstants.FILTER] = this._where.join('');\r\n  }\r\n\r\n  if (this._top) {\r\n    query[QueryStringConstants.TOP] = this._top;\r\n  }\r\n\r\n  return query;\r\n};\r\n\r\n// Functions\r\n\r\n/**\r\n* Concat the filter string parameters.\r\n*\r\n* @param {string}       propertyName   A string containing the name of the property to compare.\r\n* @param {string}       operation      A string containing the comparison operator to use. \r\n*                                      See Constants.TableConstants.QueryComparisons for a list of allowed operations.\r\n* @param {object}       value          The value to compare with the property.\r\n* @param {string}       type           A string EdmType of the property to compare.\r\n* @return {string} A string containing the formatted filter condition.\r\n* @ignore\r\n*/\r\nTableQuery._concatFilterString = function (propertyName, operation, value, type) {\r\n  if (azureutil.objectIsNull(propertyName)) {\r\n    throw new Error(util.format(SR.ARGUMENT_NULL_OR_UNDEFINED, 'propertyName'));\r\n  }\r\n\r\n  if (azureutil.objectIsNull(operation)) {\r\n    throw new Error(util.format(SR.ARGUMENT_NULL_OR_UNDEFINED, 'operation'));\r\n  }\r\n\r\n  if (azureutil.objectIsNull(value)) {\r\n    throw new Error(util.format(SR.ARGUMENT_NULL_OR_UNDEFINED, 'value'));\r\n  }\r\n\r\n  var serializedValue = edmHandler.serializeQueryValue(value, type);\r\n  return propertyName + ' ' + operation + ' ' + serializedValue;\r\n};\r\n\r\n/**\r\n * Encodes a condition string.\r\n *\r\n * @param {string}       condition   The condition.\r\n * @param {array}        arguments   Any number of arguments to be replaced in the condition by the question mark (?).\r\n * @return {TableQuery} A table query object with the or clause\r\n * @ignore\r\n */\r\nTableQuery._encodeConditionString = function (condition, args) {\r\n  var encodedCondition = TableQuery._replaceOperators(condition);\r\n  if (args.length > 1) {\r\n    var sections = encodedCondition.split(/(\\?string\\?|\\?int32\\?|\\?int64\\?|\\?bool\\?|\\?double\\?|\\?date\\?|\\?binary\\?|\\?guid\\?|\\?)/);\r\n    var count = 1;\r\n    for (var i = 0; i < sections.length && count < args.length; i++) {\r\n      if (sections[i].indexOf('?') === 0) {\r\n        var type = TableQuery._getEdmType(sections[i]);\r\n        sections[i] = edmHandler.serializeQueryValue(args[count], type);\r\n        count++;\r\n      }\r\n    }\r\n    encodedCondition = sections.join('');\r\n  }\r\n\r\n  return encodedCondition;\r\n};\r\n\r\n/**\r\n * Converts the query string type to an Edm type.\r\n *\r\n * @param {string} type The type included in the query string.\r\n * @return {string} The EdmType.\r\n * @ignore\r\n */\r\nTableQuery._getEdmType = function (type) {\r\n  switch (type) {\r\n    case '?binary?':\r\n      return EdmType.BINARY;\r\n    case '?int64?':\r\n      return EdmType.INT64;\r\n    case '?date?':\r\n      return EdmType.DATETIME;\r\n    case '?guid?':\r\n      return EdmType.GUID;\r\n    case '?int32?':\r\n      return EdmType.INT32;\r\n    case '?double?':\r\n      return EdmType.DOUBLE;\r\n    case '?bool?':\r\n      return EdmType.BOOLEAN;\r\n    case '?string?':\r\n      return EdmType.STRING;\r\n    default:\r\n      return undefined;\r\n  }\r\n};\r\n\r\n/**\r\n * Replace operators.\r\n * @ignore\r\n * @param {string} whereClause The text where to replace the operators.\r\n * @return {string} The string with the replaced operators.\r\n * @ignore\r\n */\r\nTableQuery._replaceOperators = function (whereClause) {\r\n  var encodedWhereClause = whereClause.replace(/ == /g, ' ' + QueryComparisons.EQUAL + ' ');\r\n  encodedWhereClause = encodedWhereClause.replace(/ != /g, ' ' + QueryComparisons.NOT_EQUAL + ' ');\r\n  encodedWhereClause = encodedWhereClause.replace(/ >= /g, ' ' + QueryComparisons.GREATER_THAN_OR_EQUAL + ' ');\r\n  encodedWhereClause = encodedWhereClause.replace(/ > /g, ' ' + QueryComparisons.GREATER_THAN + ' ');\r\n  encodedWhereClause = encodedWhereClause.replace(/ <= /g, ' ' + QueryComparisons.LESS_THAN_OR_EQUAL + ' ');\r\n  encodedWhereClause = encodedWhereClause.replace(/ < /g, ' ' + QueryComparisons.LESS_THAN + ' ');\r\n  encodedWhereClause = encodedWhereClause.replace(/ \\&\\& /g, ' ' + TableOperators.AND + ' ');\r\n  encodedWhereClause = encodedWhereClause.replace(/ \\|\\| /g, ' ' + TableOperators.OR + ' ');\r\n  encodedWhereClause = encodedWhereClause.replace(/!/g, TableOperators.NOT);\r\n\r\n  return encodedWhereClause;\r\n};\r\n\r\nmodule.exports = TableQuery;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\n\r\nvar util = require('util');\r\n\r\n/**\r\n * The interface for classes that represent a encoder which can be used to specify how the queue service encodes and decodes queue messages.\r\n * \r\n * To specify how the queue service encodes and decodes queue messages, set `queueService.messageEncoder` to object of built-in encoder types\r\n * `[TextBase64QueueMessageEncoder]{@link TextBase64QueueMessageEncoder}`, `[BinaryBase64QueueMessageEncoder]{@link BinaryBase64QueueMessageEncoder}`, `[TextXmlQueueMessageEncoder]{@link TextXmlQueueMessageEncoder}`,\r\n * or custom implementation of the QueueMessageEncoder.\r\n * \r\n * @class\r\n */\r\nfunction QueueMessageEncoder() {\r\n}\r\n\r\n/**\r\n * Function to encode queue messages.\r\n * \r\n * @param   {object}    [input]               The target to be encoded.\r\n * @return  {string}\r\n */\r\nQueueMessageEncoder.prototype.encode = function(input){\r\n  return input;\r\n};\r\n\r\n/**\r\n * Function to decode queue messages\r\n * \r\n * @param   {string}    [textToBeDecoded]     The base64 string to be decoded.\r\n * @returns {any}\r\n */\r\nQueueMessageEncoder.prototype.decode = function(textToBeDecoded){\r\n  return textToBeDecoded;\r\n};\r\n\r\n\r\n/**\r\n * Create a new TextBase64QueueMessageEncoder object\r\n * @class\r\n * \r\n * Encode from utf-8 string to base64 string\r\n * Decode from base64 string to utf-8 string.\r\n * \r\n * @constructor\r\n * @extends {QueueMessageEncoder}\r\n */\r\nfunction TextBase64QueueMessageEncoder(){\r\n}\r\nutil.inherits(TextBase64QueueMessageEncoder, QueueMessageEncoder);\r\n\r\n/**\r\n * Encode from utf-8 string to base64 string\r\n * @this TextBase64QueueMessageEncoder\r\n * \r\n * @param   {string}    [input]               The target to be encoded.\r\n * \r\n * @return {string}\r\n */\r\nTextBase64QueueMessageEncoder.prototype.encode = function(input){\r\n  return new Buffer(input, 'utf8').toString('base64');\r\n};\r\n\r\n/**\r\n * Decode from base64 string to utf-8 string.\r\n * @this TextBase64QueueMessageEncoder\r\n * \r\n * @param   {string}    [textToBeDecoded]     The base64 string to be decoded.\r\n * \r\n * @return {string}\r\n */\r\nTextBase64QueueMessageEncoder.prototype.decode = function(textToDecode){\r\n  return new Buffer(textToDecode, 'base64').toString('utf8');\r\n};\r\n\r\n\r\n/**\r\n * Create a new BinaryBase64QueueMessageEncoder object\r\n * @class\r\n * \r\n * Encode from binary buffer to base64 string\r\n * Decode from base64 string to binary buffer.\r\n * \r\n * @constructor\r\n * @extends {QueueMessageEncoder}\r\n */\r\nfunction BinaryBase64QueueMessageEncoder(){\r\n}\r\nutil.inherits(BinaryBase64QueueMessageEncoder, QueueMessageEncoder);\r\n\r\n/**\r\n * Encode from binary buffer string to base64 string\r\n * @this BinaryBase64QueueMessageEncoder\r\n * \r\n * @param   {Buffer}    [input]               The target to be encoded.\r\n * \r\n * @return {string}\r\n */\r\nBinaryBase64QueueMessageEncoder.prototype.encode = function(input){\r\n  return input.toString('base64');\r\n};\r\n\r\n\r\n/**\r\n * Decode from base64 string to binary buffer.\r\n * @this BinaryBase64QueueMessageEncoder\r\n * \r\n * @param   {string}    [textToBeDecoded]     The base64 string to be decoded.\r\n * \r\n * @return {Buffer}\r\n */\r\nBinaryBase64QueueMessageEncoder.prototype.decode = function(textToDecode){\r\n  return new Buffer(textToDecode, 'base64');\r\n};\r\n\r\n\r\n/**\r\n * Create a new TextXmlQueueMessageEncoder object\r\n * @class\r\n * \r\n * Encode utf-8 string by escaping the xml markup characters.\r\n * Decode from utf-8 string by unescaping the xml markup characters.\r\n * \r\n * @constructor\r\n * @extends {QueueMessageEncoder}\r\n */\r\nfunction TextXmlQueueMessageEncoder(){\r\n}\r\nutil.inherits(TextXmlQueueMessageEncoder, QueueMessageEncoder);\r\n\r\n/**\r\n * Encode utf-8 string by escaping the xml markup characters.\r\n * @this TextXmlQueueMessageEncoder\r\n * \r\n * @param   {string}    [input]               The target to be encoded.\r\n * \r\n * @return {string}\r\n */\r\nTextXmlQueueMessageEncoder.prototype.encode = function(input){\r\n  return input.replace(/&/gm, '&amp;')\r\n    .replace(/</gm, '&lt;')\r\n    .replace(/>/gm, '&gt;')\r\n    .replace(/\"/gm, '&quot;')\r\n    .replace(/'/gm, '&apos;');\r\n};\r\n\r\n/**\r\n * Decode from utf-8 string by unescaping the xml markup characters.\r\n * @this TextXmlQueueMessageEncoder\r\n * \r\n * @param   {string}    [textToBeDecoded]     The base64 string to be decoded.\r\n * \r\n * @return {string}\r\n */\r\nTextXmlQueueMessageEncoder.prototype.decode = function(textToDecode){\r\n  return textToDecode.replace(/&amp;/gm, '&')\r\n    .replace(/&lt;/gm, '<')\r\n    .replace(/&gt;/gm, '>')\r\n    .replace(/&quot;/gm, '\"')\r\n    .replace(/&apos;/gm, '\\'');\r\n};\r\n\r\nmodule.exports = QueueMessageEncoder;\r\nmodule.exports.TextBase64QueueMessageEncoder = TextBase64QueueMessageEncoder;\r\nmodule.exports.BinaryBase64QueueMessageEncoder = BinaryBase64QueueMessageEncoder;\r\nmodule.exports.TextXmlQueueMessageEncoder = TextXmlQueueMessageEncoder;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar exports = module.exports;\r\n\r\n/**\r\n* Creates a connection string that can be used to create a service which runs on the storage emulator. The emulator must be downloaded separately.\r\n*\r\n* @param {string}   [proxyUri]                  The proxyUri. By default, http://127.0.0.1\r\n* @return {string}                              A connection string representing the development storage credentials.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var devStoreCreds = azure.generateDevelopmentStorageCredentials();\r\n* var blobService = azure.createBlobService(devStoreCreds);\r\n*/\r\nexports.generateDevelopmentStorageCredentials = function (proxyUri) {\r\n  var devStore = 'UseDevelopmentStorage=true;';\r\n  if(proxyUri){\r\n    devStore += 'DevelopmentStorageProxyUri=' + proxyUri;\r\n  }\r\n\r\n  return devStore;\r\n};\r\n\r\n/**\r\n * Table client exports.\r\n * @ignore\r\n */\r\nvar TableService = require('./services/table/tableservice');\r\n\r\nexports.TableService = TableService;\r\nexports.TableQuery = require('./services/table/tablequery');\r\nexports.TableBatch = require('./services/table/tablebatch');\r\nexports.TableUtilities = require('./services/table/tableutilities');\r\n\r\n/**\r\n* Creates a new {@link TableService} object.\r\n* If no storageaccount or storageaccesskey are provided, the AZURE_STORAGE_CONNECTION_STRING and then the AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY \r\n* environment variables will be used.\r\n*\r\n* @param {string} [storageAccountOrConnectionString]  The storage account or the connection string.\r\n* @param {string} [storageAccessKey]                  The storage access key.\r\n* @param {string|object} [host]                       The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @return {TableService}                              A new TableService object.\r\n*\r\n*/\r\nexports.createTableService = function (storageAccountOrConnectionString, storageAccessKey, host) {\r\n  return new TableService(storageAccountOrConnectionString, storageAccessKey, host);\r\n};\r\n\r\n/**\r\n* Creates a new {@link TableService} object using the host Uri and the SAS credentials provided.\r\n* \r\n* @param {string|object} host                         The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @param {string} sasToken                            The Shared Access Signature token.\r\n* @return {TableService}                              A new TableService object with the SAS credentials.\r\n*/\r\nexports.createTableServiceWithSas = function (hostUri, sasToken) {\r\n  return new TableService(null, null, hostUri, sasToken);\r\n};\r\n\r\n/**\r\n * Blob client exports.\r\n * @ignore\r\n */\r\nvar BlobService = require('./services/blob/blobservice.node');\r\n\r\nexports.BlobService = BlobService;\r\nexports.BlobUtilities = require('./services/blob/blobutilities');\r\n\r\n/**\r\n* Creates a new {@link BlobService} object.\r\n* If no storageaccount or storageaccesskey are provided, the AZURE_STORAGE_CONNECTION_STRING and then the AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY \r\n* environment variables will be used.\r\n*\r\n* @param {string} storageAccountOrConnectionString    The storage account or the connection string.\r\n* @param {string} [storageAccessKey]                  The storage access key.\r\n* @param {string|object} [host]                       The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @return {BlobService}                               A new BlobService object.\r\n*/\r\nexports.createBlobService = function (storageAccountOrConnectionString, storageAccessKey, host) {\r\n  return new BlobService(storageAccountOrConnectionString, storageAccessKey, host, null);\r\n};\r\n\r\n/**\r\n* Creates a new {@link BlobService} object using the host Uri and the SAS credentials provided.\r\n* \r\n* @param {string|object} host                         The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @param {string} sasToken                            The Shared Access Signature token.\r\n* @return {BlobService}                               A new BlobService object with the SAS credentials.\r\n*/\r\nexports.createBlobServiceWithSas = function (host, sasToken) {\r\n  return new BlobService(null, null, host, sasToken);\r\n};\r\n\r\n/**\r\n* Creates a new {@link BlobService} object using the host Uri and the {@link TokenCredential} provided, which supports OAuth.\r\n* \r\n* @param {string|object} host                         The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @param {TokenCredential} tokenCredential            The token credential object.\r\n* @return {BlobService}                               A new BlobService object with the {@link TokenCredential} object.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var tokenCredential = new azure.TokenCredential('myOAuthAccessToken');\r\n* var blobService = azure.createBlobServiceWithTokenCredential('https://account.blob.core.windows.net', tokenCredential);\r\n* tokenCredential.set('updatedOAuthAccessToken');\r\n*/\r\nexports.createBlobServiceWithTokenCredential = function (host, tokenCredential) {\r\n  return new BlobService(null, null, host, null, null, tokenCredential);\r\n};\r\n\r\n/**\r\n* Creates a new {@link BlobService} object using the host uri and anonymous access.\r\n* \r\n* @param {string|object} host                         The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @return {BlobService}                               A new BlobService object with the anonymous credentials.\r\n*/\r\nexports.createBlobServiceAnonymous = function (host) {\r\n  return new BlobService(null, null, host, null);\r\n};\r\n\r\n/**\r\n * File client exports.\r\n * @ignore\r\n */\r\nvar FileService = require('./services/file/fileservice.node');\r\n\r\nexports.FileService = FileService;\r\nexports.FileUtilities = require('./services/file/fileutilities');\r\n\r\n/**\r\n* Creates a new {@link FileService} object.\r\n* If no storageaccount or storageaccesskey are provided, the AZURE_STORAGE_CONNECTION_STRING and then the AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY \r\n* environment variables will be used.\r\n*\r\n* @param {string} storageAccountOrConnectionString    The storage account or the connection string.\r\n* @param {string} [storageAccessKey]                  The storage access key.\r\n* @param {string|object} [host]                       The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @return {FileService}                               A new FileService object.\r\n*/\r\nexports.createFileService = function (storageAccountOrConnectionString, storageAccessKey, host) {\r\n  return new FileService(storageAccountOrConnectionString, storageAccessKey, host);\r\n};\r\n\r\n/**\r\n* Creates a new {@link FileService} object using the host Uri and the SAS credentials provided.\r\n* \r\n* @param {string|object} host                         The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @param {string} sasToken                            The Shared Access Signature token.\r\n* @return {FileService}                               A new FileService object with the SAS credentials.\r\n*/\r\nexports.createFileServiceWithSas = function (hostUri, sasToken) {\r\n  return new FileService(null, null, hostUri, sasToken);\r\n};\r\n\r\n/**\r\n * Queue client exports.\r\n * @ignore\r\n */\r\nvar QueueService = require('./services/queue/queueservice');\r\n\r\nexports.QueueService = QueueService;\r\nexports.QueueUtilities = require('./services/queue/queueutilities');\r\nexports.QueueMessageEncoder = require('./services/queue/queuemessageencoder');\r\n\r\n/**\r\n* Creates a new {@link QueueService} object.\r\n* If no storageaccount or storageaccesskey are provided, the AZURE_STORAGE_CONNECTION_STRING and then the AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY \r\n* environment variables will be used.\r\n*\r\n* @param {string} [storageAccountOrConnectionString]  The storage account or the connection string.\r\n* @param {string} [storageAccessKey]                  The storage access key.\r\n* @param {string|object} [host]                       The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @return {QueueService}                              A new QueueService object.\r\n*/\r\nexports.createQueueService = function (storageAccountOrConnectionString, storageAccessKey, host) {\r\n  return new QueueService(storageAccountOrConnectionString, storageAccessKey, host);\r\n};\r\n\r\n/**\r\n* Creates a new {@link QueueService} object using the host Uri and the SAS credentials provided.\r\n* \r\n* @param {string|object} host                         The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @param {string} sasToken                            The Shared Access Signature token.\r\n* @return {QueueService}                              A new QueueService object with the SAS credentials.\r\n*/\r\nexports.createQueueServiceWithSas = function(hostUri, sasToken) {\r\n  return new QueueService(null, null, hostUri, sasToken);\r\n};\r\n\r\n/**\r\n* Creates a new {@link QueueService} object using the host Uri and the {@link TokenCredential} provided, which supports OAuth.\r\n* \r\n* @param {string|object} host                         The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @param {TokenCredential} tokenCredential            The TokenCredential object.\r\n* @return {QueueService}                              A new QueueService object with the {@link TokenCredential} object.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var tokenCredential = new azure.TokenCredential('myOAuthAccessToken');\r\n* var queueService = azure.createQueueServiceWithTokenCredential('https://account.queue.core.windows.net', tokenCredential);\r\n* tokenCredential.set('updatedOAuthAccessToken');\r\n*/\r\nexports.createQueueServiceWithTokenCredential = function (host, tokenCredential) {\r\n  return new QueueService(null, null, host, null, null, tokenCredential);\r\n};\r\n\r\n/**\r\n* Account SAS\r\n* @ignore\r\n*/\r\n\r\nvar azureCommon = require('./common/common.node');\r\nvar StorageServiceClient = azureCommon.StorageServiceClient;\r\nvar SharedKey = azureCommon.SharedKey;\r\n/**\r\n* Generates an account shared access signature token\r\n* \r\n* @param {string}                     [storageAccountOrConnectionString]                The storage account or the connection string.\r\n* @param {string}                     [storageAccessKey]                                The storage access key.\r\n* @param {object}                     sharedAccessPolicy                                The shared access policy.\r\n* @param {SharedAccessServices}       sharedAccessPolicy.AccessPolicy.Services          The services (blob, file, queue, table) for a shared access signature associated with this shared access policy.\r\n*                                                                                       Refer to `Constants.AccountSasConstants.Services`.\r\n* @param {SharedAccessResourceTypes}  sharedAccessPolicy.AccessPolicy.ResourceTypes     The resource type for a shared access signature associated with this shared access policy.\r\n*                                                                                       Refer to `Constants.AccountSasConstants.ResourceTypes`.\r\n* @param {SharedAccessPermissions}    sharedAccessPolicy.AccessPolicy.Permissions       The permissions for a shared access signature. \r\n*                                                                                       Refer to `Constants.AccountSasConstants.Permissions`.\r\n* @param {date}                       sharedAccessPolicy.AccessPolicy.Start             The time at which the Shared Access Signature becomes valid.\r\n* @param {date}                       sharedAccessPolicy.AccessPolicy.Expiry            The time at which the Shared Access Signature becomes expired.\r\n* @param {string}                     sharedAccessPolicy.AccessPolicy.IPAddressOrRange  The permission type. Refer to `Constants.AccountSasConstants.ResourceTypes`.\r\n* @param {string}                     sharedAccessPolicy.AccessPolicy.Protocols          The possible protocols. Refer to `Constants.AccountSasConstants.ResourceTypes`.\r\n*/\r\nexports.generateAccountSharedAccessSignature = function(storageAccountOrConnectionString, storageAccessKey, sharedAccessAccountPolicy)\r\n{\r\n  var storageSettings = StorageServiceClient.getStorageSettings(storageAccountOrConnectionString, storageAccessKey);\r\n  var sharedKey = new SharedKey(storageSettings._name, storageSettings._key);\r\n  \r\n  return sharedKey.generateAccountSignedQueryString(sharedAccessAccountPolicy);\r\n};\r\n\r\n\r\n/**\r\n* A callback that returns a response object.\r\n* @callback errorOrResponse\r\n* @param {object} error         If an error occurs, will contain information about the error.\r\n* @param {object} response      Contains information about the response returned for the operation.\r\n*                               For example, HTTP status codes and headers.\r\n*/\r\n\r\n/**\r\n* A callback that returns result and response objects.\r\n* @callback errorOrResult\r\n* @param {object} error         If an error occurs, will contain information about the error.\r\n* @param {object} result        The result of the operation.\r\n* @param {object} response      Contains information about the response returned for the operation.\r\n*                               For example, HTTP status codes and headers.\r\n*/\r\n\r\n\r\n/**\r\n* Specifying conditional headers for blob service operations. See http://msdn.microsoft.com/en-us/library/dd179371.aspx for more information.\r\n* @typedef    {object}          AccessConditions\r\n* @property   {string}          EtagMatch                       If the ETag for the blob matches the specified ETag.\r\n*                                                               Specify the wildcard character (*) to perform the operation only if the resource does exist, and fail the operation if it does not exist.\r\n* @property   {string}          EtagNonMatch                    If the ETag for the blob does not match the specified ETag.\r\n*                                                               Specify the wildcard character (*) to perform the operation only if the resource does not exist, and fail the operation if it does exist.\r\n* @property   {Date|string}     DateModifedSince                If the blob has been modified since the specified date.\r\n* @property   {Date|string}     DateUnModifiedSince             If the blob has not been modified since the specified date.\r\n* @property   {Number|string}   SequenceNumberLessThanOrEqual   If the blob's sequence number is less than or equal to the specified value.\r\n*                                                               For Put Page operation only. See https://msdn.microsoft.com/en-us/library/azure/ee691975.aspx for more information.\r\n* @property   {Number|string}   SequenceNumberLessThan          If the blob's sequence number is less than the specified value.\r\n*                                                               For Put Page operation only. See https://msdn.microsoft.com/en-us/library/azure/ee691975.aspx for more information.\r\n* @property   {Number|string}   SequenceNumberEqual             If the blob's sequence number is equal to the specified value.\r\n*                                                               For Put Page operation only. See https://msdn.microsoft.com/en-us/library/azure/ee691975.aspx for more information.\r\n* @property   {Number|string}   MaxBlobSize                     If the Append Block operation would cause the blob to exceed that limit or if the blob size is already greater than the specified value. \r\n*                                                               For Append Block operation only. See https://msdn.microsoft.com/en-us/library/mt427365.aspx for more information.\r\n* @property   {Number|string}   MaxAppendPosition               If the append position is equal to the specified value.\r\n*                                                               For Append Block operation only. See https://msdn.microsoft.com/en-us/library/mt427365.aspx for more information.\r\n*/\r\n\r\n/**\r\n* The properties of a storage service, including properties of Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\r\n* @typedef    {object}              ServiceProperties\r\n* @property   {string}              DefaultServiceVersion  The default version of Storage Analytics currently in use.\r\n* @property   {LoggingProperties}   Logging                The Logging settings.\r\n* @property   {MetricsProperties}   HourMetrics            The HourMetrics settings provide a summary of request statistics grouped by API in hourly aggregates.\r\n* @property   {MetricsProperties}   MinuteMetrics          The HourMetrics settings provide request statistics grouped by API for each minute.\r\n* @property   {object}              Cors                   Groups all CORS rules.\r\n* @property   {CorsRule[]}          Cors.CorsRules         Groups settings for a `[CORS rule]{@link CorsRule}`.\r\n*/\r\n\r\n/**\r\n* The properties of a storage account.\r\n* @typedef    {object}              AccountProperties\r\n* @property   {string}              SkuName                The header that specifies storage SKU, also known as account type.\r\n* @property   {string}              AccountKind            The header that describes the flavour of the storage account, also known as account kind.\r\n*/\r\n\r\n/**\r\n* The properties of a blob storage service, including properties of Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and Static Webiste configurations.\r\n* @typedef    {object}              BlobServiceProperties\r\n* @property   {string}              DefaultServiceVersion  The default version of Storage Analytics currently in use.\r\n* @property   {LoggingProperties}   Logging                The Logging settings.\r\n* @property   {MetricsProperties}   HourMetrics            The HourMetrics settings provide a summary of request statistics grouped by API in hourly aggregates.\r\n* @property   {MetricsProperties}   MinuteMetrics          The HourMetrics settings provide request statistics grouped by API for each minute.\r\n* @property   {StaticWebsiteProperties} StaticWebsite      The Azure Static Website settings. \r\n* @property   {object}              Cors                   Groups all CORS rules.\r\n* @property   {CorsRule[]}          Cors.CorsRules         Groups settings for a `[CORS rule]{@link CorsRule}`.\r\n*/\r\n\r\n/**\r\n* The Azure Static Website settings.\r\n* @typedef    {object}          StaticWebsiteProperties\r\n* @property   {boolean}         Enabled                    Whether feature of Static Website is enabled.\r\n* @property   {string}          IndexDocument              Indicates index document page path.\r\n* @property   {string}          ErrorDocument404Path       Indicates 404 document page path.\r\n*/\r\n\r\n/**\r\n* The Azure Analytics logging settings.\r\n* @typedef    {object}          LoggingProperties\r\n* @property   {string}          Version                    The version of Storage Analytics currently in use for logging.\r\n* @property   {boolean}         Delete                     Indicates whether delete requests are being logged.\r\n* @property   {boolean}         Read                       Indicates whether read requests are being logged.\r\n* @property   {boolean}         Write                      Indicates whether write requests are being logged.\r\n* @property   {RetentionPolicy} RetentionPolicy            The retention policy of the log data.\r\n*/\r\n\r\n/**\r\n* The setting of Azure Analytics summary of request stastics.\r\n* @typedef    {object}          MetricsProperties\r\n* @property   {string}          Version                    The version of Storage Analytics currently in use for hour metrics.\r\n* @property   {string}          Enabled                    Indicates whether metrics are enabled\r\n* @property   {boolean}         IncludeAPIs                Indicates whether metrics generate summary statistics for called API operations.\r\n* @property   {RetentionPolicy} RetentionPolicy            The retention policy of the metrics data.\r\n*/\r\n\r\n/**\r\n* The CORS rule of a storage service.\r\n* @typedef    {object}          CorsRule\r\n* @property   {string[]}        AllowedMethods             A list of HTTP methods that are allowed to be executed by the origin. For Azure Storage, permitted methods are DELETE, GET, HEAD, MERGE, POST, OPTIONS or PUT.\r\n* @property   {string[]}        AllowedOrigins             A list of origin domains that are allowed via CORS, or \"*\" if all domains are allowed.\r\n* @property   {string[]}        AllowedHeaders             A list of headers allowed to be part of the cross-origin request.\r\n* @property   {string[]}        ExposedHeaders             A list of response headers to expose to CORS clients.\r\n* @property   {number}          MaxAgeInSeconds            The number of seconds that the client/browser should cache a preflight response.\r\n*/\r\n\r\n/**\r\n* The Azure Analytics logging or metrics retention policy.\r\n* @typedef    {object}          RetentionPolicy\r\n* @property   {boolean}         Enabled                    Indicates whether a retention policy is enabled for the storage service.\r\n* @property   {number}          Days                       Indicates the number of days that logging data is retained. All data older than this value will be deleted.\r\n*/\r\n\r\n/**\r\n* The access policy.\r\n* @typedef    {object}          AccessPolicy\r\n* @property   {string}          Permissions                The permission type.\r\n* @property   {Date}            Start                      The time at which the access policy becomes valid.\r\n* @property   {Date}            Expiry                     The time at which the access policy becomes expired.\r\n* @property   {string}          IPAddressOrRange           An IP address or a range of IP addresses from which to accept requests. When specifying a range, note that the range is inclusive.\r\n* @property   {string}          Protocols                  The protocols permitted for a request made with the SAS.\r\n* @property   {string}          Services                   The services (blob, file, queue, table) for a shared access signature associated with this shared access policy.\r\n* @property   {string}          ResourceTypes              The resource type for a shared access signature associated with this shared access policy.\r\n*/\r\n\r\n/**\r\n* The service statistics.\r\n* @typedef    {object}          ServiceStats\r\n* @property   {object}          GeoReplication                  The geo replication stastics.\r\n* @property   {string}          GeoReplication.Status           The status of the secondary location.\r\n* @property   {Date}            GeoReplication.LastSyncTime     A GMT date/time value, to the second. \r\n*                                                               All primary writes preceding this value are guaranteed to be available for read operations at the secondary.\r\n*                                                               Primary writes after this point in time may or may not be available for reads. \r\n*/\r\n\r\n/**\r\n* The range.\r\n* @typedef    {object}          Range\r\n* @property   {number}          start                     The start of the range.\r\n* @property   {number}          end                       The end of the range.\r\n*/\r\n\r\n/**\r\n* The range diff. Refer to https://msdn.microsoft.com/en-us/library/azure/mt736912.aspx\r\n* @typedef    {object}          RangeDiff\r\n* @property   {number}          start                     The start of the range.\r\n* @property   {number}          end                       The end of the range.\r\n* @property   {boolean}         isCleared                 If the range is cleared or not.\r\n\r\n*/\r\n\r\nexports.Constants = azureCommon.Constants;\r\nexports.StorageUtilities = azureCommon.StorageUtilities;\r\nexports.AccessCondition = azureCommon.AccessCondition;\r\n\r\nexports.SR = azureCommon.SR;\r\nexports.StorageServiceClient = StorageServiceClient;\r\nexports.Logger = azureCommon.Logger;\r\nexports.WebResource = azureCommon.WebResource;\r\nexports.Validate = azureCommon.validate;\r\nexports.date = azureCommon.date;\r\nexports.TokenCredential = azureCommon.TokenCredential;\r\n\r\n// Other filters\r\nexports.LinearRetryPolicyFilter = azureCommon.LinearRetryPolicyFilter;\r\nexports.ExponentialRetryPolicyFilter = azureCommon.ExponentialRetryPolicyFilter;\r\nexports.RetryPolicyFilter = azureCommon.RetryPolicyFilter;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar util = require('util');\r\nvar extend = require('extend');\r\nvar _ = require('underscore');\r\n\r\nvar azureCommon = require('./../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar validate = azureCommon.validate;\r\nvar SR = azureCommon.SR;\r\nvar StorageServiceClient = azureCommon.StorageServiceClient;\r\nvar SharedKeyTable = require('./internal/sharedkeytable');\r\nvar RequestHandler = require('./internal/requesthandler');\r\nvar TableQuery = require('./tablequery');\r\nvar WebResource = azureCommon.WebResource;\r\nvar Constants = azureCommon.Constants;\r\nvar QueryStringConstants = Constants.QueryStringConstants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar TableConstants = Constants.TableConstants;\r\nvar RequestLocationMode = Constants.RequestLocationMode;\r\n\r\n// Models requires\r\nvar TableResult = require('./models/tableresult');\r\nvar entityResult = require('./models/entityresult');\r\nvar BatchResult = require('./models/batchresult');\r\nvar ServiceStatsParser = azureCommon.ServiceStatsParser;\r\nvar AclResult = azureCommon.AclResult;\r\nvar TableUtilities = require('./tableutilities');\r\n\r\n/**\r\n* Creates a new TableService object.\r\n* If no connection string or storageaccount and storageaccesskey are provided,\r\n* the AZURE_STORAGE_CONNECTION_STRING or AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY environment variables will be used.\r\n* @class\r\n* The TableService object allows you to peform management operations with the Microsoft Azure Table Service.\r\n* The Table Service stores data in rows of key-value pairs. A table is composed of multiple rows, and each row\r\n* contains key-value pairs. There is no schema, so each row in a table may store a different set of keys.\r\n*\r\n* For more information on the Table Service, as well as task focused information on using it from a Node.js application, see\r\n* [How to Use the Table Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-table-storage/).\r\n* The following defaults can be set on the Table service.\r\n* defaultTimeoutIntervalInMs                          The default timeout interval, in milliseconds, to use for request made via the Table service.\r\n* defaultClientRequestTimeoutInMs                     The default timeout of client requests, in milliseconds, to use for the request made via the Table service.\r\n* defaultMaximumExecutionTimeInMs                     The default maximum execution time across all potential retries, for requests made via the Table service.\r\n* defaultLocationMode                                 The default location mode for requests made via the Table service.\r\n* defaultPayloadFormat                                The default payload format for requests made via the Table service.\r\n* useNagleAlgorithm                                   Determines whether the Nagle algorithm is used for requests made via the Table service.; true to use the  \r\n*                                                     Nagle algorithm; otherwise, false. The default value is false.\r\n* enableGlobalHttpAgent                               Determines whether global HTTP(s) agent is enabled; true to use Global HTTP(s) agent; otherwise, false to use\r\n*                                                     http(s).Agent({keepAlive:true}).\r\n* @constructor\r\n* @extends {StorageServiceClient}\r\n*\r\n* @param {string} [storageAccountOrConnectionString]  The storage account or the connection string.\r\n* @param {string} [storageAccessKey]                  The storage access key.\r\n* @param {string|object} [host]                       The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @param {string} [sasToken]                          The Shared Access Signature token.\r\n* @param {string} [endpointSuffix]                    The endpoint suffix.\r\n*/\r\nfunction TableService(storageAccountOrConnectionString, storageAccessKey, host, sasToken, endpointSuffix) {\r\n  var storageServiceSettings = StorageServiceClient.getStorageSettings(storageAccountOrConnectionString, storageAccessKey, host, sasToken, endpointSuffix);\r\n\r\n  TableService['super_'].call(this,\r\n    storageServiceSettings._name,\r\n    storageServiceSettings._key,\r\n    storageServiceSettings._tableEndpoint,\r\n    storageServiceSettings._usePathStyleUri,\r\n    storageServiceSettings._sasToken);\r\n\r\n  if (this.anonymous) {\r\n    throw new Error(SR.ANONYMOUS_ACCESS_BLOBSERVICE_ONLY);\r\n  }\r\n\r\n  if(this.storageAccount && this.storageAccessKey) {\r\n    this.storageCredentials = new SharedKeyTable(this.storageAccount, this.storageAccessKey, this.usePathStyleUri);\r\n  }\r\n\r\n  this.defaultPayloadFormat = TableUtilities.PayloadFormat.MINIMAL_METADATA;\r\n}\r\n\r\nutil.inherits(TableService, StorageServiceClient);\r\n\r\n// Table service methods\r\n\r\n/**\r\n* Gets the service stats for a storage account’s Table service.\r\n*\r\n* @this {TableService}\r\n* @param {object}         [options]                                       The request options.\r\n* @param {LocationMode}   [options.locationMode]                          Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}            [options.timeoutIntervalInMs]                   The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}            [options.clientRequestTimeoutInMs]              The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}            [options.maximumExecutionTimeInMs]              The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}         [options.clientRequestId]                       A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}           [options.useNagleAlgorithm]                     Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information if an error occurs; \r\n*                                                                         otherwise `[result]{@link ServiceStats}` will contain the stats.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.getServiceStats = function (optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getServiceStats', function (v) {\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var webResource = WebResource.get()\r\n    .withQueryOption(QueryStringConstants.COMP, 'stats')\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'service');\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.serviceStatsResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.serviceStatsResult = ServiceStatsParser.parse(responseObject.response.body.StorageServiceStats);\r\n    }\r\n\r\n    // function to be called after all filters\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.serviceStatsResult, returnObject.response);\r\n    };\r\n\r\n    // call the first filter\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Gets the properties of a storage account’s Table service, including Azure Storage Analytics.\r\n*\r\n* @this {TableService}\r\n* @param {object}             [options]                                    The request options.\r\n* @param {LocationMode}       [options.locationMode]                       Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                          Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]           The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]           The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                          The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                          execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                    A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                  Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                          The default value is false.\r\n* @param {errorOrResult}  callback                                         `error` will contain information if an error occurs; \r\n*                                                                          otherwise `[result]{@link ServiceProperties}` will contain the properties.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.getServiceProperties = function (optionsOrCallback, callback) {\r\n  return this.getAccountServiceProperties(optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Sets the properties of a storage account’s Table service, including Azure Storage Analytics.\r\n* You can also use this operation to set the default request version for all incoming requests that do not have a version specified.\r\n*\r\n* @this {TableService}\r\n* @param {object}             serviceProperties                            The service properties.\r\n* @param {object}             [options]                                    The request options.\r\n* @param {LocationMode}       [options.locationMode]                       Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                          Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]           The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]           The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                          The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                          execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                    A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                  Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                          The default value is false.\r\n* @param {errorOrResponse}  callback                                       `error` will contain information if an error occurs; \r\n*                                                                          `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.setServiceProperties = function (serviceProperties, optionsOrCallback, callback) {\r\n  return this.setAccountServiceProperties(serviceProperties, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of table items under the specified account.\r\n*\r\n* @this {TableService}\r\n* @param {object}             currentToken                                      A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                                         The create options or callback function.\r\n* @param {int}                [options.maxResults]                              Specifies the maximum number of tables to return per call to Azure ServiceClient. \r\n* @param {LocationMode}       [options.locationMode]                            Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                     The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]                The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {string}             [options.payloadFormat]                           The payload format to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]                The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                         A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                       Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                               The default value is false.\r\n* @param {errorOrResult}  callback                                              `error` will contain information if an error occurs; \r\n*                                                                               otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                               `entries`  gives a list of tables and the `continuationToken` is used for the next listing operation.\r\n*                                                                               `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.listTablesSegmented = function (currentToken, optionsOrCallback, callback) {\r\n  this.listTablesSegmentedWithPrefix(null /* prefix */, currentToken, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of table items under the specified account.\r\n*\r\n* @this {TableService}\r\n* @param {string}             prefix                                            The prefix of the table name.\r\n* @param {object}             currentToken                                      A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                                         The create options or callback function.\r\n* @param {int}                [options.maxResults]                              Specifies the maximum number of tables to return per call to Azure ServiceClient. \r\n* @param {LocationMode}       [options.locationMode]                            Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                     The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]                The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {string}             [options.payloadFormat]                           The payload format to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]                The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                         A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                       Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                               The default value is false.\r\n* @param {errorOrResult}  callback                                              `error` will contain information if an error occurs; \r\n*                                                                               otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                               `entries`  gives a list of tables and the `continuationToken` is used for the next listing operation.\r\n*                                                                               `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.listTablesSegmentedWithPrefix = function (prefix, currentToken, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('listTables', function (v) {\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  options.payloadFormat = options.payloadFormat || this.defaultPayloadFormat;\r\n\r\n  var webResource = WebResource.get(TableConstants.TABLE_SERVICE_TABLE_NAME);\r\n  RequestHandler.setTableRequestHeadersAndBody(webResource, null, options.payloadFormat);\r\n\r\n  if(!azureutil.objectIsNull(currentToken)) {\r\n    webResource.withQueryOption(TableConstants.NEXT_TABLE_NAME, currentToken.nextTableName);\r\n  }\r\n\r\n  if(!azureutil.objectIsNull(prefix)) {\r\n    var query = new TableQuery()\r\n      .where(TableConstants.TABLE_NAME + ' >= ?', prefix)\r\n      .and(TableConstants.TABLE_NAME + ' < ?', prefix + '{');\r\n    \r\n    webResource.withQueryOption(QueryStringConstants.FILTER, query.toQueryObject().$filter);\r\n  }\r\n\r\n  if(!azureutil.objectIsNull(options.maxResults)) {\r\n    var query = new TableQuery().top(options.maxResults);\r\n    webResource.withQueryOption(QueryStringConstants.TOP, query.toQueryObject().$top);\r\n  }\r\n\r\n  options.requestLocationMode = azureutil.getNextListingLocationMode(currentToken);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.listTablesResult = null;\r\n\r\n    if (!responseObject.error) {\r\n      responseObject.listTablesResult = {\r\n        entries: null,\r\n        continuationToken: null\r\n      };\r\n      responseObject.listTablesResult.entries = TableResult.parse(responseObject.response);\r\n\r\n      if (responseObject.response.headers[TableConstants.CONTINUATION_NEXT_TABLE_NAME] &&\r\n      !azureutil.objectIsEmpty(responseObject.response.headers[TableConstants.CONTINUATION_NEXT_TABLE_NAME])) {\r\n        responseObject.listTablesResult.continuationToken = {\r\n          nextTableName: null,\r\n          targetLocation: null\r\n        };\r\n\r\n        responseObject.listTablesResult.continuationToken.nextTableName = responseObject.response.headers[TableConstants.CONTINUATION_NEXT_TABLE_NAME];\r\n        responseObject.listTablesResult.continuationToken.targetLocation = responseObject.targetLocation;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.listTablesResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n// Table Methods\r\n\r\n/**\r\n* Gets the table's ACL.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                        The table name.\r\n* @param {object}             [options]                                    The request options.\r\n* @param {LocationMode}       [options.locationMode]                       Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                          Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]           The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]           The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                          The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                          execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                    A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                  Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                          The default value is false.\r\n* @param {errorOrResult}  callback                                         `error` will contain information if an error occurs; \r\n*                                                                          otherwise `result` will contain the ACL information for the table. See `[AccessPolicy]{@link AccessPolicy}` for detailed information.\r\n*                                                                          `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.getTableAcl = function (table, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getTableAcl', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var webResource = WebResource.get(table)\r\n    .withQueryOption(QueryStringConstants.COMP, 'acl');\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.tableResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.tableResult = new TableResult(table);\r\n      responseObject.tableResult.signedIdentifiers = AclResult.parse(responseObject.response.body);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.tableResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Updates the table's ACL.\r\n*\r\n* @this {TableService}\r\n* @param {string}                                 table                                        The table name.\r\n* @param {Object.<string, AccessPolicy>}             signedIdentifiers                            The table ACL settings. See `[AccessPolicy]{@link AccessPolicy}` for detailed information.\r\n* @param {object}                                 [options]                                    The request options.\r\n* @param {LocationMode}                           [options.locationMode]                       Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                                              Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                                    [options.timeoutIntervalInMs]                The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                                    [options.clientRequestTimeoutInMs]           The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                                    [options.maximumExecutionTimeInMs]           The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                                              The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                                              execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}                                 [options.clientRequestId]                    A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}                                   [options.useNagleAlgorithm]                  Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                                              The default value is false.\r\n* @param {errorOrResult}                          callback                                     `error` will contain information if an error occurs; \r\n*                                                                                              otherwise `result` will contain information for the table.\r\n*                                                                                              `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.setTableAcl = function (table, signedIdentifiers, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setTableAcl', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var policies = null;\r\n  if (signedIdentifiers) {\r\n    if(_.isArray(signedIdentifiers)) {\r\n      throw new TypeError(SR.INVALID_SIGNED_IDENTIFIERS);\r\n    }\r\n    policies = AclResult.serialize(signedIdentifiers);\r\n  }\r\n\r\n  var webResource = WebResource.put(table)\r\n    .withQueryOption(QueryStringConstants.COMP, 'acl')\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, !azureutil.objectIsNull(policies) ? Buffer.byteLength(policies) : 0)\r\n    .withBody(policies);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.tableResult = null;\r\n    if (!responseObject.error) {\r\n\r\n      // SetTableAcl doesn't actually return anything in the response\r\n      responseObject.tableResult = new TableResult(table);\r\n      if (signedIdentifiers) {\r\n        responseObject.tableResult.signedIdentifiers = signedIdentifiers;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.tableResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Retrieves a shared access signature token.\r\n*\r\n* @this {TableService}\r\n* @param {string}                   table                                               The table name.\r\n* @param {object}                   sharedAccessPolicy                                  The shared access policy.\r\n* @param {string}                   [sharedAccessPolicy.Id]                             The signed identifier.\r\n* @param {object}                   [sharedAccessPolicy.AccessPolicy.Permissions]       The permission type.\r\n* @param {date|string}              [sharedAccessPolicy.AccessPolicy.Start]             The time at which the Shared Access Signature becomes valid (The UTC value will be used).\r\n* @param {date|string}              [sharedAccessPolicy.AccessPolicy.Expiry]            The time at which the Shared Access Signature becomes expired (The UTC value will be used).\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.IPAddressOrRange]  An IP address or a range of IP addresses from which to accept requests. When specifying a range, note that the range is inclusive.\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.Protocols]         The protocols permitted for a request made with the account SAS. \r\n*                                                                                       Possible values are both HTTPS and HTTP (https,http) or HTTPS only (https). The default value is https,http.\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.StartPk]           The starting Partition Key for which the SAS will be valid.\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.EndPk]             The ending Partition Key for which the SAS will be valid.\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.StartRk]           The starting Row Key for which the SAS will be valid.\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.EndRk]             The ending Row Key for which the SAS will be valid.\r\n* @return {object}                                                                      An object with the shared access signature.\r\n*/\r\nTableService.prototype.generateSharedAccessSignature = function (table, sharedAccessPolicy) {\r\n  // check if the TableService is able to generate a shared access signature\r\n  if (!this.storageCredentials || !this.storageCredentials.generateSignedQueryString) {\r\n    throw new Error(SR.CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY);\r\n  }\r\n\r\n  validate.validateArgs('generateSharedAccessSignature', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n    v.object(sharedAccessPolicy, 'sharedAccessPolicy');\r\n  });\r\n  \r\n  var lowerCasedTableName = table.toLowerCase();\r\n  return this.storageCredentials.generateSignedQueryString(Constants.ServiceType.Table, lowerCasedTableName, sharedAccessPolicy, null, { tableName: lowerCasedTableName });\r\n};\r\n\r\n/**\r\n* Checks whether or not a table exists on the service.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}  callback                                    `error` will contain information if an error occurs; \r\n*                                                                     otherwise `result` will contain the table information including `exists` boolean member. \r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.doesTableExist = function (table, optionsOrCallback, callback) {\r\n  this._doesTableExist(table, false, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Creates a new table within a storage account.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}  callback                                    `error` will contain information if an error occurs; \r\n*                                                                     otherwise `result` will contain the new table information.\r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.createTable = function (table, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createTable', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var tableDescriptor = TableResult.serialize(table);\r\n\r\n  var webResource = WebResource.post('Tables')\r\n    .withHeader(HeaderConstants.PREFER, HeaderConstants.PREFER_NO_CONTENT);\r\n\r\n  RequestHandler.setTableRequestHeadersAndBody(webResource, tableDescriptor, this.defaultPayloadFormat);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.tableResponse = {};\r\n    responseObject.tableResponse.isSuccessful = responseObject.error ? false : true;\r\n    responseObject.tableResponse.statusCode = responseObject.response.statusCode;\r\n    if (!responseObject.error) {\r\n      responseObject.tableResponse.TableName = table;\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.tableResponse, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Creates a new table within a storage account if it does not exists.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}  callback                                    `error` will contain information if an error occurs; \r\n*                                                                     `result` will contain the table information including `created` boolean member\r\n*                                                                     `response` will contain information related to this operation.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var tableService = azure.createTableService();\r\n* tableService.createTableIfNotExists('tasktable', function(error) {\r\n*   if(!error) { \r\n*     // Table created or exists\r\n*   }\r\n* });\r\n*/\r\nTableService.prototype.createTableIfNotExists = function (table, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createTableIfNotExists', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var self = this;\r\n  self._doesTableExist(table, true, options, function(error, result, response) {\r\n    var exists = result.exists;\r\n    result.created = false;\r\n    delete result.exists;\r\n    \r\n    if (error) {\r\n      callback(error, result, response);\r\n    } else if (exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, result, response);\r\n    } else {\r\n      self.createTable(table, options, function(createError, createResult, response) {\r\n        if (!createError) {\r\n          createResult.created = true;\r\n        }\r\n        else if (createError && createError.statusCode === Constants.HttpConstants.HttpResponseCodes.Conflict && createError.code === Constants.TableErrorCodeStrings.TABLE_ALREADY_EXISTS) {\r\n          createError = null;\r\n          createResult.created = false;\r\n          createResult.isSuccessful = true;\r\n        }\r\n        callback(createError, createResult, response);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Deletes a table from a storage account.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResponse}  callback                                  `error` will contain information if an error occurs;\r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.deleteTable = function (table, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteTable', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var webResource = WebResource.del('Tables(\\'' + table + '\\')');\r\n  RequestHandler.setTableRequestHeadersAndBody(webResource, null, this.defaultPayloadFormat);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Deletes a table from a storage account, if it exists.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}  callback                                    `error` will contain information if an error occurs; \r\n*                                                                     `result` will be `true` if table was deleted, false otherwise\r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.deleteTableIfExists = function (table, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteTableIfExists', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var self = this;\r\n  self._doesTableExist(table, true, options, function(error, result, response) {\r\n    if (error) {\r\n      callback(error, result.exists, response);\r\n    } else if (!result.exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, false, response);\r\n    } else {\r\n      self.deleteTable(table, options, function(deleteError, deleteResponse) {\r\n        var deleted;\r\n        if (!deleteError) {\r\n          deleted = true;\r\n        } else if (deleteError && deleteError.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound && deleteError.code === Constants.StorageErrorCodeStrings.RESOURCE_NOT_FOUND) {\r\n          deleted = false;\r\n          deleteError = null;\r\n          deleteResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(deleteError, deleted, deleteResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n// Table Entity Methods\r\n\r\n/**\r\n* Queries data in a table. To retrieve a single entity by partition key and row key, use retrieve entity.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                                The table name.\r\n* @param {TableQuery}         tableQuery                                           The query to perform. Use null, undefined, or new TableQuery() to get all of the entities in the table.\r\n* @param {object}             currentToken                                         A continuation token returned by a previous listing operation. \r\n*                                                                                  Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                                            The request options.\r\n* @param {LocationMode}       [options.locationMode]                               Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                                  Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                        The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]                   The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {string}             [options.payloadFormat]                              The payload format to use for the request.\r\n* @param {bool}               [options.autoResolveProperties]                      If true, guess at all property types.\r\n* @param {int}                [options.maximumExecutionTimeInMs]                   The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                                  The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                                  execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                            A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                          Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                                  The default value is false.\r\n* @param {Function(entity)} [options.entityResolver]                               The entity resolver. Given a single entity returned by the query, returns a modified object which is added to \r\n*                                                                                  the entities array.\r\n* @param {TableService~propertyResolver}  [options.propertyResolver]               The property resolver. Given the partition key, row key, property name, property value,\r\n*                                                                                  and the property Edm type if given by the service, returns the Edm type of the property.\r\n* @param {TableService~queryResponse} callback                                     `error` will contain information if an error occurs; \r\n*                                                                                  otherwise `entities` will contain the entities returned by the query. \r\n*                                                                                  If more matching entities exist, and could not be returned,\r\n*                                                                                  `queryResultContinuation` will contain a continuation token that can be used\r\n*                                                                                  to retrieve the next set of results.\r\n*                                                                                  `response` will contain information related to this operation.\r\n*\r\n* The logic for returning entity types can get complicated.  Here is the algorithm used:\r\n* ```\r\n* var propertyType;\r\n*\r\n* if (propertyResovler) {                      // If the caller provides a propertyResolver in the options, use it\r\n*   propertyType = propertyResolver(partitionKey, rowKey, propertyName, propertyValue, propertyTypeFromService);\r\n* } else if (propertyTypeFromService) {        // If the service provides us a property type, use it.  See below for an explanation of when this will and won't occur.\r\n*   propertyType = propertyTypeFromService;\r\n* } else if (autoResolveProperties) {          // If options.autoResolveProperties is set to true\r\n*   if (javascript type is string) {           // See below for an explanation of how and why autoResolveProperties works as it does.\r\n*     propertyType = 'Edm.String';\r\n*   } else if (javascript type is boolean) {\r\n*     propertyType = 'Edm.Boolean';\r\n*   }\r\n* }\r\n*\r\n* if (propertyType) {\r\n*   // Set the property type on the property.\r\n* } else {\r\n*   // Property gets no EdmType. \r\n* }\r\n* ```\r\n* Notes:\r\n* \r\n* * The service only provides a type if JsonFullMetadata or JsonMinimalMetadata is used, and if the type is Int64, Guid, Binary, or DateTime.\r\n* * Explanation of autoResolveProperties:\r\n*     * String gets correctly resolved to 'Edm.String'.\r\n*     * Int64, Guid, Binary, and DateTime all get resolved to 'Edm.String.'  This only happens if JsonNoMetadata is used (otherwise the service will provide the propertyType in a prior step).\r\n*     * Boolean gets correctly resolved to 'Edm.Boolean'.\r\n*     * For both Int32 and Double, no type information is returned, even in the case of autoResolveProperties = true.  This is due to an\r\n*          inability to distinguish between the two in certain cases.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var tableService = azure.createTableService();\r\n* // tasktable should already exist and have entities\r\n* \r\n* // returns all entities in tasktable, and a continuation token for the next page of results if necessary\r\n* tableService.queryEntities('tasktable', null, null \\/*currentToken*\\/, function(error, result) {\r\n*   if(!error) { \r\n*     var entities = result.entities;\r\n*     // do stuff with the returned entities if there are any\r\n*   }\r\n* });\r\n* \r\n* // returns field1 and field2 of the entities in tasktable, and a continuation token for the next page of results if necessary\r\n* var tableQuery = new TableQuery().select('field1', 'field2');\r\n* tableService.queryEntities('tasktable', tableQuery, null \\/*currentToken*\\/, function(error, result) {\r\n*   if(!error) { \r\n*     var entities = result.entities;\r\n*     // do stuff with the returned entities if there are any\r\n*   }\r\n* });\r\n*/\r\nTableService.prototype.queryEntities = function (table, tableQuery, currentToken, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('queryEntities', function (v) {\r\n    v.string(table, 'table');\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  options.payloadFormat = options.payloadFormat || this.defaultPayloadFormat;\r\n\r\n  var webResource = WebResource.get(table);\r\n  RequestHandler.setTableRequestHeadersAndBody(webResource, null, options.payloadFormat);\r\n\r\n  if (tableQuery) {\r\n    var queryString = tableQuery.toQueryObject();\r\n    Object.keys(queryString).forEach(function (queryStringName) {\r\n      webResource.withQueryOption(queryStringName, queryString[queryStringName]);\r\n    });\r\n  }\r\n\r\n  if(!azureutil.objectIsNull(currentToken)) {\r\n    webResource.withQueryOption(TableConstants.NEXT_PARTITION_KEY, currentToken.nextPartitionKey);\r\n    webResource.withQueryOption(TableConstants.NEXT_ROW_KEY, currentToken.nextRowKey);\r\n  }\r\n\r\n  options.requestLocationMode = azureutil.getNextListingLocationMode(currentToken);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.queryEntitiesResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.queryEntitiesResult = {\r\n        entries: null,\r\n        continuationToken: null\r\n      };\r\n\r\n      // entries\r\n      responseObject.queryEntitiesResult.entries = entityResult.parseQuery(responseObject.response, options.autoResolveProperties, options.propertyResolver, options.entityResolver);\r\n\r\n      // continuation token\r\n      var continuationToken = {\r\n          nextPartitionKey: responseObject.response.headers[TableConstants.CONTINUATION_NEXT_PARTITION_KEY],\r\n          nextRowKey: responseObject.response.headers[TableConstants.CONTINUATION_NEXT_ROW_KEY],\r\n          targetLocation: responseObject.targetLocation\r\n        };\r\n\r\n      if (!azureutil.IsNullOrEmptyOrUndefinedOrWhiteSpace(continuationToken.nextPartitionKey)) {\r\n        responseObject.queryEntitiesResult.continuationToken = continuationToken;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.queryEntitiesResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Retrieves an entity from a table.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                           The table name.\r\n* @param {string}             partitionKey                                    The partition key.\r\n* @param {string}             rowKey                                          The row key.\r\n* @param {object}             [options]                                       The request options.\r\n* @param {LocationMode}       [options.locationMode]                          Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                             Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                   The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]              The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {string}             [options.payloadFormat]                         The payload format to use for the request.\r\n* @param {bool}               [options.autoResolveProperties]                 If true, guess at all property types.\r\n* @param {int}                [options.maximumExecutionTimeInMs]              The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                             The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                             execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                       A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                     Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                             The default value is false.\r\n* @param {TableService~propertyResolver}  [options.propertyResolver]          The property resolver. Given the partition key, row key, property name, property value,\r\n*                                                                             and the property Edm type if given by the service, returns the Edm type of the property.\r\n* @param {Function(entity)} [options.entityResolver]                          The entity resolver. Given the single entity returned by the query, returns a modified object.\r\n* @param {errorOrResult}  callback                                            `error` will contain information if an error occurs; \r\n*                                                                             otherwise `result` will be the matching entity.\r\n*                                                                             `response` will contain information related to this operation.\r\n*\r\n* The logic for returning entity types can get complicated.  Here is the algorithm used:\r\n* ```\r\n* var propertyType;\r\n*\r\n* if (propertyResovler) {                      // If the caller provides a propertyResolver in the options, use it\r\n*   propertyType = propertyResolver(partitionKey, rowKey, propertyName, propertyValue, propertyTypeFromService);\r\n* } else if (propertyTypeFromService) {        // If the service provides us a property type, use it.  See below for an explanation of when this will and won't occur.\r\n*   propertyType = propertyTypeFromService;\r\n* } else if (autoResolveProperties) {          // If options.autoResolveProperties is set to true\r\n*   if (javascript type is string) {           // See below for an explanation of how and why autoResolveProperties works as it does.\r\n*     propertyType = 'Edm.String';\r\n*   } else if (javascript type is boolean) {\r\n*     propertyType = 'Edm.Boolean';\r\n*   }\r\n* }\r\n*\r\n* if (propertyType) {\r\n*   // Set the property type on the property.\r\n* } else {\r\n*   // Property gets no EdmType. \r\n* }\r\n* ```\r\n* Notes:\r\n* \r\n* * The service only provides a type if JsonFullMetadata or JsonMinimalMetadata is used, and if the type is Int64, Guid, Binary, or DateTime.\r\n* * Explanation of autoResolveProperties:\r\n*     * String gets correctly resolved to 'Edm.String'.\r\n*     * Int64, Guid, Binary, and DateTime all get resolved to 'Edm.String.'  This only happens if JsonNoMetadata is used (otherwise the service will provide the propertyType in a prior step).\r\n*     * Boolean gets correctly resolved to 'Edm.Boolean'.\r\n*     * For both Int32 and Double, no type information is returned, even in the case of autoResolveProperties = true.  This is due to an\r\n*          inability to distinguish between the two in certain cases.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var tableService = azure.createTableService();\r\n* tableService.retrieveEntity('tasktable', 'tasksSeattle', '1', function(error, serverEntity) {\r\n*   if(!error) {\r\n*     // Entity available in serverEntity variable\r\n*   }\r\n* });\r\n*/\r\nTableService.prototype.retrieveEntity = function (table, partitionKey, rowKey, optionsOrCallback, callback) {\r\n  var entityDescriptor = { PartitionKey: {_: partitionKey, $: 'Edm.String'},\r\n    RowKey: {_: rowKey, $: 'Edm.String'},\r\n  };\r\n\r\n  validate.validateArgs('retrieveEntity', function (v) {\r\n    v.stringAllowEmpty(partitionKey, 'partitionKey');\r\n    v.stringAllowEmpty(rowKey, 'rowKey');\r\n  });\r\n\r\n  this._performEntityOperation(TableConstants.Operations.RETRIEVE, table, entityDescriptor, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Inserts a new entity into a table.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                           The table name.\r\n* @param {object}             entityDescriptor                                The entity descriptor.\r\n* @param {object}             [options]                                       The request options.\r\n* @param {string}             [options.echoContent]                           Whether or not to return the entity upon a successful insert. Default to false.\r\n* @param {string}             [options.payloadFormat]                         The payload format to use in the response, if options.echoContent is true.\r\n* @param {LocationMode}       [options.locationMode]                          Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                             Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                   The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]              The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]              The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                             The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                             execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                       A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                     Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                             The default value is false.\r\n* @param {TableService~propertyResolver}  [options.propertyResolver]          The property resolver. Only applied if echoContent is true. Given the partition key, row key, property name, \r\n*                                                                             property value, and the property Edm type if given by the service, returns the Edm type of the property.\r\n* @param {Function(entity)} [options.entityResolver]                          The entity resolver. Only applied if echoContent is true. Given the single entity returned by the insert, returns \r\n*                                                                             a modified object.\r\n* @param {errorOrResult}  callback                                            `error` will contain information if an error occurs; \r\n*                                                                             otherwise `result` will contain the entity information.\r\n*                                                                             `response` will contain information related to this operation.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var tableService = azure.createTableService();\r\n* var task1 = {\r\n*   PartitionKey : {'_': 'tasksSeattle', '$':'Edm.String'},\r\n*   RowKey: {'_': '1', '$':'Edm.String'},\r\n*   Description: {'_': 'Take out the trash', '$':'Edm.String'},\r\n*   DueDate: {'_': new Date(2011, 12, 14, 12), '$':'Edm.DateTime'}\r\n* };\r\n* tableService.insertEntity('tasktable', task1, function(error) {\r\n*   if(!error) {\r\n*     // Entity inserted\r\n*   }\r\n* }); \r\n*/\r\nTableService.prototype.insertEntity = function (table, entityDescriptor, optionsOrCallback, callback) {\r\n  this._performEntityOperation(TableConstants.Operations.INSERT, table, entityDescriptor, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Inserts or updates a new entity into a table.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {object}             entityDescriptor                        The entity descriptor.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}  callback                                    `error` will contain information if an error occurs; \r\n*                                                                     otherwise `result` will contain the entity information.\r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.insertOrReplaceEntity = function (table, entityDescriptor, optionsOrCallback, callback) {\r\n  this._performEntityOperation(TableConstants.Operations.INSERT_OR_REPLACE, table, entityDescriptor, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Replaces an existing entity within a table. To replace conditionally based on etag, set entity['.metadata']['etag'].\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {object}             entityDescriptor                        The entity descriptor.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}  callback                                    `error` will contain information if an error occurs; \r\n*                                                                     otherwise `result` will contain the entity information.\r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.replaceEntity = function (table, entityDescriptor, optionsOrCallback, callback) {\r\n  this._performEntityOperation(TableConstants.Operations.REPLACE, table, entityDescriptor, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Updates an existing entity within a table by merging new property values into the entity. To merge conditionally based on etag, set entity['.metadata']['etag'].\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {object}             entityDescriptor                        The entity descriptor. \r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}  callback                                    `error` will contain information if an error occurs; \r\n*                                                                     otherwise `result` will contain the entity information.\r\n*                                                                     response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.mergeEntity = function (table, entityDescriptor, optionsOrCallback, callback) {\r\n  this._performEntityOperation(TableConstants.Operations.MERGE, table, entityDescriptor, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Inserts or updates an existing entity within a table by merging new property values into the entity.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {object}             entityDescriptor                        The entity descriptor.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}  callback                                    `error` will contain information if an error occurs; \r\n*                                                                     otherwise `result` will contain the entity information.\r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.insertOrMergeEntity = function (table, entityDescriptor, optionsOrCallback, callback) {\r\n  this._performEntityOperation(TableConstants.Operations.INSERT_OR_MERGE, table, entityDescriptor, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Deletes an entity within a table. To delete conditionally based on etag, set entity['.metadata']['etag'].\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {object}             entityDescriptor                        The entity descriptor.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResponse}  callback                                  `error` will contain information if an error occurs; \r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.deleteEntity = function (table, entityDescriptor, optionsOrCallback, callback) {\r\n  this._performEntityOperation(TableConstants.Operations.DELETE, table, entityDescriptor, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Executes the operations in the batch.\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                           The table name.\r\n* @param {TableBatch}         batch                                           The table batch to execute.\r\n* @param {object}             [options]                                       The create options or callback function.\r\n* @param {LocationMode}       [options.locationMode]                          Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                             Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                   The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]              The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]              The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                             The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                             execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                       A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                     Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                             The default value is false.\r\n* @param {errorOrResult}  callback                                            `error` will contain information if an error occurs; \r\n*                                                                             otherwise `result` will contain responses for each operation executed in the batch;\r\n*                                                                             `result.entity` will contain the entity information for each operation executed.\r\n*                                                                             `result.response` will contain the response for each operations executed.\r\n*                                                                             `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype.executeBatch = function (table, batch, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('executeBatch', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n    v.object(batch, 'batch');\r\n    v.callback(callback);\r\n  });\r\n\r\n  if(!batch.hasOperations()) {\r\n    throw new Error(SR.EMPTY_BATCH);\r\n  }\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var batchResult = new BatchResult(this, table, batch.operations);\r\n  var webResource = batchResult.constructWebResource();\r\n\r\n  var body = batchResult.serialize();\r\n  webResource.withBody(body);\r\n  webResource.withHeader(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(body, 'utf8'));\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var responseObjects = batchResult.parse(responseObject);\r\n\r\n    var noError = true;\r\n    // if the batch was unsuccesful, there will be a single response indicating the error\r\n    if (responseObjects && responseObjects.length > 0) {\r\n      responseObjects.forEach(function(item){\r\n        if(noError && !item.response.isSuccessful){\r\n          responseObject = item;\r\n          noError = false;\r\n        }\r\n      });\r\n    }\r\n    \r\n    if (noError) {\r\n      responseObject.operationResponses = responseObjects;\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      // perform final callback\r\n      callback(returnObject.error, returnObject.operationResponses, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n// Private methods\r\n\r\n/**\r\n* Checks whether or not a table exists on the service.\r\n* @ignore\r\n*\r\n* @this {TableService}\r\n* @param {string}             table                                   The table name.\r\n* @param {string}             primaryOnly                             If true, the request will be executed against the primary storage location.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {Function(error, result, response)}  callback                `error` will contain information if an error occurs; \r\n*                                                                     otherwise `result` will contain\r\n*                                                                     the table information including `exists` boolean member. \r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nTableService.prototype._doesTableExist = function (table, primaryOnly, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('doesTableExist', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  \r\n  if(primaryOnly === false) {\r\n    options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  }\r\n\r\n  var webResource = WebResource.get('Tables(\\'' + table + '\\')');\r\n  webResource.withHeader(HeaderConstants.ACCEPT, this.defaultPayloadFormat);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.tableResult = {};\r\n    responseObject.tableResult.isSuccessful = responseObject.error ? false : true;\r\n    responseObject.tableResult.statusCode = responseObject.response === null || responseObject.response === undefined ? undefined : responseObject.response.statusCode;\r\n    responseObject.tableResult.TableName = table;\r\n    \r\n    if(!responseObject.error){\r\n      responseObject.tableResult.exists = true;\r\n    } else if (responseObject.error && responseObject.error.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound) {\r\n      responseObject.error = null;\r\n      responseObject.tableResult.exists = false;\r\n      responseObject.response.isSuccessful = true;\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.tableResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Performs a table operation.\r\n*\r\n* @this {TableService}\r\n* @param {string}             operation                           The operation to perform.\r\n* @param {string}             table                               The table name.\r\n* @param {object}             entityDescriptor                    The entity descriptor.\r\n* @param {object}             [options]                           The create options or callback function.\r\n* @param {string}             [options.echoContent]               Whether or not to return the entity upon a successful insert. Default to false.\r\n* @param {string}             [options.payloadFormat]             The payload format to use for the request.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}  callback                                `error` will contain information if an error occurs; \r\n*                                                                 otherwise `entity` will contain the entity information.\r\n*                                                                 `response` will contain information related to this operation.\r\n* @ignore\r\n*/\r\nTableService.prototype._performEntityOperation = function (operation, table, entityDescriptor, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('entityOperation', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n    v.object(entityDescriptor, 'entityDescriptor');\r\n\r\n    if(typeof entityDescriptor.PartitionKey !== 'string') {\r\n      v.object(entityDescriptor.PartitionKey, 'entityDescriptor.PartitionKey');\r\n      v.stringAllowEmpty(entityDescriptor.PartitionKey._, 'entityDescriptor.PartitionKey._');\r\n    }\r\n    \r\n    if(typeof entityDescriptor.RowKey !== 'string') {\r\n      v.object(entityDescriptor.RowKey, 'entityDescriptor.RowKey');\r\n      v.stringAllowEmpty(entityDescriptor.RowKey._, 'entityDescriptor.RowKey._');\r\n    }\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  options.payloadFormat = options.payloadFormat || this.defaultPayloadFormat;\r\n\r\n  var webResource = RequestHandler.constructEntityWebResource(operation, table, entityDescriptor, options);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback;\r\n    if (operation === TableConstants.Operations.DELETE) {\r\n      finalCallback = function (returnObject) {\r\n        callback(returnObject.error, returnObject.response);\r\n      };\r\n    } else {\r\n      responseObject.entityResponse = null;\r\n      if (!responseObject.error) {\r\n        responseObject.entityResponse = entityResult.parseEntity(responseObject.response, options.autoResolveProperties, options.propertyResolver, options.entityResolver);\r\n      }\r\n\r\n      finalCallback = function (returnObject) {\r\n        callback(returnObject.error, returnObject.entityResponse, returnObject.response);\r\n      };\r\n    }\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Retrieves a table URL.\r\n*\r\n* @param {string}                   table                    The table name.\r\n* @param {string}                   [sasToken]               The Shared Access Signature token.\r\n* @param {boolean}                  [primary]                A boolean representing whether to use the primary or the secondary endpoint.\r\n* @return {string}                                           The formatted URL string.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var tableService = azure.createTableService();\r\n* var sharedAccessPolicy = {\r\n*   AccessPolicy: {\r\n*     Permissions: azure.TableUtilities.SharedAccessPermissions.QUERY,\r\n*     Start: startDate,\r\n*     Expiry: expiryDate\r\n*   },\r\n* };\r\n* \r\n* var sasToken = tableService.generateSharedAccessSignature(table, sharedAccessPolicy);\r\n* var sasUrl = tableService.getUrl(table, sasToken);\r\n*/\r\nTableService.prototype.getUrl = function (table, sasToken, primary) {\r\n  validate.validateArgs('getUrl', function (v) {\r\n    v.string(table, 'table');\r\n    v.tableNameIsValid(table);\r\n  });\r\n\r\n  return this._getUrl(table, sasToken, primary);\r\n};\r\n\r\n/**\r\n* Given the partition key, row key, property name, property value,\r\n* and the property Edm type if given by the service, returns the Edm type of the property.\r\n* @typedef {function} TableService~propertyResolver\r\n* @param {object} pk  The partition key.\r\n* @param {object} rk  The row key.\r\n* @param {string} name  The property name.\r\n* @param {object} value The property value.\r\n* @param {string} type  The EDM type.\r\n*/\r\n\r\n/** \r\n* Returns entities matched by a query.\r\n* @callback TableService~queryResponse                                                                                \r\n* @param {object} error                     If an error occurs, the error information.\r\n* @param {object} entities                  The entities returned by the query.\r\n* @param {object} queryResultContinuation   If more matching entities exist, and could not be returned,\r\n*                                           a continuation token that can be used to retrieve more results.\r\n* @param {object} response                  Information related to this operation.\r\n*/\r\n\r\nmodule.exports = TableService;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n'use strict';\r\n\r\nvar XMLBuilder = require('xmlbuilder/lib/XMLBuilder');\r\n\r\n// Patch xmlbuilder to allow Unicode surrogate pair code\r\n// points in XML bodies\r\n\r\nXMLBuilder.prototype.assertLegalChar = function(str) {\r\n  var chars, chr;\r\n  chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uFFFE-\\uFFFF]/;\r\n  chr = str.match(chars);\r\n  if (chr) {\r\n    throw new Error('Invalid character (' + chr + ') in string: ' + str);\r\n  }\r\n};","// Generated by CoffeeScript 1.3.3\n(function() {\n  var XMLFragment,\n    __hasProp = {}.hasOwnProperty;\n\n  XMLFragment = (function() {\n\n    function XMLFragment(parent, name, attributes, text) {\n      this.isRoot = false;\n      this.documentObject = null;\n      this.parent = parent;\n      this.name = name;\n      this.attributes = attributes;\n      this.value = text;\n      this.children = [];\n      this.assertLegalChar = parent.assertLegalChar;\n    }\n\n    XMLFragment.prototype.element = function(name, attributes, text) {\n      var child, key, val, _ref, _ref1;\n      if (!(name != null)) {\n        throw new Error(\"Missing element name\");\n      }\n      name = '' + name || '';\n      this.assertLegalChar(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      if (this.is(attributes, 'String') && this.is(text, 'Object')) {\n        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];\n      } else if (this.is(attributes, 'String')) {\n        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];\n      }\n      for (key in attributes) {\n        if (!__hasProp.call(attributes, key)) continue;\n        val = attributes[key];\n        val = '' + val || '';\n        attributes[key] = this.escape(val);\n      }\n      child = new XMLFragment(this, name, attributes);\n      if (text != null) {\n        text = '' + text || '';\n        text = this.escape(text);\n        this.assertLegalChar(text);\n        child.raw(text);\n      }\n      this.children.push(child);\n      return child;\n    };\n\n    XMLFragment.prototype.insertBefore = function(name, attributes, text) {\n      var child, i, key, val, _ref, _ref1;\n      if (this.isRoot) {\n        throw new Error(\"Cannot insert elements at root level\");\n      }\n      if (!(name != null)) {\n        throw new Error(\"Missing element name\");\n      }\n      name = '' + name || '';\n      this.assertLegalChar(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      if (this.is(attributes, 'String') && this.is(text, 'Object')) {\n        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];\n      } else if (this.is(attributes, 'String')) {\n        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];\n      }\n      for (key in attributes) {\n        if (!__hasProp.call(attributes, key)) continue;\n        val = attributes[key];\n        val = '' + val || '';\n        attributes[key] = this.escape(val);\n      }\n      child = new XMLFragment(this.parent, name, attributes);\n      if (text != null) {\n        text = '' + text || '';\n        text = this.escape(text);\n        this.assertLegalChar(text);\n        child.raw(text);\n      }\n      i = this.parent.children.indexOf(this);\n      this.parent.children.splice(i, 0, child);\n      return child;\n    };\n\n    XMLFragment.prototype.insertAfter = function(name, attributes, text) {\n      var child, i, key, val, _ref, _ref1;\n      if (this.isRoot) {\n        throw new Error(\"Cannot insert elements at root level\");\n      }\n      if (!(name != null)) {\n        throw new Error(\"Missing element name\");\n      }\n      name = '' + name || '';\n      this.assertLegalChar(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      if (this.is(attributes, 'String') && this.is(text, 'Object')) {\n        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];\n      } else if (this.is(attributes, 'String')) {\n        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];\n      }\n      for (key in attributes) {\n        if (!__hasProp.call(attributes, key)) continue;\n        val = attributes[key];\n        val = '' + val || '';\n        attributes[key] = this.escape(val);\n      }\n      child = new XMLFragment(this.parent, name, attributes);\n      if (text != null) {\n        text = '' + text || '';\n        text = this.escape(text);\n        this.assertLegalChar(text);\n        child.raw(text);\n      }\n      i = this.parent.children.indexOf(this);\n      this.parent.children.splice(i + 1, 0, child);\n      return child;\n    };\n\n    XMLFragment.prototype.remove = function() {\n      var i, _ref;\n      if (this.isRoot) {\n        throw new Error(\"Cannot remove the root element\");\n      }\n      i = this.parent.children.indexOf(this);\n      [].splice.apply(this.parent.children, [i, i - i + 1].concat(_ref = [])), _ref;\n      return this.parent;\n    };\n\n    XMLFragment.prototype.text = function(value) {\n      var child;\n      if (!(value != null)) {\n        throw new Error(\"Missing element text\");\n      }\n      value = '' + value || '';\n      value = this.escape(value);\n      this.assertLegalChar(value);\n      child = new XMLFragment(this, '', {}, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLFragment.prototype.cdata = function(value) {\n      var child;\n      if (!(value != null)) {\n        throw new Error(\"Missing CDATA text\");\n      }\n      value = '' + value || '';\n      this.assertLegalChar(value);\n      if (value.match(/]]>/)) {\n        throw new Error(\"Invalid CDATA text: \" + value);\n      }\n      child = new XMLFragment(this, '', {}, '<![CDATA[' + value + ']]>');\n      this.children.push(child);\n      return this;\n    };\n\n    XMLFragment.prototype.comment = function(value) {\n      var child;\n      if (!(value != null)) {\n        throw new Error(\"Missing comment text\");\n      }\n      value = '' + value || '';\n      value = this.escape(value);\n      this.assertLegalChar(value);\n      if (value.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + value);\n      }\n      child = new XMLFragment(this, '', {}, '<!-- ' + value + ' -->');\n      this.children.push(child);\n      return this;\n    };\n\n    XMLFragment.prototype.raw = function(value) {\n      var child;\n      if (!(value != null)) {\n        throw new Error(\"Missing raw text\");\n      }\n      value = '' + value || '';\n      child = new XMLFragment(this, '', {}, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLFragment.prototype.up = function() {\n      if (this.isRoot) {\n        throw new Error(\"This node has no parent. Use doc() if you need to get the document object.\");\n      }\n      return this.parent;\n    };\n\n    XMLFragment.prototype.root = function() {\n      var child;\n      if (this.isRoot) {\n        return this;\n      }\n      child = this.parent;\n      while (!child.isRoot) {\n        child = child.parent;\n      }\n      return child;\n    };\n\n    XMLFragment.prototype.document = function() {\n      return this.root().documentObject;\n    };\n\n    XMLFragment.prototype.end = function(options) {\n      return this.document().toString(options);\n    };\n\n    XMLFragment.prototype.prev = function() {\n      var i;\n      if (this.isRoot) {\n        throw new Error(\"Root node has no siblings\");\n      }\n      i = this.parent.children.indexOf(this);\n      if (i < 1) {\n        throw new Error(\"Already at the first node\");\n      }\n      return this.parent.children[i - 1];\n    };\n\n    XMLFragment.prototype.next = function() {\n      var i;\n      if (this.isRoot) {\n        throw new Error(\"Root node has no siblings\");\n      }\n      i = this.parent.children.indexOf(this);\n      if (i === -1 || i === this.parent.children.length - 1) {\n        throw new Error(\"Already at the last node\");\n      }\n      return this.parent.children[i + 1];\n    };\n\n    XMLFragment.prototype.clone = function(deep) {\n      var clonedSelf;\n      clonedSelf = new XMLFragment(this.parent, this.name, this.attributes, this.value);\n      if (deep) {\n        this.children.forEach(function(child) {\n          var clonedChild;\n          clonedChild = child.clone(deep);\n          clonedChild.parent = clonedSelf;\n          return clonedSelf.children.push(clonedChild);\n        });\n      }\n      return clonedSelf;\n    };\n\n    XMLFragment.prototype.importXMLBuilder = function(xmlbuilder) {\n      var clonedRoot;\n      clonedRoot = xmlbuilder.root().clone(true);\n      clonedRoot.parent = this;\n      this.children.push(clonedRoot);\n      clonedRoot.isRoot = false;\n      return this;\n    };\n\n    XMLFragment.prototype.attribute = function(name, value) {\n      var _ref;\n      if (!(name != null)) {\n        throw new Error(\"Missing attribute name\");\n      }\n      if (!(value != null)) {\n        throw new Error(\"Missing attribute value\");\n      }\n      name = '' + name || '';\n      value = '' + value || '';\n      if ((_ref = this.attributes) == null) {\n        this.attributes = {};\n      }\n      this.attributes[name] = this.escape(value);\n      return this;\n    };\n\n    XMLFragment.prototype.removeAttribute = function(name) {\n      if (!(name != null)) {\n        throw new Error(\"Missing attribute name\");\n      }\n      name = '' + name || '';\n      delete this.attributes[name];\n      return this;\n    };\n\n    XMLFragment.prototype.toString = function(options, level) {\n      var attName, attValue, child, indent, newline, pretty, r, space, _i, _len, _ref, _ref1;\n      pretty = (options != null) && options.pretty || false;\n      indent = (options != null) && options.indent || '  ';\n      newline = (options != null) && options.newline || '\\n';\n      level || (level = 0);\n      space = new Array(level + 1).join(indent);\n      r = '';\n      if (pretty) {\n        r += space;\n      }\n      if (!(this.value != null)) {\n        r += '<' + this.name;\n      } else {\n        r += '' + this.value;\n      }\n      _ref = this.attributes;\n      for (attName in _ref) {\n        if (!__hasProp.call(_ref, attName)) continue;\n        attValue = _ref[attName];\n        if (this.name === '!DOCTYPE') {\n          r += ' ' + attValue;\n        } else {\n          r += ' ' + attName + '=\"' + attValue + '\"';\n        }\n      }\n      if (this.children.length === 0) {\n        if (!(this.value != null)) {\n          r += this.name === '?xml' ? '?>' : this.name === '!DOCTYPE' ? '>' : '/>';\n        }\n        if (pretty) {\n          r += newline;\n        }\n      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {\n        r += '>';\n        r += this.children[0].value;\n        r += '</' + this.name + '>';\n        r += newline;\n      } else {\n        r += '>';\n        if (pretty) {\n          r += newline;\n        }\n        _ref1 = this.children;\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n          child = _ref1[_i];\n          r += child.toString(options, level + 1);\n        }\n        if (pretty) {\n          r += space;\n        }\n        r += '</' + this.name + '>';\n        if (pretty) {\n          r += newline;\n        }\n      }\n      return r;\n    };\n\n    XMLFragment.prototype.escape = function(str) {\n      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&apos;').replace(/\"/g, '&quot;');\n    };\n\n    XMLFragment.prototype.is = function(obj, type) {\n      var clas;\n      clas = Object.prototype.toString.call(obj).slice(8, -1);\n      return (obj != null) && clas === type;\n    };\n\n    XMLFragment.prototype.ele = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLFragment.prototype.txt = function(value) {\n      return this.text(value);\n    };\n\n    XMLFragment.prototype.dat = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLFragment.prototype.att = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLFragment.prototype.com = function(value) {\n      return this.comment(value);\n    };\n\n    XMLFragment.prototype.doc = function() {\n      return this.document();\n    };\n\n    XMLFragment.prototype.e = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLFragment.prototype.t = function(value) {\n      return this.text(value);\n    };\n\n    XMLFragment.prototype.d = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLFragment.prototype.a = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLFragment.prototype.c = function(value) {\n      return this.comment(value);\n    };\n\n    XMLFragment.prototype.r = function(value) {\n      return this.raw(value);\n    };\n\n    XMLFragment.prototype.u = function() {\n      return this.up();\n    };\n\n    return XMLFragment;\n\n  })();\n\n  module.exports = XMLFragment;\n\n}).call(this);\n","// wrapper for non-node envs\n;(function (sax) {\n\nsax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\nsax.SAXParser = SAXParser\nsax.SAXStream = SAXStream\nsax.createStream = createStream\n\n// When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n// When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n// since that's the earliest that a buffer overrun could occur.  This way, checks are\n// as rare as required, but as often as necessary to ensure never crossing this bound.\n// Furthermore, buffers are only tested at most once per write(), so passing a very\n// large string into write() might have undesirable effects, but this is manageable by\n// the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n// edge case, result in creating at most one complete copy of the string passed in.\n// Set to Infinity to have unlimited buffers.\nsax.MAX_BUFFER_LENGTH = 64 * 1024\n\nvar buffers = [\n  \"comment\", \"sgmlDecl\", \"textNode\", \"tagName\", \"doctype\",\n  \"procInstName\", \"procInstBody\", \"entity\", \"attribName\",\n  \"attribValue\", \"cdata\", \"script\"\n]\n\nsax.EVENTS = // for discoverability.\n  [ \"text\"\n  , \"processinginstruction\"\n  , \"sgmldeclaration\"\n  , \"doctype\"\n  , \"comment\"\n  , \"attribute\"\n  , \"opentag\"\n  , \"closetag\"\n  , \"opencdata\"\n  , \"cdata\"\n  , \"closecdata\"\n  , \"error\"\n  , \"end\"\n  , \"ready\"\n  , \"script\"\n  , \"opennamespace\"\n  , \"closenamespace\"\n  ]\n\nfunction SAXParser (strict, opt) {\n  if (!(this instanceof SAXParser)) return new SAXParser(strict, opt)\n\n  var parser = this\n  clearBuffers(parser)\n  parser.q = parser.c = \"\"\n  parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n  parser.opt = opt || {}\n  parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n  parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\"\n  parser.tags = []\n  parser.closed = parser.closedRoot = parser.sawRoot = false\n  parser.tag = parser.error = null\n  parser.strict = !!strict\n  parser.noscript = !!(strict || parser.opt.noscript)\n  parser.state = S.BEGIN\n  parser.ENTITIES = Object.create(sax.ENTITIES)\n  parser.attribList = []\n\n  // namespaces form a prototype chain.\n  // it always points at the current tag,\n  // which protos to its parent tag.\n  if (parser.opt.xmlns) parser.ns = Object.create(rootNS)\n\n  // mostly just for error reporting\n  parser.trackPosition = parser.opt.position !== false\n  if (parser.trackPosition) {\n    parser.position = parser.line = parser.column = 0\n  }\n  emit(parser, \"onready\")\n}\n\nif (!Object.create) Object.create = function (o) {\n  function f () { this.__proto__ = o }\n  f.prototype = o\n  return new f\n}\n\nif (!Object.getPrototypeOf) Object.getPrototypeOf = function (o) {\n  return o.__proto__\n}\n\nif (!Object.keys) Object.keys = function (o) {\n  var a = []\n  for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n  return a\n}\n\nfunction checkBufferLength (parser) {\n  var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    , maxActual = 0\n  for (var i = 0, l = buffers.length; i < l; i ++) {\n    var len = parser[buffers[i]].length\n    if (len > maxAllowed) {\n      // Text/cdata nodes can get big, and since they're buffered,\n      // we can get here under normal conditions.\n      // Avoid issues by emitting the text node now,\n      // so at least it won't get any bigger.\n      switch (buffers[i]) {\n        case \"textNode\":\n          closeText(parser)\n        break\n\n        case \"cdata\":\n          emitNode(parser, \"oncdata\", parser.cdata)\n          parser.cdata = \"\"\n        break\n\n        case \"script\":\n          emitNode(parser, \"onscript\", parser.script)\n          parser.script = \"\"\n        break\n\n        default:\n          error(parser, \"Max buffer length exceeded: \"+buffers[i])\n      }\n    }\n    maxActual = Math.max(maxActual, len)\n  }\n  // schedule the next check for the earliest possible buffer overrun.\n  parser.bufferCheckPosition = (sax.MAX_BUFFER_LENGTH - maxActual)\n                             + parser.position\n}\n\nfunction clearBuffers (parser) {\n  for (var i = 0, l = buffers.length; i < l; i ++) {\n    parser[buffers[i]] = \"\"\n  }\n}\n\nfunction flushBuffers (parser) {\n  closeText(parser)\n  if (parser.cdata !== \"\") {\n    emitNode(parser, \"oncdata\", parser.cdata)\n    parser.cdata = \"\"\n  }\n  if (parser.script !== \"\") {\n    emitNode(parser, \"onscript\", parser.script)\n    parser.script = \"\"\n  }\n}\n\nSAXParser.prototype =\n  { end: function () { end(this) }\n  , write: write\n  , resume: function () { this.error = null; return this }\n  , close: function () { return this.write(null) }\n  , flush: function () { flushBuffers(this) }\n  }\n\ntry {\n  var Stream = require(\"stream\").Stream\n} catch (ex) {\n  var Stream = function () {}\n}\n\n\nvar streamWraps = sax.EVENTS.filter(function (ev) {\n  return ev !== \"error\" && ev !== \"end\"\n})\n\nfunction createStream (strict, opt) {\n  return new SAXStream(strict, opt)\n}\n\nfunction SAXStream (strict, opt) {\n  if (!(this instanceof SAXStream)) return new SAXStream(strict, opt)\n\n  Stream.apply(this)\n\n  this._parser = new SAXParser(strict, opt)\n  this.writable = true\n  this.readable = true\n\n\n  var me = this\n\n  this._parser.onend = function () {\n    me.emit(\"end\")\n  }\n\n  this._parser.onerror = function (er) {\n    me.emit(\"error\", er)\n\n    // if didn't throw, then means error was handled.\n    // go ahead and clear error, so we can write again.\n    me._parser.error = null\n  }\n\n  this._decoder = null;\n\n  streamWraps.forEach(function (ev) {\n    Object.defineProperty(me, \"on\" + ev, {\n      get: function () { return me._parser[\"on\" + ev] },\n      set: function (h) {\n        if (!h) {\n          me.removeAllListeners(ev)\n          return me._parser[\"on\"+ev] = h\n        }\n        me.on(ev, h)\n      },\n      enumerable: true,\n      configurable: false\n    })\n  })\n}\n\nSAXStream.prototype = Object.create(Stream.prototype,\n  { constructor: { value: SAXStream } })\n\nSAXStream.prototype.write = function (data) {\n  if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n    if (!this._decoder) {\n      var SD = require('string_decoder').StringDecoder\n      this._decoder = new SD('utf8')\n    }\n    data = this._decoder.write(data);\n  }\n\n  this._parser.write(data.toString())\n  this.emit(\"data\", data)\n  return true\n}\n\nSAXStream.prototype.end = function (chunk) {\n  if (chunk && chunk.length) this.write(chunk)\n  this._parser.end()\n  return true\n}\n\nSAXStream.prototype.on = function (ev, handler) {\n  var me = this\n  if (!me._parser[\"on\"+ev] && streamWraps.indexOf(ev) !== -1) {\n    me._parser[\"on\"+ev] = function () {\n      var args = arguments.length === 1 ? [arguments[0]]\n               : Array.apply(null, arguments)\n      args.splice(0, 0, ev)\n      me.emit.apply(me, args)\n    }\n  }\n\n  return Stream.prototype.on.call(me, ev, handler)\n}\n\n\n\n// character classes and tokens\nvar whitespace = \"\\r\\n\\t \"\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  , number = \"0124356789\"\n  , letter = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  // (Letter | \"_\" | \":\")\n  , quote = \"'\\\"\"\n  , entity = number+letter+\"#\"\n  , attribEnd = whitespace + \">\"\n  , CDATA = \"[CDATA[\"\n  , DOCTYPE = \"DOCTYPE\"\n  , XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\"\n  , XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\"\n  , rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n// turn all the string character sets into character class objects.\nwhitespace = charClass(whitespace)\nnumber = charClass(number)\nletter = charClass(letter)\n\n// http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n// This implementation works on strings, a single character at a time\n// as such, it cannot ever support astral-plane characters (10000-EFFFF)\n// without a significant breaking change to either this  parser, or the\n// JavaScript language.  Implementation of an emoji-capable xml parser\n// is left as an exercise for the reader.\nvar nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\nvar nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/\n\nquote = charClass(quote)\nentity = charClass(entity)\nattribEnd = charClass(attribEnd)\n\nfunction charClass (str) {\n  return str.split(\"\").reduce(function (s, c) {\n    s[c] = true\n    return s\n  }, {})\n}\n\nfunction isRegExp (c) {\n  return Object.prototype.toString.call(c) === '[object RegExp]'\n}\n\nfunction is (charclass, c) {\n  return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]\n}\n\nfunction not (charclass, c) {\n  return !is(charclass, c)\n}\n\nvar S = 0\nsax.STATE =\n{ BEGIN                     : S++\n, TEXT                      : S++ // general stuff\n, TEXT_ENTITY               : S++ // &amp and such.\n, OPEN_WAKA                 : S++ // <\n, SGML_DECL                 : S++ // <!BLARG\n, SGML_DECL_QUOTED          : S++ // <!BLARG foo \"bar\n, DOCTYPE                   : S++ // <!DOCTYPE\n, DOCTYPE_QUOTED            : S++ // <!DOCTYPE \"//blah\n, DOCTYPE_DTD               : S++ // <!DOCTYPE \"//blah\" [ ...\n, DOCTYPE_DTD_QUOTED        : S++ // <!DOCTYPE \"//blah\" [ \"foo\n, COMMENT_STARTING          : S++ // <!-\n, COMMENT                   : S++ // <!--\n, COMMENT_ENDING            : S++ // <!-- blah -\n, COMMENT_ENDED             : S++ // <!-- blah --\n, CDATA                     : S++ // <![CDATA[ something\n, CDATA_ENDING              : S++ // ]\n, CDATA_ENDING_2            : S++ // ]]\n, PROC_INST                 : S++ // <?hi\n, PROC_INST_BODY            : S++ // <?hi there\n, PROC_INST_ENDING          : S++ // <?hi \"there\" ?\n, OPEN_TAG                  : S++ // <strong\n, OPEN_TAG_SLASH            : S++ // <strong /\n, ATTRIB                    : S++ // <a\n, ATTRIB_NAME               : S++ // <a foo\n, ATTRIB_NAME_SAW_WHITE     : S++ // <a foo _\n, ATTRIB_VALUE              : S++ // <a foo=\n, ATTRIB_VALUE_QUOTED       : S++ // <a foo=\"bar\n, ATTRIB_VALUE_CLOSED       : S++ // <a foo=\"bar\"\n, ATTRIB_VALUE_UNQUOTED     : S++ // <a foo=bar\n, ATTRIB_VALUE_ENTITY_Q     : S++ // <foo bar=\"&quot;\"\n, ATTRIB_VALUE_ENTITY_U     : S++ // <foo bar=&quot;\n, CLOSE_TAG                 : S++ // </a\n, CLOSE_TAG_SAW_WHITE       : S++ // </a   >\n, SCRIPT                    : S++ // <script> ...\n, SCRIPT_ENDING             : S++ // <script> ... <\n}\n\nsax.ENTITIES =\n{ \"amp\" : \"&\"\n, \"gt\" : \">\"\n, \"lt\" : \"<\"\n, \"quot\" : \"\\\"\"\n, \"apos\" : \"'\"\n, \"AElig\" : 198\n, \"Aacute\" : 193\n, \"Acirc\" : 194\n, \"Agrave\" : 192\n, \"Aring\" : 197\n, \"Atilde\" : 195\n, \"Auml\" : 196\n, \"Ccedil\" : 199\n, \"ETH\" : 208\n, \"Eacute\" : 201\n, \"Ecirc\" : 202\n, \"Egrave\" : 200\n, \"Euml\" : 203\n, \"Iacute\" : 205\n, \"Icirc\" : 206\n, \"Igrave\" : 204\n, \"Iuml\" : 207\n, \"Ntilde\" : 209\n, \"Oacute\" : 211\n, \"Ocirc\" : 212\n, \"Ograve\" : 210\n, \"Oslash\" : 216\n, \"Otilde\" : 213\n, \"Ouml\" : 214\n, \"THORN\" : 222\n, \"Uacute\" : 218\n, \"Ucirc\" : 219\n, \"Ugrave\" : 217\n, \"Uuml\" : 220\n, \"Yacute\" : 221\n, \"aacute\" : 225\n, \"acirc\" : 226\n, \"aelig\" : 230\n, \"agrave\" : 224\n, \"aring\" : 229\n, \"atilde\" : 227\n, \"auml\" : 228\n, \"ccedil\" : 231\n, \"eacute\" : 233\n, \"ecirc\" : 234\n, \"egrave\" : 232\n, \"eth\" : 240\n, \"euml\" : 235\n, \"iacute\" : 237\n, \"icirc\" : 238\n, \"igrave\" : 236\n, \"iuml\" : 239\n, \"ntilde\" : 241\n, \"oacute\" : 243\n, \"ocirc\" : 244\n, \"ograve\" : 242\n, \"oslash\" : 248\n, \"otilde\" : 245\n, \"ouml\" : 246\n, \"szlig\" : 223\n, \"thorn\" : 254\n, \"uacute\" : 250\n, \"ucirc\" : 251\n, \"ugrave\" : 249\n, \"uuml\" : 252\n, \"yacute\" : 253\n, \"yuml\" : 255\n, \"copy\" : 169\n, \"reg\" : 174\n, \"nbsp\" : 160\n, \"iexcl\" : 161\n, \"cent\" : 162\n, \"pound\" : 163\n, \"curren\" : 164\n, \"yen\" : 165\n, \"brvbar\" : 166\n, \"sect\" : 167\n, \"uml\" : 168\n, \"ordf\" : 170\n, \"laquo\" : 171\n, \"not\" : 172\n, \"shy\" : 173\n, \"macr\" : 175\n, \"deg\" : 176\n, \"plusmn\" : 177\n, \"sup1\" : 185\n, \"sup2\" : 178\n, \"sup3\" : 179\n, \"acute\" : 180\n, \"micro\" : 181\n, \"para\" : 182\n, \"middot\" : 183\n, \"cedil\" : 184\n, \"ordm\" : 186\n, \"raquo\" : 187\n, \"frac14\" : 188\n, \"frac12\" : 189\n, \"frac34\" : 190\n, \"iquest\" : 191\n, \"times\" : 215\n, \"divide\" : 247\n, \"OElig\" : 338\n, \"oelig\" : 339\n, \"Scaron\" : 352\n, \"scaron\" : 353\n, \"Yuml\" : 376\n, \"fnof\" : 402\n, \"circ\" : 710\n, \"tilde\" : 732\n, \"Alpha\" : 913\n, \"Beta\" : 914\n, \"Gamma\" : 915\n, \"Delta\" : 916\n, \"Epsilon\" : 917\n, \"Zeta\" : 918\n, \"Eta\" : 919\n, \"Theta\" : 920\n, \"Iota\" : 921\n, \"Kappa\" : 922\n, \"Lambda\" : 923\n, \"Mu\" : 924\n, \"Nu\" : 925\n, \"Xi\" : 926\n, \"Omicron\" : 927\n, \"Pi\" : 928\n, \"Rho\" : 929\n, \"Sigma\" : 931\n, \"Tau\" : 932\n, \"Upsilon\" : 933\n, \"Phi\" : 934\n, \"Chi\" : 935\n, \"Psi\" : 936\n, \"Omega\" : 937\n, \"alpha\" : 945\n, \"beta\" : 946\n, \"gamma\" : 947\n, \"delta\" : 948\n, \"epsilon\" : 949\n, \"zeta\" : 950\n, \"eta\" : 951\n, \"theta\" : 952\n, \"iota\" : 953\n, \"kappa\" : 954\n, \"lambda\" : 955\n, \"mu\" : 956\n, \"nu\" : 957\n, \"xi\" : 958\n, \"omicron\" : 959\n, \"pi\" : 960\n, \"rho\" : 961\n, \"sigmaf\" : 962\n, \"sigma\" : 963\n, \"tau\" : 964\n, \"upsilon\" : 965\n, \"phi\" : 966\n, \"chi\" : 967\n, \"psi\" : 968\n, \"omega\" : 969\n, \"thetasym\" : 977\n, \"upsih\" : 978\n, \"piv\" : 982\n, \"ensp\" : 8194\n, \"emsp\" : 8195\n, \"thinsp\" : 8201\n, \"zwnj\" : 8204\n, \"zwj\" : 8205\n, \"lrm\" : 8206\n, \"rlm\" : 8207\n, \"ndash\" : 8211\n, \"mdash\" : 8212\n, \"lsquo\" : 8216\n, \"rsquo\" : 8217\n, \"sbquo\" : 8218\n, \"ldquo\" : 8220\n, \"rdquo\" : 8221\n, \"bdquo\" : 8222\n, \"dagger\" : 8224\n, \"Dagger\" : 8225\n, \"bull\" : 8226\n, \"hellip\" : 8230\n, \"permil\" : 8240\n, \"prime\" : 8242\n, \"Prime\" : 8243\n, \"lsaquo\" : 8249\n, \"rsaquo\" : 8250\n, \"oline\" : 8254\n, \"frasl\" : 8260\n, \"euro\" : 8364\n, \"image\" : 8465\n, \"weierp\" : 8472\n, \"real\" : 8476\n, \"trade\" : 8482\n, \"alefsym\" : 8501\n, \"larr\" : 8592\n, \"uarr\" : 8593\n, \"rarr\" : 8594\n, \"darr\" : 8595\n, \"harr\" : 8596\n, \"crarr\" : 8629\n, \"lArr\" : 8656\n, \"uArr\" : 8657\n, \"rArr\" : 8658\n, \"dArr\" : 8659\n, \"hArr\" : 8660\n, \"forall\" : 8704\n, \"part\" : 8706\n, \"exist\" : 8707\n, \"empty\" : 8709\n, \"nabla\" : 8711\n, \"isin\" : 8712\n, \"notin\" : 8713\n, \"ni\" : 8715\n, \"prod\" : 8719\n, \"sum\" : 8721\n, \"minus\" : 8722\n, \"lowast\" : 8727\n, \"radic\" : 8730\n, \"prop\" : 8733\n, \"infin\" : 8734\n, \"ang\" : 8736\n, \"and\" : 8743\n, \"or\" : 8744\n, \"cap\" : 8745\n, \"cup\" : 8746\n, \"int\" : 8747\n, \"there4\" : 8756\n, \"sim\" : 8764\n, \"cong\" : 8773\n, \"asymp\" : 8776\n, \"ne\" : 8800\n, \"equiv\" : 8801\n, \"le\" : 8804\n, \"ge\" : 8805\n, \"sub\" : 8834\n, \"sup\" : 8835\n, \"nsub\" : 8836\n, \"sube\" : 8838\n, \"supe\" : 8839\n, \"oplus\" : 8853\n, \"otimes\" : 8855\n, \"perp\" : 8869\n, \"sdot\" : 8901\n, \"lceil\" : 8968\n, \"rceil\" : 8969\n, \"lfloor\" : 8970\n, \"rfloor\" : 8971\n, \"lang\" : 9001\n, \"rang\" : 9002\n, \"loz\" : 9674\n, \"spades\" : 9824\n, \"clubs\" : 9827\n, \"hearts\" : 9829\n, \"diams\" : 9830\n}\n\nObject.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n})\n\nfor (var S in sax.STATE) sax.STATE[sax.STATE[S]] = S\n\n// shorthand\nS = sax.STATE\n\nfunction emit (parser, event, data) {\n  parser[event] && parser[event](data)\n}\n\nfunction emitNode (parser, nodeType, data) {\n  if (parser.textNode) closeText(parser)\n  emit(parser, nodeType, data)\n}\n\nfunction closeText (parser) {\n  parser.textNode = textopts(parser.opt, parser.textNode)\n  if (parser.textNode) emit(parser, \"ontext\", parser.textNode)\n  parser.textNode = \"\"\n}\n\nfunction textopts (opt, text) {\n  if (opt.trim) text = text.trim()\n  if (opt.normalize) text = text.replace(/\\s+/g, \" \")\n  return text\n}\n\nfunction error (parser, er) {\n  closeText(parser)\n  if (parser.trackPosition) {\n    er += \"\\nLine: \"+parser.line+\n          \"\\nColumn: \"+parser.column+\n          \"\\nChar: \"+parser.c\n  }\n  er = new Error(er)\n  parser.error = er\n  emit(parser, \"onerror\", er)\n  return parser\n}\n\nfunction end (parser) {\n  if (!parser.closedRoot) strictFail(parser, \"Unclosed root tag\")\n  if ((parser.state !== S.BEGIN) && (parser.state !== S.TEXT)) error(parser, \"Unexpected end\")\n  closeText(parser)\n  parser.c = \"\"\n  parser.closed = true\n  emit(parser, \"onend\")\n  SAXParser.call(parser, parser.strict, parser.opt)\n  return parser\n}\n\nfunction strictFail (parser, message) {\n  if (typeof parser !== 'object' || !(parser instanceof SAXParser))\n    throw new Error('bad call to strictFail');\n  if (parser.strict) error(parser, message)\n}\n\nfunction newTag (parser) {\n  if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n  var parent = parser.tags[parser.tags.length - 1] || parser\n    , tag = parser.tag = { name : parser.tagName, attributes : {} }\n\n  // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n  if (parser.opt.xmlns) tag.ns = parent.ns\n  parser.attribList.length = 0\n}\n\nfunction qname (name, attribute) {\n  var i = name.indexOf(\":\")\n    , qualName = i < 0 ? [ \"\", name ] : name.split(\":\")\n    , prefix = qualName[0]\n    , local = qualName[1]\n\n  // <x \"xmlns\"=\"http://foo\">\n  if (attribute && name === \"xmlns\") {\n    prefix = \"xmlns\"\n    local = \"\"\n  }\n\n  return { prefix: prefix, local: local }\n}\n\nfunction attrib (parser) {\n  if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]()\n\n  if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n    return parser.attribName = parser.attribValue = \"\"\n  }\n\n  if (parser.opt.xmlns) {\n    var qn = qname(parser.attribName, true)\n      , prefix = qn.prefix\n      , local = qn.local\n\n    if (prefix === \"xmlns\") {\n      // namespace binding attribute; push the binding into scope\n      if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n        strictFail( parser\n                  , \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\n\"\n                  + \"Actual: \" + parser.attribValue )\n      } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n        strictFail( parser\n                  , \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\n\"\n                  + \"Actual: \" + parser.attribValue )\n      } else {\n        var tag = parser.tag\n          , parent = parser.tags[parser.tags.length - 1] || parser\n        if (tag.ns === parent.ns) {\n          tag.ns = Object.create(parent.ns)\n        }\n        tag.ns[local] = parser.attribValue\n      }\n    }\n\n    // defer onattribute events until all attributes have been seen\n    // so any new bindings can take effect; preserve attribute order\n    // so deferred events can be emitted in document order\n    parser.attribList.push([parser.attribName, parser.attribValue])\n  } else {\n    // in non-xmlns mode, we can emit the event right away\n    parser.tag.attributes[parser.attribName] = parser.attribValue\n    emitNode( parser\n            , \"onattribute\"\n            , { name: parser.attribName\n              , value: parser.attribValue } )\n  }\n\n  parser.attribName = parser.attribValue = \"\"\n}\n\nfunction openTag (parser, selfClosing) {\n  if (parser.opt.xmlns) {\n    // emit namespace binding events\n    var tag = parser.tag\n\n    // add namespace info to tag\n    var qn = qname(parser.tagName)\n    tag.prefix = qn.prefix\n    tag.local = qn.local\n    tag.uri = tag.ns[qn.prefix] || \"\"\n\n    if (tag.prefix && !tag.uri) {\n      strictFail(parser, \"Unbound namespace prefix: \"\n                       + JSON.stringify(parser.tagName))\n      tag.uri = qn.prefix\n    }\n\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    if (tag.ns && parent.ns !== tag.ns) {\n      Object.keys(tag.ns).forEach(function (p) {\n        emitNode( parser\n                , \"onopennamespace\"\n                , { prefix: p , uri: tag.ns[p] } )\n      })\n    }\n\n    // handle deferred onattribute events\n    // Note: do not apply default ns to attributes:\n    //   http://www.w3.org/TR/REC-xml-names/#defaulting\n    for (var i = 0, l = parser.attribList.length; i < l; i ++) {\n      var nv = parser.attribList[i]\n      var name = nv[0]\n        , value = nv[1]\n        , qualName = qname(name, true)\n        , prefix = qualName.prefix\n        , local = qualName.local\n        , uri = prefix == \"\" ? \"\" : (tag.ns[prefix] || \"\")\n        , a = { name: name\n              , value: value\n              , prefix: prefix\n              , local: local\n              , uri: uri\n              }\n\n      // if there's any attributes with an undefined namespace,\n      // then fail on them now.\n      if (prefix && prefix != \"xmlns\" && !uri) {\n        strictFail(parser, \"Unbound namespace prefix: \"\n                         + JSON.stringify(prefix))\n        a.uri = prefix\n      }\n      parser.tag.attributes[name] = a\n      emitNode(parser, \"onattribute\", a)\n    }\n    parser.attribList.length = 0\n  }\n\n  parser.tag.isSelfClosing = !!selfClosing\n\n  // process the tag\n  parser.sawRoot = true\n  parser.tags.push(parser.tag)\n  emitNode(parser, \"onopentag\", parser.tag)\n  if (!selfClosing) {\n    // special case for <script> in non-strict mode.\n    if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n      parser.state = S.SCRIPT\n    } else {\n      parser.state = S.TEXT\n    }\n    parser.tag = null\n    parser.tagName = \"\"\n  }\n  parser.attribName = parser.attribValue = \"\"\n  parser.attribList.length = 0\n}\n\nfunction closeTag (parser) {\n  if (!parser.tagName) {\n    strictFail(parser, \"Weird empty close tag.\")\n    parser.textNode += \"</>\"\n    parser.state = S.TEXT\n    return\n  }\n\n  if (parser.script) {\n    if (parser.tagName !== \"script\") {\n      parser.script += \"</\" + parser.tagName + \">\"\n      parser.tagName = \"\"\n      parser.state = S.SCRIPT\n      return\n    }\n    emitNode(parser, \"onscript\", parser.script)\n    parser.script = \"\"\n  }\n\n  // first make sure that the closing tag actually exists.\n  // <a><b></c></b></a> will close everything, otherwise.\n  var t = parser.tags.length\n  var tagName = parser.tagName\n  if (!parser.strict) tagName = tagName[parser.looseCase]()\n  var closeTo = tagName\n  while (t --) {\n    var close = parser.tags[t]\n    if (close.name !== closeTo) {\n      // fail the first time in strict mode\n      strictFail(parser, \"Unexpected close tag\")\n    } else break\n  }\n\n  // didn't find it.  we already failed for strict, so just abort.\n  if (t < 0) {\n    strictFail(parser, \"Unmatched closing tag: \"+parser.tagName)\n    parser.textNode += \"</\" + parser.tagName + \">\"\n    parser.state = S.TEXT\n    return\n  }\n  parser.tagName = tagName\n  var s = parser.tags.length\n  while (s --> t) {\n    var tag = parser.tag = parser.tags.pop()\n    parser.tagName = parser.tag.name\n    emitNode(parser, \"onclosetag\", parser.tagName)\n\n    var x = {}\n    for (var i in tag.ns) x[i] = tag.ns[i]\n\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    if (parser.opt.xmlns && tag.ns !== parent.ns) {\n      // remove namespace bindings introduced by tag\n      Object.keys(tag.ns).forEach(function (p) {\n        var n = tag.ns[p]\n        emitNode(parser, \"onclosenamespace\", { prefix: p, uri: n })\n      })\n    }\n  }\n  if (t === 0) parser.closedRoot = true\n  parser.tagName = parser.attribValue = parser.attribName = \"\"\n  parser.attribList.length = 0\n  parser.state = S.TEXT\n}\n\nfunction parseEntity (parser) {\n  var entity = parser.entity\n    , entityLC = entity.toLowerCase()\n    , num\n    , numStr = \"\"\n  if (parser.ENTITIES[entity])\n    return parser.ENTITIES[entity]\n  if (parser.ENTITIES[entityLC])\n    return parser.ENTITIES[entityLC]\n  entity = entityLC\n  if (entity.charAt(0) === \"#\") {\n    if (entity.charAt(1) === \"x\") {\n      entity = entity.slice(2)\n      num = parseInt(entity, 16)\n      numStr = num.toString(16)\n    } else {\n      entity = entity.slice(1)\n      num = parseInt(entity, 10)\n      numStr = num.toString(10)\n    }\n  }\n  entity = entity.replace(/^0+/, \"\")\n  if (numStr.toLowerCase() !== entity) {\n    strictFail(parser, \"Invalid character entity\")\n    return \"&\"+parser.entity + \";\"\n  }\n  return String.fromCharCode(num)\n}\n\nfunction write (chunk) {\n  var parser = this\n  if (this.error) throw this.error\n  if (parser.closed) return error(parser,\n    \"Cannot write after close. Assign an onready handler.\")\n  if (chunk === null) return end(parser)\n  var i = 0, c = \"\"\n  while (parser.c = c = chunk.charAt(i++)) {\n    if (parser.trackPosition) {\n      parser.position ++\n      if (c === \"\\n\") {\n        parser.line ++\n        parser.column = 0\n      } else parser.column ++\n    }\n    switch (parser.state) {\n\n      case S.BEGIN:\n        if (c === \"<\") {\n          parser.state = S.OPEN_WAKA\n          parser.startTagPosition = parser.position\n        } else if (not(whitespace,c)) {\n          // have to process this as a text node.\n          // weird, but happens.\n          strictFail(parser, \"Non-whitespace before first tag.\")\n          parser.textNode = c\n          parser.state = S.TEXT\n        }\n      continue\n\n      case S.TEXT:\n        if (parser.sawRoot && !parser.closedRoot) {\n          var starti = i-1\n          while (c && c!==\"<\" && c!==\"&\") {\n            c = chunk.charAt(i++)\n            if (c && parser.trackPosition) {\n              parser.position ++\n              if (c === \"\\n\") {\n                parser.line ++\n                parser.column = 0\n              } else parser.column ++\n            }\n          }\n          parser.textNode += chunk.substring(starti, i-1)\n        }\n        if (c === \"<\") {\n          parser.state = S.OPEN_WAKA\n          parser.startTagPosition = parser.position\n        } else {\n          if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot))\n            strictFail(parser, \"Text data outside of root node.\")\n          if (c === \"&\") parser.state = S.TEXT_ENTITY\n          else parser.textNode += c\n        }\n      continue\n\n      case S.SCRIPT:\n        // only non-strict\n        if (c === \"<\") {\n          parser.state = S.SCRIPT_ENDING\n        } else parser.script += c\n      continue\n\n      case S.SCRIPT_ENDING:\n        if (c === \"/\") {\n          parser.state = S.CLOSE_TAG\n        } else {\n          parser.script += \"<\" + c\n          parser.state = S.SCRIPT\n        }\n      continue\n\n      case S.OPEN_WAKA:\n        // either a /, ?, !, or text is coming next.\n        if (c === \"!\") {\n          parser.state = S.SGML_DECL\n          parser.sgmlDecl = \"\"\n        } else if (is(whitespace, c)) {\n          // wait for it...\n        } else if (is(nameStart,c)) {\n          parser.state = S.OPEN_TAG\n          parser.tagName = c\n        } else if (c === \"/\") {\n          parser.state = S.CLOSE_TAG\n          parser.tagName = \"\"\n        } else if (c === \"?\") {\n          parser.state = S.PROC_INST\n          parser.procInstName = parser.procInstBody = \"\"\n        } else {\n          strictFail(parser, \"Unencoded <\")\n          // if there was some whitespace, then add that in.\n          if (parser.startTagPosition + 1 < parser.position) {\n            var pad = parser.position - parser.startTagPosition\n            c = new Array(pad).join(\" \") + c\n          }\n          parser.textNode += \"<\" + c\n          parser.state = S.TEXT\n        }\n      continue\n\n      case S.SGML_DECL:\n        if ((parser.sgmlDecl+c).toUpperCase() === CDATA) {\n          emitNode(parser, \"onopencdata\")\n          parser.state = S.CDATA\n          parser.sgmlDecl = \"\"\n          parser.cdata = \"\"\n        } else if (parser.sgmlDecl+c === \"--\") {\n          parser.state = S.COMMENT\n          parser.comment = \"\"\n          parser.sgmlDecl = \"\"\n        } else if ((parser.sgmlDecl+c).toUpperCase() === DOCTYPE) {\n          parser.state = S.DOCTYPE\n          if (parser.doctype || parser.sawRoot) strictFail(parser,\n            \"Inappropriately located doctype declaration\")\n          parser.doctype = \"\"\n          parser.sgmlDecl = \"\"\n        } else if (c === \">\") {\n          emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl)\n          parser.sgmlDecl = \"\"\n          parser.state = S.TEXT\n        } else if (is(quote, c)) {\n          parser.state = S.SGML_DECL_QUOTED\n          parser.sgmlDecl += c\n        } else parser.sgmlDecl += c\n      continue\n\n      case S.SGML_DECL_QUOTED:\n        if (c === parser.q) {\n          parser.state = S.SGML_DECL\n          parser.q = \"\"\n        }\n        parser.sgmlDecl += c\n      continue\n\n      case S.DOCTYPE:\n        if (c === \">\") {\n          parser.state = S.TEXT\n          emitNode(parser, \"ondoctype\", parser.doctype)\n          parser.doctype = true // just remember that we saw it.\n        } else {\n          parser.doctype += c\n          if (c === \"[\") parser.state = S.DOCTYPE_DTD\n          else if (is(quote, c)) {\n            parser.state = S.DOCTYPE_QUOTED\n            parser.q = c\n          }\n        }\n      continue\n\n      case S.DOCTYPE_QUOTED:\n        parser.doctype += c\n        if (c === parser.q) {\n          parser.q = \"\"\n          parser.state = S.DOCTYPE\n        }\n      continue\n\n      case S.DOCTYPE_DTD:\n        parser.doctype += c\n        if (c === \"]\") parser.state = S.DOCTYPE\n        else if (is(quote,c)) {\n          parser.state = S.DOCTYPE_DTD_QUOTED\n          parser.q = c\n        }\n      continue\n\n      case S.DOCTYPE_DTD_QUOTED:\n        parser.doctype += c\n        if (c === parser.q) {\n          parser.state = S.DOCTYPE_DTD\n          parser.q = \"\"\n        }\n      continue\n\n      case S.COMMENT:\n        if (c === \"-\") parser.state = S.COMMENT_ENDING\n        else parser.comment += c\n      continue\n\n      case S.COMMENT_ENDING:\n        if (c === \"-\") {\n          parser.state = S.COMMENT_ENDED\n          parser.comment = textopts(parser.opt, parser.comment)\n          if (parser.comment) emitNode(parser, \"oncomment\", parser.comment)\n          parser.comment = \"\"\n        } else {\n          parser.comment += \"-\" + c\n          parser.state = S.COMMENT\n        }\n      continue\n\n      case S.COMMENT_ENDED:\n        if (c !== \">\") {\n          strictFail(parser, \"Malformed comment\")\n          // allow <!-- blah -- bloo --> in non-strict mode,\n          // which is a comment of \" blah -- bloo \"\n          parser.comment += \"--\" + c\n          parser.state = S.COMMENT\n        } else parser.state = S.TEXT\n      continue\n\n      case S.CDATA:\n        if (c === \"]\") parser.state = S.CDATA_ENDING\n        else parser.cdata += c\n      continue\n\n      case S.CDATA_ENDING:\n        if (c === \"]\") parser.state = S.CDATA_ENDING_2\n        else {\n          parser.cdata += \"]\" + c\n          parser.state = S.CDATA\n        }\n      continue\n\n      case S.CDATA_ENDING_2:\n        if (c === \">\") {\n          if (parser.cdata) emitNode(parser, \"oncdata\", parser.cdata)\n          emitNode(parser, \"onclosecdata\")\n          parser.cdata = \"\"\n          parser.state = S.TEXT\n        } else if (c === \"]\") {\n          parser.cdata += \"]\"\n        } else {\n          parser.cdata += \"]]\" + c\n          parser.state = S.CDATA\n        }\n      continue\n\n      case S.PROC_INST:\n        if (c === \"?\") parser.state = S.PROC_INST_ENDING\n        else if (is(whitespace, c)) parser.state = S.PROC_INST_BODY\n        else parser.procInstName += c\n      continue\n\n      case S.PROC_INST_BODY:\n        if (!parser.procInstBody && is(whitespace, c)) continue\n        else if (c === \"?\") parser.state = S.PROC_INST_ENDING\n        else parser.procInstBody += c\n      continue\n\n      case S.PROC_INST_ENDING:\n        if (c === \">\") {\n          emitNode(parser, \"onprocessinginstruction\", {\n            name : parser.procInstName,\n            body : parser.procInstBody\n          })\n          parser.procInstName = parser.procInstBody = \"\"\n          parser.state = S.TEXT\n        } else {\n          parser.procInstBody += \"?\" + c\n          parser.state = S.PROC_INST_BODY\n        }\n      continue\n\n      case S.OPEN_TAG:\n        if (is(nameBody, c)) parser.tagName += c\n        else {\n          newTag(parser)\n          if (c === \">\") openTag(parser)\n          else if (c === \"/\") parser.state = S.OPEN_TAG_SLASH\n          else {\n            if (not(whitespace, c)) strictFail(\n              parser, \"Invalid character in tag name\")\n            parser.state = S.ATTRIB\n          }\n        }\n      continue\n\n      case S.OPEN_TAG_SLASH:\n        if (c === \">\") {\n          openTag(parser, true)\n          closeTag(parser)\n        } else {\n          strictFail(parser, \"Forward-slash in opening tag not followed by >\")\n          parser.state = S.ATTRIB\n        }\n      continue\n\n      case S.ATTRIB:\n        // haven't read the attribute name yet.\n        if (is(whitespace, c)) continue\n        else if (c === \">\") openTag(parser)\n        else if (c === \"/\") parser.state = S.OPEN_TAG_SLASH\n        else if (is(nameStart, c)) {\n          parser.attribName = c\n          parser.attribValue = \"\"\n          parser.state = S.ATTRIB_NAME\n        } else strictFail(parser, \"Invalid attribute name\")\n      continue\n\n      case S.ATTRIB_NAME:\n        if (c === \"=\") parser.state = S.ATTRIB_VALUE\n        else if (c === \">\") {\n          strictFail(parser, \"Attribute without value\")\n          parser.attribValue = parser.attribName\n          attrib(parser)\n          openTag(parser)\n        }\n        else if (is(whitespace, c)) parser.state = S.ATTRIB_NAME_SAW_WHITE\n        else if (is(nameBody, c)) parser.attribName += c\n        else strictFail(parser, \"Invalid attribute name\")\n      continue\n\n      case S.ATTRIB_NAME_SAW_WHITE:\n        if (c === \"=\") parser.state = S.ATTRIB_VALUE\n        else if (is(whitespace, c)) continue\n        else {\n          strictFail(parser, \"Attribute without value\")\n          parser.tag.attributes[parser.attribName] = \"\"\n          parser.attribValue = \"\"\n          emitNode(parser, \"onattribute\",\n                   { name : parser.attribName, value : \"\" })\n          parser.attribName = \"\"\n          if (c === \">\") openTag(parser)\n          else if (is(nameStart, c)) {\n            parser.attribName = c\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, \"Invalid attribute name\")\n            parser.state = S.ATTRIB\n          }\n        }\n      continue\n\n      case S.ATTRIB_VALUE:\n        if (is(whitespace, c)) continue\n        else if (is(quote, c)) {\n          parser.q = c\n          parser.state = S.ATTRIB_VALUE_QUOTED\n        } else {\n          strictFail(parser, \"Unquoted attribute value\")\n          parser.state = S.ATTRIB_VALUE_UNQUOTED\n          parser.attribValue = c\n        }\n      continue\n\n      case S.ATTRIB_VALUE_QUOTED:\n        if (c !== parser.q) {\n          if (c === \"&\") parser.state = S.ATTRIB_VALUE_ENTITY_Q\n          else parser.attribValue += c\n          continue\n        }\n        attrib(parser)\n        parser.q = \"\"\n        parser.state = S.ATTRIB_VALUE_CLOSED\n      continue\n\n      case S.ATTRIB_VALUE_CLOSED:\n        if (is(whitespace, c)) {\n          parser.state = S.ATTRIB\n        } else if (c === \">\") openTag(parser)\n        else if (c === \"/\") parser.state = S.OPEN_TAG_SLASH\n        else if (is(nameStart, c)) {\n          strictFail(parser, \"No whitespace between attributes\")\n          parser.attribName = c\n          parser.attribValue = \"\"\n          parser.state = S.ATTRIB_NAME\n        } else strictFail(parser, \"Invalid attribute name\")\n      continue\n\n      case S.ATTRIB_VALUE_UNQUOTED:\n        if (not(attribEnd,c)) {\n          if (c === \"&\") parser.state = S.ATTRIB_VALUE_ENTITY_U\n          else parser.attribValue += c\n          continue\n        }\n        attrib(parser)\n        if (c === \">\") openTag(parser)\n        else parser.state = S.ATTRIB\n      continue\n\n      case S.CLOSE_TAG:\n        if (!parser.tagName) {\n          if (is(whitespace, c)) continue\n          else if (not(nameStart, c)) {\n            if (parser.script) {\n              parser.script += \"</\" + c\n              parser.state = S.SCRIPT\n            } else {\n              strictFail(parser, \"Invalid tagname in closing tag.\")\n            }\n          } else parser.tagName = c\n        }\n        else if (c === \">\") closeTag(parser)\n        else if (is(nameBody, c)) parser.tagName += c\n        else if (parser.script) {\n          parser.script += \"</\" + parser.tagName\n          parser.tagName = \"\"\n          parser.state = S.SCRIPT\n        } else {\n          if (not(whitespace, c)) strictFail(parser,\n            \"Invalid tagname in closing tag\")\n          parser.state = S.CLOSE_TAG_SAW_WHITE\n        }\n      continue\n\n      case S.CLOSE_TAG_SAW_WHITE:\n        if (is(whitespace, c)) continue\n        if (c === \">\") closeTag(parser)\n        else strictFail(parser, \"Invalid characters in closing tag\")\n      continue\n\n      case S.TEXT_ENTITY:\n      case S.ATTRIB_VALUE_ENTITY_Q:\n      case S.ATTRIB_VALUE_ENTITY_U:\n        switch(parser.state) {\n          case S.TEXT_ENTITY:\n            var returnState = S.TEXT, buffer = \"textNode\"\n          break\n\n          case S.ATTRIB_VALUE_ENTITY_Q:\n            var returnState = S.ATTRIB_VALUE_QUOTED, buffer = \"attribValue\"\n          break\n\n          case S.ATTRIB_VALUE_ENTITY_U:\n            var returnState = S.ATTRIB_VALUE_UNQUOTED, buffer = \"attribValue\"\n          break\n        }\n        if (c === \";\") {\n          parser[buffer] += parseEntity(parser)\n          parser.entity = \"\"\n          parser.state = returnState\n        }\n        else if (is(entity, c)) parser.entity += c\n        else {\n          strictFail(parser, \"Invalid character entity\")\n          parser[buffer] += \"&\" + parser.entity + c\n          parser.entity = \"\"\n          parser.state = returnState\n        }\n      continue\n\n      default:\n        throw new Error(parser, \"Unknown state: \" + parser.state)\n    }\n  } // while\n  // cdata blocks can get very big under normal conditions. emit and move on.\n  // if (parser.state === S.CDATA && parser.cdata) {\n  //   emitNode(parser, \"oncdata\", parser.cdata)\n  //   parser.cdata = \"\"\n  // }\n  if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser)\n  return parser\n}\n\n})(typeof exports === \"undefined\" ? sax = {} : exports)\n","﻿//\r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n//\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n\r\n// Module dependencies.\r\nvar request = require('../request-wrapper');\r\nvar url = require('url');\r\nvar qs = require('querystring');\r\nvar util = require('util');\r\nvar xml2js = require('xml2js');\r\nvar events = require('events');\r\nvar _ = require('underscore');\r\nvar guid = require('uuid');\r\nvar os = require('os');\r\nvar extend = require('extend');\r\nvar Parser = require('json-edm-parser');\r\n\r\nvar Md5Wrapper = require('../md5-wrapper');\r\nvar azureutil = require('../util/util');\r\nvar validate = require('../util/validate');\r\nvar SR = require('../util/sr');\r\nvar WebResource = require('../http/webresource');\r\nvar BufferStream = require('../streams/bufferstream.js');\r\n\r\nvar ServiceSettings = require('./servicesettings');\r\nvar StorageServiceSettings = require('./storageservicesettings');\r\nvar Constants = require('../util/constants');\r\nvar StorageUtilities = require('../util/storageutilities');\r\nvar ServicePropertiesResult = require('../models/servicepropertiesresult');\r\nvar TableUtilities = require('../../services/table/tableutilities');\r\n\r\nvar SharedKey = require('../signing/sharedkey');\r\nvar SharedAccessSignature = require('../signing/sharedaccesssignature');\r\nvar TokenSigner = require('../signing/tokensigner');\r\n\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar QueryStringConstants = Constants.QueryStringConstants;\r\nvar HttpResponseCodes = Constants.HttpConstants.HttpResponseCodes;\r\nvar StorageServiceClientConstants = Constants.StorageServiceClientConstants;\r\nvar defaultRequestLocationMode = Constants.RequestLocationMode.PRIMARY_ONLY;\r\nvar RequestLocationMode = Constants.RequestLocationMode;\r\n\r\nvar Logger = require('../diagnostics/logger');\r\nvar errors = require('../errors/errors');\r\nvar ArgumentError = errors.ArgumentError;\r\nvar ArgumentNullError = errors.ArgumentNullError;\r\nvar TimeoutError = errors.TimeoutError;\r\nvar StorageError = errors.StorageError;\r\n\r\n/**\r\n* Creates a new StorageServiceClient object.\r\n*\r\n* @class\r\n* The StorageServiceClient class is the base class of all the service classes.\r\n* @constructor\r\n* @param {string} storageAccount           The storage account.\r\n* @param {string} storageAccessKey         The storage access key.\r\n* @param {object} host                     The host for the service.\r\n* @param {bool}   usePathStyleUri          Boolean value indicating wether to use path style uris.\r\n* @param {string} sas                      The Shared Access Signature string.\r\n* @param {TokenCredential} [token]         The {@link TokenCredential} object, which can be created with an OAuth access token string.\r\n*/\r\nfunction StorageServiceClient(storageAccount, storageAccessKey, host, usePathStyleUri, sas, token) {\r\n  StorageServiceClient['super_'].call(this);\r\n\r\n  if(storageAccount && storageAccessKey) {\r\n    // account and key\r\n    this.storageAccount = storageAccount;\r\n    this.storageAccessKey = storageAccessKey;\r\n    this.storageCredentials = new SharedKey(this.storageAccount, this.storageAccessKey, usePathStyleUri);\r\n  } else if (sas) {\r\n    // sas\r\n    this.sasToken = sas;\r\n    this.storageCredentials = new SharedAccessSignature(sas);\r\n  } else if (token) {\r\n    // access token\r\n    this.token = token;\r\n    this.storageCredentials = new TokenSigner(token);\r\n  } else {\r\n    // anonymous\r\n    this.anonymous = true;\r\n    this.storageCredentials = {\r\n      signRequest: function(webResource, callback){\r\n        // no op, anonymous access\r\n        callback(null);\r\n      }\r\n    };\r\n  }\r\n\r\n  if(host){\r\n    this.setHost(host);\r\n  }\r\n\r\n  this.apiVersion = HeaderConstants.TARGET_STORAGE_VERSION;\r\n  this.usePathStyleUri = usePathStyleUri;\r\n\r\n  this._initDefaultFilter();\r\n\r\n  /**\r\n   * The logger of the service. To change the log level of the services, set the `[logger.level]{@link Logger#level}`.\r\n   * @name StorageServiceClient#logger\r\n   * @type Logger\r\n   * */\r\n  this.logger = new Logger(Logger.LogLevels.INFO);\r\n\r\n  this._setDefaultProxy();\r\n\r\n  this.xml2jsSettings = StorageServiceClient._getDefaultXml2jsSettings();\r\n  this.defaultLocationMode = StorageUtilities.LocationMode.PRIMARY_ONLY;\r\n}\r\n\r\nutil.inherits(StorageServiceClient, events.EventEmitter);\r\n\r\n/**\r\n* Gets the default xml2js settings.\r\n* @ignore\r\n* @return {object} The default settings\r\n*/\r\nStorageServiceClient._getDefaultXml2jsSettings = function() {\r\n  var xml2jsSettings = _.clone(xml2js.defaults['0.2']);\r\n\r\n  // these determine what happens if the xml contains attributes\r\n  xml2jsSettings.attrkey = Constants.TableConstants.XML_METADATA_MARKER;\r\n  xml2jsSettings.charkey = Constants.TableConstants.XML_VALUE_MARKER;\r\n\r\n  // from xml2js guide: always put child nodes in an array if true; otherwise an array is created only if there is more than one.\r\n  xml2jsSettings.explicitArray = false;\r\n\r\n  return xml2jsSettings;\r\n};\r\n\r\n/**\r\n* Sets a host for the service.\r\n* @ignore\r\n* @param {string}     host                              The host for the service.\r\n*/\r\nStorageServiceClient.prototype.setHost = function (host) {\r\n  var parseHost = function(hostUri){\r\n    var parsedHost;\r\n    if(!azureutil.objectIsNull(hostUri)) {\r\n      if(hostUri.indexOf('http') === -1 && hostUri.indexOf('//') !== 0){\r\n        hostUri = '//' + hostUri;\r\n      }\r\n      parsedHost = url.parse(hostUri, false, true);\r\n\r\n      if(!parsedHost.protocol){\r\n        parsedHost.protocol = ServiceSettings.DEFAULT_PROTOCOL;\r\n      }\r\n\r\n      if (!parsedHost.port) {\r\n        if (parsedHost.protocol === Constants.HTTPS) {\r\n          parsedHost.port = Constants.DEFAULT_HTTPS_PORT;\r\n        } else {\r\n          parsedHost.port = Constants.DEFAULT_HTTP_PORT;\r\n        }\r\n      }\r\n\r\n      parsedHost = url.format({\r\n        protocol: parsedHost.protocol,\r\n        port: parsedHost.port,\r\n        hostname: parsedHost.hostname,\r\n        pathname: parsedHost.pathname\r\n      });\r\n    }\r\n\r\n    return parsedHost;\r\n  };\r\n\r\n  validate.isValidHost(host);\r\n\r\n  this.host = {\r\n    primaryHost: parseHost(host.primaryHost),\r\n    secondaryHost: parseHost(host.secondaryHost)\r\n  };\r\n};\r\n\r\n/**\r\n* Performs a REST service request through HTTP expecting an input stream.\r\n* @ignore\r\n*\r\n* @param {WebResource} webResource                        The webresource on which to perform the request.\r\n* @param {string}      outputData                         The outgoing request data as a raw string.\r\n* @param {object}      [options]                          The request options.\r\n* @param {int}         [options.timeoutIntervalInMs]      The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}         [options.clientRequestTimeoutInMs] The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {function}    callback                           The response callback function.\r\n*/\r\nStorageServiceClient.prototype.performRequest = function (webResource, outputData, options, callback) {\r\n    this._performRequest(webResource, { outputData: outputData }, options, callback);\r\n};\r\n\r\n/**\r\n* Performs a REST service request through HTTP expecting an input stream.\r\n* @ignore\r\n*\r\n* @param {WebResource} webResource                        The webresource on which to perform the request.\r\n* @param {Stream}      outputStream                       The outgoing request data as a stream.\r\n* @param {object}      [options]                          The request options.\r\n* @param {int}         [options.timeoutIntervalInMs]      The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}         [options.clientRequestTimeoutInMs] The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {function}    callback                           The response callback function.\r\n*/\r\nStorageServiceClient.prototype.performRequestOutputStream = function (webResource, outputStream, options, callback) {\r\n  this._performRequest(webResource, { outputStream: outputStream }, options, callback);\r\n};\r\n\r\n/**\r\n* Performs a REST service request through HTTP expecting an input stream.\r\n* @ignore\r\n*\r\n* @param {WebResource} webResource                        The webresource on which to perform the request.\r\n* @param {string}      outputData                         The outgoing request data as a raw string.\r\n* @param {Stream}      inputStream                        The ingoing response data as a stream.\r\n* @param {object}      [options]                          The request options.\r\n* @param {int}         [options.timeoutIntervalInMs]      The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}         [options.clientRequestTimeoutInMs] The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {function}    callback                           The response callback function.\r\n*/\r\nStorageServiceClient.prototype.performRequestInputStream = function (webResource, outputData, inputStream, options, callback) {\r\n  this._performRequest(webResource, { outputData: outputData, inputStream: inputStream }, options, callback);\r\n};\r\n\r\n/**\r\n* Performs a REST service request through HTTP.\r\n* @ignore\r\n*\r\n* @param {WebResource} webResource                        The webresource on which to perform the request.\r\n* @param {object}      body                               The request body.\r\n* @param {string}      [body.outputData]                  The outgoing request data as a raw string.\r\n* @param {Stream}      [body.outputStream]                The outgoing request data as a stream.\r\n* @param {Stream}      [body.inputStream]                 The ingoing response data as a stream.\r\n* @param {object}      [options]                          The request options.\r\n* @param {string}      [options.clientRequestId]          A string that represents the client request ID with a 1KB character limit.\r\n* @param {int}         [options.timeoutIntervalInMs]      The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}         [options.clientRequestTimeoutInMs] The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {function}    callback                           The response callback function.\r\n*/\r\nStorageServiceClient.prototype._performRequest = function (webResource, body, options, callback) {\r\n  var self = this;\r\n\r\n  // Sets a requestId on the webResource\r\n  if(!options.clientRequestId) {\r\n    options.clientRequestId = guid.v1();\r\n  }\r\n\r\n  webResource.withHeader(HeaderConstants.CLIENT_REQUEST_ID, options.clientRequestId);\r\n\r\n  // Sets the user-agent string if the process is not started by the browser\r\n  if(!process.browser) {\r\n    var userAgentComment = util.format('(NODE-VERSION %s; %s %s)', process.version, os.type(), os.release());\r\n    webResource.withHeader(HeaderConstants.USER_AGENT, Constants.USER_AGENT_PRODUCT_NAME + '/' + Constants.USER_AGENT_PRODUCT_VERSION + ' ' + userAgentComment);\r\n  }\r\n\r\n  // Initialize the location that the request is going to be sent to.\r\n  if(azureutil.objectIsNull(options.locationMode)) {\r\n    options.locationMode = this.defaultLocationMode;\r\n  }\r\n\r\n  // Initialize the location that the request can be sent to.\r\n  if(azureutil.objectIsNull(options.requestLocationMode)) {\r\n    options.requestLocationMode = defaultRequestLocationMode;\r\n  }\r\n\r\n  // Initialize whether nagling is used or not.\r\n  if(azureutil.objectIsNull(options.useNagleAlgorithm)) {\r\n    options.useNagleAlgorithm = this.useNagleAlgorithm;\r\n  }\r\n\r\n  this._initializeLocation(options);\r\n\r\n  // Initialize the operationExpiryTime\r\n  this._setOperationExpiryTime(options);\r\n\r\n  // If the output stream already got sent to server and got error back,\r\n  // we should NOT retry within the SDK as the stream data is not valid anymore if we retry directly.\r\n  // And it's very hard for SDK to re-wind the stream.\r\n  //\r\n  // If users want to retry on this kind of error, they can implement their own logic to parse the response and\r\n  // determine if they need to re-prepare a stream and call our SDK API to retry.\r\n  //\r\n  // Currently for blobs/files with size greater than 32MB (DEFAULT_SINGLE_BLOB_PUT_THRESHOLD_IN_BYTES),\r\n  // we'll send the steam by chunk buffers which doesn't have this issue.\r\n  var outputStreamSent = false;\r\n\r\n  var operation = function (options, next) {\r\n    self._validateLocation(options);\r\n    var currentLocation = options.currentLocation;\r\n    self._buildRequestOptions(webResource, body, options, function (err, finalRequestOptions) {\r\n      if (err) {\r\n        callback({ error: err, response: null }, function (finalRequestOptions, finalCallback) {\r\n          finalCallback(finalRequestOptions);\r\n        });\r\n      } else {\r\n        self.logger.log(Logger.LogLevels.DEBUG, 'FINAL REQUEST OPTIONS:\\n' + util.inspect(finalRequestOptions));\r\n\r\n        if(self._maximumExecutionTimeExceeded(Date.now(), options.operationExpiryTime)) {\r\n          callback({ error: new TimeoutError(SR.MAXIMUM_EXECUTION_TIMEOUT_EXCEPTION), response: null }, function (finalRequestOptions, finalCallback) {\r\n            finalCallback(finalRequestOptions);\r\n          });\r\n        } else {\r\n          var processResponseCallback = function (error, response) {\r\n            var responseObject;\r\n\r\n            if (error) {\r\n              responseObject = { error: error, response: null };\r\n            } else {\r\n              responseObject = self._processResponse(webResource, response, options);\r\n              responseObject.contentMD5 = response.contentMD5;\r\n              responseObject.length = response.length;\r\n            }\r\n\r\n            responseObject.operationEndTime = new Date();\r\n            // Required for listing operations to make sure successive operations go to the same location.\r\n            responseObject.targetLocation = currentLocation;\r\n            responseObject.outputStreamSent = outputStreamSent;\r\n\r\n            callback(responseObject, next);\r\n          };\r\n\r\n          var endResponse;\r\n          var buildRequest = function (headersOnly, inputStream) {\r\n            // Build request (if body was set before, request will process immediately, if not it'll wait for the piping to happen\r\n            var requestStream;\r\n\r\n            var requestWithDefaults;\r\n\r\n            if(self.proxy) {\r\n              if(requestWithDefaults === undefined) {\r\n                requestWithDefaults = request.defaults({'proxy':self.proxy});\r\n              }\r\n            } else {\r\n              requestWithDefaults = request;\r\n            }\r\n\r\n            if (headersOnly) {\r\n              requestStream = requestWithDefaults(finalRequestOptions);\r\n\r\n              requestStream.on('error', processResponseCallback);\r\n              requestStream.on('response', function (response) {\r\n                var isValid = WebResource.validResponse(response.statusCode);\r\n                if (!isValid) {\r\n                    // When getting invalid response, try to get the error message for future steps to extract the detailed error information\r\n                    var contentLength = parseInt(response.headers['content-length']);\r\n                    var errorMessageBuffer;\r\n                    var index = 0;\r\n                    if (contentLength !== undefined) {\r\n                      errorMessageBuffer = new Buffer(contentLength);\r\n                    }\r\n\r\n                    requestStream.on('data', function (data) {\r\n                      if (contentLength !== undefined) {\r\n                        data.copy(errorMessageBuffer, index);\r\n                        index += data.length;\r\n                      } else {\r\n                        if (!errorMessageBuffer) {\r\n                          errorMessageBuffer = data;\r\n                        } else {\r\n                          errorMessageBuffer = Buffer.concat([errorMessageBuffer, data]);\r\n                        }\r\n                      }\r\n                    });\r\n                    requestStream.on('end', function () {\r\n                      if (errorMessageBuffer) {\r\n                        // Strip the UTF8 BOM following the same ways as 'request' module\r\n                        if (errorMessageBuffer.length > 3 &&\r\n                          errorMessageBuffer[0] === 239 &&\r\n                          errorMessageBuffer[1] === 187 &&\r\n                          errorMessageBuffer[2] === 191) {\r\n                          response.body = errorMessageBuffer.toString('utf8', 3);\r\n                        } else {\r\n                          response.body = errorMessageBuffer.toString('utf8');\r\n                        }\r\n                      }\r\n                      processResponseCallback(null, response);\r\n                    });\r\n                } else {\r\n                  // Only pipe to the destination stream when we get a valid response from service\r\n                  // Error message should NOT be piped to the destination stream\r\n                  if (inputStream) {\r\n                    requestStream.pipe(inputStream);\r\n                  }\r\n\r\n                  var responseLength = 0;\r\n                  var internalHash = new Md5Wrapper().createMd5Hash();\r\n                  response.on('data', function(data) {\r\n                    responseLength += data.length;\r\n                    internalHash.update(data);\r\n                  });\r\n\r\n                  response.on('end', function () {\r\n                    // Calculate and set MD5 here\r\n                    if(azureutil.objectIsNull(options.disableContentMD5Validation) || options.disableContentMD5Validation === false) {\r\n                      response.contentMD5 = internalHash.digest('base64');\r\n                    }\r\n\r\n                    response.length = responseLength;\r\n                    endResponse = response;\r\n                  });\r\n                }\r\n              });\r\n            } else {\r\n              requestStream = requestWithDefaults(finalRequestOptions, processResponseCallback);\r\n            }\r\n\r\n            //If useNagleAlgorithm is not set or the value is set and is false, setNoDelay is set to true.\r\n            if (azureutil.objectIsNull(options.useNagleAlgorithm) || options.useNagleAlgorithm === false) {\r\n              requestStream.on('request', function(httpRequest) {\r\n                httpRequest.setNoDelay(true);\r\n              });\r\n            }\r\n\r\n            // Workaround to avoid request from potentially setting unwanted (rejected) headers by the service\r\n            var oldEnd = requestStream.end;\r\n            requestStream.end = function () {\r\n              if (finalRequestOptions.headers['content-length']) {\r\n                requestStream.headers['content-length'] = finalRequestOptions.headers['content-length'];\r\n              } else if (requestStream.headers['content-length']) {\r\n                delete requestStream.headers['content-length'];\r\n              }\r\n\r\n              oldEnd.call(requestStream);\r\n            };\r\n\r\n            // Bubble events up -- This is when the request is going to be made.\r\n            requestStream.on('response', function (response) {\r\n              self.emit('receivedResponseEvent', response);\r\n            });\r\n\r\n            return requestStream;\r\n          };\r\n\r\n          if (body && body.outputData) {\r\n            if (!azureutil.isBrowser() && Buffer.isBuffer(body.outputData)) {\r\n              // Request module will take 200MB additional memory when we pass a 100MB buffer as body\r\n              // Transfer buffer to stream will highly reduce the memory used by request module\r\n              finalRequestOptions.body = new BufferStream(body.outputData);\r\n            } else {\r\n              finalRequestOptions.body = body.outputData;\r\n            }\r\n          }\r\n\r\n          // Pipe any input / output streams\r\n          if (body && body.inputStream) {\r\n            body.inputStream.on('close', function () {\r\n              if (endResponse) {\r\n                processResponseCallback(null, endResponse);\r\n                endResponse = null;\r\n              }\r\n            });\r\n            body.inputStream.on('end', function () {\r\n              if (endResponse) {\r\n                processResponseCallback(null, endResponse);\r\n                endResponse = null;\r\n              }\r\n            });\r\n            body.inputStream.on('finish', function () {\r\n              if (endResponse) {\r\n                processResponseCallback(null, endResponse);\r\n                endResponse = null;\r\n              }\r\n            });\r\n            buildRequest(true, body.inputStream);\r\n          } else if (body && body.outputStream) {\r\n            var sendUnchunked = function () {\r\n              var size = finalRequestOptions.headers['content-length'] ?\r\n                finalRequestOptions.headers['content-length'] :\r\n                Constants.BlobConstants.MAX_SINGLE_UPLOAD_BLOB_SIZE_IN_BYTES;\r\n\r\n              var concatBuf = new Buffer(size);\r\n              var index = 0;\r\n\r\n              body.outputStream.on('data', function (d) {\r\n                outputStreamSent = true;\r\n                if(self._maximumExecutionTimeExceeded(Date.now(), options.operationExpiryTime)) {\r\n                  processResponseCallback(new TimeoutError(SR.MAXIMUM_EXECUTION_TIMEOUT_EXCEPTION));\r\n                } else {\r\n                  d.copy(concatBuf, index);\r\n                  index += d.length;\r\n                }\r\n              }).on('end', function () {\r\n                var requestStream = buildRequest();\r\n                requestStream.write(concatBuf);\r\n                requestStream.end();\r\n              });\r\n              if (azureutil.isStreamPaused(body.outputStream)) {\r\n                body.outputStream.resume();\r\n              }\r\n            };\r\n\r\n            var sendStream = function () {\r\n              // NOTE: workaround for an unexpected EPIPE exception when piping streams larger than 29 MB\r\n              if (!azureutil.objectIsNull(finalRequestOptions.headers['content-length']) && finalRequestOptions.headers['content-length'] < 29 * 1024 * 1024) {\r\n                body.outputStream.pipe(buildRequest());\r\n                outputStreamSent = true;\r\n\r\n                if (azureutil.isStreamPaused(body.outputStream)) {\r\n                  body.outputStream.resume();\r\n                }\r\n              } else {\r\n                sendUnchunked();\r\n              }\r\n            };\r\n\r\n            if (!body.outputStream.readable) {\r\n              // if the content length is zero, build the request and don't send a body\r\n              if (finalRequestOptions.headers['content-length'] === 0) {\r\n                buildRequest();\r\n              } else {\r\n                // otherwise, wait until we know the readable stream is actually valid before piping\r\n                body.outputStream.on('open', function () {\r\n                  sendStream();\r\n                });\r\n              }\r\n            } else {\r\n              sendStream();\r\n            }\r\n\r\n            // This catches any errors that happen while creating the readable stream (usually invalid names)\r\n            body.outputStream.on('error', function (error) {\r\n              processResponseCallback(error);\r\n            });\r\n          } else {\r\n            buildRequest();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  // The filter will do what it needs to the requestOptions and will provide a\r\n  // function to be handled after the reply\r\n  self.filter(options, function (postFiltersRequestOptions, nextPostCallback) {\r\n    if(self._maximumExecutionTimeExceeded(Date.now() + postFiltersRequestOptions.retryInterval, postFiltersRequestOptions.operationExpiryTime)) {\r\n      callback({ error: new TimeoutError(SR.MAXIMUM_EXECUTION_TIMEOUT_EXCEPTION), response: null}, function (postFiltersRequestOptions, finalCallback) {\r\n        finalCallback(postFiltersRequestOptions);\r\n      });\r\n    } else {\r\n      // If there is a filter, flow is:\r\n      // filter -> operation -> process response\r\n      if(postFiltersRequestOptions.retryContext) {\r\n        var func = function() {\r\n          operation(postFiltersRequestOptions, nextPostCallback);\r\n        };\r\n\r\n        // Sleep for retryInterval before making the request\r\n        setTimeout(func, postFiltersRequestOptions.retryInterval);\r\n      } else {\r\n        // No retry policy filter specified\r\n        operation(postFiltersRequestOptions, nextPostCallback);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n\r\n/**\r\n* Builds the request options to be passed to the http.request method.\r\n* @ignore\r\n* @param {WebResource} webResource The webresource where to build the options from.\r\n* @param {object}      options     The request options.\r\n* @param {function(error, requestOptions)}  callback  The callback function.\r\n*/\r\nStorageServiceClient.prototype._buildRequestOptions = function (webResource, body, options, callback) {\r\n  webResource.withHeader(HeaderConstants.STORAGE_VERSION, this.apiVersion);\r\n  webResource.withHeader(HeaderConstants.MS_DATE, new Date().toUTCString());\r\n  if (!webResource.headers[HeaderConstants.ACCEPT]) {\r\n    webResource.withHeader(HeaderConstants.ACCEPT, 'application/atom+xml,application/xml');\r\n  }\r\n  webResource.withHeader(HeaderConstants.ACCEPT_CHARSET, 'UTF-8');\r\n\r\n  // Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE' after Azure Storage 'Authorization header' calculation,\r\n  // which may result in a 403 authorization error. So add timestamp to GET/HEAD request URLs thus avoid the browser cache.\r\n  if (azureutil.isBrowser() && (\r\n    webResource.method === Constants.HttpConstants.HttpVerbs.GET ||\r\n    webResource.method === Constants.HttpConstants.HttpVerbs.HEAD)) {\r\n    webResource.withQueryOption(HeaderConstants.FORCE_NO_CACHE_IN_BROWSER, new Date().getTime());\r\n  }\r\n\r\n  if(azureutil.objectIsNull(options.timeoutIntervalInMs)) {\r\n    options.timeoutIntervalInMs = this.defaultTimeoutIntervalInMs;\r\n  }\r\n\r\n  if(azureutil.objectIsNull(options.clientRequestTimeoutInMs)) {\r\n    options.clientRequestTimeoutInMs = this.defaultClientRequestTimeoutInMs;\r\n  }\r\n\r\n  if(!azureutil.objectIsNull(options.timeoutIntervalInMs) && options.timeoutIntervalInMs > 0) {\r\n    webResource.withQueryOption(QueryStringConstants.TIMEOUT, Math.ceil(options.timeoutIntervalInMs / 1000));\r\n  }\r\n\r\n  if(options.accessConditions) {\r\n    webResource.withHeader(HeaderConstants.IF_MATCH, options.accessConditions.EtagMatch);\r\n    webResource.withHeader(HeaderConstants.IF_MODIFIED_SINCE, options.accessConditions.DateModifedSince);\r\n    webResource.withHeader(HeaderConstants.IF_NONE_MATCH, options.accessConditions.EtagNonMatch);\r\n    webResource.withHeader(HeaderConstants.IF_UNMODIFIED_SINCE, options.accessConditions.DateUnModifiedSince);\r\n    webResource.withHeader(HeaderConstants.SEQUENCE_NUMBER_EQUAL, options.accessConditions.SequenceNumberEqual);\r\n    webResource.withHeader(HeaderConstants.SEQUENCE_NUMBER_LESS_THAN, options.accessConditions.SequenceNumberLessThan);\r\n    webResource.withHeader(HeaderConstants.SEQUENCE_NUMBER_LESS_THAN_OR_EQUAL, options.accessConditions.SequenceNumberLessThanOrEqual);\r\n    webResource.withHeader(HeaderConstants.BLOB_CONDITION_MAX_SIZE, options.accessConditions.MaxBlobSize);\r\n    webResource.withHeader(HeaderConstants.BLOB_CONDITION_APPEND_POSITION, options.accessConditions.MaxAppendPosition);\r\n  }\r\n\r\n  if(options.sourceAccessConditions) {\r\n    webResource.withHeader(HeaderConstants.SOURCE_IF_MATCH, options.sourceAccessConditions.EtagMatch);\r\n    webResource.withHeader(HeaderConstants.SOURCE_IF_MODIFIED_SINCE, options.sourceAccessConditions.DateModifedSince);\r\n    webResource.withHeader(HeaderConstants.SOURCE_IF_NONE_MATCH, options.sourceAccessConditions.EtagNonMatch);\r\n    webResource.withHeader(HeaderConstants.SOURCE_IF_UNMODIFIED_SINCE, options.sourceAccessConditions.DateUnModifiedSince);\r\n  }\r\n\r\n  if (!webResource.headers || webResource.headers[HeaderConstants.CONTENT_TYPE] === undefined) {\r\n    // work around to add an empty content type header to prevent the request module from magically adding a content type.\r\n    webResource.headers[HeaderConstants.CONTENT_TYPE] = '';\r\n  } else if (webResource.headers && webResource.headers[HeaderConstants.CONTENT_TYPE] === null) {\r\n    delete webResource.headers[HeaderConstants.CONTENT_TYPE];\r\n  }\r\n\r\n  if (!webResource.headers || webResource.headers[HeaderConstants.CONTENT_LENGTH] === undefined) {\r\n    if (body && body.outputData) {\r\n      webResource.withHeader(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(body.outputData, 'UTF8'));\r\n    } else if (webResource.headers[HeaderConstants.CONTENT_LENGTH] === undefined) {\r\n      webResource.withHeader(HeaderConstants.CONTENT_LENGTH, 0);\r\n    }\r\n  } else if (webResource.headers && webResource.headers[HeaderConstants.CONTENT_LENGTH] === null) {\r\n    delete webResource.headers[HeaderConstants.CONTENT_LENGTH];\r\n  }\r\n\r\n  var enableGlobalHttpAgent = this.enableGlobalHttpAgent;\r\n\r\n  // Sets the request url in the web resource.\r\n  this._setRequestUrl(webResource, options);\r\n\r\n  this.emit('sendingRequestEvent', webResource);\r\n\r\n  // Now that the web request is finalized, sign it\r\n  this.storageCredentials.signRequest(webResource, function (error) {\r\n    var requestOptions = null;\r\n\r\n    if (!error) {\r\n      var targetUrl = webResource.uri;\r\n\r\n      requestOptions = {\r\n        uri: url.format(targetUrl),\r\n        method: webResource.method,\r\n        headers: webResource.headers,\r\n        mode: 'disable-fetch'\r\n      };\r\n\r\n      if (options) {\r\n        //set encoding of response data. If set to null, the body is returned as a Buffer\r\n        requestOptions.encoding = options.responseEncoding;\r\n      }\r\n\r\n      if (options && options.clientRequestTimeoutInMs) {\r\n        requestOptions.timeout = options.clientRequestTimeoutInMs;\r\n      } else {\r\n        requestOptions.timeout = Constants.DEFAULT_CLIENT_REQUEST_TIMEOUT_IN_MS; // 2 minutes\r\n      }\r\n\r\n      // If global HTTP agent is not enabled, use forever agent.\r\n      if (enableGlobalHttpAgent !== true) {\r\n        requestOptions.forever = true;\r\n      }\r\n    }\r\n\r\n    callback(error, requestOptions);\r\n  });\r\n};\r\n\r\n/**\r\n* Process the response.\r\n* @ignore\r\n*\r\n* @param {WebResource} webResource                The web resource that made the request.\r\n* @param {Response}    response                   The response object.\r\n* @param {Options}     options                    The response parsing options.\r\n* @param {String}      options.payloadFormat      The payload format.\r\n* @return The normalized responseObject.\r\n*/\r\nStorageServiceClient.prototype._processResponse = function (webResource, response, options) {\r\n  var self = this;\r\n\r\n  function convertRawHeadersToHeaders(rawHeaders) {\r\n    var headers = {};\r\n    if(!rawHeaders) {\r\n      return undefined;\r\n    }\r\n\r\n    for(var i = 0; i < rawHeaders.length; i++) {\r\n      var headerName;\r\n      if (rawHeaders[i].indexOf(HeaderConstants.PREFIX_FOR_STORAGE_METADATA) === 0) {\r\n        headerName = rawHeaders[i];\r\n      } else {\r\n        headerName = rawHeaders[i].toLowerCase();\r\n      }\r\n      headers[headerName] = rawHeaders[++i];\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  var validResponse = WebResource.validResponse(response.statusCode);\r\n  var rsp = StorageServiceClient._buildResponse(validResponse, response.body, convertRawHeadersToHeaders(response.rawHeaders) || response.headers, response.statusCode, response.md5);\r\n  var responseObject;\r\n\r\n  if (validResponse && webResource.rawResponse) {\r\n    responseObject = { error: null, response: rsp };\r\n  } else {\r\n    // attempt to parse the response body, errors will be returned in rsp.error without modifying the body\r\n    rsp = StorageServiceClient._parseResponse(rsp, self.xml2jsSettings, options);\r\n\r\n    if (validResponse && !rsp.error) {\r\n        responseObject = { error: null, response: rsp };\r\n    } else {\r\n      rsp.isSuccessful = false;\r\n\r\n      if (response.statusCode < 400 || response.statusCode >= 500) {\r\n        this.logger.log(Logger.LogLevels.DEBUG,\r\n            'ERROR code = ' + response.statusCode + ' :\\n' + util.inspect(rsp.body));\r\n      }\r\n\r\n      // responseObject.error should contain normalized parser errors if they occured in _parseResponse\r\n      // responseObject.response.body should contain the raw response body in that case\r\n      var errorBody = rsp.body;\r\n      if(rsp.error) {\r\n        errorBody = rsp.error;\r\n        delete rsp.error;\r\n      }\r\n\r\n      if (!errorBody) {\r\n        var code = Object.keys(HttpResponseCodes).filter(function (name) {\r\n          if (HttpResponseCodes[name] === rsp.statusCode) {\r\n            return name;\r\n          }\r\n        });\r\n\r\n        errorBody = { error: { code: code[0] } };\r\n      }\r\n\r\n      var normalizedError = StorageServiceClient._normalizeError(errorBody, response);\r\n      responseObject = { error: normalizedError, response: rsp };\r\n    }\r\n  }\r\n\r\n  this.logger.log(Logger.LogLevels.DEBUG, 'RESPONSE:\\n' + util.inspect(responseObject));\r\n\r\n  return responseObject;\r\n};\r\n\r\n/**\r\n* Associate a filtering operation with this StorageServiceClient. Filtering operations\r\n* can include logging, automatically retrying, etc. Filter operations are objects\r\n* that implement a method with the signature:\r\n*\r\n*     \"function handle (requestOptions, next)\".\r\n*\r\n* After doing its preprocessing on the request options, the method needs to call\r\n* \"next\" passing a callback with the following signature:\r\n* signature:\r\n*\r\n*     \"function (returnObject, finalCallback, next)\"\r\n*\r\n* In this callback, and after processing the returnObject (the response from the\r\n* request to the server), the callback needs to either invoke next if it exists to\r\n* continue processing other filters or simply invoke finalCallback otherwise to end\r\n* up the service invocation.\r\n*\r\n* @param {Object} filter The new filter object.\r\n* @return {StorageServiceClient} A new service client with the filter applied.\r\n*/\r\nStorageServiceClient.prototype.withFilter = function (newFilter) {\r\n    // Create a new object with the same members as the current service\r\n    var derived = _.clone(this);\r\n\r\n    // If the current service has a filter, merge it with the new filter\r\n    // (allowing us to effectively pipeline a series of filters)\r\n    var parentFilter = this.filter;\r\n    var mergedFilter = newFilter;\r\n    if (parentFilter !== undefined) {\r\n      // The parentFilterNext is either the operation or the nextPipe function generated on a previous merge\r\n      // Ordering is [f3 pre] -> [f2 pre] -> [f1 pre] -> operation -> [f1 post] -> [f2 post] -> [f3 post]\r\n      mergedFilter = function (originalRequestOptions, parentFilterNext) {\r\n        newFilter.handle(originalRequestOptions, function (postRequestOptions, newFilterCallback) {\r\n          // handle parent filter pre and get Parent filter post\r\n          var next = function (postPostRequestOptions, parentFilterCallback) {\r\n            // The parentFilterNext is the filter next to the merged filter.\r\n            // For 2 filters, that'd be the actual operation.\r\n            parentFilterNext(postPostRequestOptions, function (responseObject, responseCallback, finalCallback) {\r\n              parentFilterCallback(responseObject, finalCallback, function (postResponseObject) {\r\n                newFilterCallback(postResponseObject, responseCallback, finalCallback);\r\n              });\r\n            });\r\n          };\r\n\r\n          parentFilter(postRequestOptions, next);\r\n        });\r\n      };\r\n    }\r\n\r\n    // Store the filter so it can be applied in performRequest\r\n    derived.filter = mergedFilter;\r\n    return derived;\r\n  };\r\n\r\n/*\r\n* Builds a response object with normalized key names.\r\n* @ignore\r\n*\r\n* @param {Bool}     isSuccessful    Boolean value indicating if the request was successful\r\n* @param {Object}   body            The response body.\r\n* @param {Object}   headers         The response headers.\r\n* @param {int}      statusCode      The response status code.\r\n* @param {string}   md5             The response's content md5 hash.\r\n* @return {Object} A response object.\r\n*/\r\nStorageServiceClient._buildResponse = function (isSuccessful, body, headers, statusCode, md5) {\r\n  var response = {\r\n    isSuccessful: isSuccessful,\r\n    statusCode: statusCode,\r\n    body: body,\r\n    headers: headers,\r\n    md5: md5\r\n  };\r\n\r\n  if (!azureutil.objectIsNull(headers)) {\r\n    if (headers[HeaderConstants.REQUEST_SERVER_ENCRYPTED] !== undefined) {\r\n      response.requestServerEncrypted = (headers[HeaderConstants.REQUEST_SERVER_ENCRYPTED] === 'true');\r\n    }\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\n/**\r\n* Parses a server response body from XML or JSON into a JS object.\r\n* This is done using the xml2js library.\r\n* @ignore\r\n*\r\n* @param {object}     response                   The response object with a property \"body\" with a XML or JSON string content.\r\n* @param {object}     xml2jsSettings             The XML to json settings.\r\n* @param {Options}    options                    The response parsing options.\r\n* @param {String}     options.payloadFormat      The payload format.\r\n* @return {object} The same response object with the body part as a JS object instead of a XML or JSON string.\r\n*/\r\nStorageServiceClient._parseResponse = function (response, xml2jsSettings, options) {\r\n  function parseXml(body) {\r\n    var parsed;\r\n    var parser = new xml2js.Parser(xml2jsSettings);\r\n    parser.parseString(azureutil.removeBOM(body.toString()), function (err, parsedBody) {\r\n      if (err) {\r\n        var xmlError = new SyntaxError('EXMLFORMAT');\r\n        xmlError.innerError = err;\r\n        throw xmlError;\r\n      } else { parsed = parsedBody; }\r\n    });\r\n\r\n    return parsed;\r\n  }\r\n\r\n  if (response.body && Buffer.byteLength(response.body.toString()) > 0) {\r\n    var contentType = '';\r\n    if (response.headers && response.headers['content-type']) {\r\n      contentType = response.headers['content-type'].toLowerCase();\r\n    }\r\n\r\n    try {\r\n      if (contentType.indexOf('application/json') !== -1) {\r\n        if (options && options.payloadFormat && options.payloadFormat !== TableUtilities.PayloadFormat.NO_METADATA) {\r\n          var parser = new Parser();\r\n          parser.onValue = function (value) {\r\n            response.body = value;\r\n          };\r\n          parser.write(response.body);\r\n        } else {\r\n          response.body = JSON.parse(response.body);\r\n        }\r\n      } else if (contentType.indexOf('application/xml') !== -1 || contentType.indexOf('application/atom+xml') !== -1) {\r\n        response.body = parseXml(response.body);\r\n      } else if (contentType.indexOf('text/html') !== -1) {\r\n        response.body = response.body;\r\n      } else {\r\n        response.body = parseXml(response.body);\r\n        // throw new SyntaxError(SR.CONTENT_TYPE_MISSING, null);\r\n      }\r\n    } catch (e) {\r\n      response.error = e;\r\n    }\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\n/**\r\n* Gets the storage settings.\r\n*\r\n* @param {string} [storageAccountOrConnectionString]  The storage account or the connection string.\r\n* @param {string} [storageAccessKey]                  The storage access key.\r\n* @param {string} [host]                              The host address.\r\n* @param {object} [sas]                               The Shared Access Signature string.\r\n* @param {TokenCredential} [token]                    The {@link TokenCredential} object.\r\n*\r\n* @return {StorageServiceSettings}\r\n*/\r\nStorageServiceClient.getStorageSettings = function (storageAccountOrConnectionString, storageAccessKey, host, sas, endpointSuffix, token) {\r\n  var storageServiceSettings;\r\n  if (storageAccountOrConnectionString && !storageAccessKey && !sas) {\r\n    // If storageAccountOrConnectionString was passed and no accessKey was passed, assume connection string\r\n    storageServiceSettings = StorageServiceSettings.createFromConnectionString(storageAccountOrConnectionString);\r\n  } else if ((storageAccountOrConnectionString && storageAccessKey) || sas || token || host) {\r\n    // Account and key or credentials or anonymous\r\n    storageServiceSettings = StorageServiceSettings.createExplicitly(storageAccountOrConnectionString, storageAccessKey, host, sas, endpointSuffix, token);\r\n  } else {\r\n    // Use environment variables\r\n    storageServiceSettings = StorageServiceSettings.createFromEnvironment();\r\n  }\r\n\r\n  return storageServiceSettings;\r\n};\r\n\r\n/**\r\n* Sets the webResource's requestUrl based on the service client settings.\r\n* @ignore\r\n*\r\n* @param {WebResource} webResource The web resource where to set the request url.\r\n*/\r\nStorageServiceClient.prototype._setRequestUrl = function (webResource, options) {\r\n  // Normalize the path\r\n  // Backup the original path of the webResource to make sure it works fine even this function get executed multiple times - like RetryFilter\r\n  webResource.originalPath = webResource.originalPath || webResource.path;\r\n  webResource.path = this._getPath(webResource.originalPath);\r\n\r\n  if(!this.host){\r\n    throw new ArgumentNullError('this.host', SR.STORAGE_HOST_LOCATION_REQUIRED);\r\n  }\r\n\r\n  var host = this.host.primaryHost;\r\n\r\n  if(!azureutil.objectIsNull(options) && options.currentLocation === Constants.StorageLocation.SECONDARY) {\r\n    host = this.host.secondaryHost;\r\n  }\r\n\r\n  if(host && host.lastIndexOf('/') !== (host.length - 1)){\r\n    host = host + '/';\r\n  }\r\n\r\n  var fullPath = url.format({pathname: webResource.path, query: webResource.queryString});\r\n  webResource.uri = url.resolve(host, fullPath);\r\n  webResource.path = url.parse(webResource.uri).pathname;\r\n};\r\n\r\n/**\r\n* Retrieves the normalized path to be used in a request.\r\n* It also removes any leading \"/\" of the path in case\r\n* it's there before.\r\n* @ignore\r\n* @param {string} path The path to be normalized.\r\n* @return {string} The normalized path.\r\n*/\r\nStorageServiceClient.prototype._getPath = function (path) {\r\n  if (path === null || path === undefined) {\r\n    path = '';\r\n  } else if (path.indexOf('/') === 0) {\r\n    path = path.substring(1);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\n/**\r\n * Get the url of a given path\r\n */\r\nStorageServiceClient.prototype._getUrl = function (path, sasToken, primary) {\r\n  var host;\r\n  if (!azureutil.objectIsNull(primary) && primary === false) {\r\n    host = this.host.secondaryHost;\r\n  } else {\r\n    host = this.host.primaryHost;\r\n  }\r\n\r\n  host = azureutil.trimPortFromUri(host);\r\n  if(host && host.lastIndexOf('/') !== (host.length - 1)){\r\n    host = host + '/';\r\n  }\r\n\r\n  var query = qs.parse(sasToken);\r\n  var fullPath = url.format({ pathname: this._getPath(path), query: query });\r\n  return url.resolve(host, fullPath);\r\n};\r\n\r\n/**\r\n* Initializes the default filter.\r\n* This filter is responsible for chaining the pre filters request into the operation and, after processing the response,\r\n* pass it to the post processing filters. This method should only be invoked by the StorageServiceClient constructor.\r\n* @ignore\r\n*\r\n*/\r\nStorageServiceClient.prototype._initDefaultFilter = function () {\r\n  this.filter = function (requestOptions, nextPreCallback) {\r\n    if (nextPreCallback) {\r\n      // Handle the next pre callback and pass the function to be handled as post call back.\r\n      nextPreCallback(requestOptions, function (returnObject, finalCallback, nextPostCallback) {\r\n        if (nextPostCallback) {\r\n          nextPostCallback(returnObject);\r\n        } else if (finalCallback) {\r\n          finalCallback(returnObject);\r\n        }\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n* Retrieves the metadata headers from the response headers.\r\n* @ignore\r\n*\r\n* @param {object} headers The metadata headers.\r\n* @return {object} An object with the metadata headers (without the \"x-ms-\" prefix).\r\n*/\r\nStorageServiceClient.prototype.parseMetadataHeaders = function (headers) {\r\n  var metadata = {};\r\n\r\n  if (!headers) {\r\n    return metadata;\r\n  }\r\n\r\n  for (var header in headers) {\r\n    if (header.indexOf(HeaderConstants.PREFIX_FOR_STORAGE_METADATA) === 0) {\r\n      var key = header.substr(HeaderConstants.PREFIX_FOR_STORAGE_METADATA.length, header.length - HeaderConstants.PREFIX_FOR_STORAGE_METADATA.length);\r\n      metadata[key] = headers[header];\r\n    }\r\n  }\r\n\r\n  return metadata;\r\n};\r\n\r\n/**\r\n* Gets the properties of a storage account’s service, including Azure Storage Analytics.\r\n* @ignore\r\n*\r\n* @this {StorageServiceClient}\r\n* @param {object}       [options]                               The request options.\r\n* @param {LocationMode} [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to.\r\n*                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}          [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}          [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}          [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {bool}         [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                               The default value is false.\r\n* @param {errorOrResult}  callback                              `error` will contain information if an error occurs; otherwise, `result` will contain the properties\r\n*                                                               and `response` will contain information related to this operation.\r\n*/\r\nStorageServiceClient.prototype.getAccountServiceProperties = function (optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getServiceProperties', function (v) {\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var webResource = WebResource.get()\r\n    .withQueryOption(QueryStringConstants.COMP, 'properties')\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'service');\r\n\r\n  options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.servicePropertiesResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.servicePropertiesResult = ServicePropertiesResult.parse(responseObject.response.body.StorageServiceProperties);\r\n    }\r\n\r\n    // function to be called after all filters\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.servicePropertiesResult, returnObject.response);\r\n    };\r\n\r\n    // call the first filter\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Sets the properties of a storage account’s service, including Azure Storage Analytics.\r\n* You can also use this operation to set the default request version for all incoming requests that do not have a version specified.\r\n*\r\n* @this {StorageServiceClient}\r\n* @param {object}             serviceProperties                        The service properties.\r\n* @param {object}             [options]                                The request options.\r\n* @param {LocationMode}       [options.locationMode]                   Specifies the location mode used to decide which location the request should be sent to.\r\n*                                                                      Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]            The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]       The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]       The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                      The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                      execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {bool}               [options.useNagleAlgorithm]              Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                      The default value is false.\r\n* @param {errorOrResponse}    callback                                 `error` will contain information\r\n*                                                                      if an error occurs; otherwise, `response`\r\n*                                                                      will contain information related to this operation.\r\n*/\r\nStorageServiceClient.prototype.setAccountServiceProperties = function (serviceProperties, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setServiceProperties', function (v) {\r\n    v.object(serviceProperties, 'serviceProperties');\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var servicePropertiesXml = ServicePropertiesResult.serialize(serviceProperties);\r\n\r\n  var webResource = WebResource.put()\r\n    .withQueryOption(QueryStringConstants.COMP, 'properties')\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'service')\r\n    .withHeader(HeaderConstants.CONTENT_TYPE, 'application/xml;charset=\"utf-8\"')\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(servicePropertiesXml))\r\n    .withBody(servicePropertiesXml);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n// Other functions\r\n\r\n/**\r\n* Processes the error body into a normalized error object with all the properties lowercased.\r\n*\r\n* Error information may be returned by a service call with additional debugging information:\r\n* http://msdn.microsoft.com/en-us/library/windowsazure/dd179382.aspx\r\n*\r\n* Table services returns these properties lowercased, example, \"code\" instead of \"Code\". So that the user\r\n* can always expect the same format, this method lower cases everything.\r\n*\r\n* @ignore\r\n*\r\n* @param {Object} error The error object as returned by the service and parsed to JSON by the xml2json.\r\n* @return {Object} The normalized error object with all properties lower cased.\r\n*/\r\nStorageServiceClient._normalizeError = function (error, response) {\r\n  if (azureutil.objectIsString(error)) {\r\n    return new StorageError(error, null);\r\n  } else if (error) {\r\n    var normalizedError = {};\r\n\r\n    // blob/queue errors should have error.Error, table errors should have error['odata.error']\r\n    var errorProperties = error.Error || error.error || error['odata.error'] || error['m:error'] || error;\r\n    normalizedError.code = errorProperties.message; // The message exists when there is error.Error.\r\n\r\n    for (var property in errorProperties) {\r\n      if (errorProperties.hasOwnProperty(property)) {\r\n        var key = property.toLowerCase();\r\n        if(key.indexOf('m:') === 0) {\r\n          key = key.substring(2);\r\n        }\r\n\r\n        normalizedError[key] = errorProperties[property];\r\n\r\n        // if this is a table error, message is an object - flatten it to normalize with blob/queue errors\r\n        // ex: \"message\":{\"lang\":\"en-US\",\"value\":\"The specified resource does not exist.\"} becomes message: \"The specified resource does not exist.\"\r\n        if (key === 'message' && _.isObject(errorProperties[property])) {\r\n          if (errorProperties[property]['value']) {\r\n            normalizedError[key] = errorProperties[property]['value'];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // add status code and server request id if available\r\n    if (response) {\r\n      if (response.statusCode) {\r\n        normalizedError.statusCode = response.statusCode;\r\n      }\r\n\r\n      if (response.headers && response.headers['x-ms-request-id']) {\r\n        normalizedError.requestId = response.headers['x-ms-request-id'];\r\n      }\r\n    }\r\n\r\n    var errorObject = new StorageError(normalizedError.code, normalizedError);\r\n    return errorObject;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n* Sets proxy object specified by caller.\r\n*\r\n* @param {object}   proxy       proxy to use for tunneling\r\n*                               {\r\n*                                host: hostname\r\n*                                port: port number\r\n*                                proxyAuth: 'user:password' for basic auth\r\n*                                headers: {...} headers for proxy server\r\n*                                key: key for proxy server\r\n*                                ca: ca for proxy server\r\n*                                cert: cert for proxy server\r\n*                               }\r\n*                               if null or undefined, clears proxy\r\n*/\r\nStorageServiceClient.prototype.setProxy = function (proxy) {\r\n  if (proxy) {\r\n    this.proxy = proxy;\r\n  } else {\r\n    this.proxy = null;\r\n  }\r\n};\r\n\r\n/**\r\n* Sets the service host default proxy from the environment.\r\n* Can be overridden by calling _setProxyUrl or _setProxy\r\n*\r\n*/\r\nStorageServiceClient.prototype._setDefaultProxy = function () {\r\n  var proxyUrl = StorageServiceClient._loadEnvironmentProxyValue();\r\n  if (proxyUrl) {\r\n    var parsedUrl = url.parse(proxyUrl);\r\n    if (!parsedUrl.port) {\r\n      parsedUrl.port = 80;\r\n    }\r\n    this.setProxy(parsedUrl);\r\n  } else {\r\n    this.setProxy(null);\r\n  }\r\n};\r\n\r\n/*\r\n* Loads the fields \"useProxy\" and respective protocol, port and url\r\n* from the environment values HTTPS_PROXY and HTTP_PROXY\r\n* in case those are set.\r\n* @ignore\r\n*\r\n* @return {string} or null\r\n*/\r\nStorageServiceClient._loadEnvironmentProxyValue = function () {\r\n  var proxyUrl = null;\r\n  if (process.env[StorageServiceClientConstants.EnvironmentVariables.HTTPS_PROXY]) {\r\n    proxyUrl = process.env[StorageServiceClientConstants.EnvironmentVariables.HTTPS_PROXY];\r\n  } else if (process.env[StorageServiceClientConstants.EnvironmentVariables.HTTPS_PROXY.toLowerCase()]) {\r\n    proxyUrl = process.env[StorageServiceClientConstants.EnvironmentVariables.HTTPS_PROXY.toLowerCase()];\r\n  } else if (process.env[StorageServiceClientConstants.EnvironmentVariables.HTTP_PROXY]) {\r\n    proxyUrl = process.env[StorageServiceClientConstants.EnvironmentVariables.HTTP_PROXY];\r\n  } else if (process.env[StorageServiceClientConstants.EnvironmentVariables.HTTP_PROXY.toLowerCase()]) {\r\n    proxyUrl = process.env[StorageServiceClientConstants.EnvironmentVariables.HTTP_PROXY.toLowerCase()];\r\n  }\r\n\r\n  return proxyUrl;\r\n};\r\n\r\n/**\r\n* Initializes the location to which the operation is being sent to.\r\n*/\r\nStorageServiceClient.prototype._initializeLocation = function (options) {\r\n  if(!azureutil.objectIsNull(options.locationMode)) {\r\n    switch(options.locationMode) {\r\n    case StorageUtilities.LocationMode.PRIMARY_ONLY:\r\n    case StorageUtilities.LocationMode.PRIMARY_THEN_SECONDARY:\r\n      options.currentLocation = Constants.StorageLocation.PRIMARY;\r\n      break;\r\n    case StorageUtilities.LocationMode.SECONDARY_ONLY:\r\n    case StorageUtilities.LocationMode.SECONDARY_THEN_PRIMARY:\r\n      options.currentLocation = Constants.StorageLocation.SECONDARY;\r\n      break;\r\n    default:\r\n      throw new RangeError(util.format(SR.ARGUMENT_OUT_OF_RANGE_ERROR, 'locationMode', options.locationMode));\r\n    }\r\n  } else {\r\n    options.locationMode = StorageUtilities.LocationMode.PRIMARY_ONLY;\r\n    options.currentLocation = Constants.StorageLocation.PRIMARY;\r\n  }\r\n};\r\n\r\n/**\r\n* Validates the location to which the operation is being sent to.\r\n*/\r\nStorageServiceClient.prototype._validateLocation = function (options) {\r\n  if(this._invalidLocationMode(options.locationMode)) {\r\n    throw new ArgumentNullError('host', SR.STORAGE_HOST_MISSING_LOCATION);\r\n  }\r\n\r\n  switch(options.requestLocationMode) {\r\n  case Constants.RequestLocationMode.PRIMARY_ONLY:\r\n    if(options.locationMode === StorageUtilities.LocationMode.SECONDARY_ONLY) {\r\n      throw new ArgumentError('host.primaryHost', SR.PRIMARY_ONLY_COMMAND);\r\n    }\r\n\r\n    options.currentLocation = Constants.StorageLocation.PRIMARY;\r\n    options.locationMode = StorageUtilities.LocationMode.PRIMARY_ONLY;\r\n    break;\r\n\r\n  case Constants.RequestLocationMode.SECONDARY_ONLY:\r\n    if(options.locationMode === StorageUtilities.LocationMode.PRIMARY_ONLY) {\r\n      throw new ArgumentError('host.secondaryHost', SR.SECONDARY_ONLY_COMMAND);\r\n    }\r\n\r\n    options.currentLocation = Constants.StorageLocation.SECONDARY;\r\n    options.locationMode = StorageUtilities.LocationMode.SECONDARY_ONLY;\r\n    break;\r\n\r\n  default:\r\n   // no op\r\n  }\r\n};\r\n\r\n/**\r\n* Checks whether we have the relevant host information based on the locationMode.\r\n*/\r\nStorageServiceClient.prototype._invalidLocationMode = function (locationMode) {\r\n  switch(locationMode) {\r\n  case StorageUtilities.LocationMode.PRIMARY_ONLY:\r\n    return azureutil.objectIsNull(this.host.primaryHost);\r\n  case StorageUtilities.LocationMode.SECONDARY_ONLY:\r\n    return azureutil.objectIsNull(this.host.secondaryHost);\r\n  default:\r\n    return (azureutil.objectIsNull(this.host.primaryHost) || azureutil.objectIsNull(this.host.secondaryHost));\r\n  }\r\n};\r\n\r\n/**\r\n* Checks to see if the maximum execution timeout provided has been exceeded.\r\n*/\r\nStorageServiceClient.prototype._maximumExecutionTimeExceeded = function (currentTime, expiryTime) {\r\n  if(!azureutil.objectIsNull(expiryTime) && currentTime > expiryTime) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n* Sets the operation expiry time.\r\n*/\r\nStorageServiceClient.prototype._setOperationExpiryTime = function (options) {\r\n  if(azureutil.objectIsNull(options.operationExpiryTime)) {\r\n    if(!azureutil.objectIsNull(options.maximumExecutionTimeInMs)) {\r\n      options.operationExpiryTime = Date.now() + options.maximumExecutionTimeInMs;\r\n    } else if(this.defaultMaximumExecutionTimeInMs) {\r\n      options.operationExpiryTime = Date.now() + this.defaultMaximumExecutionTimeInMs;\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = StorageServiceClient;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nmodule.exports = require('request');","// Copyright 2010-2012 Mikeal Rogers\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\n'use strict'\n\nvar extend = require('extend')\nvar cookies = require('./lib/cookies')\nvar helpers = require('./lib/helpers')\n\nvar paramsHaveRequestBody = helpers.paramsHaveRequestBody\n\n// organize params for patch, post, put, head, del\nfunction initParams (uri, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n  }\n\n  var params = {}\n  if (typeof options === 'object') {\n    extend(params, options, {uri: uri})\n  } else if (typeof uri === 'string') {\n    extend(params, {uri: uri})\n  } else {\n    extend(params, uri)\n  }\n\n  params.callback = callback || params.callback\n  return params\n}\n\nfunction request (uri, options, callback) {\n  if (typeof uri === 'undefined') {\n    throw new Error('undefined is not a valid uri or options object.')\n  }\n\n  var params = initParams(uri, options, callback)\n\n  if (params.method === 'HEAD' && paramsHaveRequestBody(params)) {\n    throw new Error('HTTP HEAD requests MUST NOT include a request body.')\n  }\n\n  return new request.Request(params)\n}\n\nfunction verbFunc (verb) {\n  var method = verb.toUpperCase()\n  return function (uri, options, callback) {\n    var params = initParams(uri, options, callback)\n    params.method = method\n    return request(params, params.callback)\n  }\n}\n\n// define like this to please codeintel/intellisense IDEs\nrequest.get = verbFunc('get')\nrequest.head = verbFunc('head')\nrequest.options = verbFunc('options')\nrequest.post = verbFunc('post')\nrequest.put = verbFunc('put')\nrequest.patch = verbFunc('patch')\nrequest.del = verbFunc('delete')\nrequest['delete'] = verbFunc('delete')\n\nrequest.jar = function (store) {\n  return cookies.jar(store)\n}\n\nrequest.cookie = function (str) {\n  return cookies.parse(str)\n}\n\nfunction wrapRequestMethod (method, options, requester, verb) {\n  return function (uri, opts, callback) {\n    var params = initParams(uri, opts, callback)\n\n    var target = {}\n    extend(true, target, options, params)\n\n    target.pool = params.pool || options.pool\n\n    if (verb) {\n      target.method = verb.toUpperCase()\n    }\n\n    if (typeof requester === 'function') {\n      method = requester\n    }\n\n    return method(target, target.callback)\n  }\n}\n\nrequest.defaults = function (options, requester) {\n  var self = this\n\n  options = options || {}\n\n  if (typeof options === 'function') {\n    requester = options\n    options = {}\n  }\n\n  var defaults = wrapRequestMethod(self, options, requester)\n\n  var verbs = ['get', 'head', 'post', 'put', 'patch', 'del', 'delete']\n  verbs.forEach(function (verb) {\n    defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb)\n  })\n\n  defaults.cookie = wrapRequestMethod(self.cookie, options, requester)\n  defaults.jar = self.jar\n  defaults.defaults = self.defaults\n  return defaults\n}\n\nrequest.forever = function (agentOptions, optionsArg) {\n  var options = {}\n  if (optionsArg) {\n    extend(options, optionsArg)\n  }\n  if (agentOptions) {\n    options.agentOptions = agentOptions\n  }\n\n  options.forever = true\n  return request.defaults(options)\n}\n\n// Exports\n\nmodule.exports = request\nrequest.Request = require('./request')\nrequest.initParams = initParams\n\n// Backwards compatibility for request.debug\nObject.defineProperty(request, 'debug', {\n  enumerable: true,\n  get: function () {\n    return request.Request.debug\n  },\n  set: function (debug) {\n    request.Request.debug = debug\n  }\n})\n","/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\nvar net = require('net');\nvar urlParse = require('url').parse;\nvar util = require('util');\nvar pubsuffix = require('./pubsuffix-psl');\nvar Store = require('./store').Store;\nvar MemoryCookieStore = require('./memstore').MemoryCookieStore;\nvar pathMatch = require('./pathMatch').pathMatch;\nvar VERSION = require('../package.json').version;\n\nvar punycode;\ntry {\n  punycode = require('punycode');\n} catch(e) {\n  console.warn(\"tough-cookie: can't load punycode; won't use punycode for domain normalization\");\n}\n\n// From RFC6265 S4.1.1\n// note that it excludes \\x3B \";\"\nvar COOKIE_OCTETS = /^[\\x21\\x23-\\x2B\\x2D-\\x3A\\x3C-\\x5B\\x5D-\\x7E]+$/;\n\nvar CONTROL_CHARS = /[\\x00-\\x1F]/;\n\n// From Chromium // '\\r', '\\n' and '\\0' should be treated as a terminator in\n// the \"relaxed\" mode, see:\n// https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60\nvar TERMINATORS = ['\\n', '\\r', '\\0'];\n\n// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or \";\"'\n// Note ';' is \\x3B\nvar PATH_VALUE = /[\\x20-\\x3A\\x3C-\\x7E]+/;\n\n// date-time parsing constants (RFC6265 S5.1.1)\n\nvar DATE_DELIM = /[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]/;\n\nvar MONTH_TO_NUM = {\n  jan:0, feb:1, mar:2, apr:3, may:4, jun:5,\n  jul:6, aug:7, sep:8, oct:9, nov:10, dec:11\n};\nvar NUM_TO_MONTH = [\n  'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'\n];\nvar NUM_TO_DAY = [\n  'Sun','Mon','Tue','Wed','Thu','Fri','Sat'\n];\n\nvar MAX_TIME = 2147483647000; // 31-bit max\nvar MIN_TIME = 0; // 31-bit min\n\n/*\n * Parses a Natural number (i.e., non-negative integer) with either the\n *    <min>*<max>DIGIT ( non-digit *OCTET )\n * or\n *    <min>*<max>DIGIT\n * grammar (RFC6265 S5.1.1).\n *\n * The \"trailingOK\" boolean controls if the grammar accepts a\n * \"( non-digit *OCTET )\" trailer.\n */\nfunction parseDigits(token, minDigits, maxDigits, trailingOK) {\n  var count = 0;\n  while (count < token.length) {\n    var c = token.charCodeAt(count);\n    // \"non-digit = %x00-2F / %x3A-FF\"\n    if (c <= 0x2F || c >= 0x3A) {\n      break;\n    }\n    count++;\n  }\n\n  // constrain to a minimum and maximum number of digits.\n  if (count < minDigits || count > maxDigits) {\n    return null;\n  }\n\n  if (!trailingOK && count != token.length) {\n    return null;\n  }\n\n  return parseInt(token.substr(0,count), 10);\n}\n\nfunction parseTime(token) {\n  var parts = token.split(':');\n  var result = [0,0,0];\n\n  /* RF6256 S5.1.1:\n   *      time            = hms-time ( non-digit *OCTET )\n   *      hms-time        = time-field \":\" time-field \":\" time-field\n   *      time-field      = 1*2DIGIT\n   */\n\n  if (parts.length !== 3) {\n    return null;\n  }\n\n  for (var i = 0; i < 3; i++) {\n    // \"time-field\" must be strictly \"1*2DIGIT\", HOWEVER, \"hms-time\" can be\n    // followed by \"( non-digit *OCTET )\" so therefore the last time-field can\n    // have a trailer\n    var trailingOK = (i == 2);\n    var num = parseDigits(parts[i], 1, 2, trailingOK);\n    if (num === null) {\n      return null;\n    }\n    result[i] = num;\n  }\n\n  return result;\n}\n\nfunction parseMonth(token) {\n  token = String(token).substr(0,3).toLowerCase();\n  var num = MONTH_TO_NUM[token];\n  return num >= 0 ? num : null;\n}\n\n/*\n * RFC6265 S5.1.1 date parser (see RFC for full grammar)\n */\nfunction parseDate(str) {\n  if (!str) {\n    return;\n  }\n\n  /* RFC6265 S5.1.1:\n   * 2. Process each date-token sequentially in the order the date-tokens\n   * appear in the cookie-date\n   */\n  var tokens = str.split(DATE_DELIM);\n  if (!tokens) {\n    return;\n  }\n\n  var hour = null;\n  var minute = null;\n  var second = null;\n  var dayOfMonth = null;\n  var month = null;\n  var year = null;\n\n  for (var i=0; i<tokens.length; i++) {\n    var token = tokens[i].trim();\n    if (!token.length) {\n      continue;\n    }\n\n    var result;\n\n    /* 2.1. If the found-time flag is not set and the token matches the time\n     * production, set the found-time flag and set the hour- value,\n     * minute-value, and second-value to the numbers denoted by the digits in\n     * the date-token, respectively.  Skip the remaining sub-steps and continue\n     * to the next date-token.\n     */\n    if (second === null) {\n      result = parseTime(token);\n      if (result) {\n        hour = result[0];\n        minute = result[1];\n        second = result[2];\n        continue;\n      }\n    }\n\n    /* 2.2. If the found-day-of-month flag is not set and the date-token matches\n     * the day-of-month production, set the found-day-of- month flag and set\n     * the day-of-month-value to the number denoted by the date-token.  Skip\n     * the remaining sub-steps and continue to the next date-token.\n     */\n    if (dayOfMonth === null) {\n      // \"day-of-month = 1*2DIGIT ( non-digit *OCTET )\"\n      result = parseDigits(token, 1, 2, true);\n      if (result !== null) {\n        dayOfMonth = result;\n        continue;\n      }\n    }\n\n    /* 2.3. If the found-month flag is not set and the date-token matches the\n     * month production, set the found-month flag and set the month-value to\n     * the month denoted by the date-token.  Skip the remaining sub-steps and\n     * continue to the next date-token.\n     */\n    if (month === null) {\n      result = parseMonth(token);\n      if (result !== null) {\n        month = result;\n        continue;\n      }\n    }\n\n    /* 2.4. If the found-year flag is not set and the date-token matches the\n     * year production, set the found-year flag and set the year-value to the\n     * number denoted by the date-token.  Skip the remaining sub-steps and\n     * continue to the next date-token.\n     */\n    if (year === null) {\n      // \"year = 2*4DIGIT ( non-digit *OCTET )\"\n      result = parseDigits(token, 2, 4, true);\n      if (result !== null) {\n        year = result;\n        /* From S5.1.1:\n         * 3.  If the year-value is greater than or equal to 70 and less\n         * than or equal to 99, increment the year-value by 1900.\n         * 4.  If the year-value is greater than or equal to 0 and less\n         * than or equal to 69, increment the year-value by 2000.\n         */\n        if (year >= 70 && year <= 99) {\n          year += 1900;\n        } else if (year >= 0 && year <= 69) {\n          year += 2000;\n        }\n      }\n    }\n  }\n\n  /* RFC 6265 S5.1.1\n   * \"5. Abort these steps and fail to parse the cookie-date if:\n   *     *  at least one of the found-day-of-month, found-month, found-\n   *        year, or found-time flags is not set,\n   *     *  the day-of-month-value is less than 1 or greater than 31,\n   *     *  the year-value is less than 1601,\n   *     *  the hour-value is greater than 23,\n   *     *  the minute-value is greater than 59, or\n   *     *  the second-value is greater than 59.\n   *     (Note that leap seconds cannot be represented in this syntax.)\"\n   *\n   * So, in order as above:\n   */\n  if (\n    dayOfMonth === null || month === null || year === null || second === null ||\n    dayOfMonth < 1 || dayOfMonth > 31 ||\n    year < 1601 ||\n    hour > 23 ||\n    minute > 59 ||\n    second > 59\n  ) {\n    return;\n  }\n\n  return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));\n}\n\nfunction formatDate(date) {\n  var d = date.getUTCDate(); d = d >= 10 ? d : '0'+d;\n  var h = date.getUTCHours(); h = h >= 10 ? h : '0'+h;\n  var m = date.getUTCMinutes(); m = m >= 10 ? m : '0'+m;\n  var s = date.getUTCSeconds(); s = s >= 10 ? s : '0'+s;\n  return NUM_TO_DAY[date.getUTCDay()] + ', ' +\n    d+' '+ NUM_TO_MONTH[date.getUTCMonth()] +' '+ date.getUTCFullYear() +' '+\n    h+':'+m+':'+s+' GMT';\n}\n\n// S5.1.2 Canonicalized Host Names\nfunction canonicalDomain(str) {\n  if (str == null) {\n    return null;\n  }\n  str = str.trim().replace(/^\\./,''); // S4.1.2.3 & S5.2.3: ignore leading .\n\n  // convert to IDN if any non-ASCII characters\n  if (punycode && /[^\\u0001-\\u007f]/.test(str)) {\n    str = punycode.toASCII(str);\n  }\n\n  return str.toLowerCase();\n}\n\n// S5.1.3 Domain Matching\nfunction domainMatch(str, domStr, canonicalize) {\n  if (str == null || domStr == null) {\n    return null;\n  }\n  if (canonicalize !== false) {\n    str = canonicalDomain(str);\n    domStr = canonicalDomain(domStr);\n  }\n\n  /*\n   * \"The domain string and the string are identical. (Note that both the\n   * domain string and the string will have been canonicalized to lower case at\n   * this point)\"\n   */\n  if (str == domStr) {\n    return true;\n  }\n\n  /* \"All of the following [three] conditions hold:\" (order adjusted from the RFC) */\n\n  /* \"* The string is a host name (i.e., not an IP address).\" */\n  if (net.isIP(str)) {\n    return false;\n  }\n\n  /* \"* The domain string is a suffix of the string\" */\n  var idx = str.indexOf(domStr);\n  if (idx <= 0) {\n    return false; // it's a non-match (-1) or prefix (0)\n  }\n\n  // e.g \"a.b.c\".indexOf(\"b.c\") === 2\n  // 5 === 3+2\n  if (str.length !== domStr.length + idx) { // it's not a suffix\n    return false;\n  }\n\n  /* \"* The last character of the string that is not included in the domain\n  * string is a %x2E (\".\") character.\" */\n  if (str.substr(idx-1,1) !== '.') {\n    return false;\n  }\n\n  return true;\n}\n\n\n// RFC6265 S5.1.4 Paths and Path-Match\n\n/*\n * \"The user agent MUST use an algorithm equivalent to the following algorithm\n * to compute the default-path of a cookie:\"\n *\n * Assumption: the path (and not query part or absolute uri) is passed in.\n */\nfunction defaultPath(path) {\n  // \"2. If the uri-path is empty or if the first character of the uri-path is not\n  // a %x2F (\"/\") character, output %x2F (\"/\") and skip the remaining steps.\n  if (!path || path.substr(0,1) !== \"/\") {\n    return \"/\";\n  }\n\n  // \"3. If the uri-path contains no more than one %x2F (\"/\") character, output\n  // %x2F (\"/\") and skip the remaining step.\"\n  if (path === \"/\") {\n    return path;\n  }\n\n  var rightSlash = path.lastIndexOf(\"/\");\n  if (rightSlash === 0) {\n    return \"/\";\n  }\n\n  // \"4. Output the characters of the uri-path from the first character up to,\n  // but not including, the right-most %x2F (\"/\").\"\n  return path.slice(0, rightSlash);\n}\n\nfunction trimTerminator(str) {\n  for (var t = 0; t < TERMINATORS.length; t++) {\n    var terminatorIdx = str.indexOf(TERMINATORS[t]);\n    if (terminatorIdx !== -1) {\n      str = str.substr(0,terminatorIdx);\n    }\n  }\n\n  return str;\n}\n\nfunction parseCookiePair(cookiePair, looseMode) {\n  cookiePair = trimTerminator(cookiePair);\n\n  var firstEq = cookiePair.indexOf('=');\n  if (looseMode) {\n    if (firstEq === 0) { // '=' is immediately at start\n      cookiePair = cookiePair.substr(1);\n      firstEq = cookiePair.indexOf('='); // might still need to split on '='\n    }\n  } else { // non-loose mode\n    if (firstEq <= 0) { // no '=' or is at start\n      return; // needs to have non-empty \"cookie-name\"\n    }\n  }\n\n  var cookieName, cookieValue;\n  if (firstEq <= 0) {\n    cookieName = \"\";\n    cookieValue = cookiePair.trim();\n  } else {\n    cookieName = cookiePair.substr(0, firstEq).trim();\n    cookieValue = cookiePair.substr(firstEq+1).trim();\n  }\n\n  if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {\n    return;\n  }\n\n  var c = new Cookie();\n  c.key = cookieName;\n  c.value = cookieValue;\n  return c;\n}\n\nfunction parse(str, options) {\n  if (!options || typeof options !== 'object') {\n    options = {};\n  }\n  str = str.trim();\n\n  // We use a regex to parse the \"name-value-pair\" part of S5.2\n  var firstSemi = str.indexOf(';'); // S5.2 step 1\n  var cookiePair = (firstSemi === -1) ? str : str.substr(0, firstSemi);\n  var c = parseCookiePair(cookiePair, !!options.loose);\n  if (!c) {\n    return;\n  }\n\n  if (firstSemi === -1) {\n    return c;\n  }\n\n  // S5.2.3 \"unparsed-attributes consist of the remainder of the set-cookie-string\n  // (including the %x3B (\";\") in question).\" plus later on in the same section\n  // \"discard the first \";\" and trim\".\n  var unparsed = str.slice(firstSemi + 1).trim();\n\n  // \"If the unparsed-attributes string is empty, skip the rest of these\n  // steps.\"\n  if (unparsed.length === 0) {\n    return c;\n  }\n\n  /*\n   * S5.2 says that when looping over the items \"[p]rocess the attribute-name\n   * and attribute-value according to the requirements in the following\n   * subsections\" for every item.  Plus, for many of the individual attributes\n   * in S5.3 it says to use the \"attribute-value of the last attribute in the\n   * cookie-attribute-list\".  Therefore, in this implementation, we overwrite\n   * the previous value.\n   */\n  var cookie_avs = unparsed.split(';');\n  while (cookie_avs.length) {\n    var av = cookie_avs.shift().trim();\n    if (av.length === 0) { // happens if \";;\" appears\n      continue;\n    }\n    var av_sep = av.indexOf('=');\n    var av_key, av_value;\n\n    if (av_sep === -1) {\n      av_key = av;\n      av_value = null;\n    } else {\n      av_key = av.substr(0,av_sep);\n      av_value = av.substr(av_sep+1);\n    }\n\n    av_key = av_key.trim().toLowerCase();\n\n    if (av_value) {\n      av_value = av_value.trim();\n    }\n\n    switch(av_key) {\n    case 'expires': // S5.2.1\n      if (av_value) {\n        var exp = parseDate(av_value);\n        // \"If the attribute-value failed to parse as a cookie date, ignore the\n        // cookie-av.\"\n        if (exp) {\n          // over and underflow not realistically a concern: V8's getTime() seems to\n          // store something larger than a 32-bit time_t (even with 32-bit node)\n          c.expires = exp;\n        }\n      }\n      break;\n\n    case 'max-age': // S5.2.2\n      if (av_value) {\n        // \"If the first character of the attribute-value is not a DIGIT or a \"-\"\n        // character ...[or]... If the remainder of attribute-value contains a\n        // non-DIGIT character, ignore the cookie-av.\"\n        if (/^-?[0-9]+$/.test(av_value)) {\n          var delta = parseInt(av_value, 10);\n          // \"If delta-seconds is less than or equal to zero (0), let expiry-time\n          // be the earliest representable date and time.\"\n          c.setMaxAge(delta);\n        }\n      }\n      break;\n\n    case 'domain': // S5.2.3\n      // \"If the attribute-value is empty, the behavior is undefined.  However,\n      // the user agent SHOULD ignore the cookie-av entirely.\"\n      if (av_value) {\n        // S5.2.3 \"Let cookie-domain be the attribute-value without the leading %x2E\n        // (\".\") character.\"\n        var domain = av_value.trim().replace(/^\\./, '');\n        if (domain) {\n          // \"Convert the cookie-domain to lower case.\"\n          c.domain = domain.toLowerCase();\n        }\n      }\n      break;\n\n    case 'path': // S5.2.4\n      /*\n       * \"If the attribute-value is empty or if the first character of the\n       * attribute-value is not %x2F (\"/\"):\n       *   Let cookie-path be the default-path.\n       * Otherwise:\n       *   Let cookie-path be the attribute-value.\"\n       *\n       * We'll represent the default-path as null since it depends on the\n       * context of the parsing.\n       */\n      c.path = av_value && av_value[0] === \"/\" ? av_value : null;\n      break;\n\n    case 'secure': // S5.2.5\n      /*\n       * \"If the attribute-name case-insensitively matches the string \"Secure\",\n       * the user agent MUST append an attribute to the cookie-attribute-list\n       * with an attribute-name of Secure and an empty attribute-value.\"\n       */\n      c.secure = true;\n      break;\n\n    case 'httponly': // S5.2.6 -- effectively the same as 'secure'\n      c.httpOnly = true;\n      break;\n\n    default:\n      c.extensions = c.extensions || [];\n      c.extensions.push(av);\n      break;\n    }\n  }\n\n  return c;\n}\n\n// avoid the V8 deoptimization monster!\nfunction jsonParse(str) {\n  var obj;\n  try {\n    obj = JSON.parse(str);\n  } catch (e) {\n    return e;\n  }\n  return obj;\n}\n\nfunction fromJSON(str) {\n  if (!str) {\n    return null;\n  }\n\n  var obj;\n  if (typeof str === 'string') {\n    obj = jsonParse(str);\n    if (obj instanceof Error) {\n      return null;\n    }\n  } else {\n    // assume it's an Object\n    obj = str;\n  }\n\n  var c = new Cookie();\n  for (var i=0; i<Cookie.serializableProperties.length; i++) {\n    var prop = Cookie.serializableProperties[i];\n    if (obj[prop] === undefined ||\n        obj[prop] === Cookie.prototype[prop])\n    {\n      continue; // leave as prototype default\n    }\n\n    if (prop === 'expires' ||\n        prop === 'creation' ||\n        prop === 'lastAccessed')\n    {\n      if (obj[prop] === null) {\n        c[prop] = null;\n      } else {\n        c[prop] = obj[prop] == \"Infinity\" ?\n          \"Infinity\" : new Date(obj[prop]);\n      }\n    } else {\n      c[prop] = obj[prop];\n    }\n  }\n\n  return c;\n}\n\n/* Section 5.4 part 2:\n * \"*  Cookies with longer paths are listed before cookies with\n *     shorter paths.\n *\n *  *  Among cookies that have equal-length path fields, cookies with\n *     earlier creation-times are listed before cookies with later\n *     creation-times.\"\n */\n\nfunction cookieCompare(a,b) {\n  var cmp = 0;\n\n  // descending for length: b CMP a\n  var aPathLen = a.path ? a.path.length : 0;\n  var bPathLen = b.path ? b.path.length : 0;\n  cmp = bPathLen - aPathLen;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  // ascending for time: a CMP b\n  var aTime = a.creation ? a.creation.getTime() : MAX_TIME;\n  var bTime = b.creation ? b.creation.getTime() : MAX_TIME;\n  cmp = aTime - bTime;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  // break ties for the same millisecond (precision of JavaScript's clock)\n  cmp = a.creationIndex - b.creationIndex;\n\n  return cmp;\n}\n\n// Gives the permutation of all possible pathMatch()es of a given path. The\n// array is in longest-to-shortest order.  Handy for indexing.\nfunction permutePath(path) {\n  if (path === '/') {\n    return ['/'];\n  }\n  if (path.lastIndexOf('/') === path.length-1) {\n    path = path.substr(0,path.length-1);\n  }\n  var permutations = [path];\n  while (path.length > 1) {\n    var lindex = path.lastIndexOf('/');\n    if (lindex === 0) {\n      break;\n    }\n    path = path.substr(0,lindex);\n    permutations.push(path);\n  }\n  permutations.push('/');\n  return permutations;\n}\n\nfunction getCookieContext(url) {\n  if (url instanceof Object) {\n    return url;\n  }\n  // NOTE: decodeURI will throw on malformed URIs (see GH-32).\n  // Therefore, we will just skip decoding for such URIs.\n  try {\n    url = decodeURI(url);\n  }\n  catch(err) {\n    // Silently swallow error\n  }\n\n  return urlParse(url);\n}\n\nfunction Cookie(options) {\n  options = options || {};\n\n  Object.keys(options).forEach(function(prop) {\n    if (Cookie.prototype.hasOwnProperty(prop) &&\n        Cookie.prototype[prop] !== options[prop] &&\n        prop.substr(0,1) !== '_')\n    {\n      this[prop] = options[prop];\n    }\n  }, this);\n\n  this.creation = this.creation || new Date();\n\n  // used to break creation ties in cookieCompare():\n  Object.defineProperty(this, 'creationIndex', {\n    configurable: false,\n    enumerable: false, // important for assert.deepEqual checks\n    writable: true,\n    value: ++Cookie.cookiesCreated\n  });\n}\n\nCookie.cookiesCreated = 0; // incremented each time a cookie is created\n\nCookie.parse = parse;\nCookie.fromJSON = fromJSON;\n\nCookie.prototype.key = \"\";\nCookie.prototype.value = \"\";\n\n// the order in which the RFC has them:\nCookie.prototype.expires = \"Infinity\"; // coerces to literal Infinity\nCookie.prototype.maxAge = null; // takes precedence over expires for TTL\nCookie.prototype.domain = null;\nCookie.prototype.path = null;\nCookie.prototype.secure = false;\nCookie.prototype.httpOnly = false;\nCookie.prototype.extensions = null;\n\n// set by the CookieJar:\nCookie.prototype.hostOnly = null; // boolean when set\nCookie.prototype.pathIsDefault = null; // boolean when set\nCookie.prototype.creation = null; // Date when set; defaulted by Cookie.parse\nCookie.prototype.lastAccessed = null; // Date when set\nObject.defineProperty(Cookie.prototype, 'creationIndex', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: 0\n});\n\nCookie.serializableProperties = Object.keys(Cookie.prototype)\n  .filter(function(prop) {\n    return !(\n      Cookie.prototype[prop] instanceof Function ||\n      prop === 'creationIndex' ||\n      prop.substr(0,1) === '_'\n    );\n  });\n\nCookie.prototype.inspect = function inspect() {\n  var now = Date.now();\n  return 'Cookie=\"'+this.toString() +\n    '; hostOnly='+(this.hostOnly != null ? this.hostOnly : '?') +\n    '; aAge='+(this.lastAccessed ? (now-this.lastAccessed.getTime())+'ms' : '?') +\n    '; cAge='+(this.creation ? (now-this.creation.getTime())+'ms' : '?') +\n    '\"';\n};\n\n// Use the new custom inspection symbol to add the custom inspect function if\n// available.\nif (util.inspect.custom) {\n  Cookie.prototype[util.inspect.custom] = Cookie.prototype.inspect;\n}\n\nCookie.prototype.toJSON = function() {\n  var obj = {};\n\n  var props = Cookie.serializableProperties;\n  for (var i=0; i<props.length; i++) {\n    var prop = props[i];\n    if (this[prop] === Cookie.prototype[prop]) {\n      continue; // leave as prototype default\n    }\n\n    if (prop === 'expires' ||\n        prop === 'creation' ||\n        prop === 'lastAccessed')\n    {\n      if (this[prop] === null) {\n        obj[prop] = null;\n      } else {\n        obj[prop] = this[prop] == \"Infinity\" ? // intentionally not ===\n          \"Infinity\" : this[prop].toISOString();\n      }\n    } else if (prop === 'maxAge') {\n      if (this[prop] !== null) {\n        // again, intentionally not ===\n        obj[prop] = (this[prop] == Infinity || this[prop] == -Infinity) ?\n          this[prop].toString() : this[prop];\n      }\n    } else {\n      if (this[prop] !== Cookie.prototype[prop]) {\n        obj[prop] = this[prop];\n      }\n    }\n  }\n\n  return obj;\n};\n\nCookie.prototype.clone = function() {\n  return fromJSON(this.toJSON());\n};\n\nCookie.prototype.validate = function validate() {\n  if (!COOKIE_OCTETS.test(this.value)) {\n    return false;\n  }\n  if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {\n    return false;\n  }\n  if (this.maxAge != null && this.maxAge <= 0) {\n    return false; // \"Max-Age=\" non-zero-digit *DIGIT\n  }\n  if (this.path != null && !PATH_VALUE.test(this.path)) {\n    return false;\n  }\n\n  var cdomain = this.cdomain();\n  if (cdomain) {\n    if (cdomain.match(/\\.$/)) {\n      return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this\n    }\n    var suffix = pubsuffix.getPublicSuffix(cdomain);\n    if (suffix == null) { // it's a public suffix\n      return false;\n    }\n  }\n  return true;\n};\n\nCookie.prototype.setExpires = function setExpires(exp) {\n  if (exp instanceof Date) {\n    this.expires = exp;\n  } else {\n    this.expires = parseDate(exp) || \"Infinity\";\n  }\n};\n\nCookie.prototype.setMaxAge = function setMaxAge(age) {\n  if (age === Infinity || age === -Infinity) {\n    this.maxAge = age.toString(); // so JSON.stringify() works\n  } else {\n    this.maxAge = age;\n  }\n};\n\n// gives Cookie header format\nCookie.prototype.cookieString = function cookieString() {\n  var val = this.value;\n  if (val == null) {\n    val = '';\n  }\n  if (this.key === '') {\n    return val;\n  }\n  return this.key+'='+val;\n};\n\n// gives Set-Cookie header format\nCookie.prototype.toString = function toString() {\n  var str = this.cookieString();\n\n  if (this.expires != Infinity) {\n    if (this.expires instanceof Date) {\n      str += '; Expires='+formatDate(this.expires);\n    } else {\n      str += '; Expires='+this.expires;\n    }\n  }\n\n  if (this.maxAge != null && this.maxAge != Infinity) {\n    str += '; Max-Age='+this.maxAge;\n  }\n\n  if (this.domain && !this.hostOnly) {\n    str += '; Domain='+this.domain;\n  }\n  if (this.path) {\n    str += '; Path='+this.path;\n  }\n\n  if (this.secure) {\n    str += '; Secure';\n  }\n  if (this.httpOnly) {\n    str += '; HttpOnly';\n  }\n  if (this.extensions) {\n    this.extensions.forEach(function(ext) {\n      str += '; '+ext;\n    });\n  }\n\n  return str;\n};\n\n// TTL() partially replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere)\n// S5.3 says to give the \"latest representable date\" for which we use Infinity\n// For \"expired\" we use 0\nCookie.prototype.TTL = function TTL(now) {\n  /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires\n   * attribute, the Max-Age attribute has precedence and controls the\n   * expiration date of the cookie.\n   * (Concurs with S5.3 step 3)\n   */\n  if (this.maxAge != null) {\n    return this.maxAge<=0 ? 0 : this.maxAge*1000;\n  }\n\n  var expires = this.expires;\n  if (expires != Infinity) {\n    if (!(expires instanceof Date)) {\n      expires = parseDate(expires) || Infinity;\n    }\n\n    if (expires == Infinity) {\n      return Infinity;\n    }\n\n    return expires.getTime() - (now || Date.now());\n  }\n\n  return Infinity;\n};\n\n// expiryTime() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere)\nCookie.prototype.expiryTime = function expiryTime(now) {\n  if (this.maxAge != null) {\n    var relativeTo = now || this.creation || new Date();\n    var age = (this.maxAge <= 0) ? -Infinity : this.maxAge*1000;\n    return relativeTo.getTime() + age;\n  }\n\n  if (this.expires == Infinity) {\n    return Infinity;\n  }\n  return this.expires.getTime();\n};\n\n// expiryDate() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere), except it returns a Date\nCookie.prototype.expiryDate = function expiryDate(now) {\n  var millisec = this.expiryTime(now);\n  if (millisec == Infinity) {\n    return new Date(MAX_TIME);\n  } else if (millisec == -Infinity) {\n    return new Date(MIN_TIME);\n  } else {\n    return new Date(millisec);\n  }\n};\n\n// This replaces the \"persistent-flag\" parts of S5.3 step 3\nCookie.prototype.isPersistent = function isPersistent() {\n  return (this.maxAge != null || this.expires != Infinity);\n};\n\n// Mostly S5.1.2 and S5.2.3:\nCookie.prototype.cdomain =\nCookie.prototype.canonicalizedDomain = function canonicalizedDomain() {\n  if (this.domain == null) {\n    return null;\n  }\n  return canonicalDomain(this.domain);\n};\n\nfunction CookieJar(store, options) {\n  if (typeof options === \"boolean\") {\n    options = {rejectPublicSuffixes: options};\n  } else if (options == null) {\n    options = {};\n  }\n  if (options.rejectPublicSuffixes != null) {\n    this.rejectPublicSuffixes = options.rejectPublicSuffixes;\n  }\n  if (options.looseMode != null) {\n    this.enableLooseMode = options.looseMode;\n  }\n\n  if (!store) {\n    store = new MemoryCookieStore();\n  }\n  this.store = store;\n}\nCookieJar.prototype.store = null;\nCookieJar.prototype.rejectPublicSuffixes = true;\nCookieJar.prototype.enableLooseMode = false;\nvar CAN_BE_SYNC = [];\n\nCAN_BE_SYNC.push('setCookie');\nCookieJar.prototype.setCookie = function(cookie, url, options, cb) {\n  var err;\n  var context = getCookieContext(url);\n  if (options instanceof Function) {\n    cb = options;\n    options = {};\n  }\n\n  var host = canonicalDomain(context.hostname);\n  var loose = this.enableLooseMode;\n  if (options.loose != null) {\n    loose = options.loose;\n  }\n\n  // S5.3 step 1\n  if (!(cookie instanceof Cookie)) {\n    cookie = Cookie.parse(cookie, { loose: loose });\n  }\n  if (!cookie) {\n    err = new Error(\"Cookie failed to parse\");\n    return cb(options.ignoreError ? null : err);\n  }\n\n  // S5.3 step 2\n  var now = options.now || new Date(); // will assign later to save effort in the face of errors\n\n  // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()\n\n  // S5.3 step 4: NOOP; domain is null by default\n\n  // S5.3 step 5: public suffixes\n  if (this.rejectPublicSuffixes && cookie.domain) {\n    var suffix = pubsuffix.getPublicSuffix(cookie.cdomain());\n    if (suffix == null) { // e.g. \"com\"\n      err = new Error(\"Cookie has domain set to a public suffix\");\n      return cb(options.ignoreError ? null : err);\n    }\n  }\n\n  // S5.3 step 6:\n  if (cookie.domain) {\n    if (!domainMatch(host, cookie.cdomain(), false)) {\n      err = new Error(\"Cookie not in this host's domain. Cookie:\"+cookie.cdomain()+\" Request:\"+host);\n      return cb(options.ignoreError ? null : err);\n    }\n\n    if (cookie.hostOnly == null) { // don't reset if already set\n      cookie.hostOnly = false;\n    }\n\n  } else {\n    cookie.hostOnly = true;\n    cookie.domain = host;\n  }\n\n  //S5.2.4 If the attribute-value is empty or if the first character of the\n  //attribute-value is not %x2F (\"/\"):\n  //Let cookie-path be the default-path.\n  if (!cookie.path || cookie.path[0] !== '/') {\n    cookie.path = defaultPath(context.pathname);\n    cookie.pathIsDefault = true;\n  }\n\n  // S5.3 step 8: NOOP; secure attribute\n  // S5.3 step 9: NOOP; httpOnly attribute\n\n  // S5.3 step 10\n  if (options.http === false && cookie.httpOnly) {\n    err = new Error(\"Cookie is HttpOnly and this isn't an HTTP API\");\n    return cb(options.ignoreError ? null : err);\n  }\n\n  var store = this.store;\n\n  if (!store.updateCookie) {\n    store.updateCookie = function(oldCookie, newCookie, cb) {\n      this.putCookie(newCookie, cb);\n    };\n  }\n\n  function withCookie(err, oldCookie) {\n    if (err) {\n      return cb(err);\n    }\n\n    var next = function(err) {\n      if (err) {\n        return cb(err);\n      } else {\n        cb(null, cookie);\n      }\n    };\n\n    if (oldCookie) {\n      // S5.3 step 11 - \"If the cookie store contains a cookie with the same name,\n      // domain, and path as the newly created cookie:\"\n      if (options.http === false && oldCookie.httpOnly) { // step 11.2\n        err = new Error(\"old Cookie is HttpOnly and this isn't an HTTP API\");\n        return cb(options.ignoreError ? null : err);\n      }\n      cookie.creation = oldCookie.creation; // step 11.3\n      cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker\n      cookie.lastAccessed = now;\n      // Step 11.4 (delete cookie) is implied by just setting the new one:\n      store.updateCookie(oldCookie, cookie, next); // step 12\n\n    } else {\n      cookie.creation = cookie.lastAccessed = now;\n      store.putCookie(cookie, next); // step 12\n    }\n  }\n\n  store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);\n};\n\n// RFC6365 S5.4\nCAN_BE_SYNC.push('getCookies');\nCookieJar.prototype.getCookies = function(url, options, cb) {\n  var context = getCookieContext(url);\n  if (options instanceof Function) {\n    cb = options;\n    options = {};\n  }\n\n  var host = canonicalDomain(context.hostname);\n  var path = context.pathname || '/';\n\n  var secure = options.secure;\n  if (secure == null && context.protocol &&\n      (context.protocol == 'https:' || context.protocol == 'wss:'))\n  {\n    secure = true;\n  }\n\n  var http = options.http;\n  if (http == null) {\n    http = true;\n  }\n\n  var now = options.now || Date.now();\n  var expireCheck = options.expire !== false;\n  var allPaths = !!options.allPaths;\n  var store = this.store;\n\n  function matchingCookie(c) {\n    // \"Either:\n    //   The cookie's host-only-flag is true and the canonicalized\n    //   request-host is identical to the cookie's domain.\n    // Or:\n    //   The cookie's host-only-flag is false and the canonicalized\n    //   request-host domain-matches the cookie's domain.\"\n    if (c.hostOnly) {\n      if (c.domain != host) {\n        return false;\n      }\n    } else {\n      if (!domainMatch(host, c.domain, false)) {\n        return false;\n      }\n    }\n\n    // \"The request-uri's path path-matches the cookie's path.\"\n    if (!allPaths && !pathMatch(path, c.path)) {\n      return false;\n    }\n\n    // \"If the cookie's secure-only-flag is true, then the request-uri's\n    // scheme must denote a \"secure\" protocol\"\n    if (c.secure && !secure) {\n      return false;\n    }\n\n    // \"If the cookie's http-only-flag is true, then exclude the cookie if the\n    // cookie-string is being generated for a \"non-HTTP\" API\"\n    if (c.httpOnly && !http) {\n      return false;\n    }\n\n    // deferred from S5.3\n    // non-RFC: allow retention of expired cookies by choice\n    if (expireCheck && c.expiryTime() <= now) {\n      store.removeCookie(c.domain, c.path, c.key, function(){}); // result ignored\n      return false;\n    }\n\n    return true;\n  }\n\n  store.findCookies(host, allPaths ? null : path, function(err,cookies) {\n    if (err) {\n      return cb(err);\n    }\n\n    cookies = cookies.filter(matchingCookie);\n\n    // sorting of S5.4 part 2\n    if (options.sort !== false) {\n      cookies = cookies.sort(cookieCompare);\n    }\n\n    // S5.4 part 3\n    var now = new Date();\n    cookies.forEach(function(c) {\n      c.lastAccessed = now;\n    });\n    // TODO persist lastAccessed\n\n    cb(null,cookies);\n  });\n};\n\nCAN_BE_SYNC.push('getCookieString');\nCookieJar.prototype.getCookieString = function(/*..., cb*/) {\n  var args = Array.prototype.slice.call(arguments,0);\n  var cb = args.pop();\n  var next = function(err,cookies) {\n    if (err) {\n      cb(err);\n    } else {\n      cb(null, cookies\n        .sort(cookieCompare)\n        .map(function(c){\n          return c.cookieString();\n        })\n        .join('; '));\n    }\n  };\n  args.push(next);\n  this.getCookies.apply(this,args);\n};\n\nCAN_BE_SYNC.push('getSetCookieStrings');\nCookieJar.prototype.getSetCookieStrings = function(/*..., cb*/) {\n  var args = Array.prototype.slice.call(arguments,0);\n  var cb = args.pop();\n  var next = function(err,cookies) {\n    if (err) {\n      cb(err);\n    } else {\n      cb(null, cookies.map(function(c){\n        return c.toString();\n      }));\n    }\n  };\n  args.push(next);\n  this.getCookies.apply(this,args);\n};\n\nCAN_BE_SYNC.push('serialize');\nCookieJar.prototype.serialize = function(cb) {\n  var type = this.store.constructor.name;\n  if (type === 'Object') {\n    type = null;\n  }\n\n  // update README.md \"Serialization Format\" if you change this, please!\n  var serialized = {\n    // The version of tough-cookie that serialized this jar. Generally a good\n    // practice since future versions can make data import decisions based on\n    // known past behavior. When/if this matters, use `semver`.\n    version: 'tough-cookie@'+VERSION,\n\n    // add the store type, to make humans happy:\n    storeType: type,\n\n    // CookieJar configuration:\n    rejectPublicSuffixes: !!this.rejectPublicSuffixes,\n\n    // this gets filled from getAllCookies:\n    cookies: []\n  };\n\n  if (!(this.store.getAllCookies &&\n        typeof this.store.getAllCookies === 'function'))\n  {\n    return cb(new Error('store does not support getAllCookies and cannot be serialized'));\n  }\n\n  this.store.getAllCookies(function(err,cookies) {\n    if (err) {\n      return cb(err);\n    }\n\n    serialized.cookies = cookies.map(function(cookie) {\n      // convert to serialized 'raw' cookies\n      cookie = (cookie instanceof Cookie) ? cookie.toJSON() : cookie;\n\n      // Remove the index so new ones get assigned during deserialization\n      delete cookie.creationIndex;\n\n      return cookie;\n    });\n\n    return cb(null, serialized);\n  });\n};\n\n// well-known name that JSON.stringify calls\nCookieJar.prototype.toJSON = function() {\n  return this.serializeSync();\n};\n\n// use the class method CookieJar.deserialize instead of calling this directly\nCAN_BE_SYNC.push('_importCookies');\nCookieJar.prototype._importCookies = function(serialized, cb) {\n  var jar = this;\n  var cookies = serialized.cookies;\n  if (!cookies || !Array.isArray(cookies)) {\n    return cb(new Error('serialized jar has no cookies array'));\n  }\n  cookies = cookies.slice(); // do not modify the original\n\n  function putNext(err) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (!cookies.length) {\n      return cb(err, jar);\n    }\n\n    var cookie;\n    try {\n      cookie = fromJSON(cookies.shift());\n    } catch (e) {\n      return cb(e);\n    }\n\n    if (cookie === null) {\n      return putNext(null); // skip this cookie\n    }\n\n    jar.store.putCookie(cookie, putNext);\n  }\n\n  putNext();\n};\n\nCookieJar.deserialize = function(strOrObj, store, cb) {\n  if (arguments.length !== 3) {\n    // store is optional\n    cb = store;\n    store = null;\n  }\n\n  var serialized;\n  if (typeof strOrObj === 'string') {\n    serialized = jsonParse(strOrObj);\n    if (serialized instanceof Error) {\n      return cb(serialized);\n    }\n  } else {\n    serialized = strOrObj;\n  }\n\n  var jar = new CookieJar(store, serialized.rejectPublicSuffixes);\n  jar._importCookies(serialized, function(err) {\n    if (err) {\n      return cb(err);\n    }\n    cb(null, jar);\n  });\n};\n\nCookieJar.deserializeSync = function(strOrObj, store) {\n  var serialized = typeof strOrObj === 'string' ?\n    JSON.parse(strOrObj) : strOrObj;\n  var jar = new CookieJar(store, serialized.rejectPublicSuffixes);\n\n  // catch this mistake early:\n  if (!jar.store.synchronous) {\n    throw new Error('CookieJar store is not synchronous; use async API instead.');\n  }\n\n  jar._importCookiesSync(serialized);\n  return jar;\n};\nCookieJar.fromJSON = CookieJar.deserializeSync;\n\nCAN_BE_SYNC.push('clone');\nCookieJar.prototype.clone = function(newStore, cb) {\n  if (arguments.length === 1) {\n    cb = newStore;\n    newStore = null;\n  }\n\n  this.serialize(function(err,serialized) {\n    if (err) {\n      return cb(err);\n    }\n    CookieJar.deserialize(newStore, serialized, cb);\n  });\n};\n\n// Use a closure to provide a true imperative API for synchronous stores.\nfunction syncWrap(method) {\n  return function() {\n    if (!this.store.synchronous) {\n      throw new Error('CookieJar store is not synchronous; use async API instead.');\n    }\n\n    var args = Array.prototype.slice.call(arguments);\n    var syncErr, syncResult;\n    args.push(function syncCb(err, result) {\n      syncErr = err;\n      syncResult = result;\n    });\n    this[method].apply(this, args);\n\n    if (syncErr) {\n      throw syncErr;\n    }\n    return syncResult;\n  };\n}\n\n// wrap all declared CAN_BE_SYNC methods in the sync wrapper\nCAN_BE_SYNC.forEach(function(method) {\n  CookieJar.prototype[method+'Sync'] = syncWrap(method);\n});\n\nexports.CookieJar = CookieJar;\nexports.Cookie = Cookie;\nexports.Store = Store;\nexports.MemoryCookieStore = MemoryCookieStore;\nexports.parseDate = parseDate;\nexports.formatDate = formatDate;\nexports.parse = parse;\nexports.fromJSON = fromJSON;\nexports.domainMatch = domainMatch;\nexports.defaultPath = defaultPath;\nexports.pathMatch = pathMatch;\nexports.getPublicSuffix = pubsuffix.getPublicSuffix;\nexports.cookieCompare = cookieCompare;\nexports.permuteDomain = require('./permuteDomain').permuteDomain;\nexports.permutePath = permutePath;\nexports.canonicalDomain = canonicalDomain;\n","/*eslint no-var:0, prefer-arrow-callback: 0, object-shorthand: 0 */\n'use strict';\n\n\nvar Punycode = require('punycode');\n\n\nvar internals = {};\n\n\n//\n// Read rules from file.\n//\ninternals.rules = require('./data/rules.json').map(function (rule) {\n\n  return {\n    rule: rule,\n    suffix: rule.replace(/^(\\*\\.|\\!)/, ''),\n    punySuffix: -1,\n    wildcard: rule.charAt(0) === '*',\n    exception: rule.charAt(0) === '!'\n  };\n});\n\n\n//\n// Check is given string ends with `suffix`.\n//\ninternals.endsWith = function (str, suffix) {\n\n  return str.indexOf(suffix, str.length - suffix.length) !== -1;\n};\n\n\n//\n// Find rule for a given domain.\n//\ninternals.findRule = function (domain) {\n\n  var punyDomain = Punycode.toASCII(domain);\n  return internals.rules.reduce(function (memo, rule) {\n\n    if (rule.punySuffix === -1){\n      rule.punySuffix = Punycode.toASCII(rule.suffix);\n    }\n    if (!internals.endsWith(punyDomain, '.' + rule.punySuffix) && punyDomain !== rule.punySuffix) {\n      return memo;\n    }\n    // This has been commented out as it never seems to run. This is because\n    // sub tlds always appear after their parents and we never find a shorter\n    // match.\n    //if (memo) {\n    //  var memoSuffix = Punycode.toASCII(memo.suffix);\n    //  if (memoSuffix.length >= punySuffix.length) {\n    //    return memo;\n    //  }\n    //}\n    return rule;\n  }, null);\n};\n\n\n//\n// Error codes and messages.\n//\nexports.errorCodes = {\n  DOMAIN_TOO_SHORT: 'Domain name too short.',\n  DOMAIN_TOO_LONG: 'Domain name too long. It should be no more than 255 chars.',\n  LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',\n  LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',\n  LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',\n  LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',\n  LABEL_INVALID_CHARS: 'Domain name label can only contain alphanumeric characters or dashes.'\n};\n\n\n//\n// Validate domain name and throw if not valid.\n//\n// From wikipedia:\n//\n// Hostnames are composed of series of labels concatenated with dots, as are all\n// domain names. Each label must be between 1 and 63 characters long, and the\n// entire hostname (including the delimiting dots) has a maximum of 255 chars.\n//\n// Allowed chars:\n//\n// * `a-z`\n// * `0-9`\n// * `-` but not as a starting or ending character\n// * `.` as a separator for the textual portions of a domain name\n//\n// * http://en.wikipedia.org/wiki/Domain_name\n// * http://en.wikipedia.org/wiki/Hostname\n//\ninternals.validate = function (input) {\n\n  // Before we can validate we need to take care of IDNs with unicode chars.\n  var ascii = Punycode.toASCII(input);\n\n  if (ascii.length < 1) {\n    return 'DOMAIN_TOO_SHORT';\n  }\n  if (ascii.length > 255) {\n    return 'DOMAIN_TOO_LONG';\n  }\n\n  // Check each part's length and allowed chars.\n  var labels = ascii.split('.');\n  var label;\n\n  for (var i = 0; i < labels.length; ++i) {\n    label = labels[i];\n    if (!label.length) {\n      return 'LABEL_TOO_SHORT';\n    }\n    if (label.length > 63) {\n      return 'LABEL_TOO_LONG';\n    }\n    if (label.charAt(0) === '-') {\n      return 'LABEL_STARTS_WITH_DASH';\n    }\n    if (label.charAt(label.length - 1) === '-') {\n      return 'LABEL_ENDS_WITH_DASH';\n    }\n    if (!/^[a-z0-9\\-]+$/.test(label)) {\n      return 'LABEL_INVALID_CHARS';\n    }\n  }\n};\n\n\n//\n// Public API\n//\n\n\n//\n// Parse domain.\n//\nexports.parse = function (input) {\n\n  if (typeof input !== 'string') {\n    throw new TypeError('Domain name must be a string.');\n  }\n\n  // Force domain to lowercase.\n  var domain = input.slice(0).toLowerCase();\n\n  // Handle FQDN.\n  // TODO: Simply remove trailing dot?\n  if (domain.charAt(domain.length - 1) === '.') {\n    domain = domain.slice(0, domain.length - 1);\n  }\n\n  // Validate and sanitise input.\n  var error = internals.validate(domain);\n  if (error) {\n    return {\n      input: input,\n      error: {\n        message: exports.errorCodes[error],\n        code: error\n      }\n    };\n  }\n\n  var parsed = {\n    input: input,\n    tld: null,\n    sld: null,\n    domain: null,\n    subdomain: null,\n    listed: false\n  };\n\n  var domainParts = domain.split('.');\n\n  // Non-Internet TLD\n  if (domainParts[domainParts.length - 1] === 'local') {\n    return parsed;\n  }\n\n  var handlePunycode = function () {\n\n    if (!/xn--/.test(domain)) {\n      return parsed;\n    }\n    if (parsed.domain) {\n      parsed.domain = Punycode.toASCII(parsed.domain);\n    }\n    if (parsed.subdomain) {\n      parsed.subdomain = Punycode.toASCII(parsed.subdomain);\n    }\n    return parsed;\n  };\n\n  var rule = internals.findRule(domain);\n\n  // Unlisted tld.\n  if (!rule) {\n    if (domainParts.length < 2) {\n      return parsed;\n    }\n    parsed.tld = domainParts.pop();\n    parsed.sld = domainParts.pop();\n    parsed.domain = [parsed.sld, parsed.tld].join('.');\n    if (domainParts.length) {\n      parsed.subdomain = domainParts.pop();\n    }\n    return handlePunycode();\n  }\n\n  // At this point we know the public suffix is listed.\n  parsed.listed = true;\n\n  var tldParts = rule.suffix.split('.');\n  var privateParts = domainParts.slice(0, domainParts.length - tldParts.length);\n\n  if (rule.exception) {\n    privateParts.push(tldParts.shift());\n  }\n\n  parsed.tld = tldParts.join('.');\n\n  if (!privateParts.length) {\n    return handlePunycode();\n  }\n\n  if (rule.wildcard) {\n    tldParts.unshift(privateParts.pop());\n    parsed.tld = tldParts.join('.');\n  }\n\n  if (!privateParts.length) {\n    return handlePunycode();\n  }\n\n  parsed.sld = privateParts.pop();\n  parsed.domain = [parsed.sld,  parsed.tld].join('.');\n\n  if (privateParts.length) {\n    parsed.subdomain = privateParts.join('.');\n  }\n\n  return handlePunycode();\n};\n\n\n//\n// Get domain.\n//\nexports.get = function (domain) {\n\n  if (!domain) {\n    return null;\n  }\n  return exports.parse(domain).domain || null;\n};\n\n\n//\n// Check whether domain belongs to a known public suffix.\n//\nexports.isValid = function (domain) {\n\n  var parsed = exports.parse(domain);\n  return Boolean(parsed.domain && parsed.listed);\n};\n","/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\nvar Store = require('./store').Store;\nvar permuteDomain = require('./permuteDomain').permuteDomain;\nvar pathMatch = require('./pathMatch').pathMatch;\nvar util = require('util');\n\nfunction MemoryCookieStore() {\n  Store.call(this);\n  this.idx = {};\n}\nutil.inherits(MemoryCookieStore, Store);\nexports.MemoryCookieStore = MemoryCookieStore;\nMemoryCookieStore.prototype.idx = null;\n\n// Since it's just a struct in RAM, this Store is synchronous\nMemoryCookieStore.prototype.synchronous = true;\n\n// force a default depth:\nMemoryCookieStore.prototype.inspect = function() {\n  return \"{ idx: \"+util.inspect(this.idx, false, 2)+' }';\n};\n\n// Use the new custom inspection symbol to add the custom inspect function if\n// available.\nif (util.inspect.custom) {\n  MemoryCookieStore.prototype[util.inspect.custom] = MemoryCookieStore.prototype.inspect;\n}\n\nMemoryCookieStore.prototype.findCookie = function(domain, path, key, cb) {\n  if (!this.idx[domain]) {\n    return cb(null,undefined);\n  }\n  if (!this.idx[domain][path]) {\n    return cb(null,undefined);\n  }\n  return cb(null,this.idx[domain][path][key]||null);\n};\n\nMemoryCookieStore.prototype.findCookies = function(domain, path, cb) {\n  var results = [];\n  if (!domain) {\n    return cb(null,[]);\n  }\n\n  var pathMatcher;\n  if (!path) {\n    // null means \"all paths\"\n    pathMatcher = function matchAll(domainIndex) {\n      for (var curPath in domainIndex) {\n        var pathIndex = domainIndex[curPath];\n        for (var key in pathIndex) {\n          results.push(pathIndex[key]);\n        }\n      }\n    };\n\n  } else {\n    pathMatcher = function matchRFC(domainIndex) {\n       //NOTE: we should use path-match algorithm from S5.1.4 here\n       //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)\n       Object.keys(domainIndex).forEach(function (cookiePath) {\n         if (pathMatch(path, cookiePath)) {\n           var pathIndex = domainIndex[cookiePath];\n\n           for (var key in pathIndex) {\n             results.push(pathIndex[key]);\n           }\n         }\n       });\n     };\n  }\n\n  var domains = permuteDomain(domain) || [domain];\n  var idx = this.idx;\n  domains.forEach(function(curDomain) {\n    var domainIndex = idx[curDomain];\n    if (!domainIndex) {\n      return;\n    }\n    pathMatcher(domainIndex);\n  });\n\n  cb(null,results);\n};\n\nMemoryCookieStore.prototype.putCookie = function(cookie, cb) {\n  if (!this.idx[cookie.domain]) {\n    this.idx[cookie.domain] = {};\n  }\n  if (!this.idx[cookie.domain][cookie.path]) {\n    this.idx[cookie.domain][cookie.path] = {};\n  }\n  this.idx[cookie.domain][cookie.path][cookie.key] = cookie;\n  cb(null);\n};\n\nMemoryCookieStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {\n  // updateCookie() may avoid updating cookies that are identical.  For example,\n  // lastAccessed may not be important to some stores and an equality\n  // comparison could exclude that field.\n  this.putCookie(newCookie,cb);\n};\n\nMemoryCookieStore.prototype.removeCookie = function(domain, path, key, cb) {\n  if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {\n    delete this.idx[domain][path][key];\n  }\n  cb(null);\n};\n\nMemoryCookieStore.prototype.removeCookies = function(domain, path, cb) {\n  if (this.idx[domain]) {\n    if (path) {\n      delete this.idx[domain][path];\n    } else {\n      delete this.idx[domain];\n    }\n  }\n  return cb(null);\n};\n\nMemoryCookieStore.prototype.getAllCookies = function(cb) {\n  var cookies = [];\n  var idx = this.idx;\n\n  var domains = Object.keys(idx);\n  domains.forEach(function(domain) {\n    var paths = Object.keys(idx[domain]);\n    paths.forEach(function(path) {\n      var keys = Object.keys(idx[domain][path]);\n      keys.forEach(function(key) {\n        if (key !== null) {\n          cookies.push(idx[domain][path][key]);\n        }\n      });\n    });\n  });\n\n  // Sort by creationIndex so deserializing retains the creation order.\n  // When implementing your own store, this SHOULD retain the order too\n  cookies.sort(function(a,b) {\n    return (a.creationIndex||0) - (b.creationIndex||0);\n  });\n\n  cb(null, cookies);\n};\n","'use strict'\n\nvar http = require('http')\nvar https = require('https')\nvar url = require('url')\nvar util = require('util')\nvar stream = require('stream')\nvar zlib = require('zlib')\nvar aws2 = require('aws-sign2')\nvar aws4 = require('aws4')\nvar httpSignature = require('http-signature')\nvar mime = require('mime-types')\nvar caseless = require('caseless')\nvar ForeverAgent = require('forever-agent')\nvar FormData = require('form-data')\nvar extend = require('extend')\nvar isstream = require('isstream')\nvar isTypedArray = require('is-typedarray').strict\nvar helpers = require('./lib/helpers')\nvar cookies = require('./lib/cookies')\nvar getProxyFromURI = require('./lib/getProxyFromURI')\nvar Querystring = require('./lib/querystring').Querystring\nvar Har = require('./lib/har').Har\nvar Auth = require('./lib/auth').Auth\nvar OAuth = require('./lib/oauth').OAuth\nvar hawk = require('./lib/hawk')\nvar Multipart = require('./lib/multipart').Multipart\nvar Redirect = require('./lib/redirect').Redirect\nvar Tunnel = require('./lib/tunnel').Tunnel\nvar now = require('performance-now')\nvar Buffer = require('safe-buffer').Buffer\n\nvar safeStringify = helpers.safeStringify\nvar isReadStream = helpers.isReadStream\nvar toBase64 = helpers.toBase64\nvar defer = helpers.defer\nvar copy = helpers.copy\nvar version = helpers.version\nvar globalCookieJar = cookies.jar()\n\nvar globalPool = {}\n\nfunction filterForNonReserved (reserved, options) {\n  // Filter out properties that are not reserved.\n  // Reserved values are passed in at call site.\n\n  var object = {}\n  for (var i in options) {\n    var notReserved = (reserved.indexOf(i) === -1)\n    if (notReserved) {\n      object[i] = options[i]\n    }\n  }\n  return object\n}\n\nfunction filterOutReservedFunctions (reserved, options) {\n  // Filter out properties that are functions and are reserved.\n  // Reserved values are passed in at call site.\n\n  var object = {}\n  for (var i in options) {\n    var isReserved = !(reserved.indexOf(i) === -1)\n    var isFunction = (typeof options[i] === 'function')\n    if (!(isReserved && isFunction)) {\n      object[i] = options[i]\n    }\n  }\n  return object\n}\n\n// Return a simpler request object to allow serialization\nfunction requestToJSON () {\n  var self = this\n  return {\n    uri: self.uri,\n    method: self.method,\n    headers: self.headers\n  }\n}\n\n// Return a simpler response object to allow serialization\nfunction responseToJSON () {\n  var self = this\n  return {\n    statusCode: self.statusCode,\n    body: self.body,\n    headers: self.headers,\n    request: requestToJSON.call(self.request)\n  }\n}\n\nfunction Request (options) {\n  // if given the method property in options, set property explicitMethod to true\n\n  // extend the Request instance with any non-reserved properties\n  // remove any reserved functions from the options object\n  // set Request instance to be readable and writable\n  // call init\n\n  var self = this\n\n  // start with HAR, then override with additional options\n  if (options.har) {\n    self._har = new Har(self)\n    options = self._har.options(options)\n  }\n\n  stream.Stream.call(self)\n  var reserved = Object.keys(Request.prototype)\n  var nonReserved = filterForNonReserved(reserved, options)\n\n  extend(self, nonReserved)\n  options = filterOutReservedFunctions(reserved, options)\n\n  self.readable = true\n  self.writable = true\n  if (options.method) {\n    self.explicitMethod = true\n  }\n  self._qs = new Querystring(self)\n  self._auth = new Auth(self)\n  self._oauth = new OAuth(self)\n  self._multipart = new Multipart(self)\n  self._redirect = new Redirect(self)\n  self._tunnel = new Tunnel(self)\n  self.init(options)\n}\n\nutil.inherits(Request, stream.Stream)\n\n// Debugging\nRequest.debug = process.env.NODE_DEBUG && /\\brequest\\b/.test(process.env.NODE_DEBUG)\nfunction debug () {\n  if (Request.debug) {\n    console.error('REQUEST %s', util.format.apply(util, arguments))\n  }\n}\nRequest.prototype.debug = debug\n\nRequest.prototype.init = function (options) {\n  // init() contains all the code to setup the request object.\n  // the actual outgoing request is not started until start() is called\n  // this function is called from both the constructor and on redirect.\n  var self = this\n  if (!options) {\n    options = {}\n  }\n  self.headers = self.headers ? copy(self.headers) : {}\n\n  // Delete headers with value undefined since they break\n  // ClientRequest.OutgoingMessage.setHeader in node 0.12\n  for (var headerName in self.headers) {\n    if (typeof self.headers[headerName] === 'undefined') {\n      delete self.headers[headerName]\n    }\n  }\n\n  caseless.httpify(self, self.headers)\n\n  if (!self.method) {\n    self.method = options.method || 'GET'\n  }\n  if (!self.localAddress) {\n    self.localAddress = options.localAddress\n  }\n\n  self._qs.init(options)\n\n  debug(options)\n  if (!self.pool && self.pool !== false) {\n    self.pool = globalPool\n  }\n  self.dests = self.dests || []\n  self.__isRequestRequest = true\n\n  // Protect against double callback\n  if (!self._callback && self.callback) {\n    self._callback = self.callback\n    self.callback = function () {\n      if (self._callbackCalled) {\n        return // Print a warning maybe?\n      }\n      self._callbackCalled = true\n      self._callback.apply(self, arguments)\n    }\n    self.on('error', self.callback.bind())\n    self.on('complete', self.callback.bind(self, null))\n  }\n\n  // People use this property instead all the time, so support it\n  if (!self.uri && self.url) {\n    self.uri = self.url\n    delete self.url\n  }\n\n  // If there's a baseUrl, then use it as the base URL (i.e. uri must be\n  // specified as a relative path and is appended to baseUrl).\n  if (self.baseUrl) {\n    if (typeof self.baseUrl !== 'string') {\n      return self.emit('error', new Error('options.baseUrl must be a string'))\n    }\n\n    if (typeof self.uri !== 'string') {\n      return self.emit('error', new Error('options.uri must be a string when using options.baseUrl'))\n    }\n\n    if (self.uri.indexOf('//') === 0 || self.uri.indexOf('://') !== -1) {\n      return self.emit('error', new Error('options.uri must be a path when using options.baseUrl'))\n    }\n\n    // Handle all cases to make sure that there's only one slash between\n    // baseUrl and uri.\n    var baseUrlEndsWithSlash = self.baseUrl.lastIndexOf('/') === self.baseUrl.length - 1\n    var uriStartsWithSlash = self.uri.indexOf('/') === 0\n\n    if (baseUrlEndsWithSlash && uriStartsWithSlash) {\n      self.uri = self.baseUrl + self.uri.slice(1)\n    } else if (baseUrlEndsWithSlash || uriStartsWithSlash) {\n      self.uri = self.baseUrl + self.uri\n    } else if (self.uri === '') {\n      self.uri = self.baseUrl\n    } else {\n      self.uri = self.baseUrl + '/' + self.uri\n    }\n    delete self.baseUrl\n  }\n\n  // A URI is needed by this point, emit error if we haven't been able to get one\n  if (!self.uri) {\n    return self.emit('error', new Error('options.uri is a required argument'))\n  }\n\n  // If a string URI/URL was given, parse it into a URL object\n  if (typeof self.uri === 'string') {\n    self.uri = url.parse(self.uri)\n  }\n\n  // Some URL objects are not from a URL parsed string and need href added\n  if (!self.uri.href) {\n    self.uri.href = url.format(self.uri)\n  }\n\n  // DEPRECATED: Warning for users of the old Unix Sockets URL Scheme\n  if (self.uri.protocol === 'unix:') {\n    return self.emit('error', new Error('`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`'))\n  }\n\n  // Support Unix Sockets\n  if (self.uri.host === 'unix') {\n    self.enableUnixSocket()\n  }\n\n  if (self.strictSSL === false) {\n    self.rejectUnauthorized = false\n  }\n\n  if (!self.uri.pathname) { self.uri.pathname = '/' }\n\n  if (!(self.uri.host || (self.uri.hostname && self.uri.port)) && !self.uri.isUnix) {\n    // Invalid URI: it may generate lot of bad errors, like 'TypeError: Cannot call method `indexOf` of undefined' in CookieJar\n    // Detect and reject it as soon as possible\n    var faultyUri = url.format(self.uri)\n    var message = 'Invalid URI \"' + faultyUri + '\"'\n    if (Object.keys(options).length === 0) {\n      // No option ? This can be the sign of a redirect\n      // As this is a case where the user cannot do anything (they didn't call request directly with this URL)\n      // they should be warned that it can be caused by a redirection (can save some hair)\n      message += '. This can be caused by a crappy redirection.'\n    }\n    // This error was fatal\n    self.abort()\n    return self.emit('error', new Error(message))\n  }\n\n  if (!self.hasOwnProperty('proxy')) {\n    self.proxy = getProxyFromURI(self.uri)\n  }\n\n  self.tunnel = self._tunnel.isEnabled()\n  if (self.proxy) {\n    self._tunnel.setup(options)\n  }\n\n  self._redirect.onRequest(options)\n\n  self.setHost = false\n  if (!self.hasHeader('host')) {\n    var hostHeaderName = self.originalHostHeaderName || 'host'\n    self.setHeader(hostHeaderName, self.uri.host)\n    // Drop :port suffix from Host header if known protocol.\n    if (self.uri.port) {\n      if ((self.uri.port === '80' && self.uri.protocol === 'http:') ||\n          (self.uri.port === '443' && self.uri.protocol === 'https:')) {\n        self.setHeader(hostHeaderName, self.uri.hostname)\n      }\n    }\n    self.setHost = true\n  }\n\n  self.jar(self._jar || options.jar)\n\n  if (!self.uri.port) {\n    if (self.uri.protocol === 'http:') { self.uri.port = 80 } else if (self.uri.protocol === 'https:') { self.uri.port = 443 }\n  }\n\n  if (self.proxy && !self.tunnel) {\n    self.port = self.proxy.port\n    self.host = self.proxy.hostname\n  } else {\n    self.port = self.uri.port\n    self.host = self.uri.hostname\n  }\n\n  if (options.form) {\n    self.form(options.form)\n  }\n\n  if (options.formData) {\n    var formData = options.formData\n    var requestForm = self.form()\n    var appendFormValue = function (key, value) {\n      if (value && value.hasOwnProperty('value') && value.hasOwnProperty('options')) {\n        requestForm.append(key, value.value, value.options)\n      } else {\n        requestForm.append(key, value)\n      }\n    }\n    for (var formKey in formData) {\n      if (formData.hasOwnProperty(formKey)) {\n        var formValue = formData[formKey]\n        if (formValue instanceof Array) {\n          for (var j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j])\n          }\n        } else {\n          appendFormValue(formKey, formValue)\n        }\n      }\n    }\n  }\n\n  if (options.qs) {\n    self.qs(options.qs)\n  }\n\n  if (self.uri.path) {\n    self.path = self.uri.path\n  } else {\n    self.path = self.uri.pathname + (self.uri.search || '')\n  }\n\n  if (self.path.length === 0) {\n    self.path = '/'\n  }\n\n  // Auth must happen last in case signing is dependent on other headers\n  if (options.aws) {\n    self.aws(options.aws)\n  }\n\n  if (options.hawk) {\n    self.hawk(options.hawk)\n  }\n\n  if (options.httpSignature) {\n    self.httpSignature(options.httpSignature)\n  }\n\n  if (options.auth) {\n    if (Object.prototype.hasOwnProperty.call(options.auth, 'username')) {\n      options.auth.user = options.auth.username\n    }\n    if (Object.prototype.hasOwnProperty.call(options.auth, 'password')) {\n      options.auth.pass = options.auth.password\n    }\n\n    self.auth(\n      options.auth.user,\n      options.auth.pass,\n      options.auth.sendImmediately,\n      options.auth.bearer\n    )\n  }\n\n  if (self.gzip && !self.hasHeader('accept-encoding')) {\n    self.setHeader('accept-encoding', 'gzip, deflate')\n  }\n\n  if (self.uri.auth && !self.hasHeader('authorization')) {\n    var uriAuthPieces = self.uri.auth.split(':').map(function (item) { return self._qs.unescape(item) })\n    self.auth(uriAuthPieces[0], uriAuthPieces.slice(1).join(':'), true)\n  }\n\n  if (!self.tunnel && self.proxy && self.proxy.auth && !self.hasHeader('proxy-authorization')) {\n    var proxyAuthPieces = self.proxy.auth.split(':').map(function (item) { return self._qs.unescape(item) })\n    var authHeader = 'Basic ' + toBase64(proxyAuthPieces.join(':'))\n    self.setHeader('proxy-authorization', authHeader)\n  }\n\n  if (self.proxy && !self.tunnel) {\n    self.path = (self.uri.protocol + '//' + self.uri.host + self.path)\n  }\n\n  if (options.json) {\n    self.json(options.json)\n  }\n  if (options.multipart) {\n    self.multipart(options.multipart)\n  }\n\n  if (options.time) {\n    self.timing = true\n\n    // NOTE: elapsedTime is deprecated in favor of .timings\n    self.elapsedTime = self.elapsedTime || 0\n  }\n\n  function setContentLength () {\n    if (isTypedArray(self.body)) {\n      self.body = Buffer.from(self.body)\n    }\n\n    if (!self.hasHeader('content-length')) {\n      var length\n      if (typeof self.body === 'string') {\n        length = Buffer.byteLength(self.body)\n      } else if (Array.isArray(self.body)) {\n        length = self.body.reduce(function (a, b) { return a + b.length }, 0)\n      } else {\n        length = self.body.length\n      }\n\n      if (length) {\n        self.setHeader('content-length', length)\n      } else {\n        self.emit('error', new Error('Argument error, options.body.'))\n      }\n    }\n  }\n  if (self.body && !isstream(self.body)) {\n    setContentLength()\n  }\n\n  if (options.oauth) {\n    self.oauth(options.oauth)\n  } else if (self._oauth.params && self.hasHeader('authorization')) {\n    self.oauth(self._oauth.params)\n  }\n\n  var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol\n  var defaultModules = {'http:': http, 'https:': https}\n  var httpModules = self.httpModules || {}\n\n  self.httpModule = httpModules[protocol] || defaultModules[protocol]\n\n  if (!self.httpModule) {\n    return self.emit('error', new Error('Invalid protocol: ' + protocol))\n  }\n\n  if (options.ca) {\n    self.ca = options.ca\n  }\n\n  if (!self.agent) {\n    if (options.agentOptions) {\n      self.agentOptions = options.agentOptions\n    }\n\n    if (options.agentClass) {\n      self.agentClass = options.agentClass\n    } else if (options.forever) {\n      var v = version()\n      // use ForeverAgent in node 0.10- only\n      if (v.major === 0 && v.minor <= 10) {\n        self.agentClass = protocol === 'http:' ? ForeverAgent : ForeverAgent.SSL\n      } else {\n        self.agentClass = self.httpModule.Agent\n        self.agentOptions = self.agentOptions || {}\n        self.agentOptions.keepAlive = true\n      }\n    } else {\n      self.agentClass = self.httpModule.Agent\n    }\n  }\n\n  if (self.pool === false) {\n    self.agent = false\n  } else {\n    self.agent = self.agent || self.getNewAgent()\n  }\n\n  self.on('pipe', function (src) {\n    if (self.ntick && self._started) {\n      self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'))\n    }\n    self.src = src\n    if (isReadStream(src)) {\n      if (!self.hasHeader('content-type')) {\n        self.setHeader('content-type', mime.lookup(src.path))\n      }\n    } else {\n      if (src.headers) {\n        for (var i in src.headers) {\n          if (!self.hasHeader(i)) {\n            self.setHeader(i, src.headers[i])\n          }\n        }\n      }\n      if (self._json && !self.hasHeader('content-type')) {\n        self.setHeader('content-type', 'application/json')\n      }\n      if (src.method && !self.explicitMethod) {\n        self.method = src.method\n      }\n    }\n\n  // self.on('pipe', function () {\n  //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')\n  // })\n  })\n\n  defer(function () {\n    if (self._aborted) {\n      return\n    }\n\n    var end = function () {\n      if (self._form) {\n        if (!self._auth.hasAuth) {\n          self._form.pipe(self)\n        } else if (self._auth.hasAuth && self._auth.sentAuth) {\n          self._form.pipe(self)\n        }\n      }\n      if (self._multipart && self._multipart.chunked) {\n        self._multipart.body.pipe(self)\n      }\n      if (self.body) {\n        if (isstream(self.body)) {\n          self.body.pipe(self)\n        } else {\n          setContentLength()\n          if (Array.isArray(self.body)) {\n            self.body.forEach(function (part) {\n              self.write(part)\n            })\n          } else {\n            self.write(self.body)\n          }\n          self.end()\n        }\n      } else if (self.requestBodyStream) {\n        console.warn('options.requestBodyStream is deprecated, please pass the request object to stream.pipe.')\n        self.requestBodyStream.pipe(self)\n      } else if (!self.src) {\n        if (self._auth.hasAuth && !self._auth.sentAuth) {\n          self.end()\n          return\n        }\n        if (self.method !== 'GET' && typeof self.method !== 'undefined') {\n          self.setHeader('content-length', 0)\n        }\n        self.end()\n      }\n    }\n\n    if (self._form && !self.hasHeader('content-length')) {\n      // Before ending the request, we had to compute the length of the whole form, asyncly\n      self.setHeader(self._form.getHeaders(), true)\n      self._form.getLength(function (err, length) {\n        if (!err && !isNaN(length)) {\n          self.setHeader('content-length', length)\n        }\n        end()\n      })\n    } else {\n      end()\n    }\n\n    self.ntick = true\n  })\n}\n\nRequest.prototype.getNewAgent = function () {\n  var self = this\n  var Agent = self.agentClass\n  var options = {}\n  if (self.agentOptions) {\n    for (var i in self.agentOptions) {\n      options[i] = self.agentOptions[i]\n    }\n  }\n  if (self.ca) {\n    options.ca = self.ca\n  }\n  if (self.ciphers) {\n    options.ciphers = self.ciphers\n  }\n  if (self.secureProtocol) {\n    options.secureProtocol = self.secureProtocol\n  }\n  if (self.secureOptions) {\n    options.secureOptions = self.secureOptions\n  }\n  if (typeof self.rejectUnauthorized !== 'undefined') {\n    options.rejectUnauthorized = self.rejectUnauthorized\n  }\n\n  if (self.cert && self.key) {\n    options.key = self.key\n    options.cert = self.cert\n  }\n\n  if (self.pfx) {\n    options.pfx = self.pfx\n  }\n\n  if (self.passphrase) {\n    options.passphrase = self.passphrase\n  }\n\n  var poolKey = ''\n\n  // different types of agents are in different pools\n  if (Agent !== self.httpModule.Agent) {\n    poolKey += Agent.name\n  }\n\n  // ca option is only relevant if proxy or destination are https\n  var proxy = self.proxy\n  if (typeof proxy === 'string') {\n    proxy = url.parse(proxy)\n  }\n  var isHttps = (proxy && proxy.protocol === 'https:') || this.uri.protocol === 'https:'\n\n  if (isHttps) {\n    if (options.ca) {\n      if (poolKey) {\n        poolKey += ':'\n      }\n      poolKey += options.ca\n    }\n\n    if (typeof options.rejectUnauthorized !== 'undefined') {\n      if (poolKey) {\n        poolKey += ':'\n      }\n      poolKey += options.rejectUnauthorized\n    }\n\n    if (options.cert) {\n      if (poolKey) {\n        poolKey += ':'\n      }\n      poolKey += options.cert.toString('ascii') + options.key.toString('ascii')\n    }\n\n    if (options.pfx) {\n      if (poolKey) {\n        poolKey += ':'\n      }\n      poolKey += options.pfx.toString('ascii')\n    }\n\n    if (options.ciphers) {\n      if (poolKey) {\n        poolKey += ':'\n      }\n      poolKey += options.ciphers\n    }\n\n    if (options.secureProtocol) {\n      if (poolKey) {\n        poolKey += ':'\n      }\n      poolKey += options.secureProtocol\n    }\n\n    if (options.secureOptions) {\n      if (poolKey) {\n        poolKey += ':'\n      }\n      poolKey += options.secureOptions\n    }\n  }\n\n  if (self.pool === globalPool && !poolKey && Object.keys(options).length === 0 && self.httpModule.globalAgent) {\n    // not doing anything special.  Use the globalAgent\n    return self.httpModule.globalAgent\n  }\n\n  // we're using a stored agent.  Make sure it's protocol-specific\n  poolKey = self.uri.protocol + poolKey\n\n  // generate a new agent for this setting if none yet exists\n  if (!self.pool[poolKey]) {\n    self.pool[poolKey] = new Agent(options)\n    // properly set maxSockets on new agents\n    if (self.pool.maxSockets) {\n      self.pool[poolKey].maxSockets = self.pool.maxSockets\n    }\n  }\n\n  return self.pool[poolKey]\n}\n\nRequest.prototype.start = function () {\n  // start() is called once we are ready to send the outgoing HTTP request.\n  // this is usually called on the first write(), end() or on nextTick()\n  var self = this\n\n  if (self.timing) {\n    // All timings will be relative to this request's startTime.  In order to do this,\n    // we need to capture the wall-clock start time (via Date), immediately followed\n    // by the high-resolution timer (via now()).  While these two won't be set\n    // at the _exact_ same time, they should be close enough to be able to calculate\n    // high-resolution, monotonically non-decreasing timestamps relative to startTime.\n    var startTime = new Date().getTime()\n    var startTimeNow = now()\n  }\n\n  if (self._aborted) {\n    return\n  }\n\n  self._started = true\n  self.method = self.method || 'GET'\n  self.href = self.uri.href\n\n  if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader('content-length')) {\n    self.setHeader('content-length', self.src.stat.size)\n  }\n  if (self._aws) {\n    self.aws(self._aws, true)\n  }\n\n  // We have a method named auth, which is completely different from the http.request\n  // auth option.  If we don't remove it, we're gonna have a bad time.\n  var reqOptions = copy(self)\n  delete reqOptions.auth\n\n  debug('make request', self.uri.href)\n\n  // node v6.8.0 now supports a `timeout` value in `http.request()`, but we\n  // should delete it for now since we handle timeouts manually for better\n  // consistency with node versions before v6.8.0\n  delete reqOptions.timeout\n\n  try {\n    self.req = self.httpModule.request(reqOptions)\n  } catch (err) {\n    self.emit('error', err)\n    return\n  }\n\n  if (self.timing) {\n    self.startTime = startTime\n    self.startTimeNow = startTimeNow\n\n    // Timing values will all be relative to startTime (by comparing to startTimeNow\n    // so we have an accurate clock)\n    self.timings = {}\n  }\n\n  var timeout\n  if (self.timeout && !self.timeoutTimer) {\n    if (self.timeout < 0) {\n      timeout = 0\n    } else if (typeof self.timeout === 'number' && isFinite(self.timeout)) {\n      timeout = self.timeout\n    }\n  }\n\n  self.req.on('response', self.onRequestResponse.bind(self))\n  self.req.on('error', self.onRequestError.bind(self))\n  self.req.on('drain', function () {\n    self.emit('drain')\n  })\n\n  self.req.on('socket', function (socket) {\n    // `._connecting` was the old property which was made public in node v6.1.0\n    var isConnecting = socket._connecting || socket.connecting\n    if (self.timing) {\n      self.timings.socket = now() - self.startTimeNow\n\n      if (isConnecting) {\n        var onLookupTiming = function () {\n          self.timings.lookup = now() - self.startTimeNow\n        }\n\n        var onConnectTiming = function () {\n          self.timings.connect = now() - self.startTimeNow\n        }\n\n        socket.once('lookup', onLookupTiming)\n        socket.once('connect', onConnectTiming)\n\n        // clean up timing event listeners if needed on error\n        self.req.once('error', function () {\n          socket.removeListener('lookup', onLookupTiming)\n          socket.removeListener('connect', onConnectTiming)\n        })\n      }\n    }\n\n    var setReqTimeout = function () {\n      // This timeout sets the amount of time to wait *between* bytes sent\n      // from the server once connected.\n      //\n      // In particular, it's useful for erroring if the server fails to send\n      // data halfway through streaming a response.\n      self.req.setTimeout(timeout, function () {\n        if (self.req) {\n          self.abort()\n          var e = new Error('ESOCKETTIMEDOUT')\n          e.code = 'ESOCKETTIMEDOUT'\n          e.connect = false\n          self.emit('error', e)\n        }\n      })\n    }\n    if (timeout !== undefined) {\n      // Only start the connection timer if we're actually connecting a new\n      // socket, otherwise if we're already connected (because this is a\n      // keep-alive connection) do not bother. This is important since we won't\n      // get a 'connect' event for an already connected socket.\n      if (isConnecting) {\n        var onReqSockConnect = function () {\n          socket.removeListener('connect', onReqSockConnect)\n          clearTimeout(self.timeoutTimer)\n          self.timeoutTimer = null\n          setReqTimeout()\n        }\n\n        socket.on('connect', onReqSockConnect)\n\n        self.req.on('error', function (err) { // eslint-disable-line handle-callback-err\n          socket.removeListener('connect', onReqSockConnect)\n        })\n\n        // Set a timeout in memory - this block will throw if the server takes more\n        // than `timeout` to write the HTTP status and headers (corresponding to\n        // the on('response') event on the client). NB: this measures wall-clock\n        // time, not the time between bytes sent by the server.\n        self.timeoutTimer = setTimeout(function () {\n          socket.removeListener('connect', onReqSockConnect)\n          self.abort()\n          var e = new Error('ETIMEDOUT')\n          e.code = 'ETIMEDOUT'\n          e.connect = true\n          self.emit('error', e)\n        }, timeout)\n      } else {\n        // We're already connected\n        setReqTimeout()\n      }\n    }\n    self.emit('socket', socket)\n  })\n\n  self.emit('request', self.req)\n}\n\nRequest.prototype.onRequestError = function (error) {\n  var self = this\n  if (self._aborted) {\n    return\n  }\n  if (self.req && self.req._reusedSocket && error.code === 'ECONNRESET' &&\n    self.agent.addRequestNoreuse) {\n    self.agent = { addRequest: self.agent.addRequestNoreuse.bind(self.agent) }\n    self.start()\n    self.req.end()\n    return\n  }\n  if (self.timeout && self.timeoutTimer) {\n    clearTimeout(self.timeoutTimer)\n    self.timeoutTimer = null\n  }\n  self.emit('error', error)\n}\n\nRequest.prototype.onRequestResponse = function (response) {\n  var self = this\n\n  if (self.timing) {\n    self.timings.response = now() - self.startTimeNow\n  }\n\n  debug('onRequestResponse', self.uri.href, response.statusCode, response.headers)\n  response.on('end', function () {\n    if (self.timing) {\n      self.timings.end = now() - self.startTimeNow\n      response.timingStart = self.startTime\n\n      // fill in the blanks for any periods that didn't trigger, such as\n      // no lookup or connect due to keep alive\n      if (!self.timings.socket) {\n        self.timings.socket = 0\n      }\n      if (!self.timings.lookup) {\n        self.timings.lookup = self.timings.socket\n      }\n      if (!self.timings.connect) {\n        self.timings.connect = self.timings.lookup\n      }\n      if (!self.timings.response) {\n        self.timings.response = self.timings.connect\n      }\n\n      debug('elapsed time', self.timings.end)\n\n      // elapsedTime includes all redirects\n      self.elapsedTime += Math.round(self.timings.end)\n\n      // NOTE: elapsedTime is deprecated in favor of .timings\n      response.elapsedTime = self.elapsedTime\n\n      // timings is just for the final fetch\n      response.timings = self.timings\n\n      // pre-calculate phase timings as well\n      response.timingPhases = {\n        wait: self.timings.socket,\n        dns: self.timings.lookup - self.timings.socket,\n        tcp: self.timings.connect - self.timings.lookup,\n        firstByte: self.timings.response - self.timings.connect,\n        download: self.timings.end - self.timings.response,\n        total: self.timings.end\n      }\n    }\n    debug('response end', self.uri.href, response.statusCode, response.headers)\n  })\n\n  if (self._aborted) {\n    debug('aborted', self.uri.href)\n    response.resume()\n    return\n  }\n\n  self.response = response\n  response.request = self\n  response.toJSON = responseToJSON\n\n  // XXX This is different on 0.10, because SSL is strict by default\n  if (self.httpModule === https &&\n    self.strictSSL && (!response.hasOwnProperty('socket') ||\n    !response.socket.authorized)) {\n    debug('strict ssl error', self.uri.href)\n    var sslErr = response.hasOwnProperty('socket') ? response.socket.authorizationError : self.uri.href + ' does not support SSL'\n    self.emit('error', new Error('SSL Error: ' + sslErr))\n    return\n  }\n\n  // Save the original host before any redirect (if it changes, we need to\n  // remove any authorization headers).  Also remember the case of the header\n  // name because lots of broken servers expect Host instead of host and we\n  // want the caller to be able to specify this.\n  self.originalHost = self.getHeader('host')\n  if (!self.originalHostHeaderName) {\n    self.originalHostHeaderName = self.hasHeader('host')\n  }\n  if (self.setHost) {\n    self.removeHeader('host')\n  }\n  if (self.timeout && self.timeoutTimer) {\n    clearTimeout(self.timeoutTimer)\n    self.timeoutTimer = null\n  }\n\n  var targetCookieJar = (self._jar && self._jar.setCookie) ? self._jar : globalCookieJar\n  var addCookie = function (cookie) {\n    // set the cookie if it's domain in the href's domain.\n    try {\n      targetCookieJar.setCookie(cookie, self.uri.href, {ignoreError: true})\n    } catch (e) {\n      self.emit('error', e)\n    }\n  }\n\n  response.caseless = caseless(response.headers)\n\n  if (response.caseless.has('set-cookie') && (!self._disableCookies)) {\n    var headerName = response.caseless.has('set-cookie')\n    if (Array.isArray(response.headers[headerName])) {\n      response.headers[headerName].forEach(addCookie)\n    } else {\n      addCookie(response.headers[headerName])\n    }\n  }\n\n  if (self._redirect.onResponse(response)) {\n    return // Ignore the rest of the response\n  } else {\n    // Be a good stream and emit end when the response is finished.\n    // Hack to emit end on close because of a core bug that never fires end\n    response.on('close', function () {\n      if (!self._ended) {\n        self.response.emit('end')\n      }\n    })\n\n    response.once('end', function () {\n      self._ended = true\n    })\n\n    var noBody = function (code) {\n      return (\n        self.method === 'HEAD' ||\n        // Informational\n        (code >= 100 && code < 200) ||\n        // No Content\n        code === 204 ||\n        // Not Modified\n        code === 304\n      )\n    }\n\n    var responseContent\n    if (self.gzip && !noBody(response.statusCode)) {\n      var contentEncoding = response.headers['content-encoding'] || 'identity'\n      contentEncoding = contentEncoding.trim().toLowerCase()\n\n      // Be more lenient with decoding compressed responses, since (very rarely)\n      // servers send slightly invalid gzip responses that are still accepted\n      // by common browsers.\n      // Always using Z_SYNC_FLUSH is what cURL does.\n      var zlibOptions = {\n        flush: zlib.Z_SYNC_FLUSH,\n        finishFlush: zlib.Z_SYNC_FLUSH\n      }\n\n      if (contentEncoding === 'gzip') {\n        responseContent = zlib.createGunzip(zlibOptions)\n        response.pipe(responseContent)\n      } else if (contentEncoding === 'deflate') {\n        responseContent = zlib.createInflate(zlibOptions)\n        response.pipe(responseContent)\n      } else {\n        // Since previous versions didn't check for Content-Encoding header,\n        // ignore any invalid values to preserve backwards-compatibility\n        if (contentEncoding !== 'identity') {\n          debug('ignoring unrecognized Content-Encoding ' + contentEncoding)\n        }\n        responseContent = response\n      }\n    } else {\n      responseContent = response\n    }\n\n    if (self.encoding) {\n      if (self.dests.length !== 0) {\n        console.error('Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.')\n      } else {\n        responseContent.setEncoding(self.encoding)\n      }\n    }\n\n    if (self._paused) {\n      responseContent.pause()\n    }\n\n    self.responseContent = responseContent\n\n    self.emit('response', response)\n\n    self.dests.forEach(function (dest) {\n      self.pipeDest(dest)\n    })\n\n    responseContent.on('data', function (chunk) {\n      if (self.timing && !self.responseStarted) {\n        self.responseStartTime = (new Date()).getTime()\n\n        // NOTE: responseStartTime is deprecated in favor of .timings\n        response.responseStartTime = self.responseStartTime\n      }\n      self._destdata = true\n      self.emit('data', chunk)\n    })\n    responseContent.once('end', function (chunk) {\n      self.emit('end', chunk)\n    })\n    responseContent.on('error', function (error) {\n      self.emit('error', error)\n    })\n    responseContent.on('close', function () { self.emit('close') })\n\n    if (self.callback) {\n      self.readResponseBody(response)\n    } else { // if no callback\n      self.on('end', function () {\n        if (self._aborted) {\n          debug('aborted', self.uri.href)\n          return\n        }\n        self.emit('complete', response)\n      })\n    }\n  }\n  debug('finish init function', self.uri.href)\n}\n\nRequest.prototype.readResponseBody = function (response) {\n  var self = this\n  debug(\"reading response's body\")\n  var buffers = []\n  var bufferLength = 0\n  var strings = []\n\n  self.on('data', function (chunk) {\n    if (!Buffer.isBuffer(chunk)) {\n      strings.push(chunk)\n    } else if (chunk.length) {\n      bufferLength += chunk.length\n      buffers.push(chunk)\n    }\n  })\n  self.on('end', function () {\n    debug('end event', self.uri.href)\n    if (self._aborted) {\n      debug('aborted', self.uri.href)\n      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.\n      // This can lead to leaky behavior if the user retains a reference to the request object.\n      buffers = []\n      bufferLength = 0\n      return\n    }\n\n    if (bufferLength) {\n      debug('has body', self.uri.href, bufferLength)\n      response.body = Buffer.concat(buffers, bufferLength)\n      if (self.encoding !== null) {\n        response.body = response.body.toString(self.encoding)\n      }\n      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.\n      // This can lead to leaky behavior if the user retains a reference to the request object.\n      buffers = []\n      bufferLength = 0\n    } else if (strings.length) {\n      // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.\n      // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().\n      if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\\uFEFF') {\n        strings[0] = strings[0].substring(1)\n      }\n      response.body = strings.join('')\n    }\n\n    if (self._json) {\n      try {\n        response.body = JSON.parse(response.body, self._jsonReviver)\n      } catch (e) {\n        debug('invalid JSON received', self.uri.href)\n      }\n    }\n    debug('emitting complete', self.uri.href)\n    if (typeof response.body === 'undefined' && !self._json) {\n      response.body = self.encoding === null ? Buffer.alloc(0) : ''\n    }\n    self.emit('complete', response, response.body)\n  })\n}\n\nRequest.prototype.abort = function () {\n  var self = this\n  self._aborted = true\n\n  if (self.req) {\n    self.req.abort()\n  } else if (self.response) {\n    self.response.destroy()\n  }\n\n  self.emit('abort')\n}\n\nRequest.prototype.pipeDest = function (dest) {\n  var self = this\n  var response = self.response\n  // Called after the response is received\n  if (dest.headers && !dest.headersSent) {\n    if (response.caseless.has('content-type')) {\n      var ctname = response.caseless.has('content-type')\n      if (dest.setHeader) {\n        dest.setHeader(ctname, response.headers[ctname])\n      } else {\n        dest.headers[ctname] = response.headers[ctname]\n      }\n    }\n\n    if (response.caseless.has('content-length')) {\n      var clname = response.caseless.has('content-length')\n      if (dest.setHeader) {\n        dest.setHeader(clname, response.headers[clname])\n      } else {\n        dest.headers[clname] = response.headers[clname]\n      }\n    }\n  }\n  if (dest.setHeader && !dest.headersSent) {\n    for (var i in response.headers) {\n      // If the response content is being decoded, the Content-Encoding header\n      // of the response doesn't represent the piped content, so don't pass it.\n      if (!self.gzip || i !== 'content-encoding') {\n        dest.setHeader(i, response.headers[i])\n      }\n    }\n    dest.statusCode = response.statusCode\n  }\n  if (self.pipefilter) {\n    self.pipefilter(response, dest)\n  }\n}\n\nRequest.prototype.qs = function (q, clobber) {\n  var self = this\n  var base\n  if (!clobber && self.uri.query) {\n    base = self._qs.parse(self.uri.query)\n  } else {\n    base = {}\n  }\n\n  for (var i in q) {\n    base[i] = q[i]\n  }\n\n  var qs = self._qs.stringify(base)\n\n  if (qs === '') {\n    return self\n  }\n\n  self.uri = url.parse(self.uri.href.split('?')[0] + '?' + qs)\n  self.url = self.uri\n  self.path = self.uri.path\n\n  if (self.uri.host === 'unix') {\n    self.enableUnixSocket()\n  }\n\n  return self\n}\nRequest.prototype.form = function (form) {\n  var self = this\n  if (form) {\n    if (!/^application\\/x-www-form-urlencoded\\b/.test(self.getHeader('content-type'))) {\n      self.setHeader('content-type', 'application/x-www-form-urlencoded')\n    }\n    self.body = (typeof form === 'string')\n      ? self._qs.rfc3986(form.toString('utf8'))\n      : self._qs.stringify(form).toString('utf8')\n    return self\n  }\n  // create form-data object\n  self._form = new FormData()\n  self._form.on('error', function (err) {\n    err.message = 'form-data: ' + err.message\n    self.emit('error', err)\n    self.abort()\n  })\n  return self._form\n}\nRequest.prototype.multipart = function (multipart) {\n  var self = this\n\n  self._multipart.onRequest(multipart)\n\n  if (!self._multipart.chunked) {\n    self.body = self._multipart.body\n  }\n\n  return self\n}\nRequest.prototype.json = function (val) {\n  var self = this\n\n  if (!self.hasHeader('accept')) {\n    self.setHeader('accept', 'application/json')\n  }\n\n  if (typeof self.jsonReplacer === 'function') {\n    self._jsonReplacer = self.jsonReplacer\n  }\n\n  self._json = true\n  if (typeof val === 'boolean') {\n    if (self.body !== undefined) {\n      if (!/^application\\/x-www-form-urlencoded\\b/.test(self.getHeader('content-type'))) {\n        self.body = safeStringify(self.body, self._jsonReplacer)\n      } else {\n        self.body = self._qs.rfc3986(self.body)\n      }\n      if (!self.hasHeader('content-type')) {\n        self.setHeader('content-type', 'application/json')\n      }\n    }\n  } else {\n    self.body = safeStringify(val, self._jsonReplacer)\n    if (!self.hasHeader('content-type')) {\n      self.setHeader('content-type', 'application/json')\n    }\n  }\n\n  if (typeof self.jsonReviver === 'function') {\n    self._jsonReviver = self.jsonReviver\n  }\n\n  return self\n}\nRequest.prototype.getHeader = function (name, headers) {\n  var self = this\n  var result, re, match\n  if (!headers) {\n    headers = self.headers\n  }\n  Object.keys(headers).forEach(function (key) {\n    if (key.length !== name.length) {\n      return\n    }\n    re = new RegExp(name, 'i')\n    match = key.match(re)\n    if (match) {\n      result = headers[key]\n    }\n  })\n  return result\n}\nRequest.prototype.enableUnixSocket = function () {\n  // Get the socket & request paths from the URL\n  var unixParts = this.uri.path.split(':')\n  var host = unixParts[0]\n  var path = unixParts[1]\n  // Apply unix properties to request\n  this.socketPath = host\n  this.uri.pathname = path\n  this.uri.path = path\n  this.uri.host = host\n  this.uri.hostname = host\n  this.uri.isUnix = true\n}\n\nRequest.prototype.auth = function (user, pass, sendImmediately, bearer) {\n  var self = this\n\n  self._auth.onRequest(user, pass, sendImmediately, bearer)\n\n  return self\n}\nRequest.prototype.aws = function (opts, now) {\n  var self = this\n\n  if (!now) {\n    self._aws = opts\n    return self\n  }\n\n  if (opts.sign_version === 4 || opts.sign_version === '4') {\n    // use aws4\n    var options = {\n      host: self.uri.host,\n      path: self.uri.path,\n      method: self.method,\n      headers: self.headers,\n      body: self.body\n    }\n    if (opts.service) {\n      options.service = opts.service\n    }\n    var signRes = aws4.sign(options, {\n      accessKeyId: opts.key,\n      secretAccessKey: opts.secret,\n      sessionToken: opts.session\n    })\n    self.setHeader('authorization', signRes.headers.Authorization)\n    self.setHeader('x-amz-date', signRes.headers['X-Amz-Date'])\n    if (signRes.headers['X-Amz-Security-Token']) {\n      self.setHeader('x-amz-security-token', signRes.headers['X-Amz-Security-Token'])\n    }\n  } else {\n    // default: use aws-sign2\n    var date = new Date()\n    self.setHeader('date', date.toUTCString())\n    var auth = {\n      key: opts.key,\n      secret: opts.secret,\n      verb: self.method.toUpperCase(),\n      date: date,\n      contentType: self.getHeader('content-type') || '',\n      md5: self.getHeader('content-md5') || '',\n      amazonHeaders: aws2.canonicalizeHeaders(self.headers)\n    }\n    var path = self.uri.path\n    if (opts.bucket && path) {\n      auth.resource = '/' + opts.bucket + path\n    } else if (opts.bucket && !path) {\n      auth.resource = '/' + opts.bucket\n    } else if (!opts.bucket && path) {\n      auth.resource = path\n    } else if (!opts.bucket && !path) {\n      auth.resource = '/'\n    }\n    auth.resource = aws2.canonicalizeResource(auth.resource)\n    self.setHeader('authorization', aws2.authorization(auth))\n  }\n\n  return self\n}\nRequest.prototype.httpSignature = function (opts) {\n  var self = this\n  httpSignature.signRequest({\n    getHeader: function (header) {\n      return self.getHeader(header, self.headers)\n    },\n    setHeader: function (header, value) {\n      self.setHeader(header, value)\n    },\n    method: self.method,\n    path: self.path\n  }, opts)\n  debug('httpSignature authorization', self.getHeader('authorization'))\n\n  return self\n}\nRequest.prototype.hawk = function (opts) {\n  var self = this\n  self.setHeader('Authorization', hawk.header(self.uri, self.method, opts))\n}\nRequest.prototype.oauth = function (_oauth) {\n  var self = this\n\n  self._oauth.onRequest(_oauth)\n\n  return self\n}\n\nRequest.prototype.jar = function (jar) {\n  var self = this\n  var cookies\n\n  if (self._redirect.redirectsFollowed === 0) {\n    self.originalCookieHeader = self.getHeader('cookie')\n  }\n\n  if (!jar) {\n    // disable cookies\n    cookies = false\n    self._disableCookies = true\n  } else {\n    var targetCookieJar = (jar && jar.getCookieString) ? jar : globalCookieJar\n    var urihref = self.uri.href\n    // fetch cookie in the Specified host\n    if (targetCookieJar) {\n      cookies = targetCookieJar.getCookieString(urihref)\n    }\n  }\n\n  // if need cookie and cookie is not empty\n  if (cookies && cookies.length) {\n    if (self.originalCookieHeader) {\n      // Don't overwrite existing Cookie header\n      self.setHeader('cookie', self.originalCookieHeader + '; ' + cookies)\n    } else {\n      self.setHeader('cookie', cookies)\n    }\n  }\n  self._jar = jar\n  return self\n}\n\n// Stream API\nRequest.prototype.pipe = function (dest, opts) {\n  var self = this\n\n  if (self.response) {\n    if (self._destdata) {\n      self.emit('error', new Error('You cannot pipe after data has been emitted from the response.'))\n    } else if (self._ended) {\n      self.emit('error', new Error('You cannot pipe after the response has been ended.'))\n    } else {\n      stream.Stream.prototype.pipe.call(self, dest, opts)\n      self.pipeDest(dest)\n      return dest\n    }\n  } else {\n    self.dests.push(dest)\n    stream.Stream.prototype.pipe.call(self, dest, opts)\n    return dest\n  }\n}\nRequest.prototype.write = function () {\n  var self = this\n  if (self._aborted) { return }\n\n  if (!self._started) {\n    self.start()\n  }\n  if (self.req) {\n    return self.req.write.apply(self.req, arguments)\n  }\n}\nRequest.prototype.end = function (chunk) {\n  var self = this\n  if (self._aborted) { return }\n\n  if (chunk) {\n    self.write(chunk)\n  }\n  if (!self._started) {\n    self.start()\n  }\n  if (self.req) {\n    self.req.end()\n  }\n}\nRequest.prototype.pause = function () {\n  var self = this\n  if (!self.responseContent) {\n    self._paused = true\n  } else {\n    self.responseContent.pause.apply(self.responseContent, arguments)\n  }\n}\nRequest.prototype.resume = function () {\n  var self = this\n  if (!self.responseContent) {\n    self._paused = false\n  } else {\n    self.responseContent.resume.apply(self.responseContent, arguments)\n  }\n}\nRequest.prototype.destroy = function () {\n  var self = this\n  if (!self._ended) {\n    self.end()\n  } else if (self.response) {\n    self.response.destroy()\n  }\n}\n\nRequest.defaultProxyHeaderWhiteList =\n  Tunnel.defaultProxyHeaderWhiteList.slice()\n\nRequest.defaultProxyHeaderExclusiveList =\n  Tunnel.defaultProxyHeaderExclusiveList.slice()\n\n// Exports\n\nRequest.prototype.toJSON = requestToJSON\nmodule.exports = Request\n","var aws4 = exports,\n    url = require('url'),\n    querystring = require('querystring'),\n    crypto = require('crypto'),\n    lru = require('./lru'),\n    credentialsCache = lru(1000)\n\n// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\n\nfunction hmac(key, string, encoding) {\n  return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding)\n}\n\nfunction hash(string, encoding) {\n  return crypto.createHash('sha256').update(string, 'utf8').digest(encoding)\n}\n\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n  return urlEncodedString.replace(/[!'()*]/g, function(c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n// request: { path | body, [host], [method], [headers], [service], [region] }\n// credentials: { accessKeyId, secretAccessKey, [sessionToken] }\nfunction RequestSigner(request, credentials) {\n\n  if (typeof request === 'string') request = url.parse(request)\n\n  var headers = request.headers = (request.headers || {}),\n      hostParts = this.matchHost(request.hostname || request.host || headers.Host || headers.host)\n\n  this.request = request\n  this.credentials = credentials || this.defaultCredentials()\n\n  this.service = request.service || hostParts[0] || ''\n  this.region = request.region || hostParts[1] || 'us-east-1'\n\n  // SES uses a different domain from the service name\n  if (this.service === 'email') this.service = 'ses'\n\n  if (!request.method && request.body)\n    request.method = 'POST'\n\n  if (!headers.Host && !headers.host) {\n    headers.Host = request.hostname || request.host || this.createHost()\n\n    // If a port is specified explicitly, use it as is\n    if (request.port)\n      headers.Host += ':' + request.port\n  }\n  if (!request.hostname && !request.host)\n    request.hostname = headers.Host || headers.host\n\n  this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT'\n}\n\nRequestSigner.prototype.matchHost = function(host) {\n  var match = (host || '').match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(\\.cn)?$/)\n  var hostParts = (match || []).slice(1, 3)\n\n  // ES's hostParts are sometimes the other way round, if the value that is expected\n  // to be region equals ‘es’ switch them back\n  // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com\n  if (hostParts[1] === 'es')\n    hostParts = hostParts.reverse()\n\n  return hostParts\n}\n\n// http://docs.aws.amazon.com/general/latest/gr/rande.html\nRequestSigner.prototype.isSingleRegion = function() {\n  // Special case for S3 and SimpleDB in us-east-1\n  if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true\n\n  return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts']\n    .indexOf(this.service) >= 0\n}\n\nRequestSigner.prototype.createHost = function() {\n  var region = this.isSingleRegion() ? '' :\n        (this.service === 's3' && this.region !== 'us-east-1' ? '-' : '.') + this.region,\n      service = this.service === 'ses' ? 'email' : this.service\n  return service + region + '.amazonaws.com'\n}\n\nRequestSigner.prototype.prepareRequest = function() {\n  this.parsePath()\n\n  var request = this.request, headers = request.headers, query\n\n  if (request.signQuery) {\n\n    this.parsedPath.query = query = this.parsedPath.query || {}\n\n    if (this.credentials.sessionToken)\n      query['X-Amz-Security-Token'] = this.credentials.sessionToken\n\n    if (this.service === 's3' && !query['X-Amz-Expires'])\n      query['X-Amz-Expires'] = 86400\n\n    if (query['X-Amz-Date'])\n      this.datetime = query['X-Amz-Date']\n    else\n      query['X-Amz-Date'] = this.getDateTime()\n\n    query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256'\n    query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString()\n    query['X-Amz-SignedHeaders'] = this.signedHeaders()\n\n  } else {\n\n    if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {\n      if (request.body && !headers['Content-Type'] && !headers['content-type'])\n        headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8'\n\n      if (request.body && !headers['Content-Length'] && !headers['content-length'])\n        headers['Content-Length'] = Buffer.byteLength(request.body)\n\n      if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token'])\n        headers['X-Amz-Security-Token'] = this.credentials.sessionToken\n\n      if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256'])\n        headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex')\n\n      if (headers['X-Amz-Date'] || headers['x-amz-date'])\n        this.datetime = headers['X-Amz-Date'] || headers['x-amz-date']\n      else\n        headers['X-Amz-Date'] = this.getDateTime()\n    }\n\n    delete headers.Authorization\n    delete headers.authorization\n  }\n}\n\nRequestSigner.prototype.sign = function() {\n  if (!this.parsedPath) this.prepareRequest()\n\n  if (this.request.signQuery) {\n    this.parsedPath.query['X-Amz-Signature'] = this.signature()\n  } else {\n    this.request.headers.Authorization = this.authHeader()\n  }\n\n  this.request.path = this.formatPath()\n\n  return this.request\n}\n\nRequestSigner.prototype.getDateTime = function() {\n  if (!this.datetime) {\n    var headers = this.request.headers,\n      date = new Date(headers.Date || headers.date || new Date)\n\n    this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '')\n\n    // Remove the trailing 'Z' on the timestamp string for CodeCommit git access\n    if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1)\n  }\n  return this.datetime\n}\n\nRequestSigner.prototype.getDate = function() {\n  return this.getDateTime().substr(0, 8)\n}\n\nRequestSigner.prototype.authHeader = function() {\n  return [\n    'AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(),\n    'SignedHeaders=' + this.signedHeaders(),\n    'Signature=' + this.signature(),\n  ].join(', ')\n}\n\nRequestSigner.prototype.signature = function() {\n  var date = this.getDate(),\n      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),\n      kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey)\n  if (!kCredentials) {\n    kDate = hmac('AWS4' + this.credentials.secretAccessKey, date)\n    kRegion = hmac(kDate, this.region)\n    kService = hmac(kRegion, this.service)\n    kCredentials = hmac(kService, 'aws4_request')\n    credentialsCache.set(cacheKey, kCredentials)\n  }\n  return hmac(kCredentials, this.stringToSign(), 'hex')\n}\n\nRequestSigner.prototype.stringToSign = function() {\n  return [\n    'AWS4-HMAC-SHA256',\n    this.getDateTime(),\n    this.credentialString(),\n    hash(this.canonicalString(), 'hex'),\n  ].join('\\n')\n}\n\nRequestSigner.prototype.canonicalString = function() {\n  if (!this.parsedPath) this.prepareRequest()\n\n  var pathStr = this.parsedPath.path,\n      query = this.parsedPath.query,\n      headers = this.request.headers,\n      queryStr = '',\n      normalizePath = this.service !== 's3',\n      decodePath = this.service === 's3' || this.request.doNotEncodePath,\n      decodeSlashesInPath = this.service === 's3',\n      firstValOnly = this.service === 's3',\n      bodyHash\n\n  if (this.service === 's3' && this.request.signQuery) {\n    bodyHash = 'UNSIGNED-PAYLOAD'\n  } else if (this.isCodeCommitGit) {\n    bodyHash = ''\n  } else {\n    bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] ||\n      hash(this.request.body || '', 'hex')\n  }\n\n  if (query) {\n    queryStr = encodeRfc3986(querystring.stringify(Object.keys(query).sort().reduce(function(obj, key) {\n      if (!key) return obj\n      obj[key] = !Array.isArray(query[key]) ? query[key] :\n        (firstValOnly ? query[key][0] : query[key].slice().sort())\n      return obj\n    }, {})))\n  }\n  if (pathStr !== '/') {\n    if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, '/')\n    pathStr = pathStr.split('/').reduce(function(path, piece) {\n      if (normalizePath && piece === '..') {\n        path.pop()\n      } else if (!normalizePath || piece !== '.') {\n        if (decodePath) piece = decodeURIComponent(piece)\n        path.push(encodeRfc3986(encodeURIComponent(piece)))\n      }\n      return path\n    }, []).join('/')\n    if (pathStr[0] !== '/') pathStr = '/' + pathStr\n    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/')\n  }\n\n  return [\n    this.request.method || 'GET',\n    pathStr,\n    queryStr,\n    this.canonicalHeaders() + '\\n',\n    this.signedHeaders(),\n    bodyHash,\n  ].join('\\n')\n}\n\nRequestSigner.prototype.canonicalHeaders = function() {\n  var headers = this.request.headers\n  function trimAll(header) {\n    return header.toString().trim().replace(/\\s+/g, ' ')\n  }\n  return Object.keys(headers)\n    .sort(function(a, b) { return a.toLowerCase() < b.toLowerCase() ? -1 : 1 })\n    .map(function(key) { return key.toLowerCase() + ':' + trimAll(headers[key]) })\n    .join('\\n')\n}\n\nRequestSigner.prototype.signedHeaders = function() {\n  return Object.keys(this.request.headers)\n    .map(function(key) { return key.toLowerCase() })\n    .sort()\n    .join(';')\n}\n\nRequestSigner.prototype.credentialString = function() {\n  return [\n    this.getDate(),\n    this.region,\n    this.service,\n    'aws4_request',\n  ].join('/')\n}\n\nRequestSigner.prototype.defaultCredentials = function() {\n  var env = process.env\n  return {\n    accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,\n    secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,\n    sessionToken: env.AWS_SESSION_TOKEN,\n  }\n}\n\nRequestSigner.prototype.parsePath = function() {\n  var path = this.request.path || '/',\n      queryIx = path.indexOf('?'),\n      query = null\n\n  if (queryIx >= 0) {\n    query = querystring.parse(path.slice(queryIx + 1))\n    path = path.slice(0, queryIx)\n  }\n\n  // S3 doesn't always encode characters > 127 correctly and\n  // all services don't encode characters > 255 correctly\n  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\n  if (/[^0-9A-Za-z!'()*\\-._~%/]/.test(path)) {\n    path = path.split('/').map(function(piece) {\n      return encodeURIComponent(decodeURIComponent(piece))\n    }).join('/')\n  }\n\n  this.parsedPath = {\n    path: path,\n    query: query,\n  }\n}\n\nRequestSigner.prototype.formatPath = function() {\n  var path = this.parsedPath.path,\n      query = this.parsedPath.query\n\n  if (!query) return path\n\n  // Services don't support empty query string keys\n  if (query[''] != null) delete query['']\n\n  return path + '?' + encodeRfc3986(querystring.stringify(query))\n}\n\naws4.RequestSigner = RequestSigner\n\naws4.sign = function(request, credentials) {\n  return new RequestSigner(request, credentials).sign()\n}\n","module.exports = function(size) {\n  return new LruCache(size)\n}\n\nfunction LruCache(size) {\n  this.capacity = size | 0\n  this.map = Object.create(null)\n  this.list = new DoublyLinkedList()\n}\n\nLruCache.prototype.get = function(key) {\n  var node = this.map[key]\n  if (node == null) return undefined\n  this.used(node)\n  return node.val\n}\n\nLruCache.prototype.set = function(key, val) {\n  var node = this.map[key]\n  if (node != null) {\n    node.val = val\n  } else {\n    if (!this.capacity) this.prune()\n    if (!this.capacity) return false\n    node = new DoublyLinkedNode(key, val)\n    this.map[key] = node\n    this.capacity--\n  }\n  this.used(node)\n  return true\n}\n\nLruCache.prototype.used = function(node) {\n  this.list.moveToFront(node)\n}\n\nLruCache.prototype.prune = function() {\n  var node = this.list.pop()\n  if (node != null) {\n    delete this.map[node.key]\n    this.capacity++\n  }\n}\n\n\nfunction DoublyLinkedList() {\n  this.firstNode = null\n  this.lastNode = null\n}\n\nDoublyLinkedList.prototype.moveToFront = function(node) {\n  if (this.firstNode == node) return\n\n  this.remove(node)\n\n  if (this.firstNode == null) {\n    this.firstNode = node\n    this.lastNode = node\n    node.prev = null\n    node.next = null\n  } else {\n    node.prev = null\n    node.next = this.firstNode\n    node.next.prev = node\n    this.firstNode = node\n  }\n}\n\nDoublyLinkedList.prototype.pop = function() {\n  var lastNode = this.lastNode\n  if (lastNode != null) {\n    this.remove(lastNode)\n  }\n  return lastNode\n}\n\nDoublyLinkedList.prototype.remove = function(node) {\n  if (this.firstNode == node) {\n    this.firstNode = node.next\n  } else if (node.prev != null) {\n    node.prev.next = node.next\n  }\n  if (this.lastNode == node) {\n    this.lastNode = node.prev\n  } else if (node.next != null) {\n    node.next.prev = node.prev\n  }\n}\n\n\nfunction DoublyLinkedNode(key, val) {\n  this.key = key\n  this.val = val\n  this.prev = null\n  this.next = null\n}\n","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n","/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","'use strict'\n\nfunction formatHostname (hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone (zone) {\n  zone = zone.trim().toLowerCase()\n\n  var zoneParts = zone.split(':', 2)\n  var zoneHost = formatHostname(zoneParts[0])\n  var zonePort = zoneParts[1]\n  var hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy (uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  var hostname = formatHostname(uri.hostname)\n  var noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    var hostnameMatched = (\n      isMatchedAt > -1 &&\n        (isMatchedAt === hostname.length - noProxyZone.hostname.length)\n    )\n\n    if (noProxyZone.hasPort) {\n      return (port === noProxyZone.port) && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromURI (uri) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n\n  var noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY ||\n      process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return process.env.HTTPS_PROXY ||\n      process.env.https_proxy ||\n      process.env.HTTP_PROXY ||\n      process.env.http_proxy || null\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n  return null\n}\n\nmodule.exports = getProxyFromURI\n","'use strict'\n\nvar qs = require('qs')\nvar querystring = require('querystring')\n\nfunction Querystring (request) {\n  this.request = request\n  this.lib = null\n  this.useQuerystring = null\n  this.parseOptions = null\n  this.stringifyOptions = null\n}\n\nQuerystring.prototype.init = function (options) {\n  if (this.lib) { return }\n\n  this.useQuerystring = options.useQuerystring\n  this.lib = (this.useQuerystring ? querystring : qs)\n\n  this.parseOptions = options.qsParseOptions || {}\n  this.stringifyOptions = options.qsStringifyOptions || {}\n}\n\nQuerystring.prototype.stringify = function (obj) {\n  return (this.useQuerystring)\n    ? this.rfc3986(this.lib.stringify(obj,\n      this.stringifyOptions.sep || null,\n      this.stringifyOptions.eq || null,\n      this.stringifyOptions))\n    : this.lib.stringify(obj, this.stringifyOptions)\n}\n\nQuerystring.prototype.parse = function (str) {\n  return (this.useQuerystring)\n    ? this.lib.parse(str,\n      this.parseOptions.sep || null,\n      this.parseOptions.eq || null,\n      this.parseOptions)\n    : this.lib.parse(str, this.parseOptions)\n}\n\nQuerystring.prototype.rfc3986 = function (str) {\n  return str.replace(/[!'()*]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\nQuerystring.prototype.unescape = querystring.unescape\n\nexports.Querystring = Querystring\n","'use strict'\n\nvar fs = require('fs')\nvar qs = require('querystring')\nvar validate = require('har-validator')\nvar extend = require('extend')\n\nfunction Har (request) {\n  this.request = request\n}\n\nHar.prototype.reducer = function (obj, pair) {\n  // new property ?\n  if (obj[pair.name] === undefined) {\n    obj[pair.name] = pair.value\n    return obj\n  }\n\n  // existing? convert to array\n  var arr = [\n    obj[pair.name],\n    pair.value\n  ]\n\n  obj[pair.name] = arr\n\n  return obj\n}\n\nHar.prototype.prep = function (data) {\n  // construct utility properties\n  data.queryObj = {}\n  data.headersObj = {}\n  data.postData.jsonObj = false\n  data.postData.paramsObj = false\n\n  // construct query objects\n  if (data.queryString && data.queryString.length) {\n    data.queryObj = data.queryString.reduce(this.reducer, {})\n  }\n\n  // construct headers objects\n  if (data.headers && data.headers.length) {\n    // loweCase header keys\n    data.headersObj = data.headers.reduceRight(function (headers, header) {\n      headers[header.name] = header.value\n      return headers\n    }, {})\n  }\n\n  // construct Cookie header\n  if (data.cookies && data.cookies.length) {\n    var cookies = data.cookies.map(function (cookie) {\n      return cookie.name + '=' + cookie.value\n    })\n\n    if (cookies.length) {\n      data.headersObj.cookie = cookies.join('; ')\n    }\n  }\n\n  // prep body\n  function some (arr) {\n    return arr.some(function (type) {\n      return data.postData.mimeType.indexOf(type) === 0\n    })\n  }\n\n  if (some([\n    'multipart/mixed',\n    'multipart/related',\n    'multipart/form-data',\n    'multipart/alternative'])) {\n    // reset values\n    data.postData.mimeType = 'multipart/form-data'\n  } else if (some([\n    'application/x-www-form-urlencoded'])) {\n    if (!data.postData.params) {\n      data.postData.text = ''\n    } else {\n      data.postData.paramsObj = data.postData.params.reduce(this.reducer, {})\n\n      // always overwrite\n      data.postData.text = qs.stringify(data.postData.paramsObj)\n    }\n  } else if (some([\n    'text/json',\n    'text/x-json',\n    'application/json',\n    'application/x-json'])) {\n    data.postData.mimeType = 'application/json'\n\n    if (data.postData.text) {\n      try {\n        data.postData.jsonObj = JSON.parse(data.postData.text)\n      } catch (e) {\n        this.request.debug(e)\n\n        // force back to text/plain\n        data.postData.mimeType = 'text/plain'\n      }\n    }\n  }\n\n  return data\n}\n\nHar.prototype.options = function (options) {\n  // skip if no har property defined\n  if (!options.har) {\n    return options\n  }\n\n  var har = {}\n  extend(har, options.har)\n\n  // only process the first entry\n  if (har.log && har.log.entries) {\n    har = har.log.entries[0]\n  }\n\n  // add optional properties to make validation successful\n  har.url = har.url || options.url || options.uri || options.baseUrl || '/'\n  har.httpVersion = har.httpVersion || 'HTTP/1.1'\n  har.queryString = har.queryString || []\n  har.headers = har.headers || []\n  har.cookies = har.cookies || []\n  har.postData = har.postData || {}\n  har.postData.mimeType = har.postData.mimeType || 'application/octet-stream'\n\n  har.bodySize = 0\n  har.headersSize = 0\n  har.postData.size = 0\n\n  if (!validate.request(har)) {\n    return options\n  }\n\n  // clean up and get some utility properties\n  var req = this.prep(har)\n\n  // construct new options\n  if (req.url) {\n    options.url = req.url\n  }\n\n  if (req.method) {\n    options.method = req.method\n  }\n\n  if (Object.keys(req.queryObj).length) {\n    options.qs = req.queryObj\n  }\n\n  if (Object.keys(req.headersObj).length) {\n    options.headers = req.headersObj\n  }\n\n  function test (type) {\n    return req.postData.mimeType.indexOf(type) === 0\n  }\n  if (test('application/x-www-form-urlencoded')) {\n    options.form = req.postData.paramsObj\n  } else if (test('application/json')) {\n    if (req.postData.jsonObj) {\n      options.body = req.postData.jsonObj\n      options.json = true\n    }\n  } else if (test('multipart/form-data')) {\n    options.formData = {}\n\n    req.postData.params.forEach(function (param) {\n      var attachment = {}\n\n      if (!param.fileName && !param.fileName && !param.contentType) {\n        options.formData[param.name] = param.value\n        return\n      }\n\n      // attempt to read from disk!\n      if (param.fileName && !param.value) {\n        attachment.value = fs.createReadStream(param.fileName)\n      } else if (param.value) {\n        attachment.value = param.value\n      }\n\n      if (param.fileName) {\n        attachment.options = {\n          filename: param.fileName,\n          contentType: param.contentType ? param.contentType : null\n        }\n      }\n\n      options.formData[param.name] = attachment\n    })\n  } else {\n    if (req.postData.text) {\n      options.body = req.postData.text\n    }\n  }\n\n  return options\n}\n\nexports.Har = Har\n","var Ajv = require('ajv')\nvar HARError = require('./error')\nvar schemas = require('har-schema')\n\nvar ajv\n\nfunction validate (name, data) {\n  data = data || {}\n\n  // validator config\n  ajv = ajv || new Ajv({\n    allErrors: true,\n    schemas: schemas\n  })\n\n  var validate = ajv.getSchema(name + '.json')\n\n  return new Promise(function (resolve, reject) {\n    var valid = validate(data)\n\n    !valid ? reject(new HARError(validate.errors)) : resolve(data)\n  })\n}\n\nexports.afterRequest = function (data) {\n  return validate('afterRequest', data)\n}\n\nexports.beforeRequest = function (data) {\n  return validate('beforeRequest', data)\n}\n\nexports.browser = function (data) {\n  return validate('browser', data)\n}\n\nexports.cache = function (data) {\n  return validate('cache', data)\n}\n\nexports.content = function (data) {\n  return validate('content', data)\n}\n\nexports.cookie = function (data) {\n  return validate('cookie', data)\n}\n\nexports.creator = function (data) {\n  return validate('creator', data)\n}\n\nexports.entry = function (data) {\n  return validate('entry', data)\n}\n\nexports.har = function (data) {\n  return validate('har', data)\n}\n\nexports.header = function (data) {\n  return validate('header', data)\n}\n\nexports.log = function (data) {\n  return validate('log', data)\n}\n\nexports.page = function (data) {\n  return validate('page', data)\n}\n\nexports.pageTimings = function (data) {\n  return validate('pageTimings', data)\n}\n\nexports.postData = function (data) {\n  return validate('postData', data)\n}\n\nexports.query = function (data) {\n  return validate('query', data)\n}\n\nexports.request = function (data) {\n  return validate('request', data)\n}\n\nexports.response = function (data) {\n  return validate('response', data)\n}\n\nexports.timings = function (data) {\n  return validate('timings', data)\n}\n","function HARError (errors) {\n  var message = 'validation failed'\n\n  this.name = 'HARError'\n  this.message = message\n  this.errors = errors\n\n  if (typeof Error.captureStackTrace === 'function') {\n    Error.captureStackTrace(this, this.constructor)\n  } else {\n    this.stack = (new Error(message)).stack\n  }\n}\n\nHARError.prototype = Error.prototype\n\nmodule.exports = HARError\n","'use strict'\n\nvar caseless = require('caseless')\nvar uuid = require('uuid/v4')\nvar helpers = require('./helpers')\n\nvar md5 = helpers.md5\nvar toBase64 = helpers.toBase64\n\nfunction Auth (request) {\n  // define all public properties here\n  this.request = request\n  this.hasAuth = false\n  this.sentAuth = false\n  this.bearerToken = null\n  this.user = null\n  this.pass = null\n}\n\nAuth.prototype.basic = function (user, pass, sendImmediately) {\n  var self = this\n  if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {\n    self.request.emit('error', new Error('auth() received invalid user or password'))\n  }\n  self.user = user\n  self.pass = pass\n  self.hasAuth = true\n  var header = user + ':' + (pass || '')\n  if (sendImmediately || typeof sendImmediately === 'undefined') {\n    var authHeader = 'Basic ' + toBase64(header)\n    self.sentAuth = true\n    return authHeader\n  }\n}\n\nAuth.prototype.bearer = function (bearer, sendImmediately) {\n  var self = this\n  self.bearerToken = bearer\n  self.hasAuth = true\n  if (sendImmediately || typeof sendImmediately === 'undefined') {\n    if (typeof bearer === 'function') {\n      bearer = bearer()\n    }\n    var authHeader = 'Bearer ' + (bearer || '')\n    self.sentAuth = true\n    return authHeader\n  }\n}\n\nAuth.prototype.digest = function (method, path, authHeader) {\n  // TODO: More complete implementation of RFC 2617.\n  //   - handle challenge.domain\n  //   - support qop=\"auth-int\" only\n  //   - handle Authentication-Info (not necessarily?)\n  //   - check challenge.stale (not necessarily?)\n  //   - increase nc (not necessarily?)\n  // For reference:\n  // http://tools.ietf.org/html/rfc2617#section-3\n  // https://github.com/bagder/curl/blob/master/lib/http_digest.c\n\n  var self = this\n\n  var challenge = {}\n  var re = /([a-z0-9_-]+)=(?:\"([^\"]+)\"|([a-z0-9_-]+))/gi\n  for (;;) {\n    var match = re.exec(authHeader)\n    if (!match) {\n      break\n    }\n    challenge[match[1]] = match[2] || match[3]\n  }\n\n  /**\n   * RFC 2617: handle both MD5 and MD5-sess algorithms.\n   *\n   * If the algorithm directive's value is \"MD5\" or unspecified, then HA1 is\n   *   HA1=MD5(username:realm:password)\n   * If the algorithm directive's value is \"MD5-sess\", then HA1 is\n   *   HA1=MD5(MD5(username:realm:password):nonce:cnonce)\n   */\n  var ha1Compute = function (algorithm, user, realm, pass, nonce, cnonce) {\n    var ha1 = md5(user + ':' + realm + ':' + pass)\n    if (algorithm && algorithm.toLowerCase() === 'md5-sess') {\n      return md5(ha1 + ':' + nonce + ':' + cnonce)\n    } else {\n      return ha1\n    }\n  }\n\n  var qop = /(^|,)\\s*auth\\s*($|,)/.test(challenge.qop) && 'auth'\n  var nc = qop && '00000001'\n  var cnonce = qop && uuid().replace(/-/g, '')\n  var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce)\n  var ha2 = md5(method + ':' + path)\n  var digestResponse = qop\n    ? md5(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2)\n    : md5(ha1 + ':' + challenge.nonce + ':' + ha2)\n  var authValues = {\n    username: self.user,\n    realm: challenge.realm,\n    nonce: challenge.nonce,\n    uri: path,\n    qop: qop,\n    response: digestResponse,\n    nc: nc,\n    cnonce: cnonce,\n    algorithm: challenge.algorithm,\n    opaque: challenge.opaque\n  }\n\n  authHeader = []\n  for (var k in authValues) {\n    if (authValues[k]) {\n      if (k === 'qop' || k === 'nc' || k === 'algorithm') {\n        authHeader.push(k + '=' + authValues[k])\n      } else {\n        authHeader.push(k + '=\"' + authValues[k] + '\"')\n      }\n    }\n  }\n  authHeader = 'Digest ' + authHeader.join(', ')\n  self.sentAuth = true\n  return authHeader\n}\n\nAuth.prototype.onRequest = function (user, pass, sendImmediately, bearer) {\n  var self = this\n  var request = self.request\n\n  var authHeader\n  if (bearer === undefined && user === undefined) {\n    self.request.emit('error', new Error('no auth mechanism defined'))\n  } else if (bearer !== undefined) {\n    authHeader = self.bearer(bearer, sendImmediately)\n  } else {\n    authHeader = self.basic(user, pass, sendImmediately)\n  }\n  if (authHeader) {\n    request.setHeader('authorization', authHeader)\n  }\n}\n\nAuth.prototype.onResponse = function (response) {\n  var self = this\n  var request = self.request\n\n  if (!self.hasAuth || self.sentAuth) { return null }\n\n  var c = caseless(response.headers)\n\n  var authHeader = c.get('www-authenticate')\n  var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase()\n  request.debug('reauth', authVerb)\n\n  switch (authVerb) {\n    case 'basic':\n      return self.basic(self.user, self.pass, true)\n\n    case 'bearer':\n      return self.bearer(self.bearerToken, true)\n\n    case 'digest':\n      return self.digest(request.method, request.path, authHeader)\n  }\n}\n\nexports.Auth = Auth\n","// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","'use strict'\n\nvar url = require('url')\nvar qs = require('qs')\nvar caseless = require('caseless')\nvar uuid = require('uuid/v4')\nvar oauth = require('oauth-sign')\nvar crypto = require('crypto')\nvar Buffer = require('safe-buffer').Buffer\n\nfunction OAuth (request) {\n  this.request = request\n  this.params = null\n}\n\nOAuth.prototype.buildParams = function (_oauth, uri, method, query, form, qsLib) {\n  var oa = {}\n  for (var i in _oauth) {\n    oa['oauth_' + i] = _oauth[i]\n  }\n  if (!oa.oauth_version) {\n    oa.oauth_version = '1.0'\n  }\n  if (!oa.oauth_timestamp) {\n    oa.oauth_timestamp = Math.floor(Date.now() / 1000).toString()\n  }\n  if (!oa.oauth_nonce) {\n    oa.oauth_nonce = uuid().replace(/-/g, '')\n  }\n  if (!oa.oauth_signature_method) {\n    oa.oauth_signature_method = 'HMAC-SHA1'\n  }\n\n  var consumer_secret_or_private_key = oa.oauth_consumer_secret || oa.oauth_private_key // eslint-disable-line camelcase\n  delete oa.oauth_consumer_secret\n  delete oa.oauth_private_key\n\n  var token_secret = oa.oauth_token_secret // eslint-disable-line camelcase\n  delete oa.oauth_token_secret\n\n  var realm = oa.oauth_realm\n  delete oa.oauth_realm\n  delete oa.oauth_transport_method\n\n  var baseurl = uri.protocol + '//' + uri.host + uri.pathname\n  var params = qsLib.parse([].concat(query, form, qsLib.stringify(oa)).join('&'))\n\n  oa.oauth_signature = oauth.sign(\n    oa.oauth_signature_method,\n    method,\n    baseurl,\n    params,\n    consumer_secret_or_private_key, // eslint-disable-line camelcase\n    token_secret // eslint-disable-line camelcase\n  )\n\n  if (realm) {\n    oa.realm = realm\n  }\n\n  return oa\n}\n\nOAuth.prototype.buildBodyHash = function (_oauth, body) {\n  if (['HMAC-SHA1', 'RSA-SHA1'].indexOf(_oauth.signature_method || 'HMAC-SHA1') < 0) {\n    this.request.emit('error', new Error('oauth: ' + _oauth.signature_method +\n      ' signature_method not supported with body_hash signing.'))\n  }\n\n  var shasum = crypto.createHash('sha1')\n  shasum.update(body || '')\n  var sha1 = shasum.digest('hex')\n\n  return Buffer.from(sha1, 'hex').toString('base64')\n}\n\nOAuth.prototype.concatParams = function (oa, sep, wrap) {\n  wrap = wrap || ''\n\n  var params = Object.keys(oa).filter(function (i) {\n    return i !== 'realm' && i !== 'oauth_signature'\n  }).sort()\n\n  if (oa.realm) {\n    params.splice(0, 0, 'realm')\n  }\n  params.push('oauth_signature')\n\n  return params.map(function (i) {\n    return i + '=' + wrap + oauth.rfc3986(oa[i]) + wrap\n  }).join(sep)\n}\n\nOAuth.prototype.onRequest = function (_oauth) {\n  var self = this\n  self.params = _oauth\n\n  var uri = self.request.uri || {}\n  var method = self.request.method || ''\n  var headers = caseless(self.request.headers)\n  var body = self.request.body || ''\n  var qsLib = self.request.qsLib || qs\n\n  var form\n  var query\n  var contentType = headers.get('content-type') || ''\n  var formContentType = 'application/x-www-form-urlencoded'\n  var transport = _oauth.transport_method || 'header'\n\n  if (contentType.slice(0, formContentType.length) === formContentType) {\n    contentType = formContentType\n    form = body\n  }\n  if (uri.query) {\n    query = uri.query\n  }\n  if (transport === 'body' && (method !== 'POST' || contentType !== formContentType)) {\n    self.request.emit('error', new Error('oauth: transport_method of body requires POST ' +\n      'and content-type ' + formContentType))\n  }\n\n  if (!form && typeof _oauth.body_hash === 'boolean') {\n    _oauth.body_hash = self.buildBodyHash(_oauth, self.request.body.toString())\n  }\n\n  var oa = self.buildParams(_oauth, uri, method, query, form, qsLib)\n\n  switch (transport) {\n    case 'header':\n      self.request.setHeader('Authorization', 'OAuth ' + self.concatParams(oa, ',', '\"'))\n      break\n\n    case 'query':\n      var href = self.request.uri.href += (query ? '&' : '?') + self.concatParams(oa, '&')\n      self.request.uri = url.parse(href)\n      self.request.path = self.request.uri.path\n      break\n\n    case 'body':\n      self.request.body = (form ? form + '&' : '') + self.concatParams(oa, '&')\n      break\n\n    default:\n      self.request.emit('error', new Error('oauth: transport_method invalid'))\n  }\n}\n\nexports.OAuth = OAuth\n","var crypto = require('crypto')\n\nfunction sha (key, body, algorithm) {\n  return crypto.createHmac(algorithm, key).update(body).digest('base64')\n}\n\nfunction rsa (key, body) {\n  return crypto.createSign('RSA-SHA1').update(body).sign(key, 'base64')\n}\n\nfunction rfc3986 (str) {\n  return encodeURIComponent(str)\n    .replace(/!/g,'%21')\n    .replace(/\\*/g,'%2A')\n    .replace(/\\(/g,'%28')\n    .replace(/\\)/g,'%29')\n    .replace(/'/g,'%27')\n}\n\n// Maps object to bi-dimensional array\n// Converts { foo: 'A', bar: [ 'b', 'B' ]} to\n// [ ['foo', 'A'], ['bar', 'b'], ['bar', 'B'] ]\nfunction map (obj) {\n  var key, val, arr = []\n  for (key in obj) {\n    val = obj[key]\n    if (Array.isArray(val))\n      for (var i = 0; i < val.length; i++)\n        arr.push([key, val[i]])\n    else if (typeof val === 'object')\n      for (var prop in val)\n        arr.push([key + '[' + prop + ']', val[prop]])\n    else\n      arr.push([key, val])\n  }\n  return arr\n}\n\n// Compare function for sort\nfunction compare (a, b) {\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nfunction generateBase (httpMethod, base_uri, params) {\n  // adapted from https://dev.twitter.com/docs/auth/oauth and \n  // https://dev.twitter.com/docs/auth/creating-signature\n\n  // Parameter normalization\n  // http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2\n  var normalized = map(params)\n  // 1.  First, the name and value of each parameter are encoded\n  .map(function (p) {\n    return [ rfc3986(p[0]), rfc3986(p[1] || '') ]\n  })\n  // 2.  The parameters are sorted by name, using ascending byte value\n  //     ordering.  If two or more parameters share the same name, they\n  //     are sorted by their value.\n  .sort(function (a, b) {\n    return compare(a[0], b[0]) || compare(a[1], b[1])\n  })\n  // 3.  The name of each parameter is concatenated to its corresponding\n  //     value using an \"=\" character (ASCII code 61) as a separator, even\n  //     if the value is empty.\n  .map(function (p) { return p.join('=') })\n   // 4.  The sorted name/value pairs are concatenated together into a\n   //     single string by using an \"&\" character (ASCII code 38) as\n   //     separator.\n  .join('&')\n\n  var base = [\n    rfc3986(httpMethod ? httpMethod.toUpperCase() : 'GET'),\n    rfc3986(base_uri),\n    rfc3986(normalized)\n  ].join('&')\n\n  return base\n}\n\nfunction hmacsign (httpMethod, base_uri, params, consumer_secret, token_secret) {\n  var base = generateBase(httpMethod, base_uri, params)\n  var key = [\n    consumer_secret || '',\n    token_secret || ''\n  ].map(rfc3986).join('&')\n\n  return sha(key, base, 'sha1')\n}\n\nfunction hmacsign256 (httpMethod, base_uri, params, consumer_secret, token_secret) {\n  var base = generateBase(httpMethod, base_uri, params)\n  var key = [\n    consumer_secret || '',\n    token_secret || ''\n  ].map(rfc3986).join('&')\n\n  return sha(key, base, 'sha256')\n}\n\nfunction rsasign (httpMethod, base_uri, params, private_key, token_secret) {\n  var base = generateBase(httpMethod, base_uri, params)\n  var key = private_key || ''\n\n  return rsa(key, base)\n}\n\nfunction plaintext (consumer_secret, token_secret) {\n  var key = [\n    consumer_secret || '',\n    token_secret || ''\n  ].map(rfc3986).join('&')\n\n  return key\n}\n\nfunction sign (signMethod, httpMethod, base_uri, params, consumer_secret, token_secret) {\n  var method\n  var skipArgs = 1\n\n  switch (signMethod) {\n    case 'RSA-SHA1':\n      method = rsasign\n      break\n    case 'HMAC-SHA1':\n      method = hmacsign\n      break\n    case 'HMAC-SHA256':\n      method = hmacsign256\n      break\n    case 'PLAINTEXT':\n      method = plaintext\n      skipArgs = 4\n      break\n    default:\n     throw new Error('Signature method not supported: ' + signMethod)\n  }\n\n  return method.apply(null, [].slice.call(arguments, skipArgs))\n}\n\nexports.hmacsign = hmacsign\nexports.hmacsign256 = hmacsign256\nexports.rsasign = rsasign\nexports.plaintext = plaintext\nexports.sign = sign\nexports.rfc3986 = rfc3986\nexports.generateBase = generateBase","'use strict'\n\nvar crypto = require('crypto')\n\nfunction randomString (size) {\n  var bits = (size + 1) * 6\n  var buffer = crypto.randomBytes(Math.ceil(bits / 8))\n  var string = buffer.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return string.slice(0, size)\n}\n\nfunction calculatePayloadHash (payload, algorithm, contentType) {\n  var hash = crypto.createHash(algorithm)\n  hash.update('hawk.1.payload\\n')\n  hash.update((contentType ? contentType.split(';')[0].trim().toLowerCase() : '') + '\\n')\n  hash.update(payload || '')\n  hash.update('\\n')\n  return hash.digest('base64')\n}\n\nexports.calculateMac = function (credentials, opts) {\n  var normalized = 'hawk.1.header\\n' +\n    opts.ts + '\\n' +\n    opts.nonce + '\\n' +\n    (opts.method || '').toUpperCase() + '\\n' +\n    opts.resource + '\\n' +\n    opts.host.toLowerCase() + '\\n' +\n    opts.port + '\\n' +\n    (opts.hash || '') + '\\n'\n\n  if (opts.ext) {\n    normalized = normalized + opts.ext.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n')\n  }\n\n  normalized = normalized + '\\n'\n\n  if (opts.app) {\n    normalized = normalized + opts.app + '\\n' + (opts.dlg || '') + '\\n'\n  }\n\n  var hmac = crypto.createHmac(credentials.algorithm, credentials.key).update(normalized)\n  var digest = hmac.digest('base64')\n  return digest\n}\n\nexports.header = function (uri, method, opts) {\n  var timestamp = opts.timestamp || Math.floor((Date.now() + (opts.localtimeOffsetMsec || 0)) / 1000)\n  var credentials = opts.credentials\n  if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {\n    return ''\n  }\n\n  if (['sha1', 'sha256'].indexOf(credentials.algorithm) === -1) {\n    return ''\n  }\n\n  var artifacts = {\n    ts: timestamp,\n    nonce: opts.nonce || randomString(6),\n    method: method,\n    resource: uri.pathname + (uri.search || ''),\n    host: uri.hostname,\n    port: uri.port || (uri.protocol === 'http:' ? 80 : 443),\n    hash: opts.hash,\n    ext: opts.ext,\n    app: opts.app,\n    dlg: opts.dlg\n  }\n\n  if (!artifacts.hash && (opts.payload || opts.payload === '')) {\n    artifacts.hash = calculatePayloadHash(opts.payload, credentials.algorithm, opts.contentType)\n  }\n\n  var mac = exports.calculateMac(credentials, artifacts)\n\n  var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== ''\n  var header = 'Hawk id=\"' + credentials.id +\n    '\", ts=\"' + artifacts.ts +\n    '\", nonce=\"' + artifacts.nonce +\n    (artifacts.hash ? '\", hash=\"' + artifacts.hash : '') +\n    (hasExt ? '\", ext=\"' + artifacts.ext.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"') : '') +\n    '\", mac=\"' + mac + '\"'\n\n  if (artifacts.app) {\n    header = header + ', app=\"' + artifacts.app + (artifacts.dlg ? '\", dlg=\"' + artifacts.dlg : '') + '\"'\n  }\n\n  return header\n}\n","'use strict'\n\nvar uuid = require('uuid/v4')\nvar CombinedStream = require('combined-stream')\nvar isstream = require('isstream')\nvar Buffer = require('safe-buffer').Buffer\n\nfunction Multipart (request) {\n  this.request = request\n  this.boundary = uuid()\n  this.chunked = false\n  this.body = null\n}\n\nMultipart.prototype.isChunked = function (options) {\n  var self = this\n  var chunked = false\n  var parts = options.data || options\n\n  if (!parts.forEach) {\n    self.request.emit('error', new Error('Argument error, options.multipart.'))\n  }\n\n  if (options.chunked !== undefined) {\n    chunked = options.chunked\n  }\n\n  if (self.request.getHeader('transfer-encoding') === 'chunked') {\n    chunked = true\n  }\n\n  if (!chunked) {\n    parts.forEach(function (part) {\n      if (typeof part.body === 'undefined') {\n        self.request.emit('error', new Error('Body attribute missing in multipart.'))\n      }\n      if (isstream(part.body)) {\n        chunked = true\n      }\n    })\n  }\n\n  return chunked\n}\n\nMultipart.prototype.setHeaders = function (chunked) {\n  var self = this\n\n  if (chunked && !self.request.hasHeader('transfer-encoding')) {\n    self.request.setHeader('transfer-encoding', 'chunked')\n  }\n\n  var header = self.request.getHeader('content-type')\n\n  if (!header || header.indexOf('multipart') === -1) {\n    self.request.setHeader('content-type', 'multipart/related; boundary=' + self.boundary)\n  } else {\n    if (header.indexOf('boundary') !== -1) {\n      self.boundary = header.replace(/.*boundary=([^\\s;]+).*/, '$1')\n    } else {\n      self.request.setHeader('content-type', header + '; boundary=' + self.boundary)\n    }\n  }\n}\n\nMultipart.prototype.build = function (parts, chunked) {\n  var self = this\n  var body = chunked ? new CombinedStream() : []\n\n  function add (part) {\n    if (typeof part === 'number') {\n      part = part.toString()\n    }\n    return chunked ? body.append(part) : body.push(Buffer.from(part))\n  }\n\n  if (self.request.preambleCRLF) {\n    add('\\r\\n')\n  }\n\n  parts.forEach(function (part) {\n    var preamble = '--' + self.boundary + '\\r\\n'\n    Object.keys(part).forEach(function (key) {\n      if (key === 'body') { return }\n      preamble += key + ': ' + part[key] + '\\r\\n'\n    })\n    preamble += '\\r\\n'\n    add(preamble)\n    add(part.body)\n    add('\\r\\n')\n  })\n  add('--' + self.boundary + '--')\n\n  if (self.request.postambleCRLF) {\n    add('\\r\\n')\n  }\n\n  return body\n}\n\nMultipart.prototype.onRequest = function (options) {\n  var self = this\n\n  var chunked = self.isChunked(options)\n  var parts = options.data || options\n\n  self.setHeaders(chunked)\n  self.chunked = chunked\n  self.body = self.build(parts, chunked)\n}\n\nexports.Multipart = Multipart\n","'use strict'\n\nvar url = require('url')\nvar isUrl = /^https?:/\n\nfunction Redirect (request) {\n  this.request = request\n  this.followRedirect = true\n  this.followRedirects = true\n  this.followAllRedirects = false\n  this.followOriginalHttpMethod = false\n  this.allowRedirect = function () { return true }\n  this.maxRedirects = 10\n  this.redirects = []\n  this.redirectsFollowed = 0\n  this.removeRefererHeader = false\n}\n\nRedirect.prototype.onRequest = function (options) {\n  var self = this\n\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || []\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader\n  }\n  if (options.followOriginalHttpMethod !== undefined) {\n    self.followOriginalHttpMethod = options.followOriginalHttpMethod\n  }\n}\n\nRedirect.prototype.redirectTo = function (response) {\n  var self = this\n  var request = self.request\n\n  var redirectTo = null\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location')\n    request.debug('redirect', location)\n\n    if (self.followAllRedirects) {\n      redirectTo = location\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break\n        default:\n          redirectTo = location\n          break\n      }\n    }\n  } else if (response.statusCode === 401) {\n    var authHeader = request._auth.onResponse(response)\n    if (authHeader) {\n      request.setHeader('authorization', authHeader)\n      redirectTo = request.uri\n    }\n  }\n  return redirectTo\n}\n\nRedirect.prototype.onResponse = function (response) {\n  var self = this\n  var request = self.request\n\n  var redirectTo = self.redirectTo(response)\n  if (!redirectTo || !self.allowRedirect.call(request, response)) {\n    return false\n  }\n\n  request.debug('redirect to', redirectTo)\n\n  // ignore any potential response body.  it cannot possibly be useful\n  // to us at this point.\n  // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n  if (response.resume) {\n    response.resume()\n  }\n\n  if (self.redirectsFollowed >= self.maxRedirects) {\n    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))\n    return false\n  }\n  self.redirectsFollowed += 1\n\n  if (!isUrl.test(redirectTo)) {\n    redirectTo = url.resolve(request.uri.href, redirectTo)\n  }\n\n  var uriPrev = request.uri\n  request.uri = url.parse(redirectTo)\n\n  // handle the case where we change protocol from https to http or vice versa\n  if (request.uri.protocol !== uriPrev.protocol) {\n    delete request.agent\n  }\n\n  self.redirects.push({ statusCode: response.statusCode, redirectUri: redirectTo })\n\n  if (self.followAllRedirects && request.method !== 'HEAD' &&\n    response.statusCode !== 401 && response.statusCode !== 307) {\n    request.method = self.followOriginalHttpMethod ? request.method : 'GET'\n  }\n  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n  delete request.src\n  delete request.req\n  delete request._started\n  if (response.statusCode !== 401 && response.statusCode !== 307) {\n    // Remove parameters from the previous response, unless this is the second request\n    // for a server that requires digest authentication.\n    delete request.body\n    delete request._form\n    if (request.headers) {\n      request.removeHeader('host')\n      request.removeHeader('content-type')\n      request.removeHeader('content-length')\n      if (request.uri.hostname !== request.originalHost.split(':')[0]) {\n        // Remove authorization if changing hostnames (but not if just\n        // changing ports or protocols).  This matches the behavior of curl:\n        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n        request.removeHeader('authorization')\n      }\n    }\n  }\n\n  if (!self.removeRefererHeader) {\n    request.setHeader('referer', uriPrev.href)\n  }\n\n  request.emit('redirect')\n\n  request.init()\n\n  return true\n}\n\nexports.Redirect = Redirect\n","'use strict'\n\nvar url = require('url')\nvar tunnel = require('tunnel-agent')\n\nvar defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via'\n]\n\nvar defaultProxyHeaderExclusiveList = [\n  'proxy-authorization'\n]\n\nfunction constructProxyHost (uriObject) {\n  var port = uriObject.port\n  var protocol = uriObject.protocol\n  var proxyHost = uriObject.hostname + ':'\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction constructProxyHeaderWhiteList (headers, proxyHeaderWhiteList) {\n  var whiteList = proxyHeaderWhiteList\n    .reduce(function (set, header) {\n      set[header.toLowerCase()] = true\n      return set\n    }, {})\n\n  return Object.keys(headers)\n    .filter(function (header) {\n      return whiteList[header.toLowerCase()]\n    })\n    .reduce(function (set, header) {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions (request, proxyHeaders) {\n  var proxy = request.proxy\n\n  var tunnelOptions = {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders\n    },\n    headers: request.headers,\n    ca: request.ca,\n    cert: request.cert,\n    key: request.key,\n    passphrase: request.passphrase,\n    pfx: request.pfx,\n    ciphers: request.ciphers,\n    rejectUnauthorized: request.rejectUnauthorized,\n    secureOptions: request.secureOptions,\n    secureProtocol: request.secureProtocol\n  }\n\n  return tunnelOptions\n}\n\nfunction constructTunnelFnName (uri, proxy) {\n  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')\n  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')\n  return [uriProtocol, proxyProtocol].join('Over')\n}\n\nfunction getTunnelFn (request) {\n  var uri = request.uri\n  var proxy = request.proxy\n  var tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\nfunction Tunnel (request) {\n  this.request = request\n  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n  this.proxyHeaderExclusiveList = []\n  if (typeof request.tunnel !== 'undefined') {\n    this.tunnelOverride = request.tunnel\n  }\n}\n\nTunnel.prototype.isEnabled = function () {\n  var self = this\n  var request = self.request\n    // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If self.tunnelOverride is set (the user specified a value), use it.\n  if (typeof self.tunnelOverride !== 'undefined') {\n    return self.tunnelOverride\n  }\n\n  // If the destination is HTTPS, tunnel.\n  if (request.uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nTunnel.prototype.setup = function (options) {\n  var self = this\n  var request = self.request\n\n  options = options || {}\n\n  if (typeof request.proxy === 'string') {\n    request.proxy = url.parse(request.proxy)\n  }\n\n  if (!request.proxy || !request.tunnel) {\n    return false\n  }\n\n  // Setup Proxy Header Exclusive List and White List\n  if (options.proxyHeaderWhiteList) {\n    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList\n  }\n  if (options.proxyHeaderExclusiveList) {\n    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList\n  }\n\n  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)\n  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)\n\n  // Setup Proxy Headers and Proxy Headers Host\n  // Only send the Proxy White Listed Header names\n  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(request.uri)\n\n  proxyHeaderExclusiveList.forEach(request.removeHeader, request)\n\n  // Set Agent from Tunnel Data\n  var tunnelFn = getTunnelFn(request)\n  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)\n  request.agent = tunnelFn(tunnelOptions)\n\n  return true\n}\n\nTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList\nTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\nexports.Tunnel = Tunnel\n","// The MIT License (MIT)\r\n//\r\n// Copyright (c) 2016 Yang Xia\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n// SOFTWARE.\r\n\r\n'use strict';\r\n\r\nvar util = require('util');\r\nvar JsonParser = require('jsonparse');\r\n\r\nexports = module.exports;\r\nutil.inherits(Parser, JsonParser);\r\n\r\n/**\r\n* Parser Instructor\r\n*/\r\nfunction Parser() {\r\n  this.internalParser = new JsonParser();\r\n  this.originalOnToken = this.internalParser.onToken;\r\n  this.internalParser.onToken = onToken.bind(this);\r\n  return this.internalParser;\r\n}\r\n\r\n/**\r\n* Handles the EDM types in the JSON object\r\n*   1. Number will be treated as Edm.Int32 by default\r\n*   2. Literal value 1.0 will be treated as Edm.Double\r\n*   3. Others will be handled according to the literal value\r\n*/\r\nvar onToken = function (token, value) {\r\n  var self = this;\r\n  var emitString = false;\r\n  function additionalEmit(additionalKey, additionalValue) {\r\n    var oldKey = self.internalParser.key;\r\n    self.internalParser.key = additionalKey;\r\n    self.internalParser.onValue(additionalValue);\r\n    self.internalParser.key = oldKey;\r\n  }\r\n\r\n  if (token === JsonParser.C.STRING ||\r\n  token === JsonParser.C.NUMBER ||\r\n  token === JsonParser.C.TRUE ||\r\n  token === JsonParser.C.FALSE ||\r\n  token === JsonParser.C.NULL) {\r\n    // Parser will emit value in these cases\r\n    if (typeof value === 'number' && \r\n    this.internalParser.string.indexOf('.') != -1 && \r\n    parseInt(this.internalParser.string) === value &&\r\n    this.internalParser.mode !== JsonParser.C.ARRAY) {\r\n      var typeKey = this.internalParser.key + '@odata.type';\r\n      if (this.internalParser.value) {\r\n        this.internalParser.value[typeKey] = 'Edm.Double';\r\n      }\r\n      additionalEmit(typeKey, 'Edm.Double');\r\n      \r\n      // Determine whether return raw string to avoid losing precision\r\n      emitString = this.internalParser.string !== value.toString();\r\n    }\r\n  }\r\n  if (emitString) {\r\n    this.originalOnToken.call(this.internalParser, token, this.internalParser.string);\r\n  } else {\r\n    this.originalOnToken.call(this.internalParser, token, value);\r\n  }\r\n};\r\n\r\nParser.C = JsonParser.C;\r\nmodule.exports = Parser;","/*global Buffer*/\n// Named constants with unique integer values\nvar C = {};\n// Tokens\nvar LEFT_BRACE    = C.LEFT_BRACE    = 0x1;\nvar RIGHT_BRACE   = C.RIGHT_BRACE   = 0x2;\nvar LEFT_BRACKET  = C.LEFT_BRACKET  = 0x3;\nvar RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;\nvar COLON         = C.COLON         = 0x5;\nvar COMMA         = C.COMMA         = 0x6;\nvar TRUE          = C.TRUE          = 0x7;\nvar FALSE         = C.FALSE         = 0x8;\nvar NULL          = C.NULL          = 0x9;\nvar STRING        = C.STRING        = 0xa;\nvar NUMBER        = C.NUMBER        = 0xb;\n// Tokenizer States\nvar START   = C.START   = 0x11;\nvar STOP    = C.STOP    = 0x12;\nvar TRUE1   = C.TRUE1   = 0x21;\nvar TRUE2   = C.TRUE2   = 0x22;\nvar TRUE3   = C.TRUE3   = 0x23;\nvar FALSE1  = C.FALSE1  = 0x31;\nvar FALSE2  = C.FALSE2  = 0x32;\nvar FALSE3  = C.FALSE3  = 0x33;\nvar FALSE4  = C.FALSE4  = 0x34;\nvar NULL1   = C.NULL1   = 0x41;\nvar NULL2   = C.NULL2   = 0x42;\nvar NULL3   = C.NULL3   = 0x43;\nvar NUMBER1 = C.NUMBER1 = 0x51;\nvar NUMBER3 = C.NUMBER3 = 0x53;\nvar STRING1 = C.STRING1 = 0x61;\nvar STRING2 = C.STRING2 = 0x62;\nvar STRING3 = C.STRING3 = 0x63;\nvar STRING4 = C.STRING4 = 0x64;\nvar STRING5 = C.STRING5 = 0x65;\nvar STRING6 = C.STRING6 = 0x66;\n// Parser States\nvar VALUE   = C.VALUE   = 0x71;\nvar KEY     = C.KEY     = 0x72;\n// Parser Modes\nvar OBJECT  = C.OBJECT  = 0x81;\nvar ARRAY   = C.ARRAY   = 0x82;\n\n\nfunction Parser() {\n  this.tState = START;\n  this.value = undefined;\n\n  this.string = undefined; // string data\n  this.unicode = undefined; // unicode escapes\n\n  this.key = undefined;\n  this.mode = undefined;\n  this.stack = [];\n  this.state = VALUE;\n  this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n  this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n  this.temp_buffs = { \"2\": new Buffer(2), \"3\": new Buffer(3), \"4\": new Buffer(4) }; // for rebuilding chars split before boundary is reached\n\n  // Stream offset\n  this.offset = -1;\n}\n\n// Slow code to string converter (only used when throwing syntax errors)\nParser.toknam = function (code) {\n  var keys = Object.keys(C);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    if (C[key] === code) { return key; }\n  }\n  return code && (\"0x\" + code.toString(16));\n};\n\nvar proto = Parser.prototype;\nproto.onError = function (err) { throw err; };\nproto.charError = function (buffer, i) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + JSON.stringify(String.fromCharCode(buffer[i])) + \" at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n};\nproto.write = function (buffer) {\n  if (typeof buffer === \"string\") buffer = new Buffer(buffer);\n  var n;\n  for (var i = 0, l = buffer.length; i < l; i++) {\n    if (this.tState === START){\n      n = buffer[i];\n      this.offset++;\n      if(n === 0x7b){ this.onToken(LEFT_BRACE, \"{\"); // {\n      }else if(n === 0x7d){ this.onToken(RIGHT_BRACE, \"}\"); // }\n      }else if(n === 0x5b){ this.onToken(LEFT_BRACKET, \"[\"); // [\n      }else if(n === 0x5d){ this.onToken(RIGHT_BRACKET, \"]\"); // ]\n      }else if(n === 0x3a){ this.onToken(COLON, \":\");  // :\n      }else if(n === 0x2c){ this.onToken(COMMA, \",\"); // ,\n      }else if(n === 0x74){ this.tState = TRUE1;  // t\n      }else if(n === 0x66){ this.tState = FALSE1;  // f\n      }else if(n === 0x6e){ this.tState = NULL1; // n\n      }else if(n === 0x22){ this.string = \"\"; this.tState = STRING1; // \"\n      }else if(n === 0x2d){ this.string = \"-\"; this.tState = NUMBER1; // -\n      }else{\n        if (n >= 0x30 && n < 0x40) { // 1-9\n          this.string = String.fromCharCode(n); this.tState = NUMBER3;\n        } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) {\n          // whitespace\n        } else {\n          return this.charError(buffer, i);\n        }\n      }\n    }else if (this.tState === STRING1){ // After open quote\n      n = buffer[i]; // get current byte from buffer\n      // check for carry over of a multi byte char split between data chunks\n      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n      if (this.bytes_remaining > 0) {\n        for (var j = 0; j < this.bytes_remaining; j++) {\n          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];\n        }\n        this.string += this.temp_buffs[this.bytes_in_sequence].toString();\n        this.bytes_in_sequence = this.bytes_remaining = 0;\n        i = i + j - 1;\n      } else if (this.bytes_remaining === 0 && n >= 128) { // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time\n        if (n <= 193 || n > 244) {\n          return this.onError(new Error(\"Invalid UTF-8 character at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n        }\n        if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;\n        if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;\n        if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;\n        if ((this.bytes_in_sequence + i) > buffer.length) { // if bytes needed to complete char fall outside buffer length, we have a boundary split\n          for (var k = 0; k <= (buffer.length - 1 - i); k++) {\n            this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk\n          }\n          this.bytes_remaining = (i + this.bytes_in_sequence) - buffer.length;\n          i = buffer.length - 1;\n        } else {\n          this.string += buffer.slice(i, (i + this.bytes_in_sequence)).toString();\n          i = i + this.bytes_in_sequence - 1;\n        }\n      } else if (n === 0x22) { this.tState = START; this.onToken(STRING, this.string); this.offset += Buffer.byteLength(this.string, 'utf8') + 1; this.string = undefined; }\n      else if (n === 0x5c) { this.tState = STRING2; }\n      else if (n >= 0x20) { this.string += String.fromCharCode(n); }\n      else {\n          return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING2){ // After backslash\n      n = buffer[i];\n      if(n === 0x22){ this.string += \"\\\"\"; this.tState = STRING1;\n      }else if(n === 0x5c){ this.string += \"\\\\\"; this.tState = STRING1; \n      }else if(n === 0x2f){ this.string += \"\\/\"; this.tState = STRING1; \n      }else if(n === 0x62){ this.string += \"\\b\"; this.tState = STRING1; \n      }else if(n === 0x66){ this.string += \"\\f\"; this.tState = STRING1; \n      }else if(n === 0x6e){ this.string += \"\\n\"; this.tState = STRING1; \n      }else if(n === 0x72){ this.string += \"\\r\"; this.tState = STRING1; \n      }else if(n === 0x74){ this.string += \"\\t\"; this.tState = STRING1; \n      }else if(n === 0x75){ this.unicode = \"\"; this.tState = STRING3;\n      }else{ \n        return this.charError(buffer, i); \n      }\n    }else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6){ // unicode hex codes\n      n = buffer[i];\n      // 0-9 A-F a-f\n      if ((n >= 0x30 && n < 0x40) || (n > 0x40 && n <= 0x46) || (n > 0x60 && n <= 0x66)) {\n        this.unicode += String.fromCharCode(n);\n        if (this.tState++ === STRING6) {\n          this.string += String.fromCharCode(parseInt(this.unicode, 16));\n          this.unicode = undefined;\n          this.tState = STRING1; \n        }\n      } else {\n        return this.charError(buffer, i);\n      }\n    } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {\n        n = buffer[i];\n\n        switch (n) {\n          case 0x30: // 0\n          case 0x31: // 1\n          case 0x32: // 2\n          case 0x33: // 3\n          case 0x34: // 4\n          case 0x35: // 5\n          case 0x36: // 6\n          case 0x37: // 7\n          case 0x38: // 8\n          case 0x39: // 9\n          case 0x2e: // .\n          case 0x65: // e\n          case 0x45: // E\n          case 0x2b: // +\n          case 0x2d: // -\n            this.string += String.fromCharCode(n);\n            this.tState = NUMBER3;\n            break;\n          default:\n            this.tState = START;\n            var result = Number(this.string);\n\n            if (isNaN(result)){\n              return this.charError(buffer, i);\n            }\n\n            if ((this.string.match(/[0-9]+/) == this.string) && (result.toString() != this.string)) {\n              // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number\n              this.onToken(STRING, this.string);\n            } else {\n              this.onToken(NUMBER, result);\n            }\n\n            this.offset += this.string.length - 1;\n            this.string = undefined;\n            i--;\n            break;\n        }\n    }else if (this.tState === TRUE1){ // r\n      if (buffer[i] === 0x72) { this.tState = TRUE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE2){ // u\n      if (buffer[i] === 0x75) { this.tState = TRUE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE3){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(TRUE, true); this.offset+= 3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE1){ // a\n      if (buffer[i] === 0x61) { this.tState = FALSE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE2){ // l\n      if (buffer[i] === 0x6c) { this.tState = FALSE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE3){ // s\n      if (buffer[i] === 0x73) { this.tState = FALSE4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE4){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(FALSE, false); this.offset+= 4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL1){ // u\n      if (buffer[i] === 0x75) { this.tState = NULL2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL2){ // l\n      if (buffer[i] === 0x6c) { this.tState = NULL3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL3){ // l\n      if (buffer[i] === 0x6c) { this.tState = START; this.onToken(NULL, null); this.offset += 3; }\n      else { return this.charError(buffer, i); }\n    }\n  }\n};\nproto.onToken = function (token, value) {\n  // Override this to get events\n};\n\nproto.parseError = function (token, value) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + Parser.toknam(token) + (value ? (\"(\" + JSON.stringify(value) + \")\") : \"\") + \" in state \" + Parser.toknam(this.state)));\n};\nproto.push = function () {\n  this.stack.push({value: this.value, key: this.key, mode: this.mode});\n};\nproto.pop = function () {\n  var value = this.value;\n  var parent = this.stack.pop();\n  this.value = parent.value;\n  this.key = parent.key;\n  this.mode = parent.mode;\n  this.emit(value);\n  if (!this.mode) { this.state = VALUE; }\n};\nproto.emit = function (value) {\n  if (this.mode) { this.state = COMMA; }\n  this.onValue(value);\n};\nproto.onValue = function (value) {\n  // Override me\n};  \nproto.onToken = function (token, value) {\n  if(this.state === VALUE){\n    if(token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL){\n      if (this.value) {\n        this.value[this.key] = value;\n      }\n      this.emit(value);  \n    }else if(token === LEFT_BRACE){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = {};\n      } else {\n        this.value = {};\n      }\n      this.key = undefined;\n      this.state = KEY;\n      this.mode = OBJECT;\n    }else if(token === LEFT_BRACKET){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = [];\n      } else {\n        this.value = [];\n      }\n      this.key = 0;\n      this.mode = ARRAY;\n      this.state = VALUE;\n    }else if(token === RIGHT_BRACE){\n      if (this.mode === OBJECT) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else if(token === RIGHT_BRACKET){\n      if (this.mode === ARRAY) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else{\n      return this.parseError(token, value);\n    }\n  }else if(this.state === KEY){\n    if (token === STRING) {\n      this.key = value;\n      this.state = COLON;\n    } else if (token === RIGHT_BRACE) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else if(this.state === COLON){\n    if (token === COLON) { this.state = VALUE; }\n    else { return this.parseError(token, value); }\n  }else if(this.state === COMMA){\n    if (token === COMMA) { \n      if (this.mode === ARRAY) { this.key++; this.state = VALUE; }\n      else if (this.mode === OBJECT) { this.state = KEY; }\n\n    } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else{\n    return this.parseError(token, value);\n  }\n};\n\nParser.C = C;\n\nmodule.exports = Parser;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toInt;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toInt(str, radix) {\n  (0, _assertString2.default)(str);\n  return parseInt(str, radix || 10);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toBoolean;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toBoolean(str, strict) {\n  (0, _assertString2.default)(str);\n  if (strict) {\n    return str === '1' || str === 'true';\n  }\n  return str !== '0' && str !== 'false' && str !== '';\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = equals;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction equals(str, comparison) {\n  (0, _assertString2.default)(str);\n  return str === comparison;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = contains;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _toString = require('./util/toString');\n\nvar _toString2 = _interopRequireDefault(_toString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction contains(str, elem) {\n  (0, _assertString2.default)(str);\n  return str.indexOf((0, _toString2.default)(elem)) >= 0;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = matches;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction matches(str, pattern, modifiers) {\n  (0, _assertString2.default)(str);\n  if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {\n    pattern = new RegExp(pattern, modifiers);\n  }\n  return pattern.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _isByteLength = require('./isByteLength');\n\nvar _isByteLength2 = _interopRequireDefault(_isByteLength);\n\nvar _isFQDN = require('./isFQDN');\n\nvar _isFQDN2 = _interopRequireDefault(_isFQDN);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true\n};\n\n/* eslint-disable max-len */\n/* eslint-disable no-control-regex */\nvar displayName = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\,\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\s]*<(.+)>$/i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\n/* eslint-enable max-len */\n/* eslint-enable no-control-regex */\n\nfunction isEmail(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(displayName);\n    if (display_email) {\n      str = display_email[1];\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var user = parts.join('@');\n\n  var lower_domain = domain.toLowerCase();\n  if (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com') {\n    user = user.replace(/\\./g, '').toLowerCase();\n  }\n\n  if (!(0, _isByteLength2.default)(user, { max: 64 }) || !(0, _isByteLength2.default)(domain, { max: 254 })) {\n    return false;\n  }\n\n  if (!(0, _isFQDN2.default)(domain, { require_tld: options.require_tld })) {\n    return false;\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n\n  var user_parts = user.split('.');\n  for (var i = 0; i < user_parts.length; i++) {\n    if (!pattern.test(user_parts[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isURL;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _isFQDN = require('./isFQDN');\n\nvar _isFQDN2 = _interopRequireDefault(_isFQDN);\n\nvar _isIP = require('./isIP');\n\nvar _isIP2 = _interopRequireDefault(_isIP);\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_url_options = {\n  protocols: ['http', 'https', 'ftp'],\n  require_tld: true,\n  require_protocol: false,\n  require_host: true,\n  require_valid_protocol: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_protocol_relative_urls: false\n};\n\nvar wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\n\nfunction isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nfunction checkHost(host, matches) {\n  for (var i = 0; i < matches.length; i++) {\n    var match = matches[i];\n    if (host === match || isRegExp(match) && match.test(host)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isURL(url, options) {\n  (0, _assertString2.default)(url);\n  if (!url || url.length >= 2083 || /[\\s<>]/.test(url)) {\n    return false;\n  }\n  if (url.indexOf('mailto:') === 0) {\n    return false;\n  }\n  options = (0, _merge2.default)(options, default_url_options);\n  var protocol = void 0,\n      auth = void 0,\n      host = void 0,\n      hostname = void 0,\n      port = void 0,\n      port_str = void 0,\n      split = void 0,\n      ipv6 = void 0;\n\n  split = url.split('#');\n  url = split.shift();\n\n  split = url.split('?');\n  url = split.shift();\n\n  split = url.split('://');\n  if (split.length > 1) {\n    protocol = split.shift();\n    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {\n      return false;\n    }\n  } else if (options.require_protocol) {\n    return false;\n  } else if (options.allow_protocol_relative_urls && url.substr(0, 2) === '//') {\n    split[0] = url.substr(2);\n  }\n  url = split.join('://');\n\n  if (url === '') {\n    return false;\n  }\n\n  split = url.split('/');\n  url = split.shift();\n\n  if (url === '' && !options.require_host) {\n    return true;\n  }\n\n  split = url.split('@');\n  if (split.length > 1) {\n    auth = split.shift();\n    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\n      return false;\n    }\n  }\n  hostname = split.join('@');\n\n  port_str = null;\n  ipv6 = null;\n  var ipv6_match = hostname.match(wrapped_ipv6);\n  if (ipv6_match) {\n    host = '';\n    ipv6 = ipv6_match[1];\n    port_str = ipv6_match[2] || null;\n  } else {\n    split = hostname.split(':');\n    host = split.shift();\n    if (split.length) {\n      port_str = split.join(':');\n    }\n  }\n\n  if (port_str !== null) {\n    port = parseInt(port_str, 10);\n    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\n      return false;\n    }\n  }\n\n  if (!(0, _isIP2.default)(host) && !(0, _isFQDN2.default)(host, options) && (!ipv6 || !(0, _isIP2.default)(ipv6, 6))) {\n    return false;\n  }\n\n  host = host || ipv6;\n\n  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {\n    return false;\n  }\n  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {\n    return false;\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMACAddress;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar macAddress = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/;\n\nfunction isMACAddress(str) {\n  (0, _assertString2.default)(str);\n  return macAddress.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBoolean;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isBoolean(str) {\n  (0, _assertString2.default)(str);\n  return ['true', 'false', '1', '0'].indexOf(str) >= 0;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isAlpha;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _alpha = require('./alpha');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isAlpha(str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n\n  (0, _assertString2.default)(str);\n  if (locale in _alpha.alpha) {\n    return _alpha.alpha[locale].test(str);\n  }\n  throw new Error('Invalid locale \\'' + locale + '\\'');\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isAlphanumeric;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _alpha = require('./alpha');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isAlphanumeric(str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n\n  (0, _assertString2.default)(str);\n  if (locale in _alpha.alphanumeric) {\n    return _alpha.alphanumeric[locale].test(str);\n  }\n  throw new Error('Invalid locale \\'' + locale + '\\'');\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isNumeric;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar numeric = /^[-+]?[0-9]+$/;\n\nfunction isNumeric(str) {\n  (0, _assertString2.default)(str);\n  return numeric.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPort;\n\nvar _isInt = require('./isInt');\n\nvar _isInt2 = _interopRequireDefault(_isInt);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isPort(str) {\n  return (0, _isInt2.default)(str, { min: 0, max: 65535 });\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isLowercase;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isLowercase(str) {\n  (0, _assertString2.default)(str);\n  return str === str.toLowerCase();\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isUppercase;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isUppercase(str) {\n  (0, _assertString2.default)(str);\n  return str === str.toUpperCase();\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isAscii;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable no-control-regex */\nvar ascii = /^[\\x00-\\x7F]+$/;\n/* eslint-enable no-control-regex */\n\nfunction isAscii(str) {\n  (0, _assertString2.default)(str);\n  return ascii.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isVariableWidth;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _isFullWidth = require('./isFullWidth');\n\nvar _isHalfWidth = require('./isHalfWidth');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isVariableWidth(str) {\n  (0, _assertString2.default)(str);\n  return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMultibyte;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable no-control-regex */\nvar multibyte = /[^\\x00-\\x7F]/;\n/* eslint-enable no-control-regex */\n\nfunction isMultibyte(str) {\n  (0, _assertString2.default)(str);\n  return multibyte.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isSurrogatePair;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar surrogatePair = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\n\nfunction isSurrogatePair(str) {\n  (0, _assertString2.default)(str);\n  return surrogatePair.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFloat;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _alpha = require('./alpha');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isFloat(str, options) {\n  (0, _assertString2.default)(str);\n  options = options || {};\n  var float = new RegExp('^(?:[-+])?(?:[0-9]+)?(?:\\\\' + (options.locale ? _alpha.decimal[options.locale] : '.') + '[0-9]*)?(?:[eE][\\\\+\\\\-]?(?:[0-9]+))?$');\n  if (str === '' || str === '.' || str === '-' || str === '+') {\n    return false;\n  }\n  return float.test(str) && (!options.hasOwnProperty('min') || str >= options.min) && (!options.hasOwnProperty('max') || str <= options.max) && (!options.hasOwnProperty('lt') || str < options.lt) && (!options.hasOwnProperty('gt') || str > options.gt);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDecimal;\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _alpha = require('./alpha');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction decimalRegExp(options) {\n  var regExp = new RegExp('^[-+]?([0-9]+)?(\\\\' + _alpha.decimal[options.locale] + '[0-9]{' + options.decimal_digits + '})' + (options.force_decimal ? '' : '?') + '$');\n  return regExp;\n}\n\nvar default_decimal_options = {\n  force_decimal: false,\n  decimal_digits: '1,',\n  locale: 'en-US'\n};\n\nvar blacklist = ['', '-', '+'];\n\nfunction isDecimal(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_decimal_options);\n  if (options.locale in _alpha.decimal) {\n    return !blacklist.includes(str.replace(/ /g, '')) && decimalRegExp(options).test(str);\n  }\n  throw new Error('Invalid locale \\'' + options.locale + '\\'');\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDivisibleBy;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _toFloat = require('./toFloat');\n\nvar _toFloat2 = _interopRequireDefault(_toFloat);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isDivisibleBy(str, num) {\n  (0, _assertString2.default)(str);\n  return (0, _toFloat2.default)(str) % parseInt(num, 10) === 0;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isHexColor;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i;\n\nfunction isHexColor(str) {\n  (0, _assertString2.default)(str);\n  return hexcolor.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISRC;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// see http://isrc.ifpi.org/en/isrc-standard/code-syntax\nvar isrc = /^[A-Z]{2}[0-9A-Z]{3}\\d{2}\\d{5}$/;\n\nfunction isISRC(str) {\n  (0, _assertString2.default)(str);\n  return isrc.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMD5;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar md5 = /^[a-f0-9]{32}$/;\n\nfunction isMD5(str) {\n  (0, _assertString2.default)(str);\n  return md5.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isHash;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar lengths = {\n  md5: 32,\n  md4: 32,\n  sha1: 40,\n  sha256: 64,\n  sha384: 96,\n  sha512: 128,\n  ripemd128: 32,\n  ripemd160: 40,\n  tiger128: 32,\n  tiger160: 40,\n  tiger192: 48,\n  crc32: 8,\n  crc32b: 8\n};\n\nfunction isHash(str, algorithm) {\n  (0, _assertString2.default)(str);\n  var hash = new RegExp('^[a-f0-9]{' + lengths[algorithm] + '}$');\n  return hash.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = isJSON;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isJSON(str) {\n  (0, _assertString2.default)(str);\n  try {\n    var obj = JSON.parse(str);\n    return !!obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n  } catch (e) {/* ignore */}\n  return false;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmpty;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isEmpty(str) {\n  (0, _assertString2.default)(str);\n  return str.length === 0;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = isLength;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable prefer-rest-params */\nfunction isLength(str, options) {\n  (0, _assertString2.default)(str);\n  var min = void 0;\n  var max = void 0;\n  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isLength(str, min [, max])\n    min = arguments[1];\n    max = arguments[2];\n  }\n  var surrogatePairs = str.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g) || [];\n  var len = str.length - surrogatePairs.length;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isUUID;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar uuid = {\n  3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n  4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n};\n\nfunction isUUID(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';\n\n  (0, _assertString2.default)(str);\n  var pattern = uuid[version];\n  return pattern && pattern.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMongoId;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _isHexadecimal = require('./isHexadecimal');\n\nvar _isHexadecimal2 = _interopRequireDefault(_isHexadecimal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isMongoId(str) {\n  (0, _assertString2.default)(str);\n  return (0, _isHexadecimal2.default)(str) && str.length === 24;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isAfter;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _toDate = require('./toDate');\n\nvar _toDate2 = _interopRequireDefault(_toDate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isAfter(str) {\n  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());\n\n  (0, _assertString2.default)(str);\n  var comparison = (0, _toDate2.default)(date);\n  var original = (0, _toDate2.default)(str);\n  return !!(original && comparison && original > comparison);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBefore;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _toDate = require('./toDate');\n\nvar _toDate2 = _interopRequireDefault(_toDate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isBefore(str) {\n  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());\n\n  (0, _assertString2.default)(str);\n  var comparison = (0, _toDate2.default)(date);\n  var original = (0, _toDate2.default)(str);\n  return !!(original && comparison && original < comparison);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = isIn;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _toString = require('./util/toString');\n\nvar _toString2 = _interopRequireDefault(_toString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isIn(str, options) {\n  (0, _assertString2.default)(str);\n  var i = void 0;\n  if (Object.prototype.toString.call(options) === '[object Array]') {\n    var array = [];\n    for (i in options) {\n      if ({}.hasOwnProperty.call(options, i)) {\n        array[i] = (0, _toString2.default)(options[i]);\n      }\n    }\n    return array.indexOf(str) >= 0;\n  } else if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n    return options.hasOwnProperty(str);\n  } else if (options && typeof options.indexOf === 'function') {\n    return options.indexOf(str) >= 0;\n  }\n  return false;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCreditCard;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable max-len */\nvar creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|62[0-9]{14})$/;\n/* eslint-enable max-len */\n\nfunction isCreditCard(str) {\n  (0, _assertString2.default)(str);\n  var sanitized = str.replace(/[- ]+/g, '');\n  if (!creditCard.test(sanitized)) {\n    return false;\n  }\n  var sum = 0;\n  var digit = void 0;\n  var tmpNum = void 0;\n  var shouldDouble = void 0;\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n  return !!(sum % 10 === 0 ? sanitized : false);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISIN;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;\n\nfunction isISIN(str) {\n  (0, _assertString2.default)(str);\n  if (!isin.test(str)) {\n    return false;\n  }\n\n  var checksumStr = str.replace(/[A-Z]/g, function (character) {\n    return parseInt(character, 36);\n  });\n\n  var sum = 0;\n  var digit = void 0;\n  var tmpNum = void 0;\n  var shouldDouble = true;\n  for (var i = checksumStr.length - 2; i >= 0; i--) {\n    digit = checksumStr.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += tmpNum + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n\n  return parseInt(str.substr(str.length - 1), 10) === (10000 - sum) % 10;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISBN;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;\nvar isbn13Maybe = /^(?:[0-9]{13})$/;\nvar factor = [1, 3];\n\nfunction isISBN(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isISBN(str, 10) || isISBN(str, 13);\n  }\n  var sanitized = str.replace(/[\\s-]+/g, '');\n  var checksum = 0;\n  var i = void 0;\n  if (version === '10') {\n    if (!isbn10Maybe.test(sanitized)) {\n      return false;\n    }\n    for (i = 0; i < 9; i++) {\n      checksum += (i + 1) * sanitized.charAt(i);\n    }\n    if (sanitized.charAt(9) === 'X') {\n      checksum += 10 * 10;\n    } else {\n      checksum += 10 * sanitized.charAt(9);\n    }\n    if (checksum % 11 === 0) {\n      return !!sanitized;\n    }\n  } else if (version === '13') {\n    if (!isbn13Maybe.test(sanitized)) {\n      return false;\n    }\n    for (i = 0; i < 12; i++) {\n      checksum += factor[i % 2] * sanitized.charAt(i);\n    }\n    if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {\n      return !!sanitized;\n    }\n  }\n  return false;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISSN;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar issn = '^\\\\d{4}-?\\\\d{3}[\\\\dX]$';\n\nfunction isISSN(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  (0, _assertString2.default)(str);\n  var testIssn = issn;\n  testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;\n  testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');\n  if (!testIssn.test(str)) {\n    return false;\n  }\n  var issnDigits = str.replace('-', '');\n  var position = 8;\n  var checksum = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = issnDigits[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var digit = _step.value;\n\n      var digitValue = digit.toUpperCase() === 'X' ? 10 : +digit;\n      checksum += digitValue * position;\n      --position;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return checksum % 11 === 0;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMobilePhone;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable max-len */\nvar phones = {\n  'ar-AE': /^((\\+?971)|0)?5[024568]\\d{7}$/,\n  'ar-DZ': /^(\\+?213|0)(5|6|7)\\d{8}$/,\n  'ar-EG': /^((\\+?20)|0)?1[012]\\d{8}$/,\n  'ar-JO': /^(\\+?962|0)?7[789]\\d{7}$/,\n  'ar-SA': /^(!?(\\+?966)|0)?5\\d{8}$/,\n  'ar-SY': /^(!?(\\+?963)|0)?9\\d{8}$/,\n  'be-BY': /^(\\+?375)?(24|25|29|33|44)\\d{7}$/,\n  'bg-BG': /^(\\+?359|0)?8[789]\\d{7}$/,\n  'cs-CZ': /^(\\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,\n  'da-DK': /^(\\+?45)?\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}$/,\n  'de-DE': /^(\\+?49[ \\.\\-])?([\\(]{1}[0-9]{1,6}[\\)])?([0-9 \\.\\-\\/]{3,20})((x|ext|extension)[ ]?[0-9]{1,4})?$/,\n  'el-GR': /^(\\+?30|0)?(69\\d{8})$/,\n  'en-AU': /^(\\+?61|0)4\\d{8}$/,\n  'en-GB': /^(\\+?44|0)7\\d{9}$/,\n  'en-HK': /^(\\+?852\\-?)?[456789]\\d{3}\\-?\\d{4}$/,\n  'en-IN': /^(\\+?91|0)?[6789]\\d{9}$/,\n  'en-KE': /^(\\+?254|0)?[7]\\d{8}$/,\n  'en-NG': /^(\\+?234|0)?[789]\\d{9}$/,\n  'en-NZ': /^(\\+?64|0)2\\d{7,9}$/,\n  'en-PK': /^((\\+92)|(0092))-{0,1}\\d{3}-{0,1}\\d{7}$|^\\d{11}$|^\\d{4}-\\d{7}$/,\n  'en-RW': /^(\\+?250|0)?[7]\\d{8}$/,\n  'en-SG': /^(\\+65)?[89]\\d{7}$/,\n  'en-TZ': /^(\\+?255|0)?[67]\\d{8}$/,\n  'en-UG': /^(\\+?256|0)?[7]\\d{8}$/,\n  'en-US': /^(\\+?1)?[2-9]\\d{2}[2-9](?!11)\\d{6}$/,\n  'en-ZA': /^(\\+?27|0)\\d{9}$/,\n  'en-ZM': /^(\\+?26)?09[567]\\d{7}$/,\n  'es-ES': /^(\\+?34)?(6\\d{1}|7[1234])\\d{7}$/,\n  'et-EE': /^(\\+?372)?\\s?(5|8[1-4])\\s?([0-9]\\s?){6,7}$/,\n  'fa-IR': /^(\\+?98[\\-\\s]?|0)9[0-39]\\d[\\-\\s]?\\d{3}[\\-\\s]?\\d{4}$/,\n  'fi-FI': /^(\\+?358|0)\\s?(4(0|1|2|4|5|6)?|50)\\s?(\\d\\s?){4,8}\\d$/,\n  'fo-FO': /^(\\+?298)?\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}$/,\n  'fr-FR': /^(\\+?33|0)[67]\\d{8}$/,\n  'he-IL': /^(\\+972|0)([23489]|5[012345689]|77)[1-9]\\d{6}/,\n  'hu-HU': /^(\\+?36)(20|30|70)\\d{7}$/,\n  'id-ID': /^(\\+?62|0[1-9])[\\s|\\d]+$/,\n  'it-IT': /^(\\+?39)?\\s?3\\d{2} ?\\d{6,7}$/,\n  'ja-JP': /^(\\+?81|0)[789]0[ \\-]?[1-9]\\d{2}[ \\-]?\\d{5}$/,\n  'kk-KZ': /^(\\+?7|8)?7\\d{9}$/,\n  'kl-GL': /^(\\+?299)?\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}$/,\n  'ko-KR': /^((\\+?82)[ \\-]?)?0?1([0|1|6|7|8|9]{1})[ \\-]?\\d{3,4}[ \\-]?\\d{4}$/,\n  'lt-LT': /^(\\+370|8)\\d{8}$/,\n  'ms-MY': /^(\\+?6?01){1}(([145]{1}(\\-|\\s)?\\d{7,8})|([236789]{1}(\\s|\\-)?\\d{7}))$/,\n  'nb-NO': /^(\\+?47)?[49]\\d{7}$/,\n  'nl-BE': /^(\\+?32|0)4?\\d{8}$/,\n  'nn-NO': /^(\\+?47)?[49]\\d{7}$/,\n  'pl-PL': /^(\\+?48)? ?[5-8]\\d ?\\d{3} ?\\d{2} ?\\d{2}$/,\n  'pt-BR': /^(\\+?55|0)\\-?[1-9]{2}\\-?[2-9]{1}\\d{3,4}\\-?\\d{4}$/,\n  'pt-PT': /^(\\+?351)?9[1236]\\d{7}$/,\n  'ro-RO': /^(\\+?4?0)\\s?7\\d{2}(\\/|\\s|\\.|\\-)?\\d{3}(\\s|\\.|\\-)?\\d{3}$/,\n  'ru-RU': /^(\\+?7|8)?9\\d{9}$/,\n  'sk-SK': /^(\\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,\n  'sr-RS': /^(\\+3816|06)[- \\d]{5,9}$/,\n  'th-TH': /^(\\+66|66|0)\\d{9}$/,\n  'tr-TR': /^(\\+?90|0)?5\\d{9}$/,\n  'uk-UA': /^(\\+?38|8)?0\\d{9}$/,\n  'vi-VN': /^(\\+?84|0)?((1(2([0-9])|6([2-9])|88|99))|(9((?!5)[0-9])))([0-9]{7})$/,\n  'zh-CN': /^(\\+?0?86\\-?)?1[3456789]\\d{9}$/,\n  'zh-TW': /^(\\+?886\\-?|0)?9\\d{8}$/\n};\n/* eslint-enable max-len */\n\n// aliases\nphones['en-CA'] = phones['en-US'];\nphones['fr-BE'] = phones['nl-BE'];\nphones['zh-HK'] = phones['en-HK'];\n\nfunction isMobilePhone(str, locale, options) {\n  (0, _assertString2.default)(str);\n  if (options && options.strictMode && !str.startsWith('+')) {\n    return false;\n  }\n  if (locale in phones) {\n    return phones[locale].test(str);\n  } else if (locale === 'any') {\n    for (var key in phones) {\n      if (phones.hasOwnProperty(key)) {\n        var phone = phones[key];\n        if (phone.test(str)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  throw new Error('Invalid locale \\'' + locale + '\\'');\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCurrency;\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction currencyRegex(options) {\n  var decimal_digits = '\\\\d{' + options.digits_after_decimal[0] + '}';\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = decimal_digits + '|\\\\d{' + digit + '}';\n  });\n  var symbol = '(\\\\' + options.symbol.replace(/\\./g, '\\\\.') + ')' + (options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = '[1-9]\\\\d{0,2}(\\\\' + options.thousands_separator + '\\\\d{3})*',\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?',\n      decimal_amount = '(\\\\' + options.decimal_separator + '(' + decimal_digits + '))' + (options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : '');\n\n  // default is negative sign before symbol, but there are two other options (besides parens)\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n  if (options.allow_negative_sign_placeholder) {\n    pattern = '( (?!\\\\-))?' + pattern;\n  } else if (options.allow_space_after_symbol) {\n    pattern = ' ?' + pattern;\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = '(\\\\(' + pattern + '\\\\)|' + pattern + ')';\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n  return new RegExp('^(?!-? )(?=.*\\\\d)' + pattern + '$');\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\n\nfunction isCurrency(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISO8601;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable max-len */\n// from http://goo.gl/0ejHHW\nvar iso8601 = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n/* eslint-enable max-len */\n\nfunction isISO8601(str) {\n  (0, _assertString2.default)(str);\n  return iso8601.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISO31661Alpha2;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\nvar validISO31661Alpha2CountriesCodes = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW'];\n\nfunction isISO31661Alpha2(str) {\n  (0, _assertString2.default)(str);\n  return validISO31661Alpha2CountriesCodes.includes(str.toUpperCase());\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBase64;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar notBase64 = /[^A-Z0-9+\\/=]/i;\n\nfunction isBase64(str) {\n  (0, _assertString2.default)(str);\n  var len = str.length;\n  if (!len || len % 4 !== 0 || notBase64.test(str)) {\n    return false;\n  }\n  var firstPaddingChar = str.indexOf('=');\n  return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === '=';\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDataURI;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar validMediaType = /^[a-z]+\\/[a-z0-9\\-\\+]+$/i;\n\nvar validAttribute = /^[a-z\\-]+=[a-z0-9\\-]+$/i;\n\nvar validData = /^[a-z0-9!\\$&'\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*$/i;\n\nfunction isDataURI(str) {\n  (0, _assertString2.default)(str);\n  var data = str.split(',');\n  if (data.length < 2) {\n    return false;\n  }\n  var attributes = data.shift().trim().split(';');\n  var schemeAndMediaType = attributes.shift();\n  if (schemeAndMediaType.substr(0, 5) !== 'data:') {\n    return false;\n  }\n  var mediaType = schemeAndMediaType.substr(5);\n  if (mediaType !== '' && !validMediaType.test(mediaType)) {\n    return false;\n  }\n  for (var i = 0; i < attributes.length; i++) {\n    if (i === attributes.length - 1 && attributes[i].toLowerCase() === 'base64') {\n      // ok\n    } else if (!validAttribute.test(attributes[i])) {\n      return false;\n    }\n  }\n  for (var _i = 0; _i < data.length; _i++) {\n    if (!validData.test(data[_i])) {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMimeType;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n  Checks if the provided string matches to a correct Media type format (MIME type)\n\n  This function only checks is the string format follows the\n  etablished rules by the according RFC specifications.\n  This function supports 'charset' in textual media types\n  (https://tools.ietf.org/html/rfc6657).\n\n  This function does not check against all the media types listed\n  by the IANA (https://www.iana.org/assignments/media-types/media-types.xhtml)\n  because of lightness purposes : it would require to include\n  all these MIME types in this librairy, which would weigh it\n  significantly. This kind of effort maybe is not worth for the use that\n  this function has in this entire librairy.\n\n  More informations in the RFC specifications :\n  - https://tools.ietf.org/html/rfc2045\n  - https://tools.ietf.org/html/rfc2046\n  - https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n  - https://tools.ietf.org/html/rfc7231#section-3.1.1.5\n*/\n\n// Match simple MIME types\n// NB :\n//   Subtype length must not exceed 100 characters.\n//   This rule does not comply to the RFC specs (what is the max length ?).\nvar mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\\/[a-zA-Z0-9\\.\\-\\+]{1,100}$/i; // eslint-disable-line max-len\n\n// Handle \"charset\" in \"text/*\"\nvar mimeTypeText = /^text\\/[a-zA-Z0-9\\.\\-\\+]{1,100};\\s?charset=(\"[a-zA-Z0-9\\.\\-\\+\\s]{0,70}\"|[a-zA-Z0-9\\.\\-\\+]{0,70})(\\s?\\([a-zA-Z0-9\\.\\-\\+\\s]{1,20}\\))?$/i; // eslint-disable-line max-len\n\n// Handle \"boundary\" in \"multipart/*\"\nvar mimeTypeMultipart = /^multipart\\/[a-zA-Z0-9\\.\\-\\+]{1,100}(;\\s?(boundary|charset)=(\"[a-zA-Z0-9\\.\\-\\+\\s]{0,70}\"|[a-zA-Z0-9\\.\\-\\+]{0,70})(\\s?\\([a-zA-Z0-9\\.\\-\\+\\s]{1,20}\\))?){0,2}$/i; // eslint-disable-line max-len\n\nfunction isMimeType(str) {\n  (0, _assertString2.default)(str);\n  return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (str) {\n  (0, _assertString2.default)(str);\n  if (!str.includes(',')) return false;\n  var pair = str.split(',');\n  return lat.test(pair[0]) && long.test(pair[1]);\n};\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar lat = /^\\(?[+-]?(90(\\.0+)?|[1-8]?\\d(\\.\\d+)?)$/;\nvar long = /^\\s?[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|\\d{1,2}(\\.\\d+)?)\\)?$/;\n\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.locales = undefined;\n\nexports.default = function (str, locale) {\n  (0, _assertString2.default)(str);\n  if (locale in patterns) {\n    return patterns[locale].test(str);\n  } else if (locale === 'any') {\n    for (var key in patterns) {\n      if (patterns.hasOwnProperty(key)) {\n        var pattern = patterns[key];\n        if (pattern.test(str)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  throw new Error('Invalid locale \\'' + locale + '\\'');\n};\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// common patterns\nvar threeDigit = /^\\d{3}$/;\nvar fourDigit = /^\\d{4}$/;\nvar fiveDigit = /^\\d{5}$/;\nvar sixDigit = /^\\d{6}$/;\n\nvar patterns = {\n  AT: fourDigit,\n  AU: fourDigit,\n  BE: fourDigit,\n  BG: fourDigit,\n  CA: /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][\\s\\-]?\\d[ABCEGHJ-NPRSTV-Z]\\d$/i,\n  CH: fourDigit,\n  CZ: /^\\d{3}\\s?\\d{2}$/,\n  DE: fiveDigit,\n  DK: fourDigit,\n  DZ: fiveDigit,\n  ES: fiveDigit,\n  FI: fiveDigit,\n  FR: /^\\d{2}\\s?\\d{3}$/,\n  GB: /^(gir\\s?0aa|[a-z]{1,2}\\d[\\da-z]?\\s?(\\d[a-z]{2})?)$/i,\n  GR: /^\\d{3}\\s?\\d{2}$/,\n  IL: fiveDigit,\n  IN: sixDigit,\n  IS: threeDigit,\n  IT: fiveDigit,\n  JP: /^\\d{3}\\-\\d{4}$/,\n  KE: fiveDigit,\n  LI: /^(948[5-9]|949[0-7])$/,\n  MX: fiveDigit,\n  NL: /^\\d{4}\\s?[a-z]{2}$/i,\n  NO: fourDigit,\n  PL: /^\\d{2}\\-\\d{3}$/,\n  PT: /^\\d{4}\\-\\d{3}?$/,\n  RO: sixDigit,\n  RU: sixDigit,\n  SA: fiveDigit,\n  SE: /^\\d{3}\\s?\\d{2}$/,\n  TW: /^\\d{3}(\\d{2})?$/,\n  US: /^\\d{5}(-\\d{4})?$/,\n  ZA: fourDigit,\n  ZM: fiveDigit\n};\n\nvar locales = exports.locales = Object.keys(patterns);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = trim;\n\nvar _rtrim = require('./rtrim');\n\nvar _rtrim2 = _interopRequireDefault(_rtrim);\n\nvar _ltrim = require('./ltrim');\n\nvar _ltrim2 = _interopRequireDefault(_ltrim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction trim(str, chars) {\n  return (0, _rtrim2.default)((0, _ltrim2.default)(str, chars), chars);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = escape;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction escape(str) {\n  (0, _assertString2.default)(str);\n  return str.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\//g, '&#x2F;').replace(/\\\\/g, '&#x5C;').replace(/`/g, '&#96;');\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = unescape;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction unescape(str) {\n  (0, _assertString2.default)(str);\n  return str.replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/&#x27;/g, \"'\").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#x2F;/g, '/').replace(/&#x5C;/g, '\\\\').replace(/&#96;/g, '`');\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = stripLow;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _blacklist = require('./blacklist');\n\nvar _blacklist2 = _interopRequireDefault(_blacklist);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stripLow(str, keep_new_lines) {\n  (0, _assertString2.default)(str);\n  var chars = keep_new_lines ? '\\\\x00-\\\\x09\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F' : '\\\\x00-\\\\x1F\\\\x7F';\n  return (0, _blacklist2.default)(str, chars);\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = whitelist;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction whitelist(str, chars) {\n  (0, _assertString2.default)(str);\n  return str.replace(new RegExp('[^' + chars + ']+', 'g'), '');\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isWhitelisted;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isWhitelisted(str, chars) {\n  (0, _assertString2.default)(str);\n  for (var i = str.length - 1; i >= 0; i--) {\n    if (chars.indexOf(str[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeEmail;\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_normalize_email_options = {\n  // The following options apply to all email addresses\n  // Lowercases the local part of the email address.\n  // Please note this may violate RFC 5321 as per http://stackoverflow.com/a/9808332/192024).\n  // The domain is always lowercased, as per RFC 1035\n  all_lowercase: true,\n\n  // The following conversions are specific to GMail\n  // Lowercases the local part of the GMail address (known to be case-insensitive)\n  gmail_lowercase: true,\n  // Removes dots from the local part of the email address, as that's ignored by GMail\n  gmail_remove_dots: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  gmail_remove_subaddress: true,\n  // Conversts the googlemail.com domain to gmail.com\n  gmail_convert_googlemaildotcom: true,\n\n  // The following conversions are specific to Outlook.com / Windows Live / Hotmail\n  // Lowercases the local part of the Outlook.com address (known to be case-insensitive)\n  outlookdotcom_lowercase: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  outlookdotcom_remove_subaddress: true,\n\n  // The following conversions are specific to Yahoo\n  // Lowercases the local part of the Yahoo address (known to be case-insensitive)\n  yahoo_lowercase: true,\n  // Removes the subaddress (e.g. \"-foo\") from the email address\n  yahoo_remove_subaddress: true,\n\n  // The following conversions are specific to iCloud\n  // Lowercases the local part of the iCloud address (known to be case-insensitive)\n  icloud_lowercase: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  icloud_remove_subaddress: true\n};\n\n// List of domains used by iCloud\nvar icloud_domains = ['icloud.com', 'me.com'];\n\n// List of domains used by Outlook.com and its predecessors\n// This list is likely incomplete.\n// Partial reference:\n// https://blogs.office.com/2013/04/17/outlook-com-gets-two-step-verification-sign-in-by-alias-and-new-international-domains/\nvar outlookdotcom_domains = ['hotmail.at', 'hotmail.be', 'hotmail.ca', 'hotmail.cl', 'hotmail.co.il', 'hotmail.co.nz', 'hotmail.co.th', 'hotmail.co.uk', 'hotmail.com', 'hotmail.com.ar', 'hotmail.com.au', 'hotmail.com.br', 'hotmail.com.gr', 'hotmail.com.mx', 'hotmail.com.pe', 'hotmail.com.tr', 'hotmail.com.vn', 'hotmail.cz', 'hotmail.de', 'hotmail.dk', 'hotmail.es', 'hotmail.fr', 'hotmail.hu', 'hotmail.id', 'hotmail.ie', 'hotmail.in', 'hotmail.it', 'hotmail.jp', 'hotmail.kr', 'hotmail.lv', 'hotmail.my', 'hotmail.ph', 'hotmail.pt', 'hotmail.sa', 'hotmail.sg', 'hotmail.sk', 'live.be', 'live.co.uk', 'live.com', 'live.com.ar', 'live.com.mx', 'live.de', 'live.es', 'live.eu', 'live.fr', 'live.it', 'live.nl', 'msn.com', 'outlook.at', 'outlook.be', 'outlook.cl', 'outlook.co.il', 'outlook.co.nz', 'outlook.co.th', 'outlook.com', 'outlook.com.ar', 'outlook.com.au', 'outlook.com.br', 'outlook.com.gr', 'outlook.com.pe', 'outlook.com.tr', 'outlook.com.vn', 'outlook.cz', 'outlook.de', 'outlook.dk', 'outlook.es', 'outlook.fr', 'outlook.hu', 'outlook.id', 'outlook.ie', 'outlook.in', 'outlook.it', 'outlook.jp', 'outlook.kr', 'outlook.lv', 'outlook.my', 'outlook.ph', 'outlook.pt', 'outlook.sa', 'outlook.sg', 'outlook.sk', 'passport.com'];\n\n// List of domains used by Yahoo Mail\n// This list is likely incomplete\nvar yahoo_domains = ['rocketmail.com', 'yahoo.ca', 'yahoo.co.uk', 'yahoo.com', 'yahoo.de', 'yahoo.fr', 'yahoo.in', 'yahoo.it', 'ymail.com'];\n\nfunction normalizeEmail(email, options) {\n  options = (0, _merge2.default)(options, default_normalize_email_options);\n\n  var raw_parts = email.split('@');\n  var domain = raw_parts.pop();\n  var user = raw_parts.join('@');\n  var parts = [user, domain];\n\n  // The domain is always lowercased, as it's case-insensitive per RFC 1035\n  parts[1] = parts[1].toLowerCase();\n\n  if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {\n    // Address is GMail\n    if (options.gmail_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n    if (options.gmail_remove_dots) {\n      parts[0] = parts[0].replace(/\\./g, '');\n    }\n    if (!parts[0].length) {\n      return false;\n    }\n    if (options.all_lowercase || options.gmail_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n    parts[1] = options.gmail_convert_googlemaildotcom ? 'gmail.com' : parts[1];\n  } else if (~icloud_domains.indexOf(parts[1])) {\n    // Address is iCloud\n    if (options.icloud_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n    if (!parts[0].length) {\n      return false;\n    }\n    if (options.all_lowercase || options.icloud_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (~outlookdotcom_domains.indexOf(parts[1])) {\n    // Address is Outlook.com\n    if (options.outlookdotcom_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n    if (!parts[0].length) {\n      return false;\n    }\n    if (options.all_lowercase || options.outlookdotcom_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (~yahoo_domains.indexOf(parts[1])) {\n    // Address is Yahoo\n    if (options.yahoo_remove_subaddress) {\n      var components = parts[0].split('-');\n      parts[0] = components.length > 1 ? components.slice(0, -1).join('-') : components[0];\n    }\n    if (!parts[0].length) {\n      return false;\n    }\n    if (options.all_lowercase || options.yahoo_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (options.all_lowercase) {\n    // Any other address\n    parts[0] = parts[0].toLowerCase();\n  }\n  return parts.join('@');\n}\nmodule.exports = exports['default'];","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n'use strict';\r\n\r\nvar _ = require('underscore');\r\nvar url = require('url');\r\n\r\nvar util = require('../util/util');\r\nvar ServiceSettings = require('./servicesettings');\r\nvar Constants = require('../util/constants');\r\nvar StorageServiceClientConstants = Constants.StorageServiceClientConstants;\r\nvar ConnectionStringKeys = Constants.ConnectionStringKeys;\r\nvar Validate = require('../util/validate');\r\nvar SR = require('../util/sr');\r\nvar TokenCredential = require('../models/tokencredential');\r\n\r\nvar useDevelopmentStorageSetting = ServiceSettings.setting(ConnectionStringKeys.USE_DEVELOPMENT_STORAGE_NAME, true);\r\nvar developmentStorageProxyUriSetting = ServiceSettings.settingWithFunc(ConnectionStringKeys.DEVELOPMENT_STORAGE_PROXY_URI_NAME, Validate.isValidUri);\r\nvar defaultEndpointsProtocolSetting = ServiceSettings.setting(ConnectionStringKeys.DEFAULT_ENDPOINTS_PROTOCOL_NAME, 'http', 'https');\r\nvar accountNameSetting = ServiceSettings.setting(ConnectionStringKeys.ACCOUNT_NAME_NAME);\r\nvar accountKeySetting = ServiceSettings.settingWithFunc(ConnectionStringKeys.ACCOUNT_KEY_NAME, Validate.isBase64Encoded);\r\nvar sasSetting = ServiceSettings.settingWithFunc(ConnectionStringKeys.SHARED_ACCESS_SIGNATURE_NAME, _.isString);\r\nvar tokenSetting = ServiceSettings.settingWithFunc('token', function (object) {return object instanceof TokenCredential;});\r\n\r\nvar blobEndpointSetting = ServiceSettings.settingWithFunc(\r\n  ConnectionStringKeys.BLOB_ENDPOINT_NAME,\r\n  Validate.isValidHost\r\n);\r\n\r\nvar queueEndpointSetting = ServiceSettings.settingWithFunc(\r\n  ConnectionStringKeys.QUEUE_ENDPOINT_NAME,\r\n  Validate.isValidHost\r\n);\r\n\r\nvar tableEndpointSetting = ServiceSettings.settingWithFunc(\r\n  ConnectionStringKeys.TABLE_ENDPOINT_NAME,\r\n  Validate.isValidHost\r\n);\r\n\r\nvar fileEndpointSetting = ServiceSettings.settingWithFunc(\r\n  ConnectionStringKeys.FILE_ENDPOINT_NAME,\r\n  Validate.isValidHost\r\n);\r\n\r\nvar endpointSuffixSetting = ServiceSettings.settingWithFunc(\r\n  ConnectionStringKeys.ENDPOINT_SUFFIX_NAME,\r\n  Validate.isValidHost\r\n);\r\n\r\nvar validKeys = [\r\n  ConnectionStringKeys.USE_DEVELOPMENT_STORAGE_NAME,\r\n  ConnectionStringKeys.DEVELOPMENT_STORAGE_PROXY_URI_NAME,\r\n  ConnectionStringKeys.DEFAULT_ENDPOINTS_PROTOCOL_NAME,\r\n  ConnectionStringKeys.ACCOUNT_NAME_NAME,\r\n  ConnectionStringKeys.ACCOUNT_KEY_NAME,\r\n  ConnectionStringKeys.SHARED_ACCESS_SIGNATURE_NAME,\r\n  ConnectionStringKeys.BLOB_ENDPOINT_NAME,\r\n  ConnectionStringKeys.QUEUE_ENDPOINT_NAME,\r\n  ConnectionStringKeys.TABLE_ENDPOINT_NAME,\r\n  ConnectionStringKeys.FILE_ENDPOINT_NAME,\r\n  ConnectionStringKeys.ENDPOINT_SUFFIX_NAME\r\n];\r\n\r\n/**\r\n* Creates new storage service settings instance.\r\n*\r\n* @param {string} name                      The storage service name.\r\n* @param {string} key                       The storage service key.\r\n* @param {string} sasToken                  The storage service shared access signature token.\r\n* @param {string} blobEndpoint              The storage service blob endpoint.\r\n* @param {string} queueEndpoint             The storage service queue endpoint.\r\n* @param {string} tableEndpoint             The storage service table endpoint.\r\n* @param {string} fileEndpoint              The storage service file endpoint.\r\n* @param {bool}   usePathStyleUri           Boolean value indicating wether to use path style uri or not.\r\n* @param {TokenCredential} [token]          The {@link TokenCredential} object.\r\n*/\r\nfunction StorageServiceSettings(name, key, sasToken, blobEndpoint, queueEndpoint, tableEndpoint, fileEndpoint, usePathStyleUri, token) {\r\n  this._name = name;\r\n  this._key = key;\r\n\r\n  if (sasToken && sasToken[0] === '?') {\r\n    this._sasToken = sasToken.slice(1);\r\n  } else {\r\n    this._sasToken = sasToken;\r\n  }\r\n\r\n  this._blobEndpoint = blobEndpoint;\r\n  this._queueEndpoint = queueEndpoint;\r\n  this._tableEndpoint = tableEndpoint;\r\n  this._fileEndpoint = fileEndpoint;\r\n\r\n  if (usePathStyleUri) {\r\n    this._usePathStyleUri = usePathStyleUri;\r\n  } else {\r\n    this._usePathStyleUri = false;\r\n  }\r\n\r\n  this._token = token;\r\n}\r\n\r\n/**\r\n* Creates a StorageServiceSettings object from the given connection string.\r\n*\r\n* @param {string} connectionString The storage settings connection string.\r\n* @return {StorageServiceSettings}\r\n*/\r\nStorageServiceSettings.createFromConnectionString = function (connectionString) {\r\n  var tokenizedSettings = ServiceSettings.parseAndValidateKeys(connectionString, validKeys);\r\n\r\n  try {\r\n    return StorageServiceSettings.createFromSettings(tokenizedSettings);\r\n  } catch (e) {\r\n    if (e instanceof ServiceSettings.NoMatchError) {\r\n      // Replace no match settings exception by no match connection string one.\r\n      ServiceSettings.noMatchConnectionString(connectionString);\r\n    } else {\r\n      throw e;\r\n    }\r\n  }\r\n};\r\n\r\nStorageServiceSettings.createExplicitly = function (storageAccount, storageAccessKey, host, sasToken, endpointSuffix, token) {\r\n  var settings = {};\r\n  function addIfNotNullOrEmpty(key, value){\r\n    if(typeof value === 'string' && !util.stringIsEmpty(value)){\r\n      settings[key] = value;\r\n    } else if (typeof value == 'object' && !util.objectIsNull(value)) {\r\n      settings[key] = value;\r\n    }\r\n  }\r\n\r\n  // Endpoints\r\n  if (host) {\r\n    addIfNotNullOrEmpty('blobendpoint', host);\r\n    addIfNotNullOrEmpty('tableendpoint', host);\r\n    addIfNotNullOrEmpty('queueendpoint', host);\r\n    addIfNotNullOrEmpty('fileendpoint', host);\r\n  } else {\r\n    addIfNotNullOrEmpty('defaultendpointsprotocol', ServiceSettings.DEFAULT_PROTOCOL.split(':', 1)[0]);\r\n  }\r\n\r\n  addIfNotNullOrEmpty('accountname', storageAccount);\r\n  addIfNotNullOrEmpty('accountkey', storageAccessKey);\r\n  addIfNotNullOrEmpty('sharedaccesssignature', sasToken);\r\n  addIfNotNullOrEmpty('endpointsuffix', endpointSuffix);\r\n  addIfNotNullOrEmpty('token', token);\r\n\r\n  return StorageServiceSettings.createFromSettings(settings);\r\n};\r\n\r\nStorageServiceSettings.createFromEnvironment = function () {\r\n  var emulated = process.env[StorageServiceClientConstants.EnvironmentVariables.EMULATED];\r\n  if (emulated) {\r\n    return StorageServiceSettings.getDevelopmentStorageAccountSettings();\r\n  } \r\n\r\n  var connectionString = process.env[StorageServiceClientConstants.EnvironmentVariables.AZURE_STORAGE_CONNECTION_STRING];\r\n  if (connectionString) {\r\n    return StorageServiceSettings.createFromConnectionString(connectionString);\r\n  } \r\n\r\n  var storageAccount = process.env[StorageServiceClientConstants.EnvironmentVariables.AZURE_STORAGE_ACCOUNT];\r\n  var storageAccessKey = process.env[StorageServiceClientConstants.EnvironmentVariables.AZURE_STORAGE_ACCESS_KEY];\r\n  if(storageAccount && storageAccessKey){\r\n    return StorageServiceSettings.createExplicitly(storageAccount, storageAccessKey, null, null, null);\r\n  }\r\n\r\n  throw new Error(SR.NO_CREDENTIALS_PROVIDED);\r\n};\r\n\r\n/**\r\n* Creates a StorageServiceSettings object from a set of settings.\r\n*\r\n* @param {object} settings The settings object.\r\n* @return {StorageServiceSettings}\r\n*/\r\nStorageServiceSettings.createFromSettings = function (settings) {\r\n  // Devstore case\r\n  var matchedSpecs = ServiceSettings.matchedSpecification(\r\n    settings,\r\n    ServiceSettings.allRequired(useDevelopmentStorageSetting),\r\n    ServiceSettings.optional(developmentStorageProxyUriSetting)\r\n  );\r\n\r\n  if (matchedSpecs) {\r\n    var proxyUri = util.tryGetValueInsensitive(\r\n      ConnectionStringKeys.DEVELOPMENT_STORAGE_PROXY_URI_NAME,\r\n      settings\r\n    );\r\n\r\n    return this.getDevelopmentStorageAccountSettings(proxyUri);\r\n  }\r\n\r\n  // Account/Key automatic case\r\n  matchedSpecs = ServiceSettings.matchedSpecification(\r\n    settings,\r\n    ServiceSettings.allRequired(\r\n      defaultEndpointsProtocolSetting,\r\n      accountNameSetting,\r\n      accountKeySetting\r\n    ), \r\n    ServiceSettings.optional(\r\n      blobEndpointSetting,\r\n      queueEndpointSetting,\r\n      tableEndpointSetting,\r\n      fileEndpointSetting,\r\n      endpointSuffixSetting\r\n    )\r\n  );\r\n\r\n  if (matchedSpecs) {  \r\n    return this._createStorageServiceSettings(settings);\r\n  }\r\n\r\n  // Account/Key explicit case\r\n  matchedSpecs = ServiceSettings.matchedSpecification(\r\n    settings,\r\n    ServiceSettings.allRequired(\r\n      accountNameSetting,\r\n      accountKeySetting\r\n    ),\r\n    ServiceSettings.atLeastOne(\r\n      blobEndpointSetting,\r\n      queueEndpointSetting,\r\n      tableEndpointSetting,\r\n      fileEndpointSetting,\r\n      endpointSuffixSetting\r\n    )\r\n  );\r\n\r\n  if (matchedSpecs) {  \r\n    return this._createStorageServiceSettings(settings);\r\n  }\r\n\r\n  // SAS case\r\n  matchedSpecs = ServiceSettings.matchedSpecification(\r\n    settings,\r\n    ServiceSettings.allRequired(\r\n      sasSetting\r\n    ),\r\n    ServiceSettings.atLeastOne(\r\n      blobEndpointSetting,\r\n      queueEndpointSetting,\r\n      tableEndpointSetting,\r\n      fileEndpointSetting,\r\n      endpointSuffixSetting\r\n    )\r\n  );\r\n\r\n  if(matchedSpecs) {\r\n    return this._createStorageServiceSettings(settings);\r\n  }\r\n\r\n  // anonymous explicit case\r\n  // Only blob anonymous access is valid.\r\n  matchedSpecs = ServiceSettings.matchedSpecification(\r\n    settings,\r\n    ServiceSettings.allRequired(\r\n      blobEndpointSetting\r\n    ),\r\n    ServiceSettings.optional(\r\n      fileEndpointSetting,\r\n      queueEndpointSetting,\r\n      tableEndpointSetting,\r\n      endpointSuffixSetting\r\n    )\r\n  );\r\n\r\n  if(matchedSpecs) {\r\n    return this._createStorageServiceSettings(settings);\r\n  }\r\n\r\n  // Token case\r\n  matchedSpecs = ServiceSettings.matchedSpecification(\r\n    settings,\r\n    ServiceSettings.allRequired(\r\n      tokenSetting\r\n    ),\r\n    ServiceSettings.atLeastOne(\r\n      blobEndpointSetting,\r\n      queueEndpointSetting,\r\n      tableEndpointSetting,\r\n      fileEndpointSetting\r\n    )\r\n  );\r\n\r\n  if(matchedSpecs) {\r\n    return this._createStorageServiceSettings(settings);\r\n  }\r\n\r\n  ServiceSettings.noMatchSettings(settings);\r\n};\r\n\r\n/**\r\n* Returns a StorageServiceSettings with development storage credentials using\r\n* the specified proxy Uri.\r\n*\r\n* @param {string} proxyUri The proxy endpoint to use.\r\n* @return {StorageServiceSettings}\r\n*/\r\nStorageServiceSettings.getDevelopmentStorageAccountSettings = function (proxyUri) {\r\n  if (!proxyUri) {\r\n    proxyUri = StorageServiceClientConstants.DEV_STORE_URI;\r\n  }\r\n\r\n  var parsedUri = url.parse(proxyUri);\r\n  var scheme = parsedUri.protocol;\r\n  var host   = parsedUri.host;\r\n  var prefix = scheme + '//' + host;\r\n\r\n  var blobEndpoint = {\r\n    primaryHost: prefix + ':10000' + '/' + StorageServiceClientConstants.DEVSTORE_STORAGE_ACCOUNT,\r\n    secondaryHost: prefix + ':10000' + '/' + StorageServiceClientConstants.DEVSTORE_STORAGE_ACCOUNT + '-secondary'\r\n  };\r\n\r\n  var queueEndpoint = {\r\n    primaryHost: prefix + ':10001' + '/' + StorageServiceClientConstants.DEVSTORE_STORAGE_ACCOUNT,\r\n    secondaryHost: prefix + ':10001' + '/' + StorageServiceClientConstants.DEVSTORE_STORAGE_ACCOUNT + '-secondary'\r\n  };\r\n\r\n  var tableEndpoint = {\r\n    primaryHost: prefix + ':10002' + '/' + StorageServiceClientConstants.DEVSTORE_STORAGE_ACCOUNT,\r\n    secondaryHost: prefix + ':10002' + '/' + StorageServiceClientConstants.DEVSTORE_STORAGE_ACCOUNT + '-secondary'\r\n  };\r\n\r\n  return new StorageServiceSettings(\r\n    StorageServiceClientConstants.DEVSTORE_STORAGE_ACCOUNT,\r\n    StorageServiceClientConstants.DEVSTORE_STORAGE_ACCESS_KEY,\r\n    null,\r\n    blobEndpoint,\r\n    queueEndpoint,\r\n    tableEndpoint,\r\n    null,\r\n    true\r\n  );\r\n};\r\n\r\n/**\r\n* Creates StorageServiceSettings object given endpoints uri.\r\n*\r\n* @ignore\r\n* @param {array}  settings         The service settings.\r\n* @param {string} blobEndpointUri  The blob endpoint uri.\r\n* @param {string} queueEndpointUri The queue endpoint uri.\r\n* @param {string} tableEndpointUri The table endpoint uri.\r\n* @param {string} fileEndpointUri  The file endpoint uri.\r\n* @return {StorageServiceSettings}\r\n*/\r\nStorageServiceSettings._createStorageServiceSettings = function (settings) {\r\n  var standardizeHost = function (host, accountName, scheme, dns){\r\n    var storageHost;\r\n    if (host) {\r\n      storageHost = {};\r\n      storageHost.primaryHost = _.isString(host) ? host : host.primaryHost;\r\n      storageHost.secondaryHost = _.isString(host) ? undefined : host.secondaryHost;\r\n    }\r\n\r\n    if (scheme && accountName && dns) {\r\n      storageHost = storageHost ? storageHost : {};\r\n      storageHost.primaryHost = storageHost.primaryHost ? storageHost.primaryHost : url.format({ protocol: scheme, hostname: accountName + '.' + dns});\r\n      storageHost.secondaryHost = storageHost.secondaryHost ? storageHost.secondaryHost : url.format({ protocol: scheme, hostname: accountName + '-secondary.' + dns});\r\n    }\r\n\r\n    return storageHost;\r\n  };\r\n\r\n  var scheme = util.tryGetValueInsensitive(\r\n    ConnectionStringKeys.DEFAULT_ENDPOINTS_PROTOCOL_NAME,\r\n    settings\r\n  );\r\n\r\n  var accountName = util.tryGetValueInsensitive(\r\n    ConnectionStringKeys.ACCOUNT_NAME_NAME,\r\n    settings\r\n  );\r\n\r\n  var accountKey = util.tryGetValueInsensitive(\r\n    ConnectionStringKeys.ACCOUNT_KEY_NAME,\r\n    settings\r\n  );\r\n\r\n  var sasToken = util.tryGetValueInsensitive(\r\n    ConnectionStringKeys.SHARED_ACCESS_SIGNATURE_NAME,\r\n    settings\r\n  );\r\n\r\n  var endpointSuffix = util.tryGetValueInsensitive(\r\n    ConnectionStringKeys.ENDPOINT_SUFFIX_NAME,\r\n    settings\r\n  );\r\n\r\n  var token = util.tryGetValueInsensitive(\r\n    'token',\r\n    settings\r\n  );\r\n\r\n  var blobEndpoint = standardizeHost(\r\n      util.tryGetValueInsensitive(ConnectionStringKeys.BLOB_ENDPOINT_NAME, settings),\r\n      accountName,\r\n      scheme,\r\n      endpointSuffix ? 'blob.' + endpointSuffix : StorageServiceClientConstants.CLOUD_BLOB_HOST);\r\n\r\n  var queueEndpoint = standardizeHost(\r\n      util.tryGetValueInsensitive(ConnectionStringKeys.QUEUE_ENDPOINT_NAME, settings),\r\n      accountName,\r\n      scheme,\r\n      endpointSuffix ? 'queue.' + endpointSuffix : StorageServiceClientConstants.CLOUD_QUEUE_HOST);\r\n\r\n  var tableEndpoint = standardizeHost(\r\n      util.tryGetValueInsensitive(ConnectionStringKeys.TABLE_ENDPOINT_NAME, settings),\r\n      accountName,\r\n      scheme,\r\n      endpointSuffix ? 'table.' + endpointSuffix : StorageServiceClientConstants.CLOUD_TABLE_HOST);\r\n\r\n  var fileEndpoint = standardizeHost(\r\n      util.tryGetValueInsensitive(ConnectionStringKeys.FILE_ENDPOINT_NAME, settings),\r\n      accountName,\r\n      scheme,\r\n      endpointSuffix ? 'file.' + endpointSuffix : StorageServiceClientConstants.CLOUD_FILE_HOST);\r\n\r\n\r\n  return new StorageServiceSettings(\r\n    accountName,\r\n    accountKey,\r\n    sasToken,\r\n    blobEndpoint,\r\n    queueEndpoint,\r\n    tableEndpoint,\r\n    fileEndpoint,\r\n    token \r\n  );\r\n};\r\n\r\nStorageServiceSettings.validKeys = validKeys;\r\n\r\nexports = module.exports = StorageServiceSettings;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar Constants = require('../util/constants');\r\nvar HeaderConstants = Constants.HeaderConstants;\r\n\r\n/**\r\n* Creates a new TokenSigner object.\r\n*\r\n* @constructor\r\n* @param {TokenCredential} tokenCredential The token credential, such as containing an OAuth access token.\r\n*/\r\nfunction TokenSigner (tokenCredential) {\r\n  this.tokenCredential = tokenCredential;\r\n}\r\n\r\n/**\r\n* Signs a request with the Authentication header.\r\n*\r\n* @param {WebResource}      webResource The webresource to be signed.\r\n* @param {function(error)}  callback    The callback function.\r\n*/\r\nTokenSigner.prototype.signRequest = function (webResource, callback) {\r\n  webResource.withHeader(HeaderConstants.AUTHORIZATION, 'Bearer ' + this.tokenCredential.get());\r\n  callback(null);\r\n};\r\n\r\nmodule.exports = TokenSigner;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\nexports = module.exports;\r\n\r\nexports.parse = function (serviceStatsXml) {\r\n  var serviceStats = {};\r\n\r\n  if (typeof serviceStatsXml.GeoReplication !== 'undefined') {   \r\n    serviceStats.GeoReplication = {};\r\n\r\n    if (typeof serviceStatsXml.GeoReplication.Status !== 'undefined') {\r\n      serviceStats.GeoReplication.Status = serviceStatsXml.GeoReplication.Status;\r\n    }\r\n\r\n    if (typeof serviceStatsXml.GeoReplication.LastSyncTime !== 'undefined' && serviceStatsXml.GeoReplication.LastSyncTime !== '') {\r\n      serviceStats.GeoReplication.LastSyncTime = new Date(serviceStatsXml.GeoReplication.LastSyncTime);\r\n    }\r\n  }\r\n\r\n  return serviceStats;\r\n};","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar _ = require('underscore');\r\nvar xmlbuilder = require('xmlbuilder');\r\n\r\nvar azureutil = require('../util/util');\r\nvar ISO8061Date = require('../util/iso8061date');\r\nvar Constants = require('../util/constants');\r\nvar AclConstants = Constants.AclConstants;\r\n\r\nexports = module.exports;\r\n\r\n/**\r\n* Builds an XML representation for container acl permissions.\r\n*\r\n* @param  {Object.<string, AccessPolicy>}  entity The signed identifiers.\r\n* @return {string} The XML container acl permissions.\r\n*/\r\nexports.serialize = function (signedIdentifiersJs) {\r\n  var doc = xmlbuilder.create();\r\n  doc = doc.begin(AclConstants.SIGNED_IDENTIFIERS_ELEMENT, { version: '1.0', encoding: 'utf-8' });\r\n\r\n  var keys = Object.keys(signedIdentifiersJs);\r\n  if (keys.length > 0) {\r\n    keys.forEach(function (key) {\r\n      var accessPolicy = signedIdentifiersJs[key];\r\n      doc = doc\r\n        .ele(AclConstants.SIGNED_IDENTIFIER_ELEMENT)\r\n          .ele(AclConstants.ID)\r\n            .txt(key)\r\n          .up()\r\n          .ele(AclConstants.ACCESS_POLICY);\r\n\r\n      if (accessPolicy.Start) {\r\n        var startIsoString = accessPolicy.Start;\r\n        if (!_.isDate(startIsoString)) {\r\n          startIsoString = new Date(startIsoString);\r\n        }\r\n\r\n        // Convert to expected ISO 8061 date format\r\n        startIsoString = ISO8061Date.format(startIsoString);\r\n\r\n        doc = doc\r\n            .ele(AclConstants.START)\r\n              .txt(startIsoString)\r\n            .up();\r\n      }\r\n\r\n      if (accessPolicy.Expiry) {\r\n        var expiryIsoString = accessPolicy.Expiry;\r\n        if (!_.isDate(expiryIsoString)) {\r\n          expiryIsoString = new Date(expiryIsoString);\r\n        }\r\n\r\n        // Convert to expected ISO 8061 date format\r\n        expiryIsoString = ISO8061Date.format(expiryIsoString);\r\n\r\n        doc = doc\r\n            .ele(AclConstants.EXPIRY)\r\n              .txt(expiryIsoString)\r\n            .up();\r\n      }\r\n\r\n      if (accessPolicy.Permissions) {\r\n        doc = doc\r\n            .ele(AclConstants.PERMISSION)\r\n              .txt(accessPolicy.Permissions)\r\n            .up();\r\n      }\r\n\r\n      doc = doc.up().up();\r\n    });\r\n  }\r\n  return doc.doc().toString();\r\n};\r\n\r\nexports.parse = function (signedIdentifiersXml) {\r\n  var signedIdentifiers = {};\r\n\r\n  signedIdentifiersXml = azureutil.tryGetValueChain(signedIdentifiersXml, [ 'SignedIdentifiers', 'SignedIdentifier' ]);\r\n  if (signedIdentifiersXml) {\r\n    if (!_.isArray(signedIdentifiersXml)) {\r\n      signedIdentifiersXml = [ signedIdentifiersXml ];\r\n    }\r\n\r\n    signedIdentifiersXml.forEach(function (signedIdentifier) {\r\n      var accessPolicy = {};\r\n      if (signedIdentifier.AccessPolicy) {\r\n        if (signedIdentifier.AccessPolicy.Start) {\r\n          accessPolicy.Start = ISO8061Date.parse(signedIdentifier.AccessPolicy.Start);\r\n        }\r\n\r\n        if (signedIdentifier.AccessPolicy.Expiry) {\r\n          accessPolicy.Expiry = ISO8061Date.parse(signedIdentifier.AccessPolicy.Expiry);\r\n        }\r\n\r\n        if (signedIdentifier.AccessPolicy.Permission) {\r\n          accessPolicy.Permissions = signedIdentifier.AccessPolicy.Permission;\r\n        }\r\n      }\r\n\r\n      signedIdentifiers[signedIdentifier.Id] = accessPolicy;\r\n    });\r\n  }\r\n\r\n  return signedIdentifiers;\r\n};","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n'use strict';\r\n \r\nvar RetryPolicyFilter = require('./retrypolicyfilter');\r\n\r\n/**\r\n* Creates a new LinearRetryPolicyFilter instance.\r\n* @class\r\n* The LinearRetryPolicyFilter allows you to retry operations,\r\n* using an linear back-off interval between retries.\r\n* To apply a filter to service operations, use `withFilter`\r\n* and specify the filter to be used when creating a service.\r\n* @constructor\r\n* @param {number} [retryCount=3]            The client retry count.\r\n* @param {number} [retryInterval=30000]     The client retry interval, in milliseconds.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var retryOperations = new azure.LinearRetryPolicyFilter();\r\n* var blobService = azure.createBlobService().withFilter(retryOperations)\r\n*/\r\nfunction LinearRetryPolicyFilter(retryCount, retryInterval) {\r\n  this.retryCount = retryCount ? retryCount : LinearRetryPolicyFilter.DEFAULT_CLIENT_RETRY_COUNT;\r\n  this.retryInterval = retryInterval ? retryInterval : LinearRetryPolicyFilter.DEFAULT_CLIENT_RETRY_INTERVAL;\r\n}\r\n\r\n/**\r\n* Represents the default client retry interval, in milliseconds.\r\n*/\r\nLinearRetryPolicyFilter.DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\r\n\r\n/**\r\n* Represents the default client retry count.\r\n*/\r\nLinearRetryPolicyFilter.DEFAULT_CLIENT_RETRY_COUNT = 3;\r\n\r\n/**\r\n* Determines if the operation should be retried and how long to wait until the next retry.\r\n*\r\n * @param {number} statusCode       The HTTP status code.\r\n * @param {object} requestOptions   The request options.\r\n * @return {retryInfo} Information about whether the operation qualifies for a retry and the retryInterval.\r\n*/\r\nLinearRetryPolicyFilter.prototype.shouldRetry = function (statusCode, requestOptions) {\r\n  var retryData = (requestOptions && requestOptions.retryContext) ? requestOptions.retryContext : {};\r\n  retryData.retryInterval = this.retryInterval;\r\n\r\n  return RetryPolicyFilter._shouldRetryOnError(statusCode, requestOptions);\r\n};\r\n\r\n/**\r\n* Handles an operation with a linear retry policy.\r\n*\r\n* @param {Object}   requestOptions The original request options.\r\n* @param {function} next           The next filter to be handled.\r\n*/\r\nLinearRetryPolicyFilter.prototype.handle = function (requestOptions, next) {\r\n  RetryPolicyFilter._handle(this, requestOptions, next);\r\n};\r\n\r\nmodule.exports = LinearRetryPolicyFilter;\r\n","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n'use strict';\r\n\r\nvar RetryPolicyFilter = require('./retrypolicyfilter');\r\n/**\r\n* Creates a new 'ExponentialRetryPolicyFilter' instance.\r\n* @class\r\n* The ExponentialRetryPolicyFilter allows you to retry operations,\r\n* using an exponential back-off interval between retries.\r\n* To apply a filter to service operations, use `withFilter`\r\n* and specify the filter to be used when creating a service.\r\n* @constructor\r\n* @param {number} [retryCount=3]            The client retry count.\r\n* @param {number} [retryInterval=30000]     The client retry interval, in milliseconds.\r\n* @param {number} [minRetryInterval=3000]   The minimum retry interval, in milliseconds.\r\n* @param {number} [maxRetryInterval=90000]  The maximum retry interval, in milliseconds.\r\n* \r\n* @example\r\n* var azure = require('azure-storage');\r\n* var retryOperations = new azure.ExponentialRetryPolicyFilter();\r\n* var blobService = azure.createBlobService().withFilter(retryOperations)\r\n*/\r\nfunction ExponentialRetryPolicyFilter(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\r\n  this.retryCount = retryCount ? retryCount : ExponentialRetryPolicyFilter.DEFAULT_CLIENT_RETRY_COUNT;\r\n  this.retryInterval = retryInterval ? retryInterval : ExponentialRetryPolicyFilter.DEFAULT_CLIENT_RETRY_INTERVAL;\r\n  this.minRetryInterval = minRetryInterval ? minRetryInterval : ExponentialRetryPolicyFilter.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\r\n  this.maxRetryInterval = maxRetryInterval ? maxRetryInterval : ExponentialRetryPolicyFilter.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\r\n}\r\n\r\n/**\r\n* Represents the default client retry interval, in milliseconds.\r\n*/\r\nExponentialRetryPolicyFilter.DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\r\n\r\n/**\r\n* Represents the default client retry count.\r\n*/\r\nExponentialRetryPolicyFilter.DEFAULT_CLIENT_RETRY_COUNT = 3;\r\n\r\n/**\r\n* Represents the default maximum retry interval, in milliseconds.\r\n*/\r\nExponentialRetryPolicyFilter.DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\r\n\r\n/**\r\n* Represents the default minimum retry interval, in milliseconds.\r\n*/\r\nExponentialRetryPolicyFilter.DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\r\n\r\n/**\r\n * Determines if the operation should be retried and how long to wait until the next retry.\r\n *\r\n * @param {number} statusCode The HTTP status code.\r\n * @param {object} requestOptions  The request options.\r\n * @return {retryInfo} Information about whether the operation qualifies for a retry and the retryInterval.\r\n */\r\nExponentialRetryPolicyFilter.prototype.shouldRetry = function (statusCode, requestOptions) {\r\n  var retryData = (requestOptions && requestOptions.retryContext) ? requestOptions.retryContext : {};\r\n\r\n  // Adjust retry interval\r\n  var incrementDelta = Math.pow(2, retryData.retryCount) - 1;\r\n  var boundedRandDelta = this.retryInterval * 0.8 + Math.floor(Math.random() * (this.retryInterval * 1.2 - this.retryInterval * 0.8));\r\n  incrementDelta *= boundedRandDelta;\r\n      \r\n  retryData.retryInterval = Math.min(this.minRetryInterval + incrementDelta, this.maxRetryInterval);\r\n\r\n  return RetryPolicyFilter._shouldRetryOnError(statusCode, requestOptions);\r\n};\r\n\r\n/**\r\n* Handles an operation with an exponential retry policy.\r\n*\r\n* @param {Object}   requestOptions The original request options.\r\n* @param {function} next           The next filter to be handled.\r\n*/\r\nExponentialRetryPolicyFilter.prototype.handle = function (requestOptions, next) {\r\n  RetryPolicyFilter._handle(this, requestOptions, next);\r\n};\r\n\r\nmodule.exports = ExponentialRetryPolicyFilter;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar util = require('util');\r\nvar http = require('http');\r\nvar https = require('https');\r\nvar EventEmitter = require('events').EventEmitter;\r\nvar os = require('os');\r\n\r\nvar azureutil = require('../util/util');\r\nvar Logger = require('../diagnostics/logger');\r\nvar Constants = require('../util/constants');\r\nvar errors = require('../errors/errors');\r\nvar ArgumentError = errors.ArgumentError;\r\n\r\nvar DEFAULT_OPERATION_MEMORY_USAGE = Constants.BlobConstants.DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES;\r\nvar DEFAULT_CRITICAL_MEMORY_LIMITATION_32_IN_BYTES = Constants.BlobConstants.DEFAULT_CRITICAL_MEMORY_LIMITATION_32_IN_BYTES;\r\nvar DEFAULT_CRITICAL_MEMORY_LIMITATION_BROWSER_IN_BYTES = Constants.BlobConstants.DEFAULT_CRITICAL_MEMORY_LIMITATION_BROWSER_IN_BYTES;\r\nvar DEFAULT_MINIMUM_MEMORY_USAGE_BROWSER_IN_BYTES = Constants.BlobConstants.DEFAULT_MINIMUM_MEMORY_USAGE_BROWSER_IN_BYTES;\r\nvar DEFAULT_GLOBAL_CONCURRENCY = 5; //Default http connection limitation for nodejs\r\n\r\nvar SystemTotalMemory = os.totalmem();\r\nvar CriticalFreeMemory = 0.1 * SystemTotalMemory;\r\nvar nodeVersion = azureutil.getNodeVersion();\r\n\r\n/**\r\n* Concurrently execute batch operations and call operation callback randomly or in sequence.\r\n* Random mode is for uploading.\r\n*   1. Fire user callback when the operation is done.\r\n* Sequence mode is for downloading.\r\n*   1. Fire user callback when the operation is done and all previous operations and callback has finished.\r\n*   2. BatchOperation guarantees the user callback is fired one by one.\r\n*   3. The next user callback can't be fired until the current one is completed.\r\n*/\r\nfunction BatchOperation(name, options) {\r\n  if (!options) {\r\n    options = {};\r\n  }\r\n\r\n  this.name = name;\r\n  this.logger = options.logger || new Logger(Logger.LogLevels.INFO);\r\n  this.operationMemoryUsage = options.operationMemoryUsage || DEFAULT_OPERATION_MEMORY_USAGE;\r\n  this.callbackInOrder = options.callbackInOrder === true;\r\n  this.callInOrder = options.callInOrder === true;\r\n  this._currentOperationId = this.callbackInOrder ? 1 : -1;\r\n  this.concurrency = DEFAULT_GLOBAL_CONCURRENCY;\r\n  this.enableReuseSocket = (nodeVersion.major > 0 || nodeVersion.minor >= 10) && options.enableReuseSocket;\r\n\r\n  this._emitter = new EventEmitter();\r\n  this._enableComplete = false;\r\n  this._ended = false;\r\n  this._error = null;\r\n  this._paused = false;\r\n\r\n  //Total operations count(queued and active and connected)\r\n  this._totalOperation = 0;\r\n\r\n  //Action operations count(The operations which are connecting to remote or executing callback or queued for executing)\r\n  this._activeOperation = 0;\r\n\r\n  //Queued operations count(The operations which are connecting to remote or queued for executing)\r\n  this._queuedOperation = 0;\r\n\r\n  //finished operation should be removed from this array\r\n  this._operations = [];\r\n}\r\n\r\n/**\r\n* Operation state\r\n*/\r\nvar OperationState = {\r\n  INITED : 'inited',\r\n  QUEUED : 'queued',\r\n  RUNNING : 'running',\r\n  COMPLETE : 'complete',\r\n  CALLBACK : 'callback',\r\n  ERROR : 'error'\r\n};\r\n\r\nBatchOperation.OperationState = OperationState;\r\n\r\n/**\r\n* Set batch operation concurrency\r\n*/\r\nBatchOperation.prototype.setConcurrency = function(concurrency) {\r\n  if (concurrency) {\r\n    this.concurrency = concurrency;\r\n    http.Agent.maxSockets = this.concurrency;\r\n    https.Agent.maxSockets = this.concurrency;\r\n  }\r\n};\r\n\r\n/**\r\n* Is the workload heavy and It can be used to determine whether we could queue operations\r\n*/\r\nBatchOperation.prototype.IsWorkloadHeavy = function() {\r\n  //Only support one batch operation for now.\r\n  //In order to work with the multiple batch operation, we can use global operation track objects\r\n  //BatchOperation acquire a bunch of operation ids from global and allocated ids to RestOperation\r\n  //RestOperation start to run in order of id\r\n  var sharedRequest = 1;\r\n  if(this.enableReuseSocket && !this.callInOrder) {\r\n    sharedRequest = 2;\r\n  }\r\n  return this._activeOperation >= sharedRequest * this.concurrency || this._isLowMemory();\r\n};\r\n\r\n/**\r\n* Get the approximate memory usage for batch operation.\r\n*/\r\nBatchOperation.prototype._getApproximateMemoryUsage = function() {\r\n  var currentUsage = azureutil.isBrowser() ? DEFAULT_MINIMUM_MEMORY_USAGE_BROWSER_IN_BYTES : process.memoryUsage().rss; // Currently, we cannot get memory usage in browsers\r\n  var futureUsage = this._queuedOperation * this.operationMemoryUsage;\r\n  return currentUsage + futureUsage;\r\n};\r\n\r\n/**\r\n* Return whether in a low memory situation.\r\n*/\r\nBatchOperation.prototype._isLowMemory = function() {  \r\n  var approximateMemoryUsage = this._getApproximateMemoryUsage();\r\n  return os.freemem() < CriticalFreeMemory ||\r\n    (this._activeOperation >= this.concurrency && approximateMemoryUsage > 0.5 * SystemTotalMemory) ||\r\n    (azureutil.is32() && approximateMemoryUsage > DEFAULT_CRITICAL_MEMORY_LIMITATION_32_IN_BYTES) ||\r\n    (azureutil.isBrowser() && approximateMemoryUsage > DEFAULT_CRITICAL_MEMORY_LIMITATION_BROWSER_IN_BYTES);\r\n};\r\n\r\n/**\r\n* Add a operation into batch operation\r\n*/\r\nBatchOperation.prototype.addOperation = function(operation) {\r\n  this._operations.push(operation);\r\n  operation.status = OperationState.QUEUED;\r\n  operation.operationId = ++this._totalOperation;\r\n  this._queuedOperation++;\r\n  this.logger.debug(util.format('Add operation %d into batch operation %s. Active: %s; Queued: %s', operation.operationId, this.name, this._activeOperation, this._queuedOperation));\r\n  //Immediately start the idle operation if workload isn't heavy\r\n  this._runOperation(operation);\r\n  return this.IsWorkloadHeavy();\r\n};\r\n\r\n/**\r\n* Enable batch operation complete when there is no operation to run.\r\n*/\r\nBatchOperation.prototype.enableComplete = function() {\r\n  this._enableComplete = true;\r\n  this.logger.debug(util.format('Enable batch operation %s complete', this.name));\r\n  this._tryEmitEndEvent();\r\n};\r\n\r\n/**\r\n* Stop firing user call back\r\n*/\r\nBatchOperation.prototype.pause = function () {\r\n  this._paused = true;\r\n};\r\n\r\n/**\r\n* Start firing user call back\r\n*/\r\nBatchOperation.prototype.resume = function () {\r\n  if (this._paused) {\r\n    this._paused = false;\r\n    this._fireOperationUserCallback();\r\n  }\r\n};\r\n\r\n/**\r\n* Add event listener\r\n*/\r\nBatchOperation.prototype.on = function(event, listener) {\r\n  // only emit end if the batch has completed all operations\r\n  if(this._ended && event === 'end') {\r\n    listener();\r\n  } else {\r\n    this._emitter.on(event, listener);\r\n  }\r\n};\r\n\r\n/**\r\n* Run operation\r\n*/\r\nBatchOperation.prototype._runOperation = function (operation) {\r\n  this.logger.debug(util.format('Operation %d start to run', operation.operationId));\r\n  var cb = this.getBatchOperationCallback(operation);\r\n\r\n  if(this._error) {\r\n    cb(this._error);//Directly call the callback with previous error.\r\n  } else {\r\n    operation.run(cb);\r\n  }\r\n\r\n  this._activeOperation++;\r\n};\r\n\r\n/**\r\n* Return an general operation call back.\r\n* This callback is used to update the internal status and fire user's callback when operation is complete.\r\n*/\r\nBatchOperation.prototype.getBatchOperationCallback = function (operation) {\r\n  var self = this;\r\n  return function (error) {\r\n    self._queuedOperation--;\r\n    if (error) {\r\n      operation.status = OperationState.ERROR;\r\n      self.logger.debug(util.format('Operation %d failed. Error %s', operation.operationId, error));\r\n      self._error = error;\r\n    } else {\r\n      operation.status = OperationState.CALLBACK;\r\n      self.logger.debug(util.format('Operation %d succeed', operation.operationId));\r\n    }\r\n\r\n    operation._callbackArguments = arguments;\r\n    if (self._paused) {\r\n      operation.status = OperationState.CALLBACK;\r\n      self.logger.debug(util.format('Batch operation paused and Operation %d wait for firing callback', operation.operationId));\r\n    } else if (self.callbackInOrder) {\r\n      operation.status = OperationState.CALLBACK;\r\n      if (self._currentOperationId === operation.operationId) {\r\n        self._fireOperationUserCallback(operation);\r\n      } else if (self._currentOperationId > operation.operationId) {\r\n        throw new Error('Debug error: current callback operation id cannot be larger than operation id');\r\n      } else {\r\n        self.logger.debug(util.format('Operation %d is waiting for firing callback %s', operation.operationId, self._currentOperationId));\r\n      }\r\n    } else {\r\n      self._fireOperationUserCallback(operation);\r\n    }\r\n\r\n    self._tryEmitDrainEvent();\r\n    operation = null;\r\n    self = null;\r\n  };\r\n};\r\n\r\n/**\r\n* Fire user's call back\r\n*/\r\nBatchOperation.prototype._fireOperationUserCallback = function (operation) {\r\n  var index = this._getCallbackOperationIndex();\r\n  if (!operation && index != -1) {\r\n    operation = this._operations[index];\r\n  }\r\n\r\n  if (operation && !this._paused) {\r\n    // fire the callback, if exists\r\n    if (operation._userCallback) {\r\n      this.logger.debug(util.format('Fire user call back for operation %d', operation.operationId));\r\n      // make sure UserCallback is a sync operation in sequence mode.\r\n      // both async and sync operations are available for random mode.\r\n      operation._fireUserCallback();\r\n    }\r\n    \r\n    // remove the operation from the array and decrement the counter\r\n    this._operations.splice(index, 1);\r\n    this._activeOperation--;\r\n    operation.status = OperationState.COMPLETE;\r\n    index = operation = null;\r\n\r\n    if (this.callbackInOrder) {\r\n      this._currentOperationId++;\r\n    }\r\n\r\n    this._fireOperationUserCallback();\r\n  } else if (this._paused) {\r\n    this._tryEmitDrainEvent();\r\n  } else {\r\n    // check if batch has ended and if so emit end event\r\n    this._tryEmitEndEvent();\r\n  }\r\n};\r\n\r\n/**\r\n* Try to emit the BatchOperation end event\r\n* End event means all the operation and callback already finished.\r\n*/\r\nBatchOperation.prototype._tryEmitEndEvent = function () {\r\n  if(this._enableComplete && this._activeOperation === 0 && this._operations.length === 0) {\r\n    this._ended = true;\r\n    this.logger.debug(util.format('Batch operation %s emits the end event', this.name));\r\n    this._emitter.emit('end', this._error, null);\r\n    return true;\r\n  }\r\n  \r\n  // Workaround to recover from the 'hang' edge case. _tryEmitEndEvent function is not supposed to be called if the bacth is not really completed.\r\n  this._tryEmitDrainEvent();\r\n  return false;\r\n};\r\n\r\n/**\r\n* Try to emit the drain event\r\n*/\r\nBatchOperation.prototype._tryEmitDrainEvent = function () {\r\n  if (!this._emitter) return false;\r\n  if(!this.IsWorkloadHeavy() || this._activeOperation < this.concurrency) {\r\n    this._emitter.emit('drain');\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n* Get the current active operation index.\r\n* Only the active operation could call user's callback in sequence model.\r\n* The other finished but not active operations should wait for wake up.\r\n*/\r\nBatchOperation.prototype._getCallbackOperationIndex = function () {\r\n  var operation = null;\r\n  for (var i = 0; i < this._operations.length; i++) {\r\n    operation = this._operations[i];\r\n    if (this.callbackInOrder) {\r\n      //Sequence mode\r\n      if (operation.operationId == this._currentOperationId) {\r\n        if (operation.status === OperationState.CALLBACK) {\r\n          return i;\r\n        } else {\r\n          return -1;\r\n        }\r\n      }\r\n    } else {\r\n      //Random mode\r\n      if (operation.status === OperationState.CALLBACK) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\n/**\r\n* Do nothing and directly call the callback.\r\n* In random mode, the user callback will be called immediately\r\n* In sequence mode, the user callback will be called after the previous callback has been called\r\n*/\r\nBatchOperation.noOperation = function (cb) {\r\n  cb();\r\n};\r\n\r\n/**\r\n* Rest operation in sdk\r\n*/\r\nfunction RestOperation(serviceClient, operation) {\r\n  this.status = OperationState.Inited;\r\n  this.operationId = -1;\r\n  this._callbackArguments = null;\r\n\r\n  // setup callback and args\r\n  this._userCallback = arguments[arguments.length - 1];\r\n  var sliceEnd = arguments.length;\r\n  if(azureutil.objectIsFunction(this._userCallback)) {\r\n    sliceEnd--;\r\n  } else {\r\n    this._userCallback = null;\r\n  }\r\n  var operationArguments = Array.prototype.slice.call(arguments).slice(2, sliceEnd);\r\n\r\n  this.run = function(cb) {\r\n    var func = serviceClient[operation];\r\n    if(!func) {\r\n      throw new ArgumentError('operation', util.format('Unknown operation %s in serviceclient', operation));\r\n    } else {\r\n      if(!cb) cb = this._userCallback;\r\n      operationArguments.push(cb);\r\n      this.status = OperationState.RUNNING;\r\n      func.apply(serviceClient, operationArguments);\r\n      operationArguments = operation = null;\r\n    }\r\n  };\r\n\r\n  this._fireUserCallback = function () {\r\n    if(this._userCallback) {\r\n      this._userCallback.apply(null, this._callbackArguments);\r\n    }\r\n  };\r\n}\r\n\r\nBatchOperation.RestOperation = RestOperation;\r\n\r\n/**\r\n* Common operation wrapper\r\n*/\r\nfunction CommonOperation(operationFunc, callback) {\r\n  this.status = OperationState.Inited;\r\n  this.operationId = -1;\r\n  this._callbackArguments = null;\r\n  var sliceStart = 2;\r\n  if (azureutil.objectIsFunction(callback)) {\r\n    this._userCallback = callback;\r\n  } else {\r\n    this._userCallback = null;\r\n    sliceStart = 1;\r\n  }\r\n  var operationArguments = Array.prototype.slice.call(arguments).slice(sliceStart);\r\n  this.run = function (cb) {\r\n    if (!cb) cb = this._userCallback;\r\n    operationArguments.push(cb);\r\n    this.status = OperationState.RUNNING;\r\n    operationFunc.apply(null, operationArguments);\r\n    operationArguments = operationFunc = null;\r\n  };\r\n  \r\n  this._fireUserCallback = function () {\r\n    if (this._userCallback) {\r\n      this._userCallback.apply(null, this._callbackArguments);\r\n    }\r\n    this._userCallback = this._callbackArguments = null;\r\n  };\r\n}\r\n\r\nBatchOperation.CommonOperation = CommonOperation;\r\n\r\nmodule.exports = BatchOperation;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n/**\r\n* Chunked memory pool allocator.\r\n* It could dramatically reduce the memory usage.\r\n* However, it can't dramatically reduce the CPU time since GC in v8 is very efficient.\r\n*/\r\nfunction ChunkAllocator(chunkSize, maxCount) {\r\n  // Track the unused buffers and number of used buffers\r\n  this._pool = [];\r\n  this._inuse = 0;\r\n\r\n  // Buffer size\r\n  this._chunkSize = chunkSize;\r\n\r\n  // If total memory is larger than this._chunkSize * this._maxCount, the buffer pool is not used.\r\n  this._maxCount = maxCount || 10;\r\n\r\n  // Immediately add a buffer to the pool.\r\n  this._extendMemoryPool();\r\n}\r\n\r\n/**\r\n* Synchronously require a buffer\r\n* Caller should be aware of that the content of buffer is random since the Buffer.fill is Time-consumed opreation.\r\n*/\r\nChunkAllocator.prototype.getBuffer = function(size) {\r\n  var buffer = this._getBufferFromPool(size);\r\n  if (buffer === null) {\r\n    // Either the total memory is larger than this._chunkSize * this._maxCount\r\n    // Or, the size does not match the chunk size of the pool\r\n    buffer = new Buffer(size);\r\n  }\r\n\r\n  this._inuse++;\r\n  return buffer;\r\n};\r\n\r\n/**\r\n* Get buffer from the current memory pool.\r\n*/\r\nChunkAllocator.prototype._getBufferFromPool = function(size) {\r\n  // Return null if the given size does not match the chunk size of the buffer pool.\r\n  if(size !== this._chunkSize) {\r\n    return null;\r\n  } \r\n\r\n  // Extend the memory pool if it is empty.\r\n  if(this._pool.length === 0) {\r\n    this._extendMemoryPool();\r\n  }\r\n\r\n  // If the pool is not empty, return a buffer.\r\n  if(this._pool.length !== 0) {\r\n    return this._pool.pop();\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n* Extend the memory pool if the maximum size has not been reached.\r\n*/\r\nChunkAllocator.prototype._extendMemoryPool = function() {\r\n  var total = this._pool.length + this._inuse;\r\n\r\n  // If the total is larger than the max, do not allocate more memory.\r\n  if(total >= this._maxCount) return;\r\n\r\n  // Calculate the new number of buffers, equal to the total*2 bounded by 1 and the maxCount\r\n  var nextSize = Math.min(total * 2, this._maxCount) || 1;\r\n\r\n  // Add more buffers.\r\n  var increment = nextSize - total;\r\n  for(var i = 0; i < increment; i++) {\r\n    var buffer = new Buffer(this._chunkSize);\r\n    this._pool.push(buffer);\r\n  }\r\n};\r\n\r\n/**\r\n* Release the buffer.\r\n*/\r\nChunkAllocator.prototype.releaseBuffer = function(buffer) {\r\n  if(buffer.length !== this._chunkSize) {\r\n    // Directly delete the buffer if bufferSize is invalid and wait for GC.\r\n    buffer = null;\r\n    return;\r\n  }\r\n\r\n  // Add the buffer to the pool if it is not full, otherwise delete it\r\n  if (this._pool.length < this._maxCount) {\r\n    this._pool.push(buffer);\r\n  } else {\r\n    buffer = null;\r\n  }\r\n\r\n  // Decrement _inuse \r\n  this._inuse--;\r\n\r\n  // _inuse could be below zero if a buffer is released which was not returned by getBuffer\r\n  if(this._inuse < 0) {\r\n    this._inuse = 0;\r\n  }\r\n};\r\n\r\n/**\r\n* Destroy ChunkAllocator.\r\n*/\r\nChunkAllocator.prototype.destroy = function() {\r\n  this._pool = [];\r\n  this._inuse = 0;\r\n};\r\n\r\nmodule.exports = ChunkAllocator;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar ChunkStream = require('./chunkstream');\r\nvar EventEmitter = require('events').EventEmitter;\r\nvar util = require('util');\r\nvar azureutil = require('./../util/util');\r\n\r\n/**\r\n*  Chunk stream\r\n*  1. Calculate md5\r\n*  2. Track reading offset\r\n*  3. Work with customize memory allocator\r\n*  4. Buffer data from stream.\r\n*  @param {object} options stream.Readable options\r\n*/\r\nfunction ChunkStreamWithStream(stream, options) {\r\n  ChunkStream.call(this, options);\r\n\r\n  stream.pause(); // Pause stream and wait for data listener. It's useful for node v0.8\r\n  this._stream = stream;\r\n  this._stream.on('end', this.end.bind(this)); // Should catch the end event for node v0.8\r\n}\r\n\r\nutil.inherits(ChunkStreamWithStream, ChunkStream);\r\n\r\n/**\r\n* Add event listener\r\n*/\r\nChunkStreamWithStream.prototype.on = function(event, listener) {\r\n  if(event === 'end' && this._streamEnded) {\r\n    listener(); //Directly call the end event when stream already ended\r\n  } else {\r\n    EventEmitter.prototype.on.call(this, event, listener);\r\n  }\r\n\r\n  if (event === 'data') {\r\n    if (!this._isStreamOpened) {\r\n      this._isStreamOpened = true;\r\n      this._stream.on('data', this._buildChunk.bind(this));\r\n    }\r\n    if (this._paused === undefined) {\r\n      this._stream.resume();\r\n    }\r\n  }\r\n  \r\n  return this;\r\n};\r\n\r\n/**\r\n* Stop stream from external\r\n*/\r\nChunkStreamWithStream.prototype.stop = function (chunk, encoding, cb) {\r\n  if (azureutil.objectIsFunction(this._stream.destroy)) {\r\n    this._stream.destroy();\r\n  } else {\r\n    this.pause();\r\n  }\r\n  ChunkStream.prototype.end.call(this, chunk, encoding, cb);\r\n};\r\n\r\n/**\r\n* Pause chunk stream\r\n*/\r\nChunkStreamWithStream.prototype.pause = function () {\r\n  ChunkStream.prototype.pause.call(this);\r\n\r\n  this._stream.pause();\r\n};\r\n\r\n/**\r\n* Resume read stream\r\n*/\r\nChunkStreamWithStream.prototype.resume = function() {\r\n  ChunkStream.prototype.resume.call(this);\r\n\r\n  this._stream.resume();\r\n};\r\n\r\nChunkStreamWithStream.prototype.finish = function () {\r\n  ChunkStream.prototype.finish.call(this);\r\n  this._stream.emit.call(this._stream, 'finish');\r\n};\r\n\r\nChunkStreamWithStream.prototype.destroy = function () {\r\n  ChunkStream.prototype.destroy.call(this);\r\n  this._stream.emit.call(this._stream, 'close');\r\n};\r\n\r\nmodule.exports = ChunkStreamWithStream;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar EventEmitter = require('events');\r\nvar util = require('util');\r\nvar azureutil = require('../util/util');\r\n\r\n/**\r\n* Blob upload/download speed summary.\r\n* Trigger 'progress' event every progress updates.\r\n*/\r\nfunction SpeedSummary (name) {\r\n  this.name = name;\r\n  this._startTime = Date.now();\r\n  this._timeWindowInSeconds = 10;\r\n  this._timeWindow = this._timeWindowInSeconds * 1000;\r\n  this._totalWindowSize = 0;\r\n  this._speedTracks = new Array(this._timeWindowInSeconds);\r\n  this._speedTrackPtr = 0;\r\n  this.totalSize = undefined;\r\n  this.completeSize = 0;\r\n}\r\n\r\nutil.inherits(SpeedSummary, EventEmitter);\r\n\r\n/**\r\n* Convert the size to human readable size\r\n*/\r\nfunction toHumanReadableSize(size, len) {\r\n  if(!size) return '0B';\r\n  if (!len || len <= 0) {\r\n    len = 2;\r\n  }\r\n  var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n  var i = Math.floor( Math.log(size) / Math.log(1024));\r\n  return (size/Math.pow(1024, i)).toFixed(len) + units[i];\r\n}\r\n\r\n/**\r\n* Get running seconds\r\n*/\r\nSpeedSummary.prototype.getElapsedSeconds = function(humanReadable) {\r\n  var now = Date.now();\r\n  var seconds = parseInt((now - this._startTime) / 1000, 10);\r\n  if (humanReadable !== false) {\r\n    var s = parseInt(seconds % 60, 10);\r\n    seconds /= 60;\r\n    var m = Math.floor(seconds % 60);\r\n    seconds /= 60;\r\n    var h = Math.floor(seconds);\r\n    seconds = util.format('%s:%s:%s', azureutil.zeroPaddingString(h, 2), azureutil.zeroPaddingString(m, 2), azureutil.zeroPaddingString(s, 2));\r\n  }\r\n  return seconds;\r\n};\r\n\r\n/**\r\n* Get complete percentage\r\n* @param {int} len The number of digits after the decimal point.\r\n*/\r\nSpeedSummary.prototype.getCompletePercent = function(len) {\r\n  if (this.totalSize) {\r\n    if(!len || len <= 0) {\r\n      len = 1;\r\n    }\r\n    return (this.completeSize * 100 / this.totalSize).toFixed(len);\r\n  } else {\r\n    if(this.totalSize === 0) {\r\n      return 100;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n* Get average upload/download speed\r\n*/\r\nSpeedSummary.prototype.getAverageSpeed = function(humanReadable) {\r\n  var elapsedTime = this.getElapsedSeconds(false);\r\n  return this._getInternalSpeed(this.completeSize, elapsedTime, humanReadable);\r\n};\r\n\r\n/**\r\n* Get instant speed\r\n*/\r\nSpeedSummary.prototype.getSpeed = function(humanReadable) {\r\n  this._refreshSpeedTracks();\r\n  var elapsedTime = this.getElapsedSeconds(false);\r\n  elapsedTime = Math.min(elapsedTime, this._timeWindowInSeconds);\r\n  return this._getInternalSpeed(this._totalWindowSize, elapsedTime, humanReadable);\r\n};\r\n\r\n/**\r\n* Get internal speed\r\n*/\r\nSpeedSummary.prototype._getInternalSpeed = function(totalSize, elapsedTime, humanReadable) {\r\n  if (elapsedTime <= 0) {\r\n    elapsedTime = 1;\r\n  }\r\n  var speed = totalSize / elapsedTime;\r\n  if(humanReadable !== false) {\r\n    speed = toHumanReadableSize(speed) + '/s';\r\n  }\r\n  return speed;\r\n};\r\n\r\n/**\r\n* Refresh speed tracks\r\n*/\r\nSpeedSummary.prototype._refreshSpeedTracks = function() {\r\n  var now = Date.now();\r\n  var totalSize = 0;\r\n  for(var i = 0; i < this._speedTracks.length; i++) {\r\n    if(!this._speedTracks[i]) continue;\r\n    if(now - this._speedTracks[i].timeStamp <= this._timeWindow) {\r\n      totalSize += this._speedTracks[i].size;\r\n    } else {\r\n      this._speedTracks[i] = null;\r\n    }\r\n  }\r\n  this._totalWindowSize = totalSize;\r\n};\r\n\r\n/**\r\n* Increment the complete data size\r\n*/\r\nSpeedSummary.prototype.increment = function(len) {\r\n  this.completeSize += len;\r\n  this._recordSpeed(len);\r\n\r\n  var that = this;\r\n  process.nextTick(function () {\r\n    that.emit('progress');\r\n  });\r\n\r\n  return this.completeSize;\r\n};\r\n\r\n/**\r\n* record complete size into speed tracks\r\n*/\r\nSpeedSummary.prototype._recordSpeed = function(completeSize) {\r\n  var now = Date.now();\r\n  var track = this._speedTracks[this._speedTrackPtr];\r\n  if(track) {\r\n    var timeDiff = now - track.timeStamp;\r\n    if(timeDiff > this._timeWindow) {\r\n      track.timeStamp = now;\r\n      track.size = completeSize;\r\n    } else if(timeDiff <= 1000) { //1 seconds\r\n      track.size += completeSize;\r\n    } else {\r\n      this._speedTrackPtr = (this._speedTrackPtr + 1) % this._timeWindowInSeconds;\r\n      this._recordSpeed(completeSize);\r\n    }\r\n  } else {\r\n    track = {timeStamp : now, size: completeSize};\r\n    this._speedTracks[this._speedTrackPtr] = track;\r\n  }\r\n};\r\n\r\n/**\r\n* Get auto increment function\r\n*/\r\nSpeedSummary.prototype.getAutoIncrementFunction = function(size) {\r\n  var self = this;\r\n  return function(error, retValue) {\r\n    if(!error) {\r\n      var doneSize = 0;\r\n      if((!retValue && retValue !== 0) || isNaN(retValue)) {\r\n        doneSize = size;\r\n      } else {\r\n        doneSize = retValue;\r\n      }\r\n      self.increment(doneSize);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n* Get total size\r\n*/\r\nSpeedSummary.prototype.getTotalSize = function(humanReadable) {\r\n  if (humanReadable !== false) {\r\n    return toHumanReadableSize(this.totalSize);\r\n  } else {\r\n    return this.totalSize;\r\n  }\r\n};\r\n\r\n/**\r\n* Get completed data size\r\n*/\r\nSpeedSummary.prototype.getCompleteSize = function(humanReadable) {\r\n  if (humanReadable !== false) {\r\n    return toHumanReadableSize(this.completeSize);\r\n  } else {\r\n    return this.completeSize;\r\n  }\r\n};\r\n\r\nmodule.exports = SpeedSummary;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n/**\r\n* Date/time related helper functions\r\n* @module date\r\n* \r\n*/\r\n\r\n/**\r\n* Generates a Date object which is in the given days from now.\r\n* \r\n* @param {int} days The days timespan.\r\n* @return {Date}\r\n*/\r\nexports.daysFromNow = function (days) {\r\n  var date = new Date();\r\n  date.setDate(date.getDate() + days);\r\n  return date;\r\n};\r\n\r\n/**\r\n* Generates a Date object which is in the given hours from now.\r\n*\r\n* @param {int} hours The hours timespan.\r\n* @return {Date}\r\n*/\r\nexports.hoursFromNow = function (hours) {\r\n  var date = new Date();\r\n  date.setHours(date.getHours() + hours);\r\n  return date;\r\n};\r\n\r\n/**\r\n* Generates a Date object which is in the given minutes from now.\r\n*\r\n* @param {int} minutes The minutes timespan.\r\n* @return {Date}\r\n*/\r\nexports.minutesFromNow = function (minutes) {\r\n  var date = new Date();\r\n  date.setMinutes(date.getMinutes() + minutes);\r\n  return date;\r\n};\r\n\r\n/**\r\n* Generates a Date object which is in the given seconds from now.\r\n*\r\n* @param {int} seconds The seconds timespan.\r\n* @return {Date}\r\n*/\r\nexports.secondsFromNow = function (seconds) {\r\n  var date = new Date();\r\n  date.setSeconds(date.getSeconds() + seconds);\r\n  return date;\r\n};","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Expose 'AccessCondition'.\r\n\r\n/**\r\n* Defines constants, enums, and utility functions for use with storage access condition.\r\n* @namespace\r\n*/\r\n\r\n'use strict';\r\n\r\nexports = module.exports;\r\n\r\n/**\r\n* Constructs an empty access condition.\r\n*\r\n* @return {object} An empty AccessCondition object\r\n*/\r\nexports.generateEmptyCondition = function () {\r\n  return {};\r\n};\r\n\r\n/**\r\n* Constructs an access condition such that an operation will be performed only if the resource does not exist on the service\r\n*\r\n* Setting this access condition modifies the request to include the HTTP If-None-Match conditional header\r\n\r\n* @return {AccessConditions} An AccessCondition object that represents a condition that checks for nonexistence\r\n*/\r\nexports.generateIfNotExistsCondition = function () {\r\n  var accessCondition = {};\r\n  accessCondition.EtagNonMatch = '*';\r\n  return accessCondition;\r\n};\r\n\r\n/**\r\n* Constructs an access condition such that an operation will be performed only if the resource exists on the service\r\n*\r\n* Setting this access condition modifies the request to include the HTTP If-Match conditional header\r\n\r\n* @return {AccessConditions} An AccessCondition object that represents a condition that checks for existence\r\n*/\r\nexports.generateIfExistsCondition = function () {\r\n  var accessCondition = {};\r\n  accessCondition.EtagMatch = '*';\r\n  return accessCondition;\r\n};\r\n\r\n/**\r\n* Constructs an access condition such that an operation will be performed only if the resource's ETag value \r\n* does not match the specified ETag value\r\n*\r\n* Setting this access condition modifies the request to include the HTTP If-None-Match conditional header\r\n*\r\n* @param  {string} etag                    The ETag value to check against the resource's ETag\r\n* @return {AccessConditions}               An AccessCondition object that represents the If-None-Match condition\r\n*/\r\nexports.generateIfNoneMatchCondition = function (etag) {\r\n  var accessCondition = {};\r\n  accessCondition.EtagNonMatch = etag;\r\n  return accessCondition;\r\n};\r\n\r\n/**\r\n* Constructs an access condition such that an operation will be performed only if the resource's ETag value\r\n* matches the specified ETag value\r\n*\r\n* Setting this access condition modifies the request to include the HTTP If-Match conditional header\r\n*\r\n* @param  {string} etag                    The ETag value to check against the resource's ETag\r\n* @return {AccessConditions}               An AccessCondition object that represents the If-Match condition\r\n*/\r\nexports.generateIfMatchCondition = function (etag) {\r\n  var accessCondition = {};\r\n  accessCondition.EtagMatch = etag;\r\n  return accessCondition;\r\n};\r\n\r\n/**\r\n* Constructs an access condition such that an operation will be performed only if the resource has been\r\n* modified since the specified time\r\n*\r\n* Setting this access condition modifies the request to include the HTTP If-Modified-Since conditional header\r\n*\r\n* @param  {Date|string}  time              A date object specifying the time since which the resource must have been modified\r\n* @return {AccessConditions}               An AccessCondition object that represents the If-Modified-Since condition\r\n*/\r\nexports.generateIfModifiedSinceCondition = function (time) {\r\n  var accessCondition = {};\r\n  accessCondition.DateModifedSince = time;\r\n  return accessCondition;\r\n};\r\n\r\n/**\r\n* Constructs an access condition such that an operation will be performed only if the resource has not been\r\n* modified since the specified time\r\n*\r\n* Setting this access condition modifies the request to include the HTTP If-Unmodified-Since conditional header\r\n*\r\n* @param  {Date|string}    time            A date object specifying the time since which the resource must have not been modified\r\n* @return {AccessConditions}               An AccessCondition object that represents the If-Unmodified-Since condition\r\n*/\r\nexports.generateIfNotModifiedSinceCondition = function (time) {\r\n  var accessCondition = {};\r\n  accessCondition.DateUnModifiedSince = time;\r\n  return accessCondition;\r\n};\r\n\r\n/**\r\n* Constructs an access condition such that an operation will be performed only if the resource's sequence number\r\n* is equal to the specified value\r\n*\r\n* Setting this access condition modifies the request to include the HTTP x-ms-if-sequence-number-eq conditional header\r\n*\r\n* @param  {Number|string}    sequenceNumber    A date object specifying the time since which the resource must have not been modified\r\n* @return {AccessConditions}                   An AccessCondition object that represents the If-Unmodified-Since condition\r\n*/\r\nexports.generateSequenceNumberEqualCondition = function (sequenceNumber) {\r\n  var accessCondition = {};\r\n  accessCondition.SequenceNumberEqual = sequenceNumber;\r\n  return accessCondition;\r\n};\r\n\r\n/**\r\n* Constructs an access condition such that an operation will be performed only if the resource's sequence number\r\n* is less than the specified value\r\n*\r\n* Setting this access condition modifies the request to include the HTTP x-ms-if-sequence-number-lt conditional header\r\n*\r\n* @param  {Number|string}    sequenceNumber    A date object specifying the time since which the resource must have not been modified\r\n* @return {AccessConditions}                   An AccessCondition object that represents the If-Unmodified-Since condition\r\n*/\r\nexports.generateSequenceNumberLessThanCondition = function (sequenceNumber) {\r\n  var accessCondition = {};\r\n  accessCondition.SequenceNumberLessThan = sequenceNumber;\r\n  return accessCondition;\r\n};\r\n\r\n/**\r\n* Constructs an access condition such that an operation will be performed only if the resource's sequence number\r\n* is less than or equal to the specified value\r\n*\r\n* Setting this access condition modifies the request to include the HTTP x-ms-if-sequence-number-le conditional header\r\n*\r\n* @param  {Number|string}    sequenceNumber    A date object specifying the time since which the resource must have not been modified\r\n* @return {AccessConditions}                   An AccessCondition object that represents the If-Unmodified-Since condition\r\n*/\r\nexports.generateSequenceNumberLessThanOrEqualCondition = function (sequenceNumber) {\r\n  var accessCondition = {};\r\n  accessCondition.SequenceNumberLessThanOrEqual = sequenceNumber;\r\n  return accessCondition;\r\n};","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar util = require('util');\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar SharedKey = azureCommon.SharedKey;\r\nvar azureutil = azureCommon.util;\r\nvar Constants = azureCommon.Constants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar QueryStringConstants = Constants.QueryStringConstants;\r\n\r\n/**\r\n* Creates a new SharedKeyTable object.\r\n*\r\n* @constructor\r\n* @param {string} storageAccount    The storage account.\r\n* @param {string} storageAccessKey  The storage account's access key.\r\n* @param {bool}   usePathStyleUri   Boolean value indicating if the path, or the hostname, should include the storage account.\r\n*/\r\nfunction SharedKeyTable(storageAccount, storageAccessKey, usePathStyleUri) {\r\n  SharedKeyTable['super_'].call(this,\r\n    storageAccount,\r\n    storageAccessKey,\r\n    usePathStyleUri);\r\n}\r\n\r\nutil.inherits(SharedKeyTable, SharedKey);\r\n\r\n/**\r\n* Signs a request with the Authentication header.\r\n*\r\n* @param {WebResource} The webresource to be signed.\r\n* @param {function(error)}  callback  The callback function.\r\n*/\r\nSharedKeyTable.prototype.signRequest = function (webResource, callback) {\r\n  var getvalueToAppend = function (value) {\r\n    if (azureutil.objectIsNull(value)) {\r\n      return '\\n';\r\n    } else {\r\n      return value + '\\n';\r\n    }\r\n  };\r\n\r\n  var stringToSign =\r\n      webResource.method + '\\n' +\r\n      getvalueToAppend(webResource.headers[HeaderConstants.CONTENT_MD5]) +\r\n      getvalueToAppend(webResource.headers[HeaderConstants.CONTENT_TYPE]) +\r\n      getvalueToAppend(webResource.headers[HeaderConstants.MS_DATE]) +\r\n      this._getCanonicalizedResource(webResource);\r\n\r\n  var signature = this.signer.sign(stringToSign);\r\n\r\n  webResource.withHeader(HeaderConstants.AUTHORIZATION, 'SharedKey ' + this.storageAccount + ':' + signature);\r\n  callback(null);\r\n};\r\n\r\n/*\r\n* Retrieves the webresource's canonicalized resource string.\r\n* @param {WebResource} webResource The webresource to get the canonicalized resource string from.\r\n* @return {string} The canonicalized resource string.\r\n*/\r\nSharedKeyTable.prototype._getCanonicalizedResource = function (webResource) {\r\n  var path = '/';\r\n  if (webResource.path) {\r\n    path = webResource.path;\r\n  }\r\n\r\n  var canonicalizedResource = '/' + this.storageAccount + path;\r\n\r\n  var queryStringValues = webResource.queryString;\r\n  if (queryStringValues[QueryStringConstants.COMP]) {\r\n    canonicalizedResource += '?comp=' + queryStringValues[QueryStringConstants.COMP];\r\n  }\r\n\r\n  return canonicalizedResource;\r\n};\r\n\r\nmodule.exports = SharedKeyTable;","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar odataHandler = require('../internal/odatahandler');\r\n\r\nfunction TableResult(name) {\r\n  this.name = name;\r\n}\r\n\r\nTableResult.serialize = function (tableName) {\r\n  return JSON.stringify({ TableName: tableName });\r\n};\r\n\r\nTableResult.parse = function (response) {\r\n  var result = null;\r\n  if (response.body) {\r\n    result = odataHandler.parseJsonTables(response.body);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexports = module.exports = TableResult;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar Md5Wrapper = require('./../../../common/md5-wrapper');\r\nvar StorageServiceClient = azureCommon.StorageServiceClient;\r\nvar WebResource = azureCommon.WebResource;\r\nvar Constants = azureCommon.Constants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar TableConstants = Constants.TableConstants;\r\n\r\nvar RequestHandler = require('../internal/requesthandler');\r\nvar entityResult = require('./entityresult');\r\n\r\n/**\r\n* Creates a new BatchResult.\r\n*\r\n* @param {TableService}      tableService    The table service.\r\n* @param {string}            table           The table name.\r\n* @param {array}             operations      The array of batch operations.\r\n* @constructor\r\n* @ignore\r\n*/\r\nfunction BatchResult(tableService, table, operations) {\r\n  this.tableService = tableService;\r\n  this.table = table;\r\n  this.operations = operations;\r\n  this.batchBoundary = 'batch_' + BatchResult._getBoundary();\r\n  this.changesetBoundary = 'changeset_' + BatchResult._getBoundary();\r\n}\r\n\r\n/**\r\n* Gets a boundary string.\r\n*\r\n* @return {string}   The boundary string.\r\n* @ignore\r\n*/\r\nBatchResult._getBoundary = function () {\r\n  return (new Md5Wrapper().createMd5Hash()).update('' + (new Date()).getTime()).digest('hex');\r\n};\r\n\r\n/**\r\n* Constructs the batch web request.\r\n*\r\n* @return {WebResource}   The batch WebResource.\r\n* @ignore\r\n*/\r\nBatchResult.prototype.constructWebResource = function () {\r\n  var webResource = WebResource.post('$batch')\r\n    .withRawResponse(true);\r\n\r\n  webResource.withHeader(HeaderConstants.CONTENT_TYPE, 'multipart/mixed; charset=\"utf-8\"; boundary=' + this.batchBoundary);\r\n  webResource.withHeader(HeaderConstants.DATA_SERVICE_VERSION, '3.0;');\r\n  webResource.withHeader(HeaderConstants.MAX_DATA_SERVICE_VERSION, '3.0;NetFx');\r\n\r\n  return webResource;\r\n};\r\n\r\n/**\r\n* Serializes the batch web body.\r\n*\r\n* @return {string}      The serialized batch content.\r\n* @ignore\r\n*/\r\nBatchResult.prototype.serialize = function () {\r\n  var body = '--' + this.batchBoundary + '\\n';\r\n  \r\n  if (this.operations.length === 1 && this.operations[0].type === TableConstants.Operations.RETRIEVE) {\r\n    body += HeaderConstants.CONTENT_TYPE + ': application/http\\n';\r\n    body += HeaderConstants.CONTENT_TRANSFER_ENCODING + ': binary\\n\\n';\r\n    body += this._serializeOperation(this.operations[0]);\r\n  } else {\r\n    body += HeaderConstants.CONTENT_TYPE + ': multipart/mixed;charset=\"utf-8\";boundary=' + this.changesetBoundary + '\\n\\n';\r\n\r\n    for (var i = 0; i < this.operations.length; i++) {\r\n      body += '--' + this.changesetBoundary + '\\n';\r\n      body += HeaderConstants.CONTENT_TYPE + ': application/http\\n';\r\n      body += HeaderConstants.CONTENT_TRANSFER_ENCODING + ': binary\\n\\n';\r\n      body += this._serializeOperation(this.operations[i], i) + '\\n';\r\n    }\r\n    body += '--' + this.changesetBoundary + '--\\n';\r\n  } \r\n  body += '--' + this.batchBoundary + '--';\r\n\r\n  return body;\r\n};\r\n\r\n/**\r\n* Serializes a request within the batch.\r\n*\r\n* @param {object}       The operation to serialize.  \r\n* @param {number}       The index of the operation in the operations arrray.\r\n* @return {string}      The serialized operation content.\r\n* @ignore\r\n*/\r\nBatchResult.prototype._serializeOperation = function (operation, count) {\r\n  operation.options.payloadFormat = operation.options.payloadFormat || this.tableService.defaultPayloadFormat;\r\n  var webResource = RequestHandler.constructEntityWebResource(operation.type, this.table, operation.entity, operation.options);\r\n\r\n  if (count) {\r\n    webResource.headers[HeaderConstants.CONTENT_ID] = count;\r\n  }\r\n\r\n  var contentType = webResource.headers[HeaderConstants.CONTENT_TYPE];\r\n  if (contentType) {\r\n    if (!azureutil.stringEndsWith(contentType, ';')) {\r\n      webResource.headers[HeaderConstants.CONTENT_TYPE] += ';';\r\n    }\r\n    webResource.headers[HeaderConstants.CONTENT_TYPE] += 'type=entry';\r\n  }\r\n\r\n  this.tableService._setRequestUrl(webResource);\r\n\r\n  var content = webResource.method + ' ' + webResource.uri + ' HTTP/1.1\\n';\r\n\r\n  Object.keys(webResource.headers).forEach(function (header) {\r\n    content += header + ': ' + webResource.headers[header] + '\\n';\r\n  });\r\n\r\n  content += '\\n';\r\n  content += webResource.body || '';\r\n\r\n  return content;\r\n};\r\n\r\n/**\r\n* Parses a batch response.\r\n*\r\n* @param {object} responseObject    The response object for the batch request.\r\n* @return {array} An array with the processed / parsed responses.\r\n*/\r\nBatchResult.prototype.parse = function (responseObject) {\r\n  var responses = null;\r\n  if (responseObject && responseObject.response && responseObject.response.body &&\r\n      typeof responseObject.response.body === 'string') {\r\n    responses = [];\r\n    var rawResponses = responseObject.response.body.split(TableConstants.CHANGESET_DELIMITER);\r\n\r\n    if(rawResponses.length === 1) {\r\n      rawResponses = responseObject.response.body.split(TableConstants.BATCH_DELIMITER);\r\n    }\r\n\r\n    var self = this;\r\n    rawResponses.forEach(function (rawResponse) {\r\n      // Find HTTP/1.1 CODE line\r\n      var httpLocation = rawResponse.indexOf('HTTP/1.1');\r\n      if (httpLocation !== -1) {\r\n        rawResponse = rawResponse.substring(httpLocation);\r\n\r\n        // valid response\r\n        var response = self._parseOperation(rawResponse);\r\n        responses.push(response);\r\n      }\r\n    });\r\n  }\r\n\r\n  return responses;\r\n};\r\n\r\n/**\r\n* Parses a partial response.\r\n*\r\n* @param {string}      rawResponse      The raw, unparsed, http response from the server for the batch response.\r\n* @return {object}      A response object.\r\n*/\r\nBatchResult.prototype._parseOperation = function (rawResponse) {\r\n  var responseObject = {\r\n    error: null,\r\n    response: { }\r\n  };\r\n\r\n  // Split into multiple lines and process them\r\n  var responseLines = rawResponse.split('\\r\\n');\r\n\r\n  if (responseLines.length > 0) {\r\n    // Retrieve response code\r\n    var headers = responseLines.shift().split(' ');\r\n    if (headers.length >= 2) {\r\n      responseObject.response.statusCode = parseInt(headers[1]);\r\n      responseObject.response.isSuccessful = WebResource.validResponse(responseObject.response.statusCode);\r\n    }\r\n\r\n    // Populate headers\r\n    responseObject.response.headers = { };\r\n    responseObject.response.body = '';\r\n\r\n    var isBody = false;\r\n    responseLines.forEach(function (line) {\r\n      if (line === '' && !isBody) {\r\n        isBody = true;\r\n      } else if (isBody) {\r\n        responseObject.response.body += line;\r\n      } else {\r\n        var headerSplit = line.indexOf(':');\r\n        if (headerSplit !== -1) {\r\n          responseObject.response.headers[line.substring(0, headerSplit).trim().toLowerCase()] = line.substring(headerSplit + 1).trim();\r\n        }\r\n      }\r\n    });\r\n\r\n    StorageServiceClient._parseResponse(responseObject.response, this.tableService.xml2jsSettings);\r\n    if (!responseObject.response.isSuccessful) {\r\n      responseObject.error = StorageServiceClient._normalizeError(responseObject.response.body, responseObject.response);\r\n    }\r\n\r\n    if (!responseObject.error) {\r\n      var index = responseObject.response.headers[HeaderConstants.CONTENT_ID] || 0;\r\n      var propertyResolver;\r\n      var entityResolver;\r\n      if (index && this.operations[index]) {\r\n        var options = this.operations[index].options;\r\n        propertyResolver = options.propertyResolver;\r\n        entityResolver = options.entityResolver;\r\n      } \r\n      responseObject.entity = entityResult.parseEntity(responseObject.response, propertyResolver, entityResolver);\r\n    }\r\n  }\r\n\r\n  return responseObject;\r\n};\r\n\r\nmodule.exports = BatchResult;","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar extend = require('extend');\r\n\r\nvar azureCommon = require('./../../common/common.core');\r\nvar SR = azureCommon.SR;\r\nvar validate = azureCommon.validate;\r\nvar Constants = azureCommon.Constants;\r\nvar TableConstants = Constants.TableConstants;\r\n\r\n/**\r\n* Creates a new TableBatch.\r\n*\r\n* @constructor\r\n*/\r\nfunction TableBatch() {\r\n  this.operations = [];\r\n  this.pk = null;\r\n  this.retrieve = false;\r\n}\r\n\r\n/**\r\n* Removes all of the operations from the batch.\r\n*/\r\nTableBatch.prototype.clear = function () {\r\n  this.operations = [];\r\n};\r\n\r\n/**\r\n* Returns a boolean value indicating weather there are operations in the batch.\r\n*\r\n* @return {Boolean} True if there are operations queued up; false otherwise.\r\n*/\r\nTableBatch.prototype.hasOperations = function () {\r\n  return this.operations.length > 0;\r\n};\r\n\r\n/**\r\n* Returns the number of operations in the batch.\r\n*\r\n* @return {number} The number of operations in the batch.\r\n*/\r\nTableBatch.prototype.size = function () {\r\n  return this.operations.length;\r\n};\r\n\r\n/**\r\n* Adds a retrieve operation to the batch. Note that this must be the only operation in the batch.\r\n*\r\n* @param {string}             partitionKey                                    The partition key.\r\n* @param {string}             rowKey                                          The row key.\r\n* @param {object}             [options]                                       The request options.\r\n* @param {string}             [options.payloadFormat]                         The payload format to use for the request.\r\n* @param {TableService~propertyResolver}  [options.propertyResolver]  The property resolver. Given the partition key, row key, property name, property value,\r\n*                                                                             and the property Edm type if given by the service, returns the Edm type of the property.\r\n* @param {Function(entity)} [options.entityResolver]                          The entity resolver. Given the single entity returned by the query, returns a modified object.\r\n*/\r\nTableBatch.prototype.retrieveEntity = function (partitionKey, rowKey, options) {\r\n  var entity = { PartitionKey: {_: partitionKey, $: 'Edm.String'},\r\n    RowKey: {_: rowKey, $: 'Edm.String'},\r\n  };\r\n  this.addOperation(TableConstants.Operations.RETRIEVE, entity, options);\r\n};\r\n\r\n/**\r\n* Adds an insert operation to the batch.\r\n*\r\n* @param {object}             entity                                          The entity.\r\n* @param {object}             [options]                                       The request options.\r\n* @param {string}             [options.echoContent]                           Whether or not to return the entity upon a successful insert. Inserts only, default to false.\r\n* @param {string}             [options.payloadFormat]                         The payload format to use for the request.\r\n* @param {TableService~propertyResolver}  [options.propertyResolver]  The property resolver. Only applied if echoContent is true. Given the partition key, row key, property name, \r\n*                                                                             property value, and the property Edm type if given by the service, returns the Edm type of the property.\r\n* @param {Function(entity)} [options.entityResolver]                          The entity resolver. Only applied if echoContent is true. Given the single entity returned by the insert, returns \r\n*                                                                             a modified object.\r\n*/\r\nTableBatch.prototype.insertEntity = function (entity, options) {\r\n  this.addOperation(TableConstants.Operations.INSERT, entity, options);\r\n};\r\n\r\n/**\r\n* Adds a delete operation to the batch.\r\n*\r\n* @param {object}             entity              The entity.\r\n*/\r\nTableBatch.prototype.deleteEntity = function (entity) {\r\n  this.addOperation(TableConstants.Operations.DELETE, entity);\r\n};\r\n\r\n/**\r\n* Adds a merge operation to the batch.\r\n*\r\n* @param {object}             entity              The entity.\r\n*/\r\nTableBatch.prototype.mergeEntity = function (entity) {\r\n  this.addOperation(TableConstants.Operations.MERGE, entity);\r\n};\r\n\r\n/**\r\n* Adds an replace operation to the batch.\r\n*\r\n* @param {object}             entity              The entity.\r\n*/\r\nTableBatch.prototype.replaceEntity = function (entity) {\r\n  this.addOperation(TableConstants.Operations.REPLACE, entity);\r\n};\r\n\r\n/**\r\n* Adds an insert or replace operation to the batch.\r\n*\r\n* @param {object}             entity              The entity.\r\n*/\r\nTableBatch.prototype.insertOrReplaceEntity = function (entity) {\r\n  this.addOperation(TableConstants.Operations.INSERT_OR_REPLACE, entity);\r\n};\r\n\r\n/**\r\n* Adds an insert or merge operation to the batch.\r\n*\r\n* @param {object}             entity              The entity.\r\n*/\r\nTableBatch.prototype.insertOrMergeEntity = function (entity) {\r\n  this.addOperation(TableConstants.Operations.INSERT_OR_MERGE, entity);\r\n};\r\n\r\n/**\r\n* Adds an operation to the batch after performing checks.\r\n*\r\n* @param {string}             operationType       The type of operation to perform. See Constants.TableConstants.Operations\r\n* @param {object}             entity              The entity.\r\n* @param {object}             [options]                                       The request options.\r\n*/\r\nTableBatch.prototype.addOperation = function (operationType, entity, options) {\r\n  validate.validateArgs('addOperation', function (v) {\r\n    v.object(entity, 'entity');\r\n    v.object(entity.PartitionKey, 'entity.PartitionKey');\r\n    v.object(entity.RowKey, 'entity.RowKey');\r\n    v.stringAllowEmpty(entity.PartitionKey._, 'entity.PartitionKey._');\r\n    v.stringAllowEmpty(entity.RowKey._, 'entity.RowKey._');\r\n  });\r\n\r\n  if(this.operations.length >= 100) {\r\n    throw new Error(SR.BATCH_TOO_LARGE);\r\n  }\r\n\r\n  if (operationType === TableConstants.Operations.RETRIEVE) {\r\n    if(this.hasOperations()) {\r\n      throw new Error(SR.BATCH_ONE_RETRIEVE);\r\n    } else {\r\n      this.retrieve = true;\r\n    }\r\n  } else if (this.retrieve) {\r\n    throw new Error(SR.BATCH_ONE_RETRIEVE);\r\n  }\r\n\r\n  if (!this.hasOperations()) {\r\n    this.pk = entity.PartitionKey._;\r\n  } else if (entity.PartitionKey._ !== this.pk) {\r\n    throw new Error(SR.BATCH_ONE_PARTITION_KEY);\r\n  }\r\n\r\n  var copiedOptions = extend(true, {}, options);\r\n  this.operations.push({type: operationType, entity: entity, options: copiedOptions});\r\n};\r\n\r\n/**\r\n* Gets an operation from the batch. Returns null if the index does not exist.\r\n*\r\n* @param {number}             index           The index in the operations array at which to remove an element.\r\n* @return {object}                            The removed operation.\r\n*/\r\nTableBatch.prototype.getOperation = function (index) {\r\n  return this.operations[index];\r\n};\r\n\r\n/**\r\n* Removes an operation from the batch. Returns null if the index does not exist.\r\n*\r\n* @param {number}             index           The index in the operations array at which to remove an element.\r\n* @return {object}                            The removed operation.\r\n*/\r\nTableBatch.prototype.removeOperation = function (index) {\r\n  var operation = this.operations.splice(index, 1)[0];\r\n\r\n  // if the array is empty, unlock the partition key\r\n  if (!this.hasOperations()) {\r\n    this.pk = null;\r\n    this.retrieve = false;\r\n  }\r\n\r\n  return operation;\r\n};\r\n\r\nmodule.exports = TableBatch;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar azureCommon = require('./../../common/common.node');\r\nvar BlobService = require('./blobservice.core');\r\nvar extend = require('extend');\r\nvar fs = require('fs');\r\nvar mime = require('browserify-mime');\r\n\r\nvar azureutil = azureCommon.util;\r\nvar Constants = azureCommon.Constants;\r\nvar FileReadStream = azureCommon.FileReadStream;\r\nvar SpeedSummary = azureCommon.SpeedSummary;\r\nvar validate = azureCommon.validate;\r\nvar BlobConstants = Constants.BlobConstants;\r\n\r\n/**\r\n* Downloads a blob into a file.\r\n* (Not available in the JavaScript Client Library for Browsers)\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {string}             localFileName                               The local path to the file to be downloaded.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {boolean}            [options.skipSizeCheck]                     Skip the size check to perform direct download.\r\n*                                                                         Set the option to true for small blobs.\r\n*                                                                         Parallel download and speed summary won't work with this option on.\r\n* @param {SpeedSummary}       [options.speedSummary]                      The download tracker objects.\r\n* @param {int}                [options.parallelOperationThreadCount]      The number of parallel operations that may be performed when uploading.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the blob in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the blob in the specified range.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading blobs.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `[result]{@link BlobResult}` will contain the blob information.\r\n*                                                                         `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n* \r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* blobService.getBlobToLocalFile('taskcontainer', 'task1', 'task1-download.txt', function(error, serverBlob) {\r\n*   if(!error) {\r\n*     // Blob available in serverBlob.blob variable\r\n*   }\r\n*/\r\nBlobService.prototype.getBlobToLocalFile = function (container, blob, localFileName, optionsOrCallback, callback) {\r\n  var options;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { options = o; callback = c; });\r\n\r\n  validate.validateArgs('getBlobToLocalFile', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.string(localFileName, 'localFileName');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n  \r\n  return this._getBlobToLocalFile(container, blob, localFileName, options, callback);\r\n};\r\n\r\n/**\r\n* Uploads a page blob from file. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n* (Not available in the JavaScript Client Library for Browsers)\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                           The container name.\r\n* @param {string}             blob                                                The blob name.\r\n* @param {string}             localFileName                                       The local path to the file to be uploaded.\r\n* @param {object}             [options]                                           The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                              The upload tracker objects.\r\n* @param {int}                [options.parallelOperationThreadCount]              The number of parallel operations that may be performed when uploading.\r\n* @param {string}             [options.leaseId]                                   The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]                   An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                                  The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                       Specifies whether the blob's ContentMD5 header should be set on uploads. \r\n*                                                                                 The default value is false for page blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                       Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.blobTier]                                  For page blobs on premium accounts only. Set the tier of the target blob. Refer to BlobUtilities.BlobTier.PremiumPageBlobTier.\r\n* @param {object}             [options.contentSettings]                           The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]               The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]           The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]           The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]              The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]        The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]                The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                          The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]                  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]                  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                                            `error` will contain information\r\n*                                                                                 if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                                 the blob information.\r\n*                                                                                 `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype.createPageBlobFromLocalFile = function (container, blob, localFileName, optionsOrCallback, callback) {\r\n  return this._createBlobFromLocalFile(container, blob, BlobConstants.BlobTypes.PAGE, localFileName, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Creates a new block blob. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n* (Not available in the JavaScript Client Library for Browsers)\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {string}             localFileName                                 The local path to the file to be uploaded.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {int}                [options.blockSize]                           The size of each block. Maximum is 100MB.\r\n* @param {string}             [options.blockIdPrefix]                       The prefix to be used to generate the block id.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype.createBlockBlobFromLocalFile = function (container, blob, localFileName, optionsOrCallback, callback) {\r\n  return this._createBlobFromLocalFile(container, blob, BlobConstants.BlobTypes.BLOCK, localFileName, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Creates a new append blob from a local file. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n* This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks.\r\n* If you are guaranteed to have a single writer scenario, please look at options.absorbConditionalErrorsOnRetry and see if setting this flag to true is acceptable for you.\r\n* If you want to append data to an already existing blob, please look at appendFromLocalFile.\r\n* (Not available in the JavaScript Client Library for Browsers)\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {string}             localFileName                                 The local path to the file to be uploaded.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry.\r\n* @param {string}             [options.leaseId]                             The lease identifier. \r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 ahash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype.createAppendBlobFromLocalFile = function (container, blob, localFileName, optionsOrCallback, callback) {\r\n  return this._createBlobFromLocalFile(container, blob, BlobConstants.BlobTypes.APPEND, localFileName, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Appends to an append blob from a local file. Assumes the blob already exists on the service.\r\n* This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks.\r\n* If you are guaranteed to have a single writer scenario, please look at options.absorbConditionalErrorsOnRetry and see if setting this flag to true is acceptable for you.\r\n* (Not available in the JavaScript Client Library for Browsers)\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {string}             localFileName                                 The local path to the file to be uploaded.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype.appendFromLocalFile = function (container, blob, localFileName, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('appendFromLocalFile', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.string(localFileName, 'localFileName');\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  options.speedSummary = options.speedSummary || new SpeedSummary(blob);\r\n\r\n  var self = this;\r\n  fs.stat(localFileName, function (error, stat) {\r\n    if (error) {\r\n      callback(error);\r\n    } else {\r\n      var stream = new FileReadStream(localFileName, { calcContentMd5: options.storeBlobContentMD5 });\r\n      var streamCallback = function (appendError, blob, response) {\r\n        if (azureutil.objectIsFunction(stream.destroy)) {\r\n          stream.destroy();\r\n        }\r\n        callback(appendError, blob, response);\r\n      };\r\n      self._uploadBlobFromStream(false, container, blob, BlobConstants.BlobTypes.APPEND, stream, stat.size, options, streamCallback);\r\n    }\r\n  });\r\n  \r\n  return options.speedSummary;\r\n};\r\n\r\n// Private methods\r\n\r\n/**\r\n* Creates a new blob (Block/Page/Append). If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n*\r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {BlobType}           blobType                                      The blob type.\r\n* @param {string}             localFileName                                 The local path to the file to be uploaded.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry. (For append blob only)\r\n* @param {int}                [options.blockSize]                           The size of each block. Maximum is 100MB.\r\n* @param {string}             [options.blockIdPrefix]                       The prefix to be used to generate the block id. (For block blob only)\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {string}             [options.blobTier]                            For page blobs on premium accounts only. Set the tier of the target blob. Refer to BlobUtilities.BlobTier.PremiumPageBlobTier.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The MD5 hash of the blob content.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      The callback function.\r\n*\r\n* @return {SpeedSummary}\r\n*\r\n*/\r\nBlobService.prototype._createBlobFromLocalFile = function (container, blob, blobType, localFileName, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('_createBlobFromLocalFile', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.blobTypeIsValid(blobType);\r\n    v.string(localFileName, 'localFileName');\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  options.speedSummary = options.speedSummary || new SpeedSummary(blob);\r\n\r\n  var self = this;\r\n  var size = 0;\r\n  \r\n  var creationCallback = function (createError, createBlob, createResponse) {\r\n    if (createError) {\r\n      callback(createError, createBlob, createResponse);\r\n    } else {\r\n      // Automatically detect the mime type\r\n      if(azureutil.tryGetValueChain(options, ['contentSettings','contentType'], undefined) === undefined) {\r\n        azureutil.setObjectInnerPropertyValue(options, ['contentSettings','contentType'], mime.lookup(localFileName));\r\n      }\r\n\r\n      var stream = new FileReadStream(localFileName, { calcContentMd5: options.storeBlobContentMD5 });\r\n      var streamCallback = function (createError, createBlob, createResponse) {\r\n        if (azureutil.objectIsFunction(stream.destroy)) {\r\n          stream.destroy();\r\n        }\r\n        callback(createError, createBlob, createResponse);\r\n      };\r\n      self._uploadBlobFromStream(true, container, blob, blobType, stream, size, options, streamCallback);\r\n    }\r\n  };\r\n\r\n  // Check the file size to determine the upload method: single request or chunks\r\n  fs.stat(localFileName, function (error, stat) {\r\n    if (error) {\r\n      callback(error);\r\n    } else {\r\n      size = stat.size;\r\n      self._createBlob(container, blob, blobType, size, options, creationCallback);\r\n    }\r\n  });\r\n  \r\n  return options.speedSummary;\r\n};\r\n\r\n/**\r\n* Downloads a blob into a file.\r\n* @ignore\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {string}             localFileName                               The local path to the file to be downloaded.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {boolean}            [options.skipSizeCheck]                     Skip the size check to perform direct download.\r\n*                                                                         Set the option to true for small blobs.\r\n*                                                                         Parallel download and speed summary won't work with this option on.\r\n* @param {SpeedSummary}       [options.speedSummary]                      The download tracker objects.\r\n* @param {int}                [options.parallelOperationThreadCount]      The number of parallel operations that may be performed when uploading.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the blob in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the blob in the specified range.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading blobs.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `result` will contain the blob information.\r\n*                                                                         `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n* \r\n*/\r\nBlobService.prototype._getBlobToLocalFile = function (container, blob, localFileName, optionsOrCallback, callback) {\r\n  var options;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { options = o; callback = c; });\r\n  options.speedSummary = options.speedSummary || new SpeedSummary(blob);\r\n  \r\n  var writeStream = fs.createWriteStream(localFileName, { 'highWaterMark': BlobConstants.MAX_QUEUED_WRITE_DISK_BUFFER_SIZE });\r\n  writeStream.on('error', function (error) {\r\n    callback(error);\r\n  });\r\n  \r\n  this.getBlobToStream(container, blob, writeStream, options, function (error, responseBlob, response) {\r\n    if (error) {\r\n      writeStream.end(function () {\r\n        // If the download failed from the beginning, remove the file.\r\n        if (fs.existsSync(localFileName) && writeStream.bytesWritten === 0) {\r\n          fs.unlinkSync(localFileName);\r\n        }\r\n        callback(error, responseBlob, response);\r\n      });\r\n    } else {\r\n      callback(error, responseBlob, response);\r\n    }\r\n  });\r\n  \r\n  return options.speedSummary;\r\n};\r\n\r\nmodule.exports = BlobService;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar stream = require('stream');\r\nvar util = require('util');\r\nvar fs = require('fs');\r\nvar validator = require('validator');\r\n\r\nvar Md5Wrapper = require('../md5-wrapper');\r\nvar Constants = require('../util/constants');\r\nvar bufferSize = Constants.BlobConstants.DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES;\r\n\r\nvar EventEmitter = require('events').EventEmitter;\r\n\r\n/**\r\n*  File read stream\r\n*  1. Calculate md5\r\n*  2. Track reading offset\r\n*  3. Work with customize memory allocator\r\n*  4. Buffer data from stream.\r\n*  @param {object} options stream.Readable options\r\n*/\r\nfunction FileReadStream(path, options) {\r\n  stream.Stream.call(this);\r\n  this.readable = true;\r\n\r\n  if(!options) {\r\n    options = {};\r\n  }\r\n\r\n  this._destroyed = false;\r\n  this._streamEnded = false;\r\n  this._fd = null;\r\n  this._fileName = undefined;\r\n  this._highWaterMark = options.highWaterMark || bufferSize;\r\n  this._offset = 0;\r\n  this._paused = undefined;\r\n  this._allocator = options.allocator;\r\n  this._fileName = path;\r\n\r\n  this._md5hash = null;\r\n  this._md5sum = undefined;\r\n\r\n  if (options.calcContentMd5) {\r\n    this._md5hash = new Md5Wrapper().createMd5Hash();\r\n  }\r\n\r\n  this._open();\r\n}\r\n\r\nutil.inherits(FileReadStream, stream.Stream);\r\n\r\n/**\r\n* Open file\r\n*/\r\nFileReadStream.prototype._open = function () {\r\n  var flags = 'r';\r\n  var self = this;\r\n  fs.open(this._fileName, flags, function(error, fd) {\r\n    if (error) {\r\n      self.emit('error', error);\r\n    } else {\r\n      self._fd = fd;\r\n      self.emit('open', fd);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Add event listener\r\n*/\r\nFileReadStream.prototype.on = function(event, listener) {\r\n  if (event === 'data' && this._paused === undefined) {\r\n    this._paused = false;\r\n    this._emitData();\r\n  }\r\n\r\n  return EventEmitter.prototype.on.call(this, event, listener);\r\n};\r\n\r\n/**\r\n* Set memory allocator\r\n*/\r\nFileReadStream.prototype.setMemoryAllocator = function(allocator) {\r\n  this._allocator = allocator;\r\n};\r\n\r\n/**\r\n* Get buffer\r\n*/\r\nFileReadStream.prototype._getBuffer = function(size) {\r\n  if(this._allocator && this._allocator.getBuffer) {\r\n    return this._allocator.getBuffer(size);\r\n  } else {\r\n    var buffer = new Buffer(size);\r\n    return buffer;\r\n  }\r\n};\r\n\r\n/**\r\n* Release buffer\r\n*/\r\nFileReadStream.prototype._releaseBuffer = function(buffer) {\r\n  if(this._allocator && this._allocator.releaseBuffer) {\r\n    this._allocator.releaseBuffer(buffer);\r\n  }\r\n};\r\n\r\n/**\r\n* Emit the data from file\r\n*/\r\nFileReadStream.prototype._emitData = function() {\r\n  var self = this;\r\n  if(!this._fd) {\r\n    this.once('open', function() {\r\n      self._emitData();\r\n    });\r\n    return;\r\n  }\r\n\r\n  if (this._paused || this._streamEnded) {\r\n    return;\r\n  }\r\n  var buffer = this._getBuffer(this._highWaterMark);\r\n  fs.read(this._fd, buffer, 0, this._highWaterMark, this._offset, function(error, bytesRead, readBuffer) {\r\n    if (error) {\r\n      self.emit('error', error);\r\n      return;\r\n    }\r\n\r\n    if(bytesRead === 0) {\r\n      if(!self._streamEnded) {\r\n        self._streamEnded = true;\r\n        self.emit('end');\r\n      }\r\n      return;\r\n    }\r\n\r\n    var range = {\r\n      start : self._offset,\r\n      end : self._offset + bytesRead - 1,\r\n      size : bytesRead\r\n    };\r\n\r\n    var data;\r\n    if(bytesRead == self._highWaterMark) {\r\n      data = readBuffer;\r\n    } else {\r\n      data = readBuffer.slice(0, bytesRead);\r\n      //Release the current buffer since we created a new one\r\n      self._releaseBuffer(readBuffer);\r\n    }\r\n\r\n    if(self._md5hash) {\r\n      self._md5hash.update(data);\r\n    }\r\n\r\n    self.emit('data', data, range);\r\n\r\n    // cleanup\r\n    self._offset += bytesRead;\r\n    buffer = readBuffer = data = null;\r\n    self._emitData();\r\n  });\r\n};\r\n\r\n/**\r\n* Get file content md5 when read completely.\r\n*/\r\nFileReadStream.prototype.getContentMd5 = function(encoding) {\r\n  if (!encoding) encoding = 'base64';\r\n  if(!this._md5hash) {\r\n    throw new Error('Can\\'t get content md5, please set the calcContentMd5 option for FileReadStream.');\r\n  } else {\r\n    if (this._streamEnded) {\r\n      if (!this._md5sum) {\r\n        this._md5sum = this._md5hash.digest(encoding);\r\n      }\r\n      return this._md5sum;\r\n    } else {\r\n      throw new Error('FileReadStream has not ended.');\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n* Pause chunk stream\r\n*/\r\nFileReadStream.prototype.pause = function() {\r\n  this._paused = true;\r\n};\r\n\r\n/**\r\n* Resume read stream\r\n*/\r\nFileReadStream.prototype.resume = function() {\r\n  var previousState = this._paused;\r\n  if (this._paused) {\r\n    this._paused = false;\r\n\r\n    if(previousState === true) {\r\n      //Only start to emit data when it's in pause state\r\n      this._emitData();\r\n    }\r\n  }\r\n};\r\n\r\nFileReadStream.prototype.finish = function () {\r\n  this.destroy();\r\n};\r\n\r\nFileReadStream.prototype.destroy = function () {\r\n  if (this._destroyed) {\r\n    return;\r\n  }\r\n\r\n  var self = this;\r\n  this.readable = false;\r\n\r\n  function close(fd) {\r\n    fs.close(fd || self._fd, function(err) {\r\n      if (err) {\r\n        self.emit('error', err);\r\n      }\r\n      else {\r\n        self.emit('close');\r\n      }\r\n    });\r\n    self._fd = null;\r\n    self._destroyed = true;\r\n  }\r\n\r\n  // when the stream is closed immediately after creating it\r\n  if (!validator.isInt('' + this._fd)) {\r\n    this.once('open', close);\r\n    return;\r\n  }\r\n\r\n  close();\r\n};\r\n\r\nFileReadStream.prototype.stop = function () {\r\n  this.destroy();\r\n  this._streamEnded = true;\r\n  this.emit('end');\r\n};\r\n\r\nmodule.exports = FileReadStream;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar qs = require('querystring');\r\nvar url = require('url');\r\nvar util = require('util');\r\nvar _ = require('underscore');\r\nvar extend = require('extend');\r\n\r\nvar azureCommon = require('./../../common/common.core');\r\nvar BlockRangeStream = require('./internal/blockrangestream');\r\nvar Md5Wrapper = require('./../../common/md5-wrapper');\r\nvar PageRangeStream = require('./internal/pagerangestream');\r\nvar RangeStream = require('./../../common/streams/rangestream');\r\nvar azureutil = azureCommon.util;\r\nvar SR = azureCommon.SR;\r\nvar validate = azureCommon.validate;\r\nvar StorageServiceClient = azureCommon.StorageServiceClient;\r\nvar WebResource = azureCommon.WebResource;\r\n\r\n// Constants\r\nvar Constants = azureCommon.Constants;\r\nvar BlobConstants = Constants.BlobConstants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar QueryStringConstants = Constants.QueryStringConstants;\r\nvar RequestLocationMode = Constants.RequestLocationMode;\r\n\r\n// Streams\r\nvar BatchOperation = azureCommon.BatchOperation;\r\nvar SpeedSummary = azureCommon.SpeedSummary;\r\nvar ChunkAllocator = azureCommon.ChunkAllocator;\r\nvar ChunkStream = azureCommon.ChunkStream;\r\nvar ChunkStreamWithStream = azureCommon.ChunkStreamWithStream;\r\n\r\n// Models requires\r\nvar AclResult = azureCommon.AclResult;\r\nvar ServiceStatsParser = azureCommon.ServiceStatsParser;\r\nvar AccountPropertiesResult = require('../../common/models/accountpropertiesresult');\r\nvar BlockListResult = require('./models/blocklistresult');\r\nvar BlobResult = require('./models/blobresult');\r\nvar ContainerResult = require('./models/containerresult');\r\nvar LeaseResult = require('./models/leaseresult');\r\n\r\nvar BlobUtilities = require('./blobutilities');\r\n\r\n// Errors requires\r\nvar errors = require('../../common/errors/errors');\r\nvar ArgumentError = errors.ArgumentError;\r\nvar ArgumentNullError = errors.ArgumentNullError;\r\nvar StorageError = errors.StorageError;\r\n\r\n/**\r\n* Creates a new BlobService object.\r\n* If no connection string or storageaccount and storageaccesskey are provided,\r\n* the AZURE_STORAGE_CONNECTION_STRING or AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY environment variables will be used.\r\n* @class\r\n* The BlobService class is used to perform operations on the Microsoft Azure Blob Service.\r\n* The Blob Service provides storage for binary large objects, and provides\r\n* functions for working with data stored in blobs as either streams or pages of data.\r\n* \r\n* For more information on the Blob Service, as well as task focused information on using it in a Node.js application, see\r\n* [How to Use the Blob Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-blob-storage/).\r\n* The following defaults can be set on the blob service.\r\n* singleBlobPutThresholdInBytes                       The default maximum size, in bytes, of a blob before it must be separated into blocks.\r\n* defaultEnableReuseSocket                            The default boolean value to enable socket reuse when uploading local files or streams.\r\n*                                                     If the Node.js version is lower than 0.10.x, socket reuse will always be turned off.\r\n* defaultTimeoutIntervalInMs                          The default timeout interval, in milliseconds, to use for request made via the Blob service.\r\n* defaultClientRequestTimeoutInMs                     The default timeout of client requests, in milliseconds, to use for the request made via the Blob service.\r\n* defaultMaximumExecutionTimeInMs                     The default maximum execution time across all potential retries, for requests made via the Blob service.\r\n* defaultLocationMode                                 The default location mode for requests made via the Blob service.\r\n* parallelOperationThreadCount                        The number of parallel operations that may be performed when uploading a blob that is greater than \r\n*                                                     the value specified by the singleBlobPutThresholdInBytes property in size.\r\n* useNagleAlgorithm                                   Determines whether the Nagle algorithm is used for requests made via the Blob service; true to use the  \r\n*                                                     Nagle algorithm; otherwise, false. The default value is false.\r\n* enableGlobalHttpAgent                               Determines whether global HTTP(s) agent is enabled; true to use Global HTTP(s) agent; otherwise, false to use\r\n*                                                     http(s).Agent({keepAlive:true}).\r\n* @constructor\r\n* @extends {StorageServiceClient}\r\n*\r\n* @param {string} [storageAccountOrConnectionString]  The storage account or the connection string.\r\n* @param {string} [storageAccessKey]                  The storage access key.\r\n* @param {string|object} [host]                       The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @param {string} [sas]                               The Shared Access Signature string.\r\n* @param {string} [endpointSuffix]                    The endpoint suffix.\r\n* @param {TokenCredential} [token]                    The {@link TokenCredential} object.\r\n*/\r\nfunction BlobService(storageAccountOrConnectionString, storageAccessKey, host, sas, endpointSuffix, token) {\r\n  var storageServiceSettings = StorageServiceClient.getStorageSettings(storageAccountOrConnectionString, storageAccessKey, host, sas, endpointSuffix, token);\r\n\r\n  BlobService['super_'].call(this,\r\n    storageServiceSettings._name,\r\n    storageServiceSettings._key,\r\n    storageServiceSettings._blobEndpoint,\r\n    storageServiceSettings._usePathStyleUri,\r\n    storageServiceSettings._sasToken,\r\n    token);\r\n  \r\n  this.defaultEnableReuseSocket = Constants.DEFAULT_ENABLE_REUSE_SOCKET;\r\n  this.singleBlobPutThresholdInBytes = BlobConstants.DEFAULT_SINGLE_BLOB_PUT_THRESHOLD_IN_BYTES;\r\n  this.parallelOperationThreadCount = Constants.DEFAULT_PARALLEL_OPERATION_THREAD_COUNT;\r\n}\r\n\r\nutil.inherits(BlobService, StorageServiceClient);\r\n\r\n// Non-class methods\r\n\r\n/**\r\n* Create resource name\r\n* @ignore\r\n*\r\n* @param {string} containerName Container name\r\n* @param {string} blobName      Blob name\r\n* @return {string} The encoded resource name.\r\n*/\r\nfunction createResourceName(containerName, blobName, forSAS) {\r\n  // Resource name\r\n  if (blobName && !forSAS) {\r\n    blobName = encodeURIComponent(blobName);\r\n    blobName = blobName.replace(/%2F/g, '/');\r\n    blobName = blobName.replace(/%5C/g, '/');\r\n    blobName = blobName.replace(/\\+/g, '%20');\r\n  }\r\n\r\n  // return URI encoded resource name\r\n  if (blobName) {\r\n    return containerName + '/' + blobName;\r\n  }\r\n  else {\r\n    return containerName;\r\n  }\r\n}\r\n\r\n// Blob service methods\r\n\r\n/**\r\n* Gets the service stats for a storage account’s Blob service.\r\n*\r\n* @this {BlobService}\r\n* @param {object}       [options]                               The request options.\r\n* @param {LocationMode} [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}          [options.timeoutIntervalInMs]           The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}          [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}          [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}       [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}         [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                               The default value is false.\r\n* @param {errorOrResult}  callback                              `error` will contain information if an error occurs; otherwise, `[result]{@link ServiceStats}` will contain the stats and \r\n*                                                               `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.getServiceStats = function (optionsOrCallback, callback) {\r\n  var options;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { options = o; callback = c; });\r\n\r\n  validate.validateArgs('getServiceStats', function (v) {\r\n    v.callback(callback);\r\n  });\r\n\r\n  var webResource = WebResource.get()\r\n    .withQueryOption(QueryStringConstants.COMP, 'stats')\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'service');\r\n\r\n  options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.serviceStatsResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.serviceStatsResult = ServiceStatsParser.parse(responseObject.response.body.StorageServiceStats);\r\n    }\r\n\r\n    // function to be called after all filters\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.serviceStatsResult, returnObject.response);\r\n    };\r\n\r\n    // call the first filter\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Gets the properties of a storage account’s Blob service, including Azure Storage Analytics.\r\n*\r\n* @this {BlobService}\r\n* @param {object}       [options]                               The request options.\r\n* @param {LocationMode} [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}          [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}          [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}          [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}       [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}         [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                               The default value is false.\r\n* @param {errorOrResult}  callback                              `error` will contain information if an error occurs; otherwise, `[result]{@link BlobServiceProperties}` will contain the properties \r\n*                                                               and `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.getServiceProperties = function (optionsOrCallback, callback) {\r\n  return this.getAccountServiceProperties(optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Gets the properties of a storage account.\r\n*\r\n* @this {BlobService}\r\n* @param {string}       [container]                             Optional. Name of an existing container. Required when using a SAS token to a specific container or blob.\r\n* @param {string}       [blob]                                  Optional. Name of an existing blob. Required when using a SAS token to a specific blob.\r\n* @param {object}       [options]                               The request options.\r\n* @param {LocationMode} [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}          [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}          [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}          [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}       [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}         [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                               The default value is false.\r\n* @param {errorOrResult}  callback                              `error` will contain information if an error occurs; otherwise, `[result]{@link ServiceProperties}` will contain the properties \r\n*                                                               and `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.getAccountProperties = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('getAccountProperties', function (v) {\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  \r\n  var webResource = WebResource.head(createResourceName(container, blob))\r\n    .withQueryOption(QueryStringConstants.COMP, 'properties')\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'account');\r\n  \r\n  options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.accountPropertiesResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.accountPropertiesResult = AccountPropertiesResult.parse(responseObject.response.headers);\r\n    }\r\n    \r\n    // function to be called after all filters\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.accountPropertiesResult, returnObject.response);\r\n    };\r\n    \r\n    // call the first filter\r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Sets the properties of a storage account's Blob service, including Azure Storage Analytics.\r\n* You can also use this operation to set the default request version for all incoming requests that do not have a version specified.\r\n* When you set blob service properties (such as enabling soft delete), it may take up to 30 seconds to take effect. \r\n*\r\n* @this {BlobService}\r\n* @param {object}             serviceProperties                        A `[BlobServiceProperties]{@link BlobServiceProperties}` object.\r\n* @param {object}             [options]                                The request options.\r\n* @param {LocationMode}       [options.locationMode]                   Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                      Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]            The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]       The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]       The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                      The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                      execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]              Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                      The default value is false.\r\n* @param {errorOrResponse}    callback                                 `error` will contain information\r\n*                                                                      if an error occurs; otherwise, `response`\r\n*                                                                      will contain information related to this operation.\r\n*/\r\nBlobService.prototype.setServiceProperties = function (serviceProperties, optionsOrCallback, callback) {\r\n  return this.setAccountServiceProperties(serviceProperties, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Sets the tier of a blockblob under a blob storage account, or the tier of a pageblob under a premium storage account.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                The container name.\r\n* @param {string}             blob                                     The blob name.\r\n* @param {string}             blobTier                                 Please see BlobUtilities.BlobTier.StandardBlobTier or BlobUtilities.BlobTier.PremiumPageBlobTier for possible values.\r\n* @param {LocationMode}       [options.locationMode]                   Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                      Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]            The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]       The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]       The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                      The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                      execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]              Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                      The default value is false.\r\n* @param {errorOrResponse}    callback                                 `error` will contain information\r\n*                                                                      if an error occurs; otherwise, `response`\r\n*                                                                      will contain information related to this operation.\r\n*/\r\nBlobService.prototype.setBlobTier = function (container, blob, blobTier, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('setBlobTier', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.string(blobTier, 'blobTier');\r\n    v.containerNameIsValid(container);\r\n    v.blobNameIsValid(container, blob);\r\n    v.blobTierNameIsValid(blobTier);\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  \r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'tier')\r\n    .withHeader(HeaderConstants.ACCESS_TIER, blobTier);\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n    \r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of container items under the specified account.\r\n*\r\n* @this {BlobService}\r\n* @param {object}             currentToken                                A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.maxResults]                        Specifies the maximum number of containers to return per call to Azure storage.\r\n* @param {string}             [options.include]                           Include this parameter to specify that the container's metadata be returned as part of the response body. (allowed values: '', 'metadata')\r\n*                                                                         **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                         `entries`  gives a list of `[containers]{@link ContainerResult}` and the `continuationToken` is used for the next listing operation.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.listContainersSegmented = function (currentToken, optionsOrCallback, callback) {\r\n  this.listContainersSegmentedWithPrefix(null /* prefix */, currentToken, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of container items whose names begin with the specified prefix under the specified account.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             prefix                                      The prefix of the container name.\r\n* @param {object}             currentToken                                A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.maxResults]                        Specifies the maximum number of containers to return per call to Azure storage.\r\n* @param {string}             [options.include]                           Include this parameter to specify that the container's metadata be returned as part of the response body. (allowed values: '', 'metadata')\r\n*                                                                         **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                         `entries`  gives a list of `[containers]{@link ContainerResult}` and the `continuationToken` is used for the next listing operation.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.listContainersSegmentedWithPrefix = function (prefix, currentToken, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('listContainers', function (v) {\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get()\r\n    .withQueryOption(QueryStringConstants.COMP, 'list')\r\n    .withQueryOption(QueryStringConstants.MAX_RESULTS, options.maxResults)\r\n    .withQueryOption(QueryStringConstants.INCLUDE, options.include);\r\n\r\n  if (!azureutil.objectIsNull(currentToken)) {\r\n    webResource.withQueryOption(QueryStringConstants.MARKER, currentToken.nextMarker);\r\n  }\r\n\r\n  webResource.withQueryOption(QueryStringConstants.PREFIX, prefix);\r\n\r\n  options.requestLocationMode = azureutil.getNextListingLocationMode(currentToken);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.listContainersResult = null;\r\n\r\n    if (!responseObject.error) {\r\n      responseObject.listContainersResult = {\r\n        entries: null,\r\n        continuationToken: null\r\n      };\r\n      responseObject.listContainersResult.entries = [];\r\n\r\n      var containers = [];\r\n\r\n      if (responseObject.response.body.EnumerationResults.Containers && responseObject.response.body.EnumerationResults.Containers.Container) {\r\n        containers = responseObject.response.body.EnumerationResults.Containers.Container;\r\n        if (!_.isArray(containers)) {\r\n          containers = [containers];\r\n        }\r\n      }\r\n\r\n      containers.forEach(function (currentContainer) {\r\n        var containerResult = ContainerResult.parse(currentContainer);\r\n        responseObject.listContainersResult.entries.push(containerResult);\r\n      });\r\n\r\n      if (responseObject.response.body.EnumerationResults.NextMarker) {\r\n        responseObject.listContainersResult.continuationToken = {\r\n          nextMarker: null,\r\n          targetLocation: null\r\n        };\r\n\r\n        responseObject.listContainersResult.continuationToken.nextMarker = responseObject.response.body.EnumerationResults.NextMarker;\r\n        responseObject.listContainersResult.continuationToken.targetLocation = responseObject.targetLocation;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.listContainersResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n// Container methods\r\n\r\n/**\r\n* Checks whether or not a container exists on the service.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                               The container name.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}      callback                                `error` will contain information\r\n*                                                                     if an error occurs; otherwise `[result]{@link ContainerResult}` will contain\r\n*                                                                     the container information including `exists` boolean member. \r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.doesContainerExist = function (container, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('doesContainerExist', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  this._doesContainerExist(container, false, options, callback);\r\n};\r\n\r\n/**\r\n* Creates a new container under the specified account.\r\n* If a container with the same name already exists, the operation fails.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {object}             [options.metadata]                  The metadata key/value pairs.\r\n* @param {string}             [options.publicAccessLevel]         Specifies whether data in the container may be accessed publicly and the level of access.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `[result]{@link ContainerResult}` will contain\r\n*                                                                 the container information.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.createContainer = function (container, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createContainer', function (v) {\r\n    v.string(container, 'container');\r\n    v.test(function () { return container !== '$logs'; },\r\n      'Container name format is incorrect');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(container)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'container');\r\n\r\n  webResource.addOptionalMetadataHeaders(options.metadata);\r\n  webResource.withHeader(HeaderConstants.BLOB_PUBLIC_ACCESS, options.publicAccessLevel);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.containerResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.containerResult = new ContainerResult(container);\r\n      responseObject.containerResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n\r\n      if (options.metadata) {\r\n        responseObject.containerResult.metadata = options.metadata;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.containerResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Creates a new container under the specified account if the container does not exists.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                 The container name.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {object}             [options.metadata]                        The metadata key/value pairs.\r\n* @param {string}             [options.publicAccessLevel]               Specifies whether data in the container may be accessed publicly and the level of access.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResult}      callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise `[result]{@link ContainerResult}` will contain\r\n*                                                                       the container information including `created` boolean member. \r\n*                                                                       `response` will contain information related to this operation.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* blobService.createContainerIfNotExists('taskcontainer', {publicAccessLevel : 'blob'}, function(error) {\r\n*   if(!error) {\r\n*     // Container created or exists, and is public\r\n*   }\r\n* }); \r\n*/\r\nBlobService.prototype.createContainerIfNotExists = function (container, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createContainerIfNotExists', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var self = this;\r\n  self._doesContainerExist(container, true, options, function (error, result, response) {\r\n    var exists = result.exists;\r\n    result.created = false;\r\n    delete result.exists;\r\n\r\n    if (error) {\r\n      callback(error, result, response);\r\n    } else if (exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, result, response);\r\n    } else {\r\n      self.createContainer(container, options, function (createError, containerResult, createResponse) {\r\n        if (!createError) {\r\n          containerResult.created = true;\r\n        }\r\n        else if (createError && createError.statusCode === Constants.HttpConstants.HttpResponseCodes.Conflict && createError.code === Constants.BlobErrorCodeStrings.CONTAINER_ALREADY_EXISTS) {\r\n          // If it was created before, there was no actual error.\r\n          createError = null;\r\n          createResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(createError, containerResult, createResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Retrieves a container and its properties from a specified account.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {string}             [options.leaseId]                   The container lease identifier.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `[result]{@link ContainerResult}` will contain\r\n*                                                                 information for the container.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.getContainerProperties = function (container, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getContainerProperties', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.head(container)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'container')\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.containerResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.containerResult = new ContainerResult(container);\r\n      responseObject.containerResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.containerResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.containerResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Returns all user-defined metadata for the container.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                 The container name.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {string}             [options.leaseId]                         The container lease identifier.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResult}      callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise `[result]{@link ContainerResult}` will contain\r\n*                                                                       information for the container.\r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.getContainerMetadata = function (container, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getContainerMetadata', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.head(container)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'container')\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata')\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.containerResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.containerResult = new ContainerResult(container);\r\n      responseObject.containerResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.containerResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.containerResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Sets the container's metadata.\r\n*\r\n* Calling the Set Container Metadata operation overwrites all existing metadata that is associated with the container.\r\n* It's not possible to modify an individual name/value pair.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {object}             metadata                            The metadata key/value pairs.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.leaseId]                   The container lease identifier.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {AccessConditions}   [options.accessConditions]          The access conditions.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResponse}    callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise \r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.setContainerMetadata = function (container, metadata, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setContainerMetadata', function (v) {\r\n    v.string(container, 'container');\r\n    v.object(metadata, 'metadata');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(container)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'container')\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata')\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  webResource.addOptionalMetadataHeaders(metadata);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.containerResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.containerResult = new ContainerResult(container);\r\n      responseObject.containerResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.containerResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Gets the container's ACL.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.leaseId]                   The container lease identifier.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `[result]{@link ContainerAclResult}` will contain\r\n*                                                                 information for the container.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.getContainerAcl = function (container, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getContainerAcl', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get(container)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'container')\r\n    .withQueryOption(QueryStringConstants.COMP, 'acl')\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.containerResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.containerResult = new ContainerResult(container);\r\n      responseObject.containerResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      responseObject.containerResult.signedIdentifiers = AclResult.parse(responseObject.response.body);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.containerResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Updates the container's ACL.\r\n*\r\n* @this {BlobService}\r\n* @param {string}                         container                           The container name.\r\n* @param {Object.<string, AccessPolicy>}  signedIdentifiers                   The container ACL settings. See `[AccessPolicy]{@link AccessPolicy}` for detailed information.\r\n* @param {object}                         [options]                           The request options.\r\n* @param {AccessConditions}               [options.accessConditions]          The access conditions.\r\n* @param {string}                         [options.publicAccessLevel]         Specifies whether data in the container may be accessed publicly and the level of access.\r\n* @param {string}                         [options.leaseId]                   The container lease identifier.\r\n* @param {int}                            [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                            [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                            [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                             The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                             execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}                         [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}                           [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                             The default value is false.\r\n* @param {errorOrResult}                  callback                            `error` will contain information\r\n*                                                                             if an error occurs; otherwise `[result]{@link ContainerAclResult}` will contain\r\n*                                                                             information for the container.\r\n*                                                                             `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.setContainerAcl = function (container, signedIdentifiers, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setContainerAcl', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var policies = null;\r\n  if (signedIdentifiers) {\r\n    if (_.isArray(signedIdentifiers)) {\r\n      throw new TypeError(SR.INVALID_SIGNED_IDENTIFIERS);\r\n    }\r\n    policies = AclResult.serialize(signedIdentifiers);\r\n  }\r\n\r\n  var webResource = WebResource.put(container)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'container')\r\n    .withQueryOption(QueryStringConstants.COMP, 'acl')\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, !azureutil.objectIsNull(policies) ? Buffer.byteLength(policies) : 0)\r\n    .withHeader(HeaderConstants.BLOB_PUBLIC_ACCESS, options.publicAccessLevel)\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId)\r\n    .withBody(policies);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.containerResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.containerResult = new ContainerResult(container, options.publicAccessLevel);\r\n      responseObject.containerResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      if (signedIdentifiers) {\r\n        responseObject.containerResult.signedIdentifiers = signedIdentifiers;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.containerResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Marks the specified container for deletion.\r\n* The container and any blobs contained within it are later deleted during garbage collection.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {AccessConditions}   [options.accessConditions]          The access conditions.\r\n* @param {string}             [options.leaseId]                   The container lease identifier.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResponse}    callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.deleteContainer = function (container, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteContainer', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.del(container)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'container')\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Marks the specified container for deletion if it exists.\r\n* The container and any blobs contained within it are later deleted during garbage collection.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {AccessConditions}   [options.accessConditions]          The access conditions.\r\n* @param {string}             [options.leaseId]                   The container lease identifier.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will \r\n*                                                                 be true if the container exists and was deleted, or false if the container\r\n*                                                                 did not exist.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.deleteContainerIfExists = function (container, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteContainerIfExists', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var self = this;\r\n  self._doesContainerExist(container, true, options, function (error, result, response) {\r\n    if (error) {\r\n      callback(error, result.exists, response);\r\n    } else if (!result.exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, false, response);\r\n    } else {\r\n      self.deleteContainer(container, options, function (deleteError, deleteResponse) {\r\n        var deleted;\r\n        if (!deleteError) {\r\n          deleted = true;\r\n        } else if (deleteError && deleteError.statuscode === Constants.HttpConstants.HttpResponseCodes.NotFound && deleteError.code === Constants.BlobErrorCodeStrings.CONTAINER_NOT_FOUND) {\r\n          // If it was deleted already, there was no actual error.\r\n          deleted = false;\r\n          deleteError = null;\r\n          deleteResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(deleteError, deleted, deleteResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of blob directory items in the container.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {object}             currentToken                        A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                           The request options.\r\n* @param {int}                [options.maxResults]                Specifies the maximum number of directories to return per call to Azure ServiceClient. This does NOT affect list size returned by this function. (maximum: 5000)\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                 `entries`  gives a list of `[directories]{@link DirectoryResult}` and the `continuationToken` is used for the next listing operation.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.listBlobDirectoriesSegmented = function (container, currentToken, optionsOrCallback, callback) {\r\n  this.listBlobDirectoriesSegmentedWithPrefix(container, null /* prefix */, currentToken, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of blob directory items in the container.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {string}             prefix                              The prefix of the blob directory.\r\n* @param {object}             currentToken                        A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                           The request options.\r\n* @param {int}                [options.maxResults]                Specifies the maximum number of directories to return per call to Azure ServiceClient. This does NOT affect list size returned by this function. (maximum: 5000)\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                 `entries`  gives a list of `[directories]{@link BlobResult}` and the `continuationToken` is used for the next listing operation.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.listBlobDirectoriesSegmentedWithPrefix = function (container, prefix, currentToken, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  userOptions.delimiter = '/';\r\n\r\n  this._listBlobsOrDircotriesSegmentedWithPrefix(container, prefix, currentToken, BlobConstants.ListBlobTypes.Directory, userOptions, callback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of blob items in the container.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {object}             currentToken                        A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.delimiter]                 Delimiter, i.e. '/', for specifying folder hierarchy.\r\n* @param {int}                [options.maxResults]                Specifies the maximum number of blobs to return per call to Azure ServiceClient. This does NOT affect list size returned by this function. (maximum: 5000)\r\n* @param {string}             [options.include]                   Specifies that the response should include one or more of the following subsets: '', 'metadata', 'snapshots', 'uncommittedblobs', 'copy', 'deleted'). \r\n*                                                                 Please find these values in BlobUtilities.BlobListingDetails. Multiple values can be added separated with a comma (,).\r\n*                                                                 **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                 `entries`  gives a list of `[blobs]{@link BlobResult}` and the `continuationToken` is used for the next listing operation.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.listBlobsSegmented = function (container, currentToken, optionsOrCallback, callback) {\r\n  this.listBlobsSegmentedWithPrefix(container, null /* prefix */, currentToken, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of blob items whose names begin with the specified prefix in the container.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {string}             prefix                              The prefix of the blob name.\r\n* @param {object}             currentToken                        A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.delimiter]                 Delimiter, i.e. '/', for specifying folder hierarchy.\r\n* @param {int}                [options.maxResults]                Specifies the maximum number of blobs to return per call to Azure ServiceClient. This does NOT affect list size returned by this function. (maximum: 5000)\r\n* @param {string}             [options.include]                   Specifies that the response should include one or more of the following subsets: '', 'metadata', 'snapshots', 'uncommittedblobs', 'copy', 'deleted').\r\n*                                                                 Please find these values in BlobUtilities.BlobListingDetails. Multiple values can be added separated with a comma (,).\r\n*                                                                 **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will contain\r\n*                                                                 the entries of `[blobs]{@link BlobResult}` and the continuation token for the next listing operation.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.listBlobsSegmentedWithPrefix = function (container, prefix, currentToken, optionsOrCallback, callback) {\r\n  this._listBlobsOrDircotriesSegmentedWithPrefix(container, prefix, currentToken, BlobConstants.ListBlobTypes.Blob, optionsOrCallback, callback);\r\n};\r\n\r\n// Lease methods\r\n\r\n/**\r\n* Acquires a new lease. If container and blob are specified, acquires a blob lease. Otherwise, if only container is specified and blob is null, acquires a container lease.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.leaseDuration]                     The lease duration in seconds. A non-infinite lease can be between 15 and 60 seconds. Default is never to expire. \r\n* @param {string}             [options.proposedLeaseId]                   The proposed lease identifier. Must be a GUID.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link LeaseResult}` will contain\r\n*                                                                         the lease information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.acquireLease = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('acquireLease', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  if (!options.leaseDuration) {\r\n    options.leaseDuration = -1;\r\n  }\r\n\r\n  this._leaseImpl(container, blob, null /* leaseId */, BlobConstants.LeaseOperation.ACQUIRE, options, callback);\r\n};\r\n\r\n/**\r\n* Renews an existing lease. If container and blob are specified, renews the blob lease. Otherwise, if only container is specified and blob is null, renews the container lease.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {string}             leaseId                                     The lease identifier. Must be a GUID.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link LeaseResult}` will contain\r\n*                                                                         the lease information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.renewLease = function (container, blob, leaseId, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('renewLease', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  this._leaseImpl(container, blob, leaseId, BlobConstants.LeaseOperation.RENEW, options, callback);\r\n};\r\n\r\n/**\r\n* Changes the lease ID of an active lease. If container and blob are specified, changes the blob lease. Otherwise, if only container is specified and blob is null, changes the \r\n* container lease.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {string}             leaseId                                     The current lease identifier.\r\n* @param {string}             proposedLeaseId                             The proposed lease identifier. Must be a GUID. \r\n* @param {object}             [options]                                   The request options.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `[result]{@link LeaseResult}` will contain  the lease information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.changeLease = function (container, blob, leaseId, proposedLeaseId, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('changeLease', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  options.proposedLeaseId = proposedLeaseId;\r\n  this._leaseImpl(container, blob, leaseId, BlobConstants.LeaseOperation.CHANGE, options, callback);\r\n};\r\n\r\n/**\r\n* Releases the lease. If container and blob are specified, releases the blob lease. Otherwise, if only container is specified and blob is null, releases the container lease.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {string}             leaseId                                     The lease identifier.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link LeaseResult}` will contain\r\n*                                                                         the lease information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.releaseLease = function (container, blob, leaseId, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('releaseLease', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  this._leaseImpl(container, blob, leaseId, BlobConstants.LeaseOperation.RELEASE, options, callback);\r\n};\r\n\r\n/**\r\n* Breaks the lease but ensures that another client cannot acquire a new lease until the current lease period has expired. If container and blob are specified, breaks the blob lease. \r\n* Otherwise, if only container is specified and blob is null, breaks the container lease.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {int}                [options.leaseBreakPeriod]                  The lease break period, between 0 and 60 seconds. If unspecified, a fixed-duration lease breaks after \r\n*                                                                         the remaining lease period elapses, and an infinite lease breaks immediately.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link LeaseResult}` will contain\r\n*                                                                         the lease information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.breakLease = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('breakLease', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  this._leaseImpl(container, blob, null /*leaseId*/, BlobConstants.LeaseOperation.BREAK, options, callback);\r\n};\r\n\r\n// Blob methods\r\n\r\n/**\r\n* Returns all user-defined metadata, standard HTTP properties, and system properties for the blob.\r\n* It does not return or modify the content of the blob.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                         information about the blob.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.getBlobProperties = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getBlobProperties', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.head(resourceName);\r\n\r\n  if (options.snapshotId) {\r\n    webResource.withQueryOption(QueryStringConstants.SNAPSHOT, options.snapshotId);\r\n  }\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult = new BlobResult(container, blob);\r\n      responseObject.blobResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Returns all user-defined metadata for the specified blob or snapshot.\r\n* It does not modify or return the content of the blob.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                         information about the blob.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.getBlobMetadata = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getBlobMetadata', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.head(resourceName);\r\n\r\n  webResource.withQueryOption(QueryStringConstants.COMP, 'metadata');\r\n  webResource.withQueryOption(QueryStringConstants.SNAPSHOT, options.snapshotId);\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult = new BlobResult(container, blob);\r\n      responseObject.blobResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Sets user-defined properties for the specified blob or snapshot.\r\n* It does not modify or return the content of the blob.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             [properties]                                The blob properties to set.\r\n* @param {string}             [properties.contentType]                    The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [properties.contentEncoding]                The content encodings that have been applied to the blob.\r\n* @param {string}             [properties.contentLanguage]                The natural languages used by this resource.\r\n* @param {string}             [properties.cacheControl]                   The blob's cache control.\r\n* @param {string}             [properties.contentDisposition]             The blob's content disposition.\r\n* @param {string}             [properties.contentMD5]                     The blob's MD5 hash.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                         information about the blob.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.setBlobProperties = function (container, blob, properties, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setBlobProperties', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, { contentSettings: properties }, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'properties');\r\n\r\n  BlobResult.setPropertiesFromBlob(webResource, options);\r\n\r\n  this._setBlobPropertiesHelper({\r\n    webResource: webResource,\r\n    options: options,\r\n    container: container,\r\n    blob: blob,\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/**\r\n* Sets user-defined metadata for the specified blob or snapshot as one or more name-value pairs \r\n* It does not modify or return the content of the blob.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             metadata                                    The metadata key/value pairs.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                         information on the blob.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.setBlobMetadata = function (container, blob, metadata, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setBlobMetadata', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.object(metadata, 'metadata');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata');\r\n\r\n  webResource.withQueryOption(QueryStringConstants.SNAPSHOT, options.snapshotId);\r\n\r\n  options.metadata = metadata;\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult = new BlobResult(container, blob);\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n\r\n/**\r\n* Provides a stream to read from a blob.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the blob in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the blob in the specified range.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading blobs.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `[result]{@link BlobResult}` will contain the blob information.\r\n*                                                                         `response` will contain information related to this operation.\r\n* @return {Readable}                                                      A Node.js Readable stream.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* var writable = fs.createWriteStream(destinationFileNameTarget);\r\n*  blobService.createReadStream(containerName, blobName).pipe(writable);\r\n*/\r\nBlobService.prototype.createReadStream = function (container, blob, optionsOrCallback, callback) {\r\n  var options;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { options = o; callback = c; });\r\n\r\n  validate.validateArgs('createReadStream', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n  });\r\n\r\n  var readStream = new ChunkStream();\r\n  this.getBlobToStream(container, blob, readStream, options, function (error, responseBlob, response) {\r\n    if (error) {\r\n      readStream.emit('error', error);\r\n    }\r\n\r\n    if (callback) {\r\n      callback(error, responseBlob, response);\r\n    }\r\n  });\r\n\r\n  return readStream;\r\n};\r\n\r\n/**\r\n* Downloads a blob into a stream.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {Writable}           writeStream                                 The Node.js Writable stream.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {boolean}            [options.skipSizeCheck]                     Skip the size check to perform direct download.\r\n*                                                                         Set the option to true for small blobs.\r\n*                                                                         Parallel download and speed summary won't work with this option on.\r\n* @param {SpeedSummary}       [options.speedSummary]                      The download tracker objects.\r\n* @param {int}                [options.parallelOperationThreadCount]      The number of parallel operations that may be performed when uploading.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the blob in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the blob in the specified range. \r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading blobs.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `[result]{@link BlobResult}` will contain the blob information.\r\n*                                                                         `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* blobService.getBlobToStream('taskcontainer', 'task1', fs.createWriteStream('task1-download.txt'), function(error, serverBlob) {\r\n*   if(!error) {\r\n*     // Blob available in serverBlob.blob variable\r\n*   }\r\n* }); \r\n*/\r\nBlobService.prototype.getBlobToStream = function (container, blob, writeStream, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  userOptions.speedSummary = userOptions.speedSummary || new SpeedSummary(blob);\r\n\r\n  validate.validateArgs('getBlobToStream', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.object(writeStream, 'writeStream');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var propertiesRequestOptions = {\r\n    timeoutIntervalInMs: options.timeoutIntervalInMs,\r\n    clientRequestTimeoutInMs: options.clientRequestTimeoutInMs,\r\n    snapshotId: options.snapshotId,\r\n    accessConditions: options.accessConditions\r\n  };\r\n\r\n  if (options.skipSizeCheck) {\r\n    this._getBlobToStream(container, blob, writeStream, options, callback);\r\n  } else {\r\n    var self = this;\r\n    this.getBlobProperties(container, blob, propertiesRequestOptions, function (error, properties) {\r\n      if (error) {\r\n        callback(error);\r\n      } else {\r\n        var size;\r\n        if (options.rangeStart) {\r\n          var endOffset = properties.contentLength - 1;\r\n          var end = options.rangeEnd ? Math.min(options.rangeEnd, endOffset) : endOffset;\r\n          size = end - options.rangeStart + 1;\r\n        } else {\r\n          size = properties.contentLength;\r\n        }\r\n        options.speedSummary.totalSize = size;\r\n\r\n        if (size > self.singleBlobPutThresholdInBytes) {\r\n          azureutil.setObjectInnerPropertyValue(options, ['contentSettings', 'contentMD5'], azureutil.tryGetValueChain(properties, ['contentSettings', 'contentMD5'], null));\r\n          self._getBlobToRangeStream(container, blob, properties.blobType, writeStream, options, callback);\r\n        } else {\r\n          self._getBlobToStream(container, blob, writeStream, options, callback);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return options.speedSummary;\r\n};\r\n\r\n/**\r\n* Downloads a blob into a text string.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier. \r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the blob in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the blob in the specified range.\r\n* @param {bool}               [options.useTransactionalMD5]               Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading blobs.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {BlobService~blobToText}  callback                               `error` will contain information\r\n*                                                                         if an error occurs; otherwise `text` will contain the blob contents,\r\n*                                                                         and `[blockBlob]{@link BlobResult}` will contain\r\n*                                                                         the blob information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.getBlobToText = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getBlobToText', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.get(resourceName)\r\n    .withRawResponse();\r\n\r\n  webResource.withQueryOption(QueryStringConstants.SNAPSHOT, options.snapshotId);\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n  this._setRangeContentMD5Header(webResource, options);\r\n\r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.text = null;\r\n    responseObject.blobResult = null;\r\n\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult = new BlobResult(container, blob);\r\n      responseObject.blobResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      responseObject.text = responseObject.response.body;\r\n\r\n      self._validateLengthAndMD5(options, responseObject);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.text, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Marks the specified blob or snapshot for deletion. The blob is later deleted during garbage collection.\r\n* If a blob has snapshots, you must delete them when deleting the blob. Using the deleteSnapshots option, you can choose either to delete both the blob and its snapshots, \r\n* or to delete only the snapshots but not the blob itself. If the blob has snapshots, you must include the deleteSnapshots option or the blob service will return an error\r\n* and nothing will be deleted. \r\n* If you are deleting a specific snapshot using the snapshotId option, the deleteSnapshots option must NOT be included.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.deleteSnapshots]                   The snapshot delete option. See azure.BlobUtilities.SnapshotDeleteOptions.*. \r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResponse}    callback                                    `error` will contain information\r\n*                                                                         if an error occurs; `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.deleteBlob = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteBlob', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.del(resourceName)\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  if (!azureutil.objectIsNull(options.snapshotId) && !azureutil.objectIsNull(options.deleteSnapshots)) {\r\n    throw new ArgumentError('options', SR.INVALID_DELETE_SNAPSHOT_OPTION);\r\n  }\r\n\r\n  webResource.withQueryOption(QueryStringConstants.SNAPSHOT, options.snapshotId);\r\n  webResource.withHeader(HeaderConstants.DELETE_SNAPSHOT, options.deleteSnapshots);\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* The undelete Blob operation restores the contents and metadata of soft deleted blob or snapshot.\r\n* Attempting to undelete a blob or snapshot that is not soft deleted will succeed without any changes.\r\n* \r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResponse}    callback                                    `error` will contain information\r\n*                                                                         if an error occurs; `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.undeleteBlob = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteBlob', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'undelete');\r\n    \r\n  BlobResult.setHeadersFromBlob(webResource, options);  \r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Checks whether or not a blob exists on the service.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                               The container name.\r\n* @param {string}             blob                                    The blob name.\r\n* @param {object}             [options]                               The request options.\r\n* @param {string}             [options.snapshotId]                    The snapshot identifier.\r\n* @param {string}             [options.leaseId]                       The lease identifier.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {Function(error, result, response)}  callback                `error` will contain information\r\n*                                                                     if an error occurs; otherwise `[result]{@link BlobResult}` will contain \r\n*                                                                     the blob information including the `exists` boolean member. \r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.doesBlobExist = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('doesBlobExist', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  this._doesBlobExist(container, blob, false, options, callback);\r\n};\r\n\r\n/**\r\n* Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted during garbage collection.\r\n* If a blob has snapshots, you must delete them when deleting the blob. Using the deleteSnapshots option, you can choose either to delete both the blob and its snapshots, \r\n* or to delete only the snapshots but not the blob itself. If the blob has snapshots, you must include the deleteSnapshots option or the blob service will return an error\r\n* and nothing will be deleted. \r\n* If you are deleting a specific snapshot using the snapshotId option, the deleteSnapshots option must NOT be included.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {string}             blob                                The blob name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.deleteSnapshots]           The snapshot delete option. See azure.BlobUtilities.SnapshotDeleteOptions.*. \r\n* @param {string}             [options.snapshotId]                The snapshot identifier.\r\n* @param {string}             [options.leaseId]                   The lease identifier.\r\n* @param {AccessConditions}   [options.accessConditions]          The access conditions.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will\r\n*                                                                 be true if the blob was deleted, or false if the blob\r\n*                                                                 does not exist.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.deleteBlobIfExists = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteBlobIfExists', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var self = this;\r\n  self._doesBlobExist(container, blob, true, options, function (error, existsResult, response) {\r\n    if (error) {\r\n      callback(error, existsResult.exists, response);\r\n    } else if (!existsResult.exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, false, response);\r\n    } else {\r\n      self.deleteBlob(container, blob, options, function (deleteError, deleteResponse) {\r\n        var deleted;\r\n        if (!deleteError) {\r\n          deleted = true;\r\n        } else if (deleteError && deleteError.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound && deleteError.code === Constants.BlobErrorCodeStrings.BLOB_NOT_FOUND) {\r\n          // If it was deleted already, there was no actual error.\r\n          deleted = false;\r\n          deleteError = null;\r\n          deleteResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(deleteError, deleted, deleteResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Creates a read-only snapshot of a blob.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                             The container name.\r\n* @param {string}             blob                                  The blob name.\r\n* @param {object}             [options]                             The request options.\r\n* @param {string}             [options.snapshotId]                  The snapshot identifier.\r\n* @param {object}             [options.metadata]                    The metadata key/value pairs.\r\n* @param {string}             [options.leaseId]                     The lease identifier.\r\n* @param {AccessConditions}   [options.accessConditions]            The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                   Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]         The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]    The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]    The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                   The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                   execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]             A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]           Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                   The default value is false.\r\n* @param {errorOrResult}      callback                              `error` will contain information\r\n*                                                                   if an error occurs; otherwise `result` will contain\r\n*                                                                   the ID of the snapshot.\r\n*                                                                   `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.createBlobSnapshot = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createBlobSnapshot', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'snapshot');\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.snapshotId = null;\r\n    if (!responseObject.error) {\r\n      responseObject.snapshotId = responseObject.response.headers[HeaderConstants.SNAPSHOT];\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.snapshotId, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Starts to copy a blob or an Azure Storage file to a destination blob.\r\n*\r\n* For an asynchronous copy(by default), this operation returns a object including a copy ID which\r\n* you can use to check or abort the copy operation. The Blob service copies blobs on a best-effort basis.\r\n* The source blob for an asynchronous copy operation may be a block blob, an append blob,\r\n* a page blob or an Azure Storage file.\r\n*\r\n* Refer to https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob for more details. \r\n*\r\n* @this {BlobService}\r\n* @param {string}             sourceUri                                 The source blob URI.\r\n* @param {string}             targetContainer                           The target container name.\r\n* @param {string}             targetBlob                                The target blob name.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {string}             [options.blobTier]                        For page blobs on premium accounts only. Set the tier of target blob. Refer to BlobUtilities.BlobTier.PremiumPageBlobTier.\r\n* @param {boolean}            [options.isIncrementalCopy]               If it's incremental copy or not. Refer to https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/incremental-copy-blob\r\n* @param {string}             [options.snapshotId]                      The source blob snapshot identifier.\r\n* @param {object}             [options.metadata]                        The target blob metadata key/value pairs.\r\n* @param {string}             [options.leaseId]                         The target blob lease identifier.\r\n* @param {string}             [options.sourceLeaseId]                   The source blob lease identifier.\r\n* @param {AccessConditions}   [options.accessConditions]                The access conditions.\r\n* @param {AccessConditions}   [options.sourceAccessConditions]          The source access conditions.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResult}      callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                       the blob information.\r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.startCopyBlob = function (sourceUri, targetContainer, targetBlob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('startCopyBlob', function (v) {\r\n    v.string(sourceUri, 'sourceUri');\r\n    v.string(targetContainer, 'targetContainer');\r\n    v.string(targetBlob, 'targetBlob');\r\n    v.containerNameIsValid(targetContainer);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var targetResourceName = createResourceName(targetContainer, targetBlob);\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  if (options.snapshotId) {\r\n    var uri = url.parse(sourceUri, true);\r\n    if (uri.query['snapshot']) {\r\n      throw new ArgumentError('options.snapshotId', 'Duplicate snapshot supplied in both the source uri and option.');\r\n    }\r\n\r\n    uri.search = undefined;\r\n    uri.query['snapshot'] = options.snapshotId;\r\n\r\n    sourceUri = url.format(uri);\r\n  }\r\n\r\n  var webResource = WebResource.put(targetResourceName)\r\n    .withHeader(HeaderConstants.COPY_SOURCE, sourceUri);\r\n\r\n  if (options.isIncrementalCopy) {\r\n    webResource.withQueryOption(QueryStringConstants.COMP, 'incrementalcopy');\r\n  }\r\n\r\n  webResource.withHeader(HeaderConstants.ACCESS_TIER, options.blobTier);\r\n  webResource.withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n  webResource.withHeader(HeaderConstants.SOURCE_LEASE_ID, options.sourceLeaseId);\r\n  webResource.addOptionalMetadataHeaders(options.metadata);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult = new BlobResult(targetContainer, targetBlob);\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n\r\n      if (options.metadata) {\r\n        responseObject.blobResult.metadata = options.metadata;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Abort a blob copy operation.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                 The destination container name.\r\n* @param {string}             blob                                      The destination blob name.\r\n* @param {string}             copyId                                    The copy operation identifier.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {string}             [options.leaseId]                         The target blob lease identifier.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResponse}    callback                                  `error` will contain information  if an error occurs; \r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.abortCopyBlob = function (container, blob, copyId, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('abortCopyBlob', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var resourceName = createResourceName(container, blob);\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COPY_ID, copyId)\r\n    .withQueryOption(QueryStringConstants.COMP, 'copy')\r\n    .withHeader(HeaderConstants.COPY_ACTION, 'abort');\r\n\r\n  webResource.withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Retrieves a shared access signature token.\r\n*\r\n* @this {BlobService}\r\n* @param {string}                   container                                           The container name.\r\n* @param {string}                   [blob]                                              The blob name.\r\n* @param {object}                   sharedAccessPolicy                                  The shared access policy.\r\n* @param {string}                   [sharedAccessPolicy.Id]                             The signed identifier.\r\n* @param {object}                   [sharedAccessPolicy.AccessPolicy.Permissions]       The permission type.\r\n* @param {date|string}              [sharedAccessPolicy.AccessPolicy.Start]             The time at which the Shared Access Signature becomes valid (The UTC value will be used).\r\n* @param {date|string}              [sharedAccessPolicy.AccessPolicy.Expiry]            The time at which the Shared Access Signature becomes expired (The UTC value will be used).\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.IPAddressOrRange]  An IP address or a range of IP addresses from which to accept requests. When specifying a range, note that the range is inclusive.\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.Protocols]         The protocols permitted for a request made with the account SAS. \r\n*                                                                                       Possible values are both HTTPS and HTTP (https,http) or HTTPS only (https). The default value is https,http.\r\n* @param {object}                   [headers]                                           The optional header values to set for a blob returned wth this SAS.\r\n* @param {string}                   [headers.cacheControl]                              The optional value of the Cache-Control response header to be returned when this SAS is used.\r\n* @param {string}                   [headers.contentType]                               The optional value of the Content-Type response header to be returned when this SAS is used.\r\n* @param {string}                   [headers.contentEncoding]                           The optional value of the Content-Encoding response header to be returned when this SAS is used.\r\n* @param {string}                   [headers.contentLanguage]                           The optional value of the Content-Language response header to be returned when this SAS is used.\r\n* @param {string}                   [headers.contentDisposition]                        The optional value of the Content-Disposition response header to be returned when this SAS is used.\r\n* @return {string}                                                                      The shared access signature query string. Note this string does not contain the leading \"?\".\r\n*/\r\nBlobService.prototype.generateSharedAccessSignature = function (container, blob, sharedAccessPolicy, headers) {\r\n  // check if the BlobService is able to generate a shared access signature\r\n  if (!this.storageCredentials) {\r\n    throw new ArgumentNullError('storageCredentials');\r\n  }\r\n\r\n  if (!this.storageCredentials.generateSignedQueryString) {\r\n    throw new ArgumentError('storageCredentials', SR.CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY);\r\n  }\r\n\r\n  // Validate container name. Blob name is optional.\r\n  validate.validateArgs('generateSharedAccessSignature', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.object(sharedAccessPolicy, 'sharedAccessPolicy');\r\n  });\r\n\r\n  var resourceType = BlobConstants.ResourceTypes.CONTAINER;\r\n  if (blob) {\r\n    validate.validateArgs('generateSharedAccessSignature', function (v) {\r\n      v.string(blob, 'blob');\r\n    });\r\n    resourceType = BlobConstants.ResourceTypes.BLOB;\r\n  }\r\n\r\n  if (sharedAccessPolicy.AccessPolicy) {\r\n    if (!azureutil.objectIsNull(sharedAccessPolicy.AccessPolicy.Start)) {\r\n      if (!_.isDate(sharedAccessPolicy.AccessPolicy.Start)) {\r\n        sharedAccessPolicy.AccessPolicy.Start = new Date(sharedAccessPolicy.AccessPolicy.Start);\r\n      }\r\n\r\n      sharedAccessPolicy.AccessPolicy.Start = azureutil.truncatedISO8061Date(sharedAccessPolicy.AccessPolicy.Start);\r\n    }\r\n\r\n    if (!azureutil.objectIsNull(sharedAccessPolicy.AccessPolicy.Expiry)) {\r\n      if (!_.isDate(sharedAccessPolicy.AccessPolicy.Expiry)) {\r\n        sharedAccessPolicy.AccessPolicy.Expiry = new Date(sharedAccessPolicy.AccessPolicy.Expiry);\r\n      }\r\n\r\n      sharedAccessPolicy.AccessPolicy.Expiry = azureutil.truncatedISO8061Date(sharedAccessPolicy.AccessPolicy.Expiry);\r\n    }\r\n  }\r\n\r\n  var resourceName = createResourceName(container, blob, true);\r\n  return this.storageCredentials.generateSignedQueryString(Constants.ServiceType.Blob, resourceName, sharedAccessPolicy, null, { headers: headers, resourceType: resourceType });\r\n};\r\n\r\n/**\r\n* Retrieves a blob or container URL.\r\n*\r\n* @param {string}                   container                The container name.\r\n* @param {string}                   [blob]                   The blob name.\r\n* @param {string}                   [sasToken]               The Shared Access Signature token.\r\n* @param {boolean}                  [primary]                A boolean representing whether to use the primary or the secondary endpoint.\r\n* @param {string}                   [snapshotId]             The snapshot identifier.\r\n* @return {string}                                           The formatted URL string.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* var sharedAccessPolicy = {\r\n*   AccessPolicy: {\r\n*     Permissions: azure.BlobUtilities.SharedAccessPermissions.READ,\r\n*     Start: startDate,\r\n*     Expiry: expiryDate\r\n*   },\r\n* };\r\n* \r\n* var sasToken = blobService.generateSharedAccessSignature(containerName, blobName, sharedAccessPolicy);\r\n* var sasUrl = blobService.getUrl(containerName, blobName, sasToken);\r\n*/\r\nBlobService.prototype.getUrl = function (container, blob, sasToken, primary, snapshotId) {\r\n  validate.validateArgs('getUrl', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n  });\r\n\r\n  var host;\r\n  if (!azureutil.objectIsNull(primary) && primary === false) {\r\n    host = this.host.secondaryHost;\r\n  } else {\r\n    host = this.host.primaryHost;\r\n  }\r\n\r\n  host = azureutil.trimPortFromUri(host);\r\n  if (host && host.lastIndexOf('/') !== (host.length - 1)) {\r\n    host = host + '/';\r\n  }\r\n\r\n  var query = qs.parse(sasToken);\r\n  if (snapshotId) {\r\n    query[QueryStringConstants.SNAPSHOT] = snapshotId;\r\n  }\r\n\r\n  var fullPath = url.format({ pathname: this._getPath(createResourceName(container, blob)), query: query });\r\n  return url.resolve(host, fullPath);\r\n};\r\n\r\n// Page blob methods\r\n\r\n/**\r\n* Creates a page blob of the specified length. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {int}                length                                        The length of the page blob in bytes.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {string}             [options.leaseId]                             The target blob lease identifier.\r\n* @param {string}             [options.blobTier]                            For page blobs on premium accounts only. Set the tier of the target blob. Refer to BlobUtilities.BlobTier.PremiumPageBlobTier.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The MD5 hash of the blob content.\r\n* @param {string}             [options.sequenceNumber]                      The blob's sequence number.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResponse}    callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise \r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.createPageBlob = function (container, blob, length, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createPageBlob', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.value(length, 'length');\r\n    v.callback(callback);\r\n  });\r\n\r\n  if (length && length % BlobConstants.PAGE_SIZE !== 0) {\r\n    throw new RangeError(SR.INVALID_PAGE_BLOB_LENGTH);\r\n  }\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var resourceName = createResourceName(container, blob);\r\n\r\n  var webResource = WebResource.put(resourceName)\r\n    .withHeader(HeaderConstants.BLOB_TYPE, BlobConstants.BlobTypes.PAGE)\r\n    .withHeader(HeaderConstants.BLOB_CONTENT_LENGTH, length)\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, 0)\r\n    .withHeader(HeaderConstants.ACCESS_TIER, options.blobTier)\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Uploads a page blob from a stream. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param (Stream)             stream                                        Stream to the data to store.\r\n* @param {int}                streamLength                                  The length of the stream to upload.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The download tracker objects;\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for page blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.blobTier]                            For page blobs on premium accounts only. Set the tier of the target blob. Refer to BlobUtilities.BlobTier.PremiumPageBlobTier.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype.createPageBlobFromStream = function (container, blob, stream, streamLength, optionsOrCallback, callback) {\r\n  return this._createBlobFromStream(container, blob, BlobConstants.BlobTypes.PAGE, stream, streamLength, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Provides a stream to write to a page blob. Assumes that the blob exists. \r\n* If it does not, please create the blob using createPageBlob before calling this method or use createWriteStreamNewPageBlob.\r\n* Please note the `Stream` returned by this API should be used with piping.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for page blobs and true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {Writable}                                                        A Node.js Writable stream.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* blobService.createPageBlob(containerName, blobName, 1024, function (err) {\r\n*   // Pipe file to a blob\r\n*   var stream = fs.createReadStream(fileNameTarget).pipe(blobService.createWriteStreamToExistingPageBlob(containerName, blobName));\r\n* });\r\n*/\r\nBlobService.prototype.createWriteStreamToExistingPageBlob = function (container, blob, optionsOrCallback, callback) {\r\n  return this._createWriteStreamToBlob(container, blob, BlobConstants.BlobTypes.PAGE, 0, false, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Provides a stream to write to a page blob. Creates the blob before writing data. If the blob already exists on the service, it will be overwritten.\r\n* Please note the `Stream` returned by this API should be used with piping.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {string}             length                                        The blob length.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for page blobs and true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.blobTier]                            For page blobs on premium accounts only. Set the tier of the target blob. Refer to BlobUtilities.BlobTier.PremiumPageBlobTier.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {Writable}                                                        A Node.js Writable stream.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* blobService.createPageBlob(containerName, blobName, 1024, function (err) {\r\n*   // Pipe file to a blob\r\n*   var stream = fs.createReadStream(fileNameTarget).pipe(blobService.createWriteStreamToNewPageBlob(containerName, blobName));\r\n* });\r\n*/\r\nBlobService.prototype.createWriteStreamToNewPageBlob = function (container, blob, length, optionsOrCallback, callback) {\r\n  return this._createWriteStreamToBlob(container, blob, BlobConstants.BlobTypes.PAGE, length, true, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Updates a page blob from a stream.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {Readable}           readStream                                  The Node.js Readable stream.\r\n* @param {int}                rangeStart                                  The range start.\r\n* @param {int}                rangeEnd                                    The range end.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.leaseId]                           The target blob lease identifier.\r\n* @param {bool}               [options.useTransactionalMD5]               Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.transactionalContentMD5]           An optional hash value used to ensure transactional integrity for the page. \r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                         the page information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.createPagesFromStream = function (container, blob, readStream, rangeStart, rangeEnd, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createPagesFromStream', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  if ((rangeEnd - rangeStart) + 1 > BlobConstants.MAX_UPDATE_PAGE_SIZE) {\r\n    throw new RangeError(SR.INVALID_PAGE_RANGE_FOR_UPDATE);\r\n  }\r\n\r\n  var self = this;\r\n  if (azureutil.objectIsNull(options.transactionalContentMD5) && options.useTransactionalMD5) {\r\n    azureutil.calculateMD5(readStream, BlobConstants.MAX_UPDATE_PAGE_SIZE, options, function (internalBuff, contentMD5) {\r\n      options.transactionalContentMD5 = contentMD5;\r\n      self._createPages(container, blob, internalBuff, null /* stream */, rangeStart, rangeEnd, options, callback);\r\n    });\r\n  } else {\r\n    self._createPages(container, blob, null /* text */, readStream, rangeStart, rangeEnd, options, callback);\r\n  }\r\n};\r\n\r\n/**\r\n* Lists page ranges. Lists all of the page ranges by default, or only the page ranges over a specific range of bytes if rangeStart and rangeEnd are specified.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {int}                [options.rangeStart]                        The range start.\r\n* @param {int}                [options.rangeEnd]                          The range end.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The target blob lease identifier.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain\r\n*                                                                         the page ranges information, see `[Range]{@link Range}` for detailed information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.listPageRanges = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('listPageRanges', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.get(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'pagelist')\r\n    .withQueryOption(QueryStringConstants.SNAPSHOT, options.snapshotId);\r\n\r\n  if (options.rangeStart && options.rangeStart % BlobConstants.PAGE_SIZE !== 0) {\r\n    throw new RangeError(SR.INVALID_PAGE_START_OFFSET);\r\n  }\r\n\r\n  if (options.rangeEnd && (options.rangeEnd + 1) % BlobConstants.PAGE_SIZE !== 0) {\r\n    throw new RangeError(SR.INVALID_PAGE_END_OFFSET);\r\n  }\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.pageRanges = null;\r\n    if (!responseObject.error) {\r\n      responseObject.pageRanges = [];\r\n\r\n      var pageRanges = [];\r\n      if (responseObject.response.body.PageList.PageRange) {\r\n        pageRanges = responseObject.response.body.PageList.PageRange;\r\n\r\n        if (!_.isArray(pageRanges)) {\r\n          pageRanges = [pageRanges];\r\n        }\r\n      }\r\n\r\n      pageRanges.forEach(function (pageRange) {\r\n        var range = {\r\n          start: parseInt(pageRange.Start, 10),\r\n          end: parseInt(pageRange.End, 10)\r\n        };\r\n\r\n        responseObject.pageRanges.push(range);\r\n      });\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.pageRanges, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Gets page ranges that have been updated or cleared since the snapshot specified by `previousSnapshotTime` was taken. Gets all of the page ranges by default, or only the page ranges over a specific range of bytes if rangeStart and rangeEnd are specified.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {string}             previousSnapshotTime                        The previous snapshot time for comparison. Must be prior to `options.snapshotId` if it's provided.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {int}                [options.rangeStart]                        The range start.\r\n* @param {int}                [options.rangeEnd]                          The range end.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier. \r\n* @param {string}             [options.leaseId]                           The target blob lease identifier.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain\r\n*                                                                         the page ranges diff information, see `[RangeDiff]{@link RangeDiff}` for detailed information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.getPageRangesDiff = function (container, blob, previousSnapshotTime, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getPageRangesDiff', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.get(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'pagelist')\r\n    .withQueryOption(QueryStringConstants.SNAPSHOT, options.snapshotId)\r\n    .withQueryOption(QueryStringConstants.PREV_SNAPSHOT, previousSnapshotTime);\r\n\r\n  if (options.rangeStart && options.rangeStart % BlobConstants.PAGE_SIZE !== 0) {\r\n    throw new RangeError(SR.INVALID_PAGE_START_OFFSET);\r\n  }\r\n\r\n  if (options.rangeEnd && (options.rangeEnd + 1) % BlobConstants.PAGE_SIZE !== 0) {\r\n    throw new RangeError(SR.INVALID_PAGE_END_OFFSET);\r\n  }\r\n\r\n  if (options.rangeEnd && (options.rangeEnd + 1) % BlobConstants.PAGE_SIZE !== 0) {\r\n    throw new RangeError(SR.INVALID_PAGE_END_OFFSET);\r\n  }\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.pageRangesDiff = null;\r\n    if (!responseObject.error) {\r\n      responseObject.pageRangesDiff = [];\r\n\r\n      if (responseObject.response.body.PageList.PageRange) {\r\n        var updatedPageRanges = responseObject.response.body.PageList.PageRange;\r\n\r\n        if (!_.isArray(updatedPageRanges)) {\r\n          updatedPageRanges = [updatedPageRanges];\r\n        }\r\n\r\n        updatedPageRanges.forEach(function (pageRange) {\r\n          var range = {\r\n            start: parseInt(pageRange.Start, 10),\r\n            end: parseInt(pageRange.End, 10),\r\n            isCleared: false\r\n          };\r\n\r\n          responseObject.pageRangesDiff.push(range);\r\n        });\r\n      }\r\n\r\n      if (responseObject.response.body.PageList.ClearRange) {\r\n        var clearedPageRanges = responseObject.response.body.PageList.ClearRange;\r\n\r\n        if (!_.isArray(clearedPageRanges)) {\r\n          clearedPageRanges = [clearedPageRanges];\r\n        }\r\n\r\n        clearedPageRanges.forEach(function (pageRange) {\r\n          var range = {\r\n            start: parseInt(pageRange.Start, 10),\r\n            end: parseInt(pageRange.End, 10),\r\n            isCleared: true\r\n          };\r\n\r\n          responseObject.pageRangesDiff.push(range);\r\n        });\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.pageRangesDiff, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Clears a range of pages.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {int}                rangeStart                                  The range start.\r\n* @param {int}                rangeEnd                                    The range end.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.leaseId]                           The target blob lease identifier.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResponse}    callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise \r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.clearPageRange = function (container, blob, rangeStart, rangeEnd, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('clearPageRange', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var request = this._updatePageBlobPagesImpl(container, blob, rangeStart, rangeEnd, BlobConstants.PageWriteOptions.CLEAR, options);\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  self.performRequest(request, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Resizes a page blob.\r\n*\r\n* @this {BlobService}\r\n* @param {string}               container                                   The container name.\r\n* @param {string}               blob                                        The blob name.\r\n* @param {String}               size                                        The size of the page blob, in bytes.\r\n* @param {object}               [options]                                   The request options.\r\n* @param {string}               [options.leaseId]                           The blob lease identifier.\r\n* @param {AccessConditions}     [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}         [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                  [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                  [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                  [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}               [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}                 [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the page information.\r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.resizePageBlob = function (container, blob, size, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('resizePageBlob', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'properties')\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  if (size && size % BlobConstants.PAGE_SIZE !== 0) {\r\n    throw new RangeError(SR.INVALID_PAGE_BLOB_LENGTH);\r\n  }\r\n\r\n  webResource.withHeader(HeaderConstants.BLOB_CONTENT_LENGTH, size);\r\n\r\n  this._setBlobPropertiesHelper({\r\n    webResource: webResource,\r\n    options: options,\r\n    container: container,\r\n    blob: blob,\r\n    callback: callback\r\n  });\r\n\r\n};\r\n\r\n/**\r\n* Sets the page blob's sequence number.\r\n*\r\n* @this {BlobService}\r\n* @param {string}               container                                   The container name.\r\n* @param {string}               blob                                        The blob name.\r\n* @param {SequenceNumberAction} sequenceNumberAction                        A value indicating the operation to perform on the sequence number. \r\n*                                                                           The allowed values are defined in azure.BlobUtilities.SequenceNumberAction.\r\n* @param {string}               sequenceNumber                              The sequence number.  The value of the sequence number must be between 0 and 2^63 - 1.\r\n*                                                                           Set this parameter to null if this operation is an increment action.\r\n* @param {object}               [options]                                   The request options.\r\n* @param {AccessConditions}     [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}         [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                  [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                  [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                  [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}               [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}                 [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the page information.\r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.setPageBlobSequenceNumber = function (container, blob, sequenceNumberAction, sequenceNumber, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setPageBlobSequenceNumber', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  if (sequenceNumberAction === BlobUtilities.SequenceNumberAction.INCREMENT) {\r\n    if (!azureutil.objectIsNull(sequenceNumber)) {\r\n      throw new ArgumentError('sequenceNumber', SR.BLOB_INVALID_SEQUENCE_NUMBER);\r\n    }\r\n  } else {\r\n    if (azureutil.objectIsNull(sequenceNumber)) {\r\n      throw new ArgumentNullError('sequenceNumber', util.format(SR.ARGUMENT_NULL_OR_EMPTY, 'sequenceNumber'));\r\n    }\r\n  }\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'properties')\r\n    .withHeader(HeaderConstants.SEQUENCE_NUMBER_ACTION, sequenceNumberAction);\r\n\r\n  if (sequenceNumberAction !== BlobUtilities.SequenceNumberAction.INCREMENT) {\r\n    webResource.withHeader(HeaderConstants.SEQUENCE_NUMBER, sequenceNumber);\r\n  }\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult = new BlobResult(container, blob);\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n// Block blob methods\r\n\r\n/**\r\n* Uploads a block blob from a stream. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param (Stream)             stream                                        Stream to the data to store.\r\n* @param {int}                streamLength                                  The length of the stream to upload.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The download tracker objects.\r\n* @param {int}                [options.blockSize]                           The size of each block. Maximum is 100MB.\r\n* @param {string}             [options.blockIdPrefix]                       The prefix to be used to generate the block id.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype.createBlockBlobFromStream = function (container, blob, stream, streamLength, optionsOrCallback, callback) {\r\n  return this._createBlobFromStream(container, blob, BlobConstants.BlobTypes.BLOCK, stream, streamLength, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Uploads a block blob from a text string. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {string|object}      text                                          The blob text, as a string or in a Buffer.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.createBlockBlobFromText = function (container, blob, text, optionsOrCallback, callback) {\r\n  return this._createBlobFromText(container, blob, BlobConstants.BlobTypes.BLOCK, text, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Provides a stream to write to a block blob. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n* Please note the `Stream` returned by this API should be used with piping.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {int}                [options.blockSize]                           The size of each block. Maximum is 100MB.\r\n* @param {string}             [options.blockIdPrefix]                       The prefix to be used to generate the block id.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for page blobs and true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {Writable}                                                        A Node.js Writable stream.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* var stream = fs.createReadStream(fileNameTarget).pipe(blobService.createWriteStreamToBlockBlob(containerName, blobName, { blockIdPrefix: 'block' }));\r\n*/\r\nBlobService.prototype.createWriteStreamToBlockBlob = function (container, blob, optionsOrCallback, callback) {\r\n  return this._createWriteStreamToBlob(container, blob, BlobConstants.BlobTypes.BLOCK, 0, false, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Creates a new block to be committed as part of a blob.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             blockId                                   The block identifier.\r\n* @param {string}             container                                 The container name.\r\n* @param {string}             blob                                      The blob name.\r\n* @param {Readable}           readStream                                The Node.js Readable stream.\r\n* @param {int}                streamLength                              The stream length.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {bool}               [options.useTransactionalMD5]             Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.leaseId]                         The target blob lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]         An MD5 hash of the block content. This hash is used to verify the integrity of the block during transport.\r\n* @param {AccessConditions}   [options.accessConditions]                The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResponse}    callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise \r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.createBlockFromStream = function (blockId, container, blob, readStream, streamLength, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createBlockFromStream', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.exists(readStream, 'readStream');\r\n    v.value(streamLength, 'streamLength');\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  if (streamLength > BlobConstants.MAX_BLOCK_BLOB_BLOCK_SIZE) {\r\n    throw new RangeError(SR.INVALID_STREAM_LENGTH);\r\n  } else {\r\n    this._createBlock(blockId, container, blob, null, readStream, streamLength, options, callback);\r\n  }\r\n};\r\n\r\n/**\r\n* Creates a new block to be committed as part of a blob.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             blockId                                   The block identifier.\r\n* @param {string}             container                                 The container name.\r\n* @param {string}             blob                                      The blob name.\r\n* @param {string|buffer}      content                                   The block content.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {bool}               [options.useTransactionalMD5]             Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.leaseId]                         The target blob lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]         An MD5 hash of the block content. This hash is used to verify the integrity of the block during transport. \r\n* @param {AccessConditions}   [options.accessConditions]                The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResponse}    callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise \r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.createBlockFromText = function (blockId, container, blob, content, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createBlockFromText', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var contentLength = (Buffer.isBuffer(content) ? content.length : Buffer.byteLength(content));\r\n\r\n  if (contentLength > BlobConstants.MAX_BLOCK_BLOB_BLOCK_SIZE) {\r\n    throw new RangeError(SR.INVALID_TEXT_LENGTH);\r\n  } else {\r\n    this._createBlock(blockId, container, blob, content, null, contentLength, options, callback);\r\n  }\r\n};\r\n\r\n/**\r\n* Creates a new block to be committed as part of a blob from an URL of an Azure blob or file.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             blockId                                   The block identifier.\r\n* @param {string}             container                                 The container name.\r\n* @param {string}             blob                                      The blob name.\r\n* @param {string}             sourceURL                                 The URL of the source data.\r\n*                                                                       It can point to any Azure Blob or File, that is either public or has a shared access signature attached.\r\n* @param {int}                sourceRangeStart                          The start of the range of bytes(inclusive) that has to be taken from the copy source.\r\n* @param {int}                sourceRangeEnd                            The end of the range of bytes(inclusive) that has to be taken from the copy source.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {string}             [options.leaseId]                         The target blob lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]         An MD5 hash of the block content. This hash is used to verify the integrity of the block during transport. \r\n* @param {AccessConditions}   [options.accessConditions]                The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResponse}    callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise \r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.createBlockFromURL = function (blockId, container, blob, sourceURL, sourceRangeStart, sourceRangeEnd, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createBlockFromURL', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.string(sourceURL, 'sourceURL');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(container, blob);\r\n  \r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'block')\r\n    .withQueryOption(QueryStringConstants.BLOCK_ID, new Buffer(blockId).toString('base64'))\r\n    .withHeader(HeaderConstants.COPY_SOURCE, sourceURL);\r\n\r\n  options.sourceRangeStart = sourceRangeStart;\r\n  options.sourceRangeEnd = sourceRangeEnd;\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Creates a new block to be committed as part of a block blob.\r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {string}             blockId                                   The block identifier.\r\n* @param {string}             container                                 The container name.\r\n* @param {string}             blob                                      The blob name.\r\n* @param {string|buffer}      content                                   The block content.\r\n* @param {Stream}             stream                                    The stream to the data to store.\r\n* @param {int}                length                                    The length of the stream or text to upload.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {bool}               [options.useTransactionalMD5]             Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.leaseId]                         The target blob lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]         An MD5 hash of the block content. This hash is used to verify the integrity of the block during transport.\r\n* @param {AccessConditions}   [options.accessConditions]                The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResponse}    callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise \r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype._createBlock = function (blockId, container, blob, content, stream, length, options, callback) {\r\n  var resourceName = createResourceName(container, blob);\r\n\r\n  var self = this;\r\n  var startCreateBlock = function () {\r\n    var webResource = WebResource.put(resourceName)\r\n      .withQueryOption(QueryStringConstants.COMP, 'block')\r\n      .withQueryOption(QueryStringConstants.BLOCK_ID, new Buffer(blockId).toString('base64'))\r\n      .withHeader(HeaderConstants.CONTENT_LENGTH, length);\r\n\r\n    BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n    var processResponseCallback = function (responseObject, next) {\r\n      var finalCallback = function (returnObject) {\r\n        callback(returnObject.error, returnObject.response);\r\n      };\r\n\r\n      next(responseObject, finalCallback);\r\n    };\r\n\r\n    if (!azureutil.objectIsNull(content)) {\r\n      self.performRequest(webResource, content, options, processResponseCallback);\r\n    } else {\r\n      self.performRequestOutputStream(webResource, stream, options, processResponseCallback);\r\n    }\r\n  };\r\n\r\n  if (azureutil.objectIsNull(options.transactionalContentMD5) && options.useTransactionalMD5) {\r\n    if (!azureutil.objectIsNull(content)) {\r\n      options.transactionalContentMD5 = azureutil.getContentMd5(content);\r\n      startCreateBlock();\r\n    } else {\r\n      azureutil.calculateMD5(stream, length, options, function (internalBuff, contentMD5) {\r\n        options.transactionalContentMD5 = contentMD5;\r\n        content = internalBuff;\r\n        length = internalBuff.length;\r\n        startCreateBlock();\r\n      });\r\n    }\r\n  } else {\r\n    startCreateBlock();\r\n  }\r\n};\r\n\r\n/**\r\n* Writes a blob by specifying the list of block IDs that make up the blob.\r\n* In order to be written as part of a blob, a block must have been successfully written to the server in a prior\r\n* createBlock operation.\r\n* Note: If no valid list is specified in the blockList parameter, blob would be updated with empty content,\r\n* i.e. existing blocks in the blob will be removed, this behavior is kept for backward compatibility consideration.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {object}             blockList                                     The wrapper for block ID list contains block IDs that make up the blob.\r\n*                                                                           Three kinds of list are provided, please choose one to use according to requirement.\r\n*                                                                           For more background knowledge, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-list\r\n* @param {string[]}           [blockList.LatestBlocks]                      The list contains block IDs that make up the blob sequentially.\r\n*                                                                           All the block IDs in this list will be specified within Latest element.\r\n*                                                                           Choose this list to contain block IDs indicates that the Blob service should first search\r\n*                                                                           the uncommitted block list, and then the committed block list for the named block.\r\n* @param {string[]}           [blockList.CommittedBlocks]                   The list contains block IDs that make up the blob sequentially.\r\n*                                                                           All the block IDs in this list will be specified within Committed element.\r\n*                                                                           Choose this list to contain block IDs indicates that the Blob service should only search\r\n*                                                                           the committed block list for the named block.\r\n* @param {string[]}           [blockList.UncommittedBlocks]                 The list contains block IDs that make up the blob sequentially.\r\n*                                                                           All the block IDs in this list will be specified within Uncommitted element.\r\n*                                                                           Choose this list to contain block IDs indicates that the Blob service should only search\r\n*                                                                           the uncommitted block list for the named block.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {string}             [options.leaseId]                             The target blob lease identifier.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* blobService.createBlockFromText(\"sampleBlockName\", containerName, blobName, \"sampleBlockContent\", function(error) {\r\n*   assert.equal(error, null);\r\n*   // In this example, LatestBlocks is used, we hope the Blob service first search\r\n*   // the uncommitted block list, and then the committed block list for the named block \"sampleBlockName\",\r\n*   // and thus make sure the block is with latest content.\r\n*   blobService.commitBlocks(containerName, blobName, { LatestBlocks: [\"sampleBlockName\"] }, function(error) {\r\n*     assert.equal(error, null);\r\n*   });\r\n* });\r\n*\r\n */\r\nBlobService.prototype.commitBlocks = function (container, blob, blockList, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('commitBlocks', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.object(blockList, 'blockList');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var blockListXml = BlockListResult.serialize(blockList);\r\n\r\n  var resourceName = createResourceName(container, blob);\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'blocklist')\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(blockListXml))\r\n    .withBody(blockListXml);\r\n\r\n  BlobResult.setPropertiesFromBlob(webResource, options);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = new BlobResult(container, blob);\r\n    responseObject.blobResult.list = null;\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      responseObject.blobResult.list = blockList;\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Retrieves the list of blocks that have been uploaded as part of a block blob.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {BlockListFilter}    blocklisttype                               The type of block list to retrieve.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.snapshotId]                        The source blob snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The target blob lease identifier.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain\r\n*                                                                         the blocklist information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.listBlocks = function (container, blob, blocklisttype, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('listBlocks', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var resourceName = createResourceName(container, blob);\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'blocklist')\r\n    .withQueryOption(QueryStringConstants.BLOCK_LIST_TYPE, blocklisttype)\r\n    .withQueryOption(QueryStringConstants.SNAPSHOT, options.snapshotId);\r\n\r\n  options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blockListResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.blockListResult = BlockListResult.parse(responseObject.response.body.BlockList);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.blockListResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Generate a random block id prefix\r\n*/\r\nBlobService.prototype.generateBlockIdPrefix = function () {\r\n  var prefix = Math.floor(Math.random() * 0x100000000).toString(16);\r\n  return azureutil.zeroPaddingString(prefix, 8);\r\n};\r\n\r\n/**\r\n* Get a block id according to prefix and block number\r\n*/\r\nBlobService.prototype.getBlockId = function (prefix, number) {\r\n  return prefix + '-' + azureutil.zeroPaddingString(number, 6);\r\n};\r\n\r\n// Append blob methods\r\n\r\n/**\r\n* Creates an empty append blob. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {string}             [options.leaseId]                             The target blob lease identifier.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResponse}    callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise \r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.createOrReplaceAppendBlob = function (container, blob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createOrReplaceAppendBlob', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var resourceName = createResourceName(container, blob);\r\n\r\n  var webResource = WebResource.put(resourceName)\r\n    .withHeader(HeaderConstants.BLOB_TYPE, BlobConstants.BlobTypes.APPEND)\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId)\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, 0);\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Uploads an append blob from a stream. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n* This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks.\r\n* If you are guaranteed to have a single writer scenario, please look at options.absorbConditionalErrorsOnRetry and see if setting this flag to true is acceptable for you.\r\n* If you want to append data to an already existing blob, please look at appendFromStream.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param (Stream)             stream                                        Stream to the data to store.\r\n* @param {int}                streamLength                                  The length of the stream to upload.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The download tracker objects.\r\n* @param {string}             [options.leaseId]                             The lease identifier. \r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype.createAppendBlobFromStream = function (container, blob, stream, streamLength, optionsOrCallback, callback) {\r\n  return this._createBlobFromStream(container, blob, BlobConstants.BlobTypes.APPEND, stream, streamLength, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Uploads an append blob from a text string. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n* This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks.\r\n* If you are guaranteed to have a single writer scenario, please look at options.absorbConditionalErrorsOnRetry and see if setting this flag to true is acceptable for you.\r\n* If you want to append data to an already existing blob, please look at appendFromText.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {string|object}      text                                          The blob text, as a string or in a Buffer.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry.\r\n* @param {string}             [options.leaseId]                             The lease identifier. \r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.createAppendBlobFromText = function (container, blob, text, optionsOrCallback, callback) {\r\n  return this._createBlobFromText(container, blob, BlobConstants.BlobTypes.APPEND, text, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Provides a stream to write to a new append blob. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n* This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks.\r\n* If you are guaranteed to have a single writer scenario, please look at options.absorbConditionalErrorsOnRetry and see if setting this flag to true is acceptable for you.\r\n* Please note the `Stream` returned by this API should be used with piping.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for page blobs and true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResponse}    callback                                      The callback function.\r\n* @return {Writable}                                                        A Node.js Writable stream.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* var stream = fs.createReadStream(fileNameTarget).pipe(blobService.createWriteStreamToAppendBlob(containerName, blobName));\r\n*/\r\nBlobService.prototype.createWriteStreamToNewAppendBlob = function (container, blob, optionsOrCallback, callback) {\r\n  return this._createWriteStreamToBlob(container, blob, BlobConstants.BlobTypes.APPEND, 0, true, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Provides a stream to write to an existing append blob. Assumes that the blob exists. \r\n* If it does not, please create the blob using createAppendBlob before calling this method or use createWriteStreamToNewAppendBlob.\r\n* This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks.\r\n* If you are guaranteed to have a single writer scenario, please look at options.absorbConditionalErrorsOnRetry and see if setting this flag to true is acceptable for you.\r\n* Please note the `Stream` returned by this API should be used with piping.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for page blobs and true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResponse}    callback                                      The callback function.\r\n* @return {Writable}                                                        A Node.js Writable stream.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var blobService = azure.createBlobService();\r\n* var stream = fs.createReadStream(fileNameTarget).pipe(blobService.createWriteStreamToAppendBlob(containerName, blobName));\r\n*/\r\nBlobService.prototype.createWriteStreamToExistingAppendBlob = function (container, blob, optionsOrCallback, callback) {\r\n  return this._createWriteStreamToBlob(container, blob, BlobConstants.BlobTypes.APPEND, 0, false, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Appends to an append blob from a stream. Assumes the blob already exists on the service.\r\n* This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks.\r\n* If you are guaranteed to have a single writer scenario, please look at options.absorbConditionalErrorsOnRetry and see if setting this flag to true is acceptable for you.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param (Stream)             stream                                        Stream to the data to store.\r\n* @param {int}                streamLength                                  The length of the stream to upload.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The download tracker objects.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype.appendFromStream = function (container, blob, stream, streamLength, optionsOrCallback, callback) {\r\n  var options;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { options = o; callback = c; });\r\n\r\n  validate.validateArgs('appendFromStream', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.exists(stream, 'stream');\r\n    v.value(streamLength, 'streamLength');\r\n    v.callback(callback);\r\n  });\r\n\r\n  return this._uploadBlobFromStream(false, container, blob, BlobConstants.BlobTypes.APPEND, stream, streamLength, options, callback);\r\n};\r\n\r\n/**\r\n* Appends to an append blob from a text string. Assumes the blob already exists on the service.\r\n* This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks.\r\n* If you are guaranteed to have a single writer scenario, please look at options.absorbConditionalErrorsOnRetry and see if setting this flag to true is acceptable for you.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {string|object}      text                                          The blob text, as a string or in a Buffer.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                           the blob information.\r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.appendFromText = function (container, blob, text, optionsOrCallback, callback) {\r\n  return this._uploadBlobFromText(false, container, blob, BlobConstants.BlobTypes.APPEND, text, optionsOrCallback, callback);\r\n};\r\n\r\n\r\n/**\r\n* Creates a new block from a read stream to be appended to an append blob.\r\n* If the sequence of data to be appended is important, please use this API strictly in a single writer.\r\n* If you are guaranteed to have a single writer scenario, please look at options.absorbConditionalErrorsOnRetry and see if setting this flag to true is acceptable for you.\r\n* If the sequence of data to be appended is not important, this API can be used in parallel,\r\n* in this case, options.appendPosition can be left without settings.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                 The container name.\r\n* @param {string}             blob                                      The blob name.\r\n* @param {Readable}           readStream                                The Node.js Readable stream.\r\n* @param {int}                streamLength                              The stream length.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]  Specifies whether to absorb the conditional error on retry.\r\n* @param {int}                [options.maxBlobSize]                     The max length in bytes allowed for the append blob to grow to.\r\n* @param {int}                [options.appendPosition]                  The number indicating the byte offset to check for. The append will succeed only if the end position of the blob is equal to this number.\r\n* @param {string}             [options.leaseId]                         The target blob lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]         An MD5 hash of the block content. This hash is used to verify the integrity of the block during transport.\r\n* @param {AccessConditions}   [options.accessConditions]                The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResult}      callback                                  `error` will contain information\r\n*                                                                      if an error occurs; otherwise `[result]{@link BlobResult}` will contain\r\n*                                                                      the blob information.\r\n*                                                                      `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.appendBlockFromStream = function (container, blob, readStream, streamLength, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('appendBlockFromStream', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.exists(readStream, 'readStream');\r\n    v.value(streamLength, 'streamLength');\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  if (streamLength > BlobConstants.MAX_APPEND_BLOB_BLOCK_SIZE) {\r\n    throw new RangeError(SR.INVALID_STREAM_LENGTH);\r\n  } else {\r\n    this._appendBlock(container, blob, null, readStream, streamLength, options, callback);\r\n  }\r\n};\r\n\r\n/**\r\n* Creates a new block from a text to be appended to an append blob.\r\n* If the sequence of data to be appended is important, please use this API strictly in a single writer.\r\n* If you are guaranteed to have a single writer scenario, please look at options.absorbConditionalErrorsOnRetry and see if setting this flag to true is acceptable for you.\r\n* If the sequence of data to be appended is not important, this API can be used in parallel,\r\n* in this case, options.appendPosition can be left without settings.\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                 The container name.\r\n* @param {string}             blob                                      The blob name.\r\n* @param {string|object}      content                                   The block text, as a string or in a Buffer.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]  Specifies whether to absorb the conditional error on retry.\r\n* @param {int}                [options.maxBlobSize]                     The max length in bytes allowed for the append blob to grow to.\r\n* @param {int}                [options.appendPosition]                  The number indicating the byte offset to check for. The append will succeed only if the end position of the blob is equal to this number.\r\n* @param {string}             [options.leaseId]                         The target blob lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]         An MD5 hash of the block content. This hash is used to verify the integrity of the block during transport.\r\n* @param {AccessConditions}   [options.accessConditions]                The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResponse}    callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise \r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype.appendBlockFromText = function (container, blob, content, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('appendBlockFromText', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var contentLength = (Buffer.isBuffer(content) ? content.length : Buffer.byteLength(content));\r\n  if (contentLength > BlobConstants.MAX_APPEND_BLOB_BLOCK_SIZE) {\r\n    throw new RangeError(SR.INVALID_TEXT_LENGTH);\r\n  } else {\r\n    this._appendBlock(container, blob, content, null, contentLength, options, callback);\r\n  }\r\n};\r\n\r\n// Private methods\r\n\r\n/**\r\n* Creates a new blob from a stream. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n*\r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {BlobType}           blobType                                      The blob type.\r\n* @param (Stream)             stream                                        Stream to the data to store.\r\n* @param {int}                streamLength                                  The length of the stream to upload.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The upload tracker objects.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry. (For append blob only)\r\n* @param {string}             [options.blockIdPrefix]                       The prefix to be used to generate the block id. (For block blob only)\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.blobTier]                            For page blobs on premium accounts only. Set the tier of the target blob. Refer to BlobUtilities.BlobTier.PremiumPageBlobTier.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      The callback function.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype._createBlobFromStream = function (container, blob, blobType, stream, streamLength, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('_createBlobFromStream', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.blobTypeIsValid(blobType);\r\n    v.exists(stream, 'stream');\r\n    v.value(streamLength, 'streamLength');\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var self = this;\r\n  var creationCallback = function (createError, createBlob, createResponse) {\r\n    if (createError) {\r\n      callback(createError, createBlob, createResponse);\r\n    } else {\r\n      self._uploadBlobFromStream(true, container, blob, blobType, stream, streamLength, options, callback);\r\n    }\r\n  };\r\n\r\n  this._createBlob(container, blob, blobType, streamLength, options, creationCallback);\r\n\r\n  return options.speedSummary;\r\n};\r\n\r\n/**\r\n* Uploads a block blob or an append blob from a text string. If the blob already exists on the service, it will be overwritten.\r\n* To avoid overwriting and instead throw an error if the blob exists, please pass in an accessConditions parameter in the options object.\r\n*\r\n* @ignore\r\n* \r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {BlobType}           blobType                                      The blob type.\r\n* @param {string|buffer}      content                                       The blob text, as a string or in a Buffer.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry. (For append blob only)\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `result` will contain\r\n*                                                                           information about the blob.\r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype._createBlobFromText = function (container, blob, blobType, content, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('_createBlobFromText', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.blobTypeIsValid(blobType);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var self = this;\r\n  var creationCallback = function (createError, createBlob, createResponse) {\r\n    if (createError) {\r\n      callback(createError, createBlob, createResponse);\r\n    } else {\r\n      self._uploadBlobFromText(true, container, blob, blobType, content, options, callback);\r\n    }\r\n  };\r\n\r\n  var contentLength = azureutil.objectIsNull(content) ? 0 : ((Buffer.isBuffer(content) ? content.length : Buffer.byteLength(content)));\r\n  this._createBlob(container, blob, blobType, contentLength, options, creationCallback);\r\n\r\n  return options.speedSummary;\r\n};\r\n\r\n/**\r\n* Provides a stream to write to a block blob or an append blob.\r\n*\r\n* @ignore\r\n* \r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {BlobType}           blobType                                      The blob type.\r\n* @param {int}                length                                        The blob length.\r\n* @param {bool}               createNewBlob                                 Specifies whether create a new blob.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry. (For append blob only)\r\n* @param {string}             [options.blockSize]                           The size of each block. Maximum is 100MB. (For block blob only)\r\n* @param {string}             [options.blockIdPrefix]                       The prefix to be used to generate the block id. (For block blob only)\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for page blobs and true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.blobTier]                            For page blobs on premium accounts only. Set the tier of the target blob. Refer to BlobUtilities.BlobTier.PremiumPageBlobTier.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResponse}    callback                                      The callback function.\r\n* @return {Writable}                                                        A Node.js Writable stream.\r\n*/\r\nBlobService.prototype._createWriteStreamToBlob = function (container, blob, blobType, length, createNewBlob, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('_createWriteStreamToBlob', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.blobTypeIsValid(blobType);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var sizeLimitation;\r\n  if (blobType === BlobConstants.BlobTypes.BLOCK) {\r\n    // default to true, unless explicitly set to false\r\n    options.storeBlobContentMD5 = options.storeBlobContentMD5 === false ? false : true;\r\n    sizeLimitation = options.blockSize || BlobConstants.DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES;\r\n  } else if (blobType == BlobConstants.BlobTypes.PAGE) {\r\n    sizeLimitation = BlobConstants.DEFAULT_WRITE_PAGE_SIZE_IN_BYTES;\r\n  } else if (blobType == BlobConstants.BlobTypes.APPEND) {\r\n    sizeLimitation = BlobConstants.DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES;\r\n  }\r\n\r\n  var stream = new ChunkStream({ calcContentMd5: options.storeBlobContentMD5 });\r\n  stream._highWaterMark = sizeLimitation;\r\n\r\n  stream.pause(); //Immediately pause the stream in order to wait for the destination to getting ready\r\n\r\n  var self = this;\r\n  var createCallback = function (createError, createBlob, createResponse) {\r\n    if (createError) {\r\n      if (callback) {\r\n        callback(createError, createBlob, createResponse);\r\n      }\r\n    } else {\r\n      self._uploadBlobFromStream(createNewBlob, container, blob, blobType, stream, null, options, function (error, blob, response) {\r\n        if (error) {\r\n          stream.emit('error', error);\r\n        }\r\n\r\n        if (callback) {\r\n          callback(error, blob, response);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  if (createNewBlob === true) {\r\n    this._createBlob(container, blob, blobType, length, options, createCallback);\r\n  } else {\r\n    createCallback();\r\n  }\r\n\r\n  return stream;\r\n};\r\n\r\n/**\r\n* Upload blob content from a stream. Assumes the blob already exists.\r\n*\r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {bool}               isNewBlob                                     Specifies whether the blob is newly created.\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {BlobType}           blobType                                      The blob type.\r\n* @param (Stream)             stream                                        Stream to the data to store.\r\n* @param {int}                streamLength                                  The length of the stream to upload.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The upload tracker objects.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry. (For append blob only)\r\n* @param {string}             [options.blockIdPrefix]                       The prefix to be used to generate the block id. (For block blob only)\r\n* @param {int}                [options.blockSize]                           The size of each block. Maximum is 100MB. (For block blob only)\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      The callback function.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype._uploadBlobFromStream = function (isNewBlob, container, blob, blobType, stream, streamLength, optionsOrCallback, callback) {\r\n  var options;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { options = o; callback = c; });\r\n  options.speedSummary = options.speedSummary || new SpeedSummary(blob);\r\n\r\n  if (blobType === BlobConstants.BlobTypes.BLOCK) {\r\n    // default to true, unless explicitly set to false\r\n    options.storeBlobContentMD5 = options.storeBlobContentMD5 === false ? false : true;\r\n  }\r\n\r\n  stream.pause();\r\n\r\n  var self = this;\r\n  var startUpload = function () {\r\n    var putBlockBlobFromStream = function () {\r\n      if (streamLength > 0 && azureutil.objectIsNull(azureutil.tryGetValueChain(options, ['contentSettings', 'contentMD5'], null)) && options.storeBlobContentMD5) {\r\n        azureutil.calculateMD5(stream, Math.min(self.singleBlobPutThresholdInBytes, streamLength), options, function (internalBuff, contentMD5) {\r\n          azureutil.setObjectInnerPropertyValue(options, ['contentSettings', 'contentMD5'], contentMD5);\r\n          self._putBlockBlob(container, blob, internalBuff, null, internalBuff.length, options, callback);\r\n        });\r\n        stream.resume();\r\n      } else {\r\n        // Stream will resume when it has a pipe destination or a 'data' listener\r\n        self._putBlockBlob(container, blob, null, stream, streamLength, options, callback);\r\n      }\r\n    };\r\n\r\n    if (streamLength === null || streamLength >= self.singleBlobPutThresholdInBytes || blobType !== BlobConstants.BlobTypes.BLOCK) {\r\n      var chunkStream = new ChunkStreamWithStream(stream, { calcContentMd5: options.storeBlobContentMD5 });\r\n      self._uploadContentFromChunkStream(container, blob, blobType, chunkStream, streamLength, options, callback);\r\n    } else {\r\n      putBlockBlobFromStream();\r\n    }\r\n  };\r\n\r\n  if (!isNewBlob) {\r\n    if (options.storeBlobContentMD5 && blobType !== BlobConstants.BlobTypes.BLOCK) {\r\n      throw new Error(SR.MD5_NOT_POSSIBLE);\r\n    }\r\n\r\n    if (blobType === BlobConstants.BlobTypes.APPEND || options.accessConditions) {\r\n      // Do a getBlobProperties right at the beginning for existing blobs and use the user passed in access conditions. \r\n      // So any pre-condition failure on the first block (in a strictly single writer scenario) is caught.\r\n      // This call also helps us get the append position to append to if the user hasn’t specified an access condition.\r\n      this.getBlobProperties(container, blob, options, function (error, properties, response) {\r\n        if (error && !(options.accessConditions && options.accessConditions.EtagNonMatch === '*' && response.statusCode === 400)) {\r\n          callback(error);\r\n        } else {\r\n          if (blobType === BlobConstants.BlobTypes.APPEND) {\r\n            options.appendPosition = properties.contentLength;\r\n          }\r\n\r\n          startUpload();\r\n        }\r\n      });\r\n    } else {\r\n      startUpload();\r\n    }\r\n  } else {\r\n    startUpload();\r\n  }\r\n\r\n  return options.speedSummary;\r\n};\r\n\r\n/**\r\n* Upload blob content from a text. Assumes the blob already exists.\r\n*\r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {bool}               isNewBlob                                     Specifies whether the blob is newly created.\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {BlobType}           blobType                                      The blob type.\r\n* @param (string)             content                                       The blob text, as a string or in a Buffer.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The upload tracker objects.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry. (For append blob only)\r\n* @param {string}             [options.blockIdPrefix]                       The prefix to be used to generate the block id. (For block blob only)\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      The callback function.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype._uploadBlobFromText = function (isNewBlob, container, blob, blobType, content, optionsOrCallback, callback) {\r\n  var options;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { options = o; callback = c; });\r\n  options.speedSummary = options.speedSummary || new SpeedSummary(blob);\r\n  options[HeaderConstants.CONTENT_TYPE] = (options.contentSettings && options.contentSettings.contentType) || 'text/plain;charset=\"utf-8\"';\r\n\r\n  var self = this;\r\n  var startUpload = function () {\r\n    var operationFunc;\r\n    var length = azureutil.objectIsNull(content) ? 0 : (Buffer.isBuffer(content) ? content.length : Buffer.byteLength(content));\r\n\r\n    if (blobType === BlobConstants.BlobTypes.BLOCK) {\r\n      // default to true, unless explicitly set to false\r\n      options.storeBlobContentMD5 = options.storeBlobContentMD5 === false ? false : true;\r\n      operationFunc = self._putBlockBlob;\r\n\r\n      if (length > BlobConstants.MAX_SINGLE_UPLOAD_BLOB_SIZE_IN_BYTES) {\r\n        throw new RangeError(SR.INVALID_BLOB_LENGTH);\r\n      }\r\n    } else if (blobType === BlobConstants.BlobTypes.APPEND) {\r\n      operationFunc = self._appendBlock;\r\n\r\n      if (length > BlobConstants.MAX_APPEND_BLOB_BLOCK_SIZE) {\r\n        throw new RangeError(SR.INVALID_TEXT_LENGTH);\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (error, blobResult, response) {\r\n      if (blobType !== BlobConstants.BlobTypes.BLOCK) {\r\n        self.setBlobProperties(container, blob, options.contentSettings, options, function (error, blob, response) {\r\n          blob = extend(false, blob, blobResult);\r\n          callback(error, blob, response);\r\n        });\r\n      } else {\r\n        callback(error, blobResult, response);\r\n      }\r\n    };\r\n\r\n    operationFunc.call(self, container, blob, content, null, length, options, finalCallback);\r\n  };\r\n\r\n  if (!isNewBlob) {\r\n    if (options.storeBlobContentMD5 && blobType !== BlobConstants.BlobTypes.BLOCK) {\r\n      throw new Error(SR.MD5_NOT_POSSIBLE);\r\n    }\r\n\r\n    if (blobType === BlobConstants.BlobTypes.APPEND || options.accessConditions) {\r\n      // Do a getBlobProperties right at the beginning for existing blobs and use the user passed in access conditions. \r\n      // So any pre-condition failure on the first block (in a strictly single writer scenario) is caught.\r\n      // This call also helps us get the append position to append to if the user hasn’t specified an access condition.\r\n      this.getBlobProperties(container, blob, options, function (error, properties) {\r\n        if (error) {\r\n          callback(error);\r\n        } else {\r\n          if (blobType === BlobConstants.BlobTypes.APPEND) {\r\n            options.appendPosition = properties.contentLength;\r\n          }\r\n\r\n          startUpload();\r\n        }\r\n      });\r\n    }\r\n  } else {\r\n    if (!azureutil.objectIsNull(content) && azureutil.objectIsNull(azureutil.tryGetValueChain(options, ['contentSettings', 'contentMD5'], null)) && options.storeBlobContentMD5) {\r\n      azureutil.setObjectInnerPropertyValue(options, ['contentSettings', 'contentMD5'], azureutil.getContentMd5(content));\r\n    }\r\n    startUpload();\r\n  }\r\n};\r\n\r\n/**\r\n* Uploads a block blob from a stream.\r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {string}             text                                          The blob text.\r\n* @param (Stream)             stream                                        Stream to the data to store.\r\n* @param {int}                length                                        The length of the stream or text to upload.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]             The MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads. The default value is true for block blobs.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `result` will contain\r\n*                                                                           information about the blob.\r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype._putBlockBlob = function (container, blob, text, stream, length, options, callback) {\r\n  if (!options.speedSummary) {\r\n    options.speedSummary = new SpeedSummary(blob);\r\n  }\r\n\r\n  var speedSummary = options.speedSummary;\r\n  speedSummary.totalSize = length;\r\n\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withHeader(HeaderConstants.CONTENT_TYPE, 'application/octet-stream')\r\n    .withHeader(HeaderConstants.BLOB_TYPE, BlobConstants.BlobTypes.BLOCK)\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, length);\r\n\r\n  if (!azureutil.objectIsNull(text) && azureutil.objectIsNull(options.transactionalContentMD5) && options.useTransactionalMD5) {\r\n    options.transactionalContentMD5 = azureutil.getContentMd5(text);\r\n  }\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult = new BlobResult(container, blob);\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      if (options.metadata) {\r\n        responseObject.blobResult.metadata = options.metadata;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      if (!returnObject || !returnObject.error) {\r\n        speedSummary.increment(length);\r\n      }\r\n      callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  if (!azureutil.objectIsNull(text)) {\r\n    this.performRequest(webResource, text, options, processResponseCallback);\r\n  } else {\r\n    this.performRequestOutputStream(webResource, stream, options, processResponseCallback);\r\n  }\r\n\r\n  return options.speedSummary;\r\n};\r\n\r\n/**\r\n* Appends a new block to an append blob.\r\n* \r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                 The container name.\r\n* @param {string}             blob                                      The blob name.\r\n* @param {string|buffer}      content                                   The block content.\r\n* @param (Stream)             stream                                    The stream to the data to store.\r\n* @param {int}                length                                    The length of the stream or content to upload.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]  Specifies whether to absorb the conditional error on retry.\r\n* @param {int}                [options.maxBlobSize]                     The max length in bytes allowed for the append blob to grow to.\r\n* @param {int}                [options.appendPosition]                  The number indicating the byte offset to check for. The append will succeed only if the end position of the blob is equal to this number.\r\n* @param {string}             [options.leaseId]                         The target blob lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]         The blob’s MD5 hash. This hash is used to verify the integrity of the blob during transport.\r\n* @param {bool}               [options.useTransactionalMD5]             Calculate and send/validate content MD5 for transactions.\r\n* @param {AccessConditions}   [options.accessConditions]                The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResponse}    callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise \r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype._appendBlock = function (container, blob, content, stream, length, options, callback) {\r\n  var speedSummary = options.speedSummary || new SpeedSummary(blob);\r\n  speedSummary.totalSize = length;\r\n\r\n  var self = this;\r\n  var startAppendBlock = function () {\r\n    var resourceName = createResourceName(container, blob);\r\n\r\n    var webResource = WebResource.put(resourceName)\r\n      .withQueryOption(QueryStringConstants.COMP, 'appendblock')\r\n      .withHeader(HeaderConstants.CONTENT_LENGTH, length)\r\n      .withHeader(HeaderConstants.BLOB_CONDITION_MAX_SIZE, options.maxBlobSize)\r\n      .withHeader(HeaderConstants.BLOB_CONDITION_APPEND_POSITION, options.appendPosition);\r\n\r\n    BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n    var processResponseCallback = function (responseObject, next) {\r\n      responseObject.blobResult = null;\r\n      if (!responseObject.error) {\r\n        responseObject.blobResult = new BlobResult(container, blob);\r\n        responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      }\r\n\r\n      var finalCallback = function (returnObject) {\r\n        if (!returnObject || !returnObject.error) {\r\n          speedSummary.increment(length);\r\n        }\r\n        callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n      };\r\n\r\n      next(responseObject, finalCallback);\r\n    };\r\n\r\n    if (!azureutil.objectIsNull(content)) {\r\n      self.performRequest(webResource, content, options, processResponseCallback);\r\n    } else {\r\n      self.performRequestOutputStream(webResource, stream, options, processResponseCallback);\r\n    }\r\n  };\r\n\r\n  if (azureutil.objectIsNull(options.transactionalContentMD5) && options.useTransactionalMD5) {\r\n    if (!azureutil.objectIsNull(content)) {\r\n      options.transactionalContentMD5 = azureutil.getContentMd5(content);\r\n      startAppendBlock();\r\n    } else {\r\n      azureutil.calculateMD5(stream, length, options, function (internalBuff, contentMD5) {\r\n        options.transactionalContentMD5 = contentMD5;\r\n        content = internalBuff;\r\n        length = internalBuff.length;\r\n        startAppendBlock();\r\n      });\r\n    }\r\n  } else {\r\n    startAppendBlock();\r\n  }\r\n\r\n  return options.speedSummary;\r\n};\r\n\r\n/**\r\n* Creates and dispatches lease requests.\r\n* @ignore\r\n* \r\n* @this {BlobService}\r\n* @param {object}             webResource                             The web resource.\r\n* @param {string}             container                               The container name.\r\n* @param {string}             blob                                    The blob name.\r\n* @param {string}             leaseId                                 The lease identifier. Required to renew, change or release the lease.\r\n* @param {string}             leaseAction                             The lease action (BlobConstants.LeaseOperation.*). Required.\r\n* @param {object}             userOptions                             The request options.\r\n* @param {int}                [userOptions.leaseBreakPeriod]          The lease break period.\r\n* @param {string}             [userOptions.leaseDuration]             The lease duration. Default is never to expire.\r\n* @param {string}             [userOptions.proposedLeaseId]           The proposed lease identifier. This is required for the CHANGE lease action.\r\n* @param {LocationMode}       [userOptions.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {AccessConditions}   [options.accessConditions]              The access conditions.\r\n* @param {int}                [userOptions.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [userOptions.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {Function(error, lease, response)}  callback                 `error` will contain information\r\n*                                                                     if an error occurs; otherwise `lease` will contain\r\n*                                                                     the lease information.\r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype._leaseImpl = function (container, blob, leaseId, leaseAction, options, callback) {\r\n  var webResource;\r\n  if (!azureutil.objectIsNull(blob)) {\r\n    validate.validateArgs('_leaseImpl', function (v) {\r\n      v.string(blob, 'blob');\r\n    });\r\n    var resourceName = createResourceName(container, blob);\r\n    webResource = WebResource.put(resourceName);\r\n  } else {\r\n    webResource = WebResource.put(container)\r\n      .withQueryOption(QueryStringConstants.RESTYPE, 'container');\r\n  }\r\n\r\n  webResource.withQueryOption(QueryStringConstants.COMP, 'lease')\r\n    .withHeader(HeaderConstants.LEASE_ID, leaseId)\r\n    .withHeader(HeaderConstants.LEASE_ACTION, leaseAction.toLowerCase())\r\n    .withHeader(HeaderConstants.LEASE_BREAK_PERIOD, options.leaseBreakPeriod)\r\n    .withHeader(HeaderConstants.PROPOSED_LEASE_ID, options.proposedLeaseId)\r\n    .withHeader(HeaderConstants.LEASE_DURATION, options.leaseDuration);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.leaseResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.leaseResult = new LeaseResult(container, blob);\r\n      responseObject.leaseResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.leaseResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Updates a page blob from text.\r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {string}             text                                        The text string.\r\n* @param {Readable}           readStream                                  The Node.js Readable stream.\r\n* @param {int}                rangeStart                                  The range start.\r\n* @param {int}                rangeEnd                                    The range end.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.leaseId]                           The target blob lease identifier.\r\n* @param {string}             [options.transactionalContentMD5]           An MD5 hash of the page content. This hash is used to verify the integrity of the page during transport. \r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {Function(error, pageBlob, response)}  callback                  `error` will contain information\r\n*                                                                         if an error occurs; otherwise `pageBlob` will contain\r\n*                                                                         the blob information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype._createPages = function (container, blob, text, readStream, rangeStart, rangeEnd, options, callback) {\r\n  var request = this._updatePageBlobPagesImpl(container, blob, rangeStart, rangeEnd, BlobConstants.PageWriteOptions.UPDATE, options);\r\n\r\n  // At this point, we have already validated that the range is less than 4MB. Therefore, we just need to calculate the contentMD5 if required.\r\n  // Even when this is called from the createPagesFromStream method, it is pre-buffered and called with text.\r\n  if (!azureutil.objectIsNull(text) && azureutil.objectIsNull(options.transactionalContentMD5) && options.useTransactionalMD5) {\r\n    request.withHeader(HeaderConstants.CONTENT_MD5, azureutil.getContentMd5(text));\r\n  }\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult = new BlobResult(container, blob);\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  if (!azureutil.objectIsNull(text)) {\r\n    this.performRequest(request, text, options, processResponseCallback);\r\n  } else {\r\n    this.performRequestOutputStream(request, readStream, options, processResponseCallback);\r\n  }\r\n};\r\n\r\n/**\r\n* @ignore\r\n*/\r\nBlobService.prototype._updatePageBlobPagesImpl = function (container, blob, rangeStart, rangeEnd, writeMethod, options) {\r\n  if (rangeStart && rangeStart % BlobConstants.PAGE_SIZE !== 0) {\r\n    throw new RangeError(SR.INVALID_PAGE_START_OFFSET);\r\n  }\r\n\r\n  if (rangeEnd && (rangeEnd + 1) % BlobConstants.PAGE_SIZE !== 0) {\r\n    throw new RangeError(SR.INVALID_PAGE_END_OFFSET);\r\n  }\r\n\r\n  // this is necessary if this is called from _uploadContentFromChunkStream->_createPages\r\n  if (!options) {\r\n    options = {};\r\n  }\r\n\r\n  options.rangeStart = rangeStart;\r\n  options.rangeEnd = rangeEnd;\r\n\r\n  options.contentLength = writeMethod === BlobConstants.PageWriteOptions.UPDATE ? (rangeEnd - rangeStart) + 1 : 0;\r\n\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'page')\r\n    .withHeader(HeaderConstants.CONTENT_TYPE, 'application/octet-stream')\r\n    .withHeader(HeaderConstants.PAGE_WRITE, writeMethod);\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  return webResource;\r\n};\r\n\r\n/**\r\n* Uploads blob content from a stream.\r\n* For block blob, it creates a new block to be committed.\r\n* For page blob, it writes a range of pages.\r\n* For append blob, it appends a new block.\r\n*\r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                     The container name.\r\n* @param {string}             blob                                          The blob name.\r\n* @param {string}             blobType                                      The blob type.\r\n* @param (Stream)             stream                                        Stream to the data to store.\r\n* @param {int}                streamLength                                  The length of the stream to upload.\r\n* @param {object|function}    [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The download tracker objects;\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.absorbConditionalErrorsOnRetry]      Specifies whether to absorb the conditional error on retry. (For append blob only)\r\n* @param {int}                [options.maxBlobSize]                         The max length in bytes allowed for the append blob to grow to.\r\n* @param {int}                [options.appendPosition]                      The number indicating the byte offset to check for. The append will succeed only if the end position of the blob is equal to this number.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.blockIdPrefix]                       The prefix to be used to generate the block id. (For block blob only)\r\n* @param {int}                [options.blockSize]                           The size of each block. Maximum is 100MB. (For block blob only)\r\n* @param {string}             [options.leaseId]                             The lease identifier.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {bool}               [options.storeBlobContentMD5]                 Specifies whether the blob's ContentMD5 header should be set on uploads.\r\n* @param {object}             [options.contentSettings]                     The content settings of the blob.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the blob. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the blob.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The Blob service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The blob's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The blob's MD5 hash.\r\n* @param {AccessConditions}   [options.accessConditions]                    The access conditions.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {function(error, null)}  callback                                  The callback function.\r\n* @return {SpeedSummary}\r\n*/\r\n\r\nBlobService.prototype._uploadContentFromChunkStream = function (container, blob, blobType, chunkStream, streamLength, options, callback) {\r\n  this.logger.debug(util.format('_uploadContentFromChunkStream for blob %s', blob));\r\n\r\n  var apiName;\r\n  var isBlockBlobUpload;\r\n  var isPageBlobUpload;\r\n  var isAppendBlobUpload;\r\n  var sizeLimitation;\r\n  var originalContentMD5 = azureutil.tryGetValueChain(options, ['contentSettings', 'contentMD5'], null);\r\n  var parallelOperationThreadCount = options.parallelOperationThreadCount || this.parallelOperationThreadCount;\r\n\r\n  if (blobType == BlobConstants.BlobTypes.BLOCK) {\r\n    apiName = 'createBlockFromText';\r\n    isBlockBlobUpload = true;\r\n\r\n    // BlockBlob can only have 50000 blocks in maximum\r\n    var minBlockSize = Math.ceil(streamLength / 50000);\r\n    if (options.blockSize) {\r\n      if (options.blockSize < minBlockSize) {\r\n        // options.blockSize is less than the minBlockSize, error callback        \r\n        var error = new ArgumentError('options.blockSize', util.format('The minimum blockSize is %s and the provided blockSize %s is too small.', minBlockSize, options.blockSize));\r\n        callback(error);\r\n        return;\r\n      } else {\r\n        sizeLimitation = options.blockSize;\r\n      }\r\n    } else {\r\n      // 4MB minimum for auto-calculated block size\r\n      sizeLimitation = Math.max(minBlockSize, BlobConstants.DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES);\r\n    }\r\n  } else if (blobType == BlobConstants.BlobTypes.PAGE) {\r\n    apiName = '_createPages';\r\n    isPageBlobUpload = true;\r\n    sizeLimitation = BlobConstants.DEFAULT_WRITE_PAGE_SIZE_IN_BYTES;\r\n  } else if (blobType == BlobConstants.BlobTypes.APPEND) {\r\n    apiName = 'appendBlockFromText';\r\n    isAppendBlobUpload = true;\r\n    parallelOperationThreadCount = 1;\r\n    sizeLimitation = BlobConstants.DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES;\r\n  } else {\r\n    var error = new ArgumentError('blobType', util.format('Unknown blob type %s', blobType));\r\n    callback(error);\r\n    return;\r\n  }\r\n\r\n  chunkStream._highWaterMark = sizeLimitation;\r\n\r\n  this._setOperationExpiryTime(options);\r\n\r\n  // initialize the speed summary\r\n  var speedSummary = options.speedSummary || new SpeedSummary(blob);\r\n  speedSummary.totalSize = streamLength;\r\n\r\n  // initialize chunk allocator\r\n  var allocator = new ChunkAllocator(sizeLimitation, parallelOperationThreadCount, { logger: this.logger });\r\n  chunkStream.setMemoryAllocator(allocator);\r\n  chunkStream.setOutputLength(streamLength);\r\n\r\n  // if this is a FileReadStream, set the allocator on that stream\r\n  if (chunkStream._stream && chunkStream._stream.setMemoryAllocator) {\r\n    var fileReadStreamAllocator = new ChunkAllocator(chunkStream._stream._highWaterMark, parallelOperationThreadCount, { logger: this.logger });      \r\n    chunkStream._stream.setMemoryAllocator(fileReadStreamAllocator);\r\n  }\r\n\r\n  // initialize batch operations\r\n  var batchOperations = new BatchOperation(apiName, {\r\n    callInOrder: isAppendBlobUpload,\r\n    callbackInOrder: isAppendBlobUpload,\r\n    logger: this.logger,\r\n    enableReuseSocket: this.defaultEnableReuseSocket,\r\n    operationMemoryUsage: sizeLimitation\r\n  });\r\n  batchOperations.setConcurrency(parallelOperationThreadCount);\r\n\r\n  // initialize options\r\n  var rangeOptions = {\r\n    leaseId: options.leaseId,\r\n    timeoutIntervalInMs: options.timeoutIntervalInMs,\r\n    clientRequestTimeoutInMs: options.clientRequestTimeoutInMs,\r\n    operationExpiryTime: options.operationExpiryTime,\r\n    maxBlobSize: options.maxBlobSize,\r\n    appendPosition: options.appendPosition || 0,\r\n    initialAppendPosition: options.appendPosition || 0,\r\n    absorbConditionalErrorsOnRetry: options.absorbConditionalErrorsOnRetry\r\n  };\r\n\r\n  // initialize block blob variables\r\n  var blockIdPrefix = options.blockIdPrefix || this.generateBlockIdPrefix();\r\n  var blockCount = 0;\r\n  var blockIds = [];\r\n  var blobResult = {};\r\n\r\n  var self = this;\r\n  chunkStream.on('data', function (data, range) {\r\n    var operation = null;\r\n    var full = false;\r\n    var autoIncrement = speedSummary.getAutoIncrementFunction(data.length);\r\n\r\n    if (data.length > sizeLimitation) {\r\n      throw new RangeError(util.format(SR.EXCEEDED_SIZE_LIMITATION, sizeLimitation, data.length));\r\n    }\r\n\r\n    if (options.useTransactionalMD5) {\r\n      //calculate content md5 for the current uploading block data\r\n      var contentMD5 = azureutil.getContentMd5(data);\r\n      rangeOptions.transactionalContentMD5 = contentMD5;\r\n    }\r\n\r\n    var checkLengthLimit = function () {\r\n      if (!streamLength) return true;\r\n      if (range.start >= streamLength) {\r\n        self.logger.debug(util.format('Stop uploading data from %s bytes to %s bytes to blob %s because of limit %s', range.start, range.end, blob, streamLength));\r\n        chunkStream.stop();\r\n        return false;\r\n      } else if (range.end >= streamLength) {\r\n        self.logger.debug(util.format('Clip uploading data from %s bytes to %s bytes to blob %s because of limit %s', range.start, range.end, blob, streamLength));\r\n        range.end = streamLength - 1;\r\n        data = data.slice(0, streamLength - range.start);\r\n        if (options.useTransactionalMD5) {\r\n          rangeOptions.transactionalContentMD5 = azureutil.getContentMd5(data);\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    var uploadBlockBlobChunk = function () {\r\n      if (!checkLengthLimit()) return;\r\n      var blockId = self.getBlockId(blockIdPrefix, blockCount);\r\n      blockIds.push(blockId);\r\n\r\n      operation = new BatchOperation.RestOperation(self, apiName, blockId, container, blob, data, rangeOptions, function (error) {\r\n        if (!error) {\r\n          autoIncrement();\r\n        } else {\r\n          self.logger.debug(util.format('Stop uploading data as error happens. Error: %s', util.inspect(error)));\r\n          chunkStream.stop();\r\n        }\r\n        allocator.releaseBuffer(data);\r\n        data = null;\r\n      });\r\n\r\n      blockCount++;\r\n    };\r\n\r\n    var uploadPageBlobChunk = function () {\r\n      if (!checkLengthLimit()) return;\r\n\r\n      if (azureutil.isBufferAllZero(data)) {\r\n        self.logger.debug(util.format('Skip upload data from %s bytes to %s bytes to blob %s', range.start, range.end, blob));\r\n        speedSummary.increment(data.length);\r\n      } else {\r\n        self.logger.debug(util.format('Upload data from %s bytes to %s bytes to blob %s', range.start, range.end, blob));\r\n        operation = new BatchOperation.RestOperation(self, apiName, container, blob, data, null, range.start, range.end, rangeOptions, function (error) {\r\n          if (!error) {\r\n            autoIncrement();\r\n          } else {\r\n            self.logger.debug(util.format('Stop uploading data as error happens. Error: %s', util.inspect(error)));\r\n            chunkStream.stop();\r\n          }\r\n          allocator.releaseBuffer(data);\r\n          data = null;\r\n        });\r\n      }\r\n    };\r\n\r\n    var uploadAppendBlobChunk = function () {\r\n      if (!checkLengthLimit()) return;\r\n\r\n      rangeOptions.appendPosition = Number(rangeOptions.initialAppendPosition) + Number(range.start);\r\n\r\n      // We cannot differentiate between max size condition failing only in the retry versus failing in the first attempt and retry.  \r\n      // So we will eliminate the latter and handle the former in the append operation callback.\r\n      if (options.maxBlobSize && rangeOptions.appendPosition + data.length > options.maxBlobSize) {\r\n        throw new Error(SR.MAX_BLOB_SIZE_CONDITION_NOT_MEET);\r\n      }\r\n\r\n      operation = new BatchOperation.RestOperation(self, apiName, container, blob, data, rangeOptions, function (error, currentBlob) {\r\n        if (!error) {\r\n          autoIncrement();\r\n        } else {\r\n          self.logger.debug(util.format('Stop uploading data as error happens. Error: %s', util.inspect(error)));\r\n          chunkStream.stop();\r\n        }\r\n        blobResult = currentBlob;\r\n        allocator.releaseBuffer(data);\r\n        data = null;\r\n      });\r\n    };\r\n\r\n    if (isBlockBlobUpload) {\r\n      uploadBlockBlobChunk();\r\n    } else if (isAppendBlobUpload) {\r\n      uploadAppendBlobChunk();\r\n    } else if (isPageBlobUpload) {\r\n      uploadPageBlobChunk();\r\n    }\r\n\r\n    if (operation) {\r\n      full = batchOperations.addOperation(operation);\r\n      operation = null;\r\n\r\n      if (full) {\r\n        self.logger.debug('File stream paused');\r\n        chunkStream.pause();\r\n      }\r\n    }\r\n  });\r\n\r\n  chunkStream.on('end', function () {\r\n    self.logger.debug(util.format('File read stream ended for blob %s', blob));\r\n    batchOperations.enableComplete();\r\n  });\r\n\r\n  batchOperations.on('drain', function () {\r\n    self.logger.debug('file stream resume');\r\n    chunkStream.resume();\r\n  });\r\n\r\n  batchOperations.on('end', function (error) {\r\n    self.logger.debug('batch operations commited');\r\n\r\n    speedSummary = null;\r\n    if (error) {\r\n      callback(error);\r\n      return;\r\n    }\r\n\r\n    if (originalContentMD5) {\r\n      options.contentSettings.contentMD5 = originalContentMD5;\r\n    } else if (options.storeBlobContentMD5) {\r\n      var contentMD5 = chunkStream.getContentMd5('base64');\r\n      azureutil.setObjectInnerPropertyValue(options, ['contentSettings', 'contentMD5'], contentMD5);\r\n    }\r\n\r\n    if (isBlockBlobUpload) {\r\n      //commit block list\r\n      var blockList = { 'UncommittedBlocks': blockIds };\r\n      self.commitBlocks(container, blob, blockList, options, function (error, blockList, response) {\r\n        self.logger.debug(util.format('Blob %s committed', blob));\r\n\r\n        if (error) {\r\n          chunkStream.finish();\r\n\r\n          callback(error);\r\n        } else {\r\n          blobResult['commmittedBlocks'] = blockIds;\r\n\r\n          chunkStream.finish();\r\n          callback(error, blobResult, response);\r\n        }\r\n      });\r\n    } else {\r\n      // upload page blob or append blob completely\r\n      var blobProperties = options.contentSettings;\r\n      self.setBlobProperties(container, blob, blobProperties, function (error, blob, response) {\r\n        chunkStream.finish();\r\n        blob = extend(false, blob, blobResult);\r\n        callback(error, blob, response);\r\n      });\r\n    }\r\n  });\r\n\r\n  return speedSummary;\r\n};\r\n\r\n/**\r\n* Checks whether or not a container exists on the service.\r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                         The container name.\r\n* @param {string}             primaryOnly                                       If true, the request will be executed against the primary storage location.\r\n* @param {object}             [options]                                         The request options.\r\n* @param {string}             [options.leaseId]                                 The lease identifier.\r\n* @param {LocationMode}       [options.locationMode]                            Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                     The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]                The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]                The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                         A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                       Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                               The default value is false.\r\n* @param {Function(error, result, response)}  callback                          `error` will contain information\r\n*                                                                               if an error occurs; otherwise `result` will contain\r\n*                                                                               the container information including `exists` boolean member. \r\n*                                                                               `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype._doesContainerExist = function (container, primaryOnly, options, callback) {\r\n  var webResource = WebResource.head(container)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'container')\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  if (primaryOnly === false) {\r\n    options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  }\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.containerResult = new ContainerResult(container);\r\n    if (!responseObject.error) {\r\n      responseObject.containerResult.exists = true;\r\n      responseObject.containerResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n\r\n    } else if (responseObject.error && responseObject.error.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound) {\r\n      responseObject.error = null;\r\n      responseObject.containerResult.exists = false;\r\n      responseObject.response.isSuccessful = true;\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.containerResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Checks whether or not a blob exists on the service.\r\n* @ignore\r\n*\r\n* @this {BlobService}\r\n* @param {string}             container                                         The container name.\r\n* @param {string}             blob                                              The blob name.\r\n* @param {string}             primaryOnly                                       If true, the request will be executed against the primary storage location.\r\n* @param {object}             [options]                                         The request options.\r\n* @param {string}             [options.snapshotId]                              The snapshot identifier.\r\n* @param {string}             [options.leaseId]                                 The lease identifier.\r\n* @param {LocationMode}       [options.locationMode]                            Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                     The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]                The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]                The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                         A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                       Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                               The default value is false.\r\n* @param {Function(error, result, response)}  callback                          `error` will contain information\r\n*                                                                               if an error occurs; otherwise `result` will contain \r\n*                                                                               the blob information including `exists` boolean member. \r\n*                                                                               `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype._doesBlobExist = function (container, blob, primaryOnly, options, callback) {\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.head(resourceName)\r\n    .withQueryOption(QueryStringConstants.SNAPSHOT, options.snapshotId)\r\n    .withHeader(HeaderConstants.LEASE_ID, options.leaseId);\r\n\r\n  if (primaryOnly === false) {\r\n    options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  }\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = new BlobResult(container, blob);\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult.exists = true;\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n\r\n    } else if (responseObject.error && responseObject.error.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound) {\r\n      responseObject.error = null;\r\n      responseObject.blobResult.exists = false;\r\n      responseObject.response.isSuccessful = true;\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* @ignore\r\n*/\r\nBlobService.prototype._setBlobPropertiesHelper = function (settings) {\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult = new BlobResult(settings.container, settings.blob);\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      settings.callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(settings.webResource, null, settings.options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* @ignore\r\n*/\r\nBlobService.prototype._validateLengthAndMD5 = function (options, responseObject) {\r\n  var storedMD5 = responseObject.response.headers[Constants.HeaderConstants.CONTENT_MD5];\r\n  var contentLength;\r\n\r\n  if (!azureutil.objectIsNull(responseObject.response.headers[Constants.HeaderConstants.CONTENT_LENGTH])) {\r\n    contentLength = parseInt(responseObject.response.headers[Constants.HeaderConstants.CONTENT_LENGTH], 10);\r\n  }\r\n\r\n  // If the user has not specified this option, the default value should be false.\r\n  if (azureutil.objectIsNull(options.disableContentMD5Validation)) {\r\n    options.disableContentMD5Validation = false;\r\n  }\r\n\r\n  // None of the below cases should be retried. So set the error in every case so the retry policy filter handle knows that it shouldn't be retried.\r\n  if (options.disableContentMD5Validation === false && options.useTransactionalMD5 === true && azureutil.objectIsNull(storedMD5)) {\r\n    responseObject.error = new StorageError(SR.MD5_NOT_PRESENT_ERROR);\r\n    responseObject.retryable = false;\r\n  }\r\n\r\n  // Validate length and if required, MD5.\r\n  // If getBlobToText called this method, then the responseObject.length and responseObject.contentMD5 are not set. Calculate them first using responseObject.response.body and then validate.\r\n  if (azureutil.objectIsNull(responseObject.length)) {\r\n    if (typeof responseObject.response.body == 'string') {\r\n      responseObject.length = Buffer.byteLength(responseObject.response.body);\r\n    } else if (Buffer.isBuffer(responseObject.response.body)) {\r\n      responseObject.length = responseObject.response.body.length;\r\n    }\r\n  }\r\n\r\n  if (!azureutil.objectIsNull(contentLength) && responseObject.length !== contentLength) {\r\n    responseObject.error = new Error(SR.CONTENT_LENGTH_MISMATCH);\r\n    responseObject.retryable = false;\r\n  }\r\n\r\n  if (options.disableContentMD5Validation === false && azureutil.objectIsNull(responseObject.contentMD5)) {\r\n    responseObject.contentMD5 = azureutil.getContentMd5(responseObject.response.body);\r\n  }\r\n\r\n  if (options.disableContentMD5Validation === false && !azureutil.objectIsNull(storedMD5) && storedMD5 !== responseObject.contentMD5) {\r\n    responseObject.error = new Error(util.format(SR.HASH_MISMATCH, storedMD5, responseObject.contentMD5));\r\n    responseObject.retryable = false;\r\n  }\r\n};\r\n\r\n/**\r\n* @ignore\r\n*/\r\nBlobService.prototype._setRangeContentMD5Header = function (webResource, options) {\r\n  if (!azureutil.objectIsNull(options.rangeStart) && options.useTransactionalMD5) {\r\n    if (azureutil.objectIsNull(options.rangeEnd)) {\r\n      throw new ArgumentNullError('options.rangeEndHeader', util.format(SR.ARGUMENT_NULL_OR_EMPTY, options.rangeEndHeader));\r\n    }\r\n\r\n    var size = parseInt(options.rangeEnd, 10) - parseInt(options.rangeStart, 10) + 1;\r\n    if (size > BlobConstants.MAX_RANGE_GET_SIZE_WITH_MD5) {\r\n      throw new ArgumentError('options', SR.INVALID_RANGE_FOR_MD5);\r\n    } else {\r\n      webResource.withHeader(HeaderConstants.RANGE_GET_CONTENT_MD5, 'true');\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n* Downloads a blockblob, pageblob or appendblob into a range stream.\r\n* @ignore\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {string}             blobType                                    The type of blob to download: block blob, page blob or append blob.\r\n* @param {Writable}           writeStream                                 The Node.js Writable stream.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                      The download tracker objects.\r\n* @param {int}                [options.parallelOperationThreadCount]      The number of parallel operations that may be performed when uploading.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the blob in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the blob in the specified range.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading blobs.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `result` will contain the blob information.\r\n*                                                                         `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*/\r\nBlobService.prototype._getBlobToRangeStream = function (container, blob, blobType, writeStream, optionsOrCallback, callback) {\r\n  var options;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { options = o; callback = c; });\r\n\r\n  validate.validateArgs('_getBlobToRangeStream', function (v) {\r\n    v.string(container, 'container');\r\n    v.string(blob, 'blob');\r\n    v.containerNameIsValid(container);\r\n    v.blobNameIsValid(container, blob);\r\n    v.blobTypeIsValid(blobType);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var rangeStream = null;\r\n  var isPageBlobDownload = true;\r\n\r\n  if (blobType == BlobConstants.BlobTypes.PAGE) {\r\n    rangeStream = new PageRangeStream(this, container, blob, options);\r\n  } else if (blobType == BlobConstants.BlobTypes.APPEND) {\r\n    rangeStream = new RangeStream(this, container, blob, options);\r\n    isPageBlobDownload = false;\r\n  } else if (blobType == BlobConstants.BlobTypes.BLOCK) {\r\n    rangeStream = new BlockRangeStream(this, container, blob, options);\r\n    isPageBlobDownload = false;\r\n  }\r\n\r\n  if (!options.speedSummary) {\r\n    options.speedSummary = new SpeedSummary(blob);\r\n  }\r\n\r\n  var speedSummary = options.speedSummary;\r\n  var parallelOperationThreadCount = options.parallelOperationThreadCount || this.parallelOperationThreadCount;\r\n  var batchOperations = new BatchOperation('getBlobInRanges', { callbackInOrder: true, logger: this.logger, enableReuseSocket: this.defaultEnableReuseSocket });\r\n  batchOperations.setConcurrency(parallelOperationThreadCount);\r\n\r\n  var self = this;\r\n  var checkMD5sum = !options.disableContentMD5Validation;\r\n  var md5Hash = null;\r\n  if (checkMD5sum) {\r\n    md5Hash = new Md5Wrapper().createMd5Hash();\r\n  }\r\n\r\n  var savedBlobResult = null;\r\n  var savedBlobResponse = null;\r\n\r\n  rangeStream.on('range', function (range) {\r\n    if (!speedSummary.totalSize) {\r\n      speedSummary.totalSize = rangeStream.rangeSize;\r\n    }\r\n\r\n    var requestOptions = {\r\n      rangeStart: range.start,\r\n      rangeEnd: range.end,\r\n      responseEncoding: null //Use Buffer to store the response data\r\n    };\r\n\r\n    var rangeSize = range.size;\r\n    requestOptions.timeoutIntervalInMs = options.timeoutIntervalInMs;\r\n    requestOptions.clientRequestTimeoutInMs = options.clientRequestTimeoutInMs;\r\n    requestOptions.useTransactionalMD5 = options.useTransactionalMD5;\r\n    requestOptions.snapshotId = options.snapshotId;\r\n\r\n    if (range.dataSize === 0) {\r\n      if (isPageBlobDownload) {\r\n        var autoIncrement = speedSummary.getAutoIncrementFunction(rangeSize);\r\n        //No operation to do and only wait for write zero to file in callback\r\n        var writeZeroOperation = new BatchOperation.CommonOperation(BatchOperation.noOperation, function (error) {\r\n          if (error) return;\r\n          var bufferAvailable = azureutil.writeZerosToStream(writeStream, rangeSize, md5Hash, autoIncrement);\r\n          //There is no need to pause the rangestream since we can perform http request and write disk at the same time\r\n          self.logger.debug(util.format('Write %s bytes Zero from %s to %s', rangeSize, range.start, range.end));\r\n          if (!bufferAvailable) {\r\n            self.logger.debug('Write stream is full and pause batch operation');\r\n            batchOperations.pause();\r\n          }\r\n        });\r\n        batchOperations.addOperation(writeZeroOperation);\r\n      } else {\r\n        self.logger.debug(util.format('Can not read %s bytes to %s bytes of blob %s', range.start, range.end, blob));\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (range.start > range.end) {\r\n      return;\r\n    }\r\n\r\n    var operation = new BatchOperation.RestOperation(self, 'getBlobToText', container, blob, requestOptions, function (error, content, blobResult, response) {\r\n      if (!error) {\r\n        if (rangeSize !== content.length) {\r\n          self.logger.warn(util.format('Request %s bytes, but server returns %s bytes', rangeSize, content.length));\r\n        }\r\n        //Save one of the succeeded callback parameters and use them at the final callback\r\n        if (!savedBlobResult) {\r\n          savedBlobResult = blobResult;\r\n        }\r\n        if (!savedBlobResponse) {\r\n          savedBlobResponse = response;\r\n        }\r\n        var autoIncrement = speedSummary.getAutoIncrementFunction(content.length);\r\n        var bufferAvailable = writeStream.write(content, autoIncrement);\r\n        if (!bufferAvailable) {\r\n          self.logger.debug('Write stream is full and pause batch operation');\r\n          batchOperations.pause();\r\n        }\r\n        if (md5Hash) {\r\n          md5Hash.update(content);\r\n        }\r\n        content = null;\r\n      } else {\r\n        self.logger.debug(util.format('Stop downloading data as error happens. Error: %s', util.inspect(error)));\r\n        rangeStream.stop();\r\n      }\r\n    });\r\n\r\n    var full = batchOperations.addOperation(operation);\r\n    if (full) {\r\n      self.logger.debug('Pause range stream');\r\n      rangeStream.pause();\r\n    }\r\n  });\r\n\r\n  rangeStream.on('end', function () {\r\n    self.logger.debug('Range stream has ended.');\r\n    batchOperations.enableComplete();\r\n  });\r\n\r\n  batchOperations.on('drain', function () {\r\n    self.logger.debug('Resume range stream');\r\n    rangeStream.resume();\r\n  });\r\n\r\n  writeStream.on('drain', function () {\r\n    self.logger.debug('Resume batch operations');\r\n    batchOperations.resume();\r\n  });\r\n\r\n  batchOperations.on('end', function (error) {\r\n    self.logger.debug('Download completed!');\r\n    if (error) {\r\n      callback(error);\r\n      return;\r\n    } else {\r\n      writeStream.end(function () {\r\n        self.logger.debug('Write stream has ended');\r\n        if (!savedBlobResult) {\r\n          savedBlobResult = {};\r\n        }\r\n\r\n        azureutil.setObjectInnerPropertyValue(savedBlobResult, ['contentSettings', 'contentMD5'], azureutil.tryGetValueChain(options, ['contentSettings', 'contentMD5'], null));\r\n        savedBlobResult.clientSideContentMD5 = null;\r\n        if (md5Hash) {\r\n          savedBlobResult.clientSideContentMD5 = md5Hash.digest('base64');\r\n        }\r\n        callback(error, savedBlobResult, savedBlobResponse);\r\n      });\r\n    }\r\n  });\r\n\r\n  var listOptions = {\r\n    timeoutIntervalInMs: options.timeoutIntervalInMs,\r\n    clientRequestTimeoutInMs: options.clientRequestTimeoutInMs,\r\n    snapshotId: options.snapshotId,\r\n    leaseId: options.leaseId,\r\n    blockListFilter: BlobUtilities.BlockListFilter.COMMITTED\r\n  };\r\n\r\n  rangeStream.list(listOptions, function (error) {\r\n    callback(error);\r\n  });\r\n\r\n  return speedSummary;\r\n};\r\n\r\n/**\r\n* Downloads a blockblob or pageblob into a stream.\r\n* @ignore\r\n* @this {BlobService}\r\n* @param {string}             container                                   The container name.\r\n* @param {string}             blob                                        The blob name.\r\n* @param {Writable}           writeStream                                 The Node.js Writable stream.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.snapshotId]                        The snapshot identifier.\r\n* @param {string}             [options.leaseId]                           The lease identifier.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the blob in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the blob in the specified range.\r\n* @param {AccessConditions}   [options.accessConditions]                  The access conditions.\r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading blobs.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `result` will contain the blob information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype._getBlobToStream = function (container, blob, writeStream, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  var resourceName = createResourceName(container, blob);\r\n  var webResource = WebResource.get(resourceName).withRawResponse();\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  webResource.withQueryOption(QueryStringConstants.SNAPSHOT, options.snapshotId);\r\n\r\n  BlobResult.setHeadersFromBlob(webResource, options);\r\n\r\n  this._setRangeContentMD5Header(webResource, options);\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.blobResult = null;\r\n\r\n    if (!responseObject.error) {\r\n      responseObject.blobResult = new BlobResult(container, blob);\r\n      responseObject.blobResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.blobResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n\r\n      self._validateLengthAndMD5(options, responseObject);\r\n      \r\n      if (options.speedSummary) {\r\n        options.speedSummary.increment(responseObject.length);\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.blobResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequestInputStream(webResource, null, writeStream, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of blob items whose names begin with the specified prefix in the container.\r\n* @ignore\r\n* @this {BlobService}\r\n* @param {string}             container                           The container name.\r\n* @param {string}             prefix                              The prefix of the blob name.\r\n* @param {object}             currentToken                        A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {ListBlobTypes}      listBlobType                        Specifies the item type of the results.\r\n* @param {object}             [options]                           The request options.\r\n* @param {int}                [options.maxResults]                Specifies the maximum number of blobs to return per call to Azure ServiceClient. This does NOT affect list size returned by this function. (maximum: 5000)\r\n* @param {string}             [options.include]                   Specifies that the response should include one or more of the following subsets: '', 'metadata', 'snapshots', 'uncommittedblobs', 'copy', 'deleted').\r\n*                                                                 Please find these values in BlobUtilities.BlobListingDetails. Multiple values can be added separated with a comma (,).\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will contain\r\n*                                                                 the entries of blobs and the continuation token for the next listing operation.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nBlobService.prototype._listBlobsOrDircotriesSegmentedWithPrefix = function (container, prefix, currentToken, listBlobType, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('listBlobsSegmented', function (v) {\r\n    v.string(container, 'container');\r\n    v.containerNameIsValid(container);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get(container)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'container')\r\n    .withQueryOption(QueryStringConstants.COMP, 'list')\r\n    .withQueryOption(QueryStringConstants.MAX_RESULTS, options.maxResults)\r\n    .withQueryOptions(options,\r\n    QueryStringConstants.DELIMITER,\r\n    QueryStringConstants.INCLUDE);\r\n\r\n  if (!azureutil.objectIsNull(currentToken)) {\r\n    webResource.withQueryOption(QueryStringConstants.MARKER, currentToken.nextMarker);\r\n  }\r\n\r\n  webResource.withQueryOption(QueryStringConstants.PREFIX, prefix);\r\n\r\n  options.requestLocationMode = azureutil.getNextListingLocationMode(currentToken);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.listBlobsResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.listBlobsResult = {\r\n        entries: null,\r\n        continuationToken: null\r\n      };\r\n\r\n      responseObject.listBlobsResult.entries = [];\r\n      var results = [];\r\n\r\n      if (listBlobType == BlobConstants.ListBlobTypes.Directory && responseObject.response.body.EnumerationResults.Blobs.BlobPrefix) {\r\n        results = responseObject.response.body.EnumerationResults.Blobs.BlobPrefix;\r\n        if (!_.isArray(results)) {\r\n          results = [results];\r\n        }\r\n      } else if (listBlobType == BlobConstants.ListBlobTypes.Blob && responseObject.response.body.EnumerationResults.Blobs.Blob) {\r\n        results = responseObject.response.body.EnumerationResults.Blobs.Blob;\r\n        if (!_.isArray(results)) {\r\n          results = [results];\r\n        }\r\n      }\r\n\r\n      results.forEach(function (currentBlob) {\r\n        var blobResult = BlobResult.parse(currentBlob);\r\n        responseObject.listBlobsResult.entries.push(blobResult);\r\n      });\r\n\r\n      if (responseObject.response.body.EnumerationResults.NextMarker) {\r\n        responseObject.listBlobsResult.continuationToken = {\r\n          nextMarker: null,\r\n          targetLocation: null\r\n        };\r\n\r\n        responseObject.listBlobsResult.continuationToken.nextMarker = responseObject.response.body.EnumerationResults.NextMarker;\r\n        responseObject.listBlobsResult.continuationToken.targetLocation = responseObject.targetLocation;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.listBlobsResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Create a new blob.\r\n* @ignore\r\n* \r\n* @this {BlobService}\r\n* @param {string}             container                                The container name.\r\n* @param {string}             blob                                     The blob name.\r\n* @param {BlobType}           blobType                                 The blob type.\r\n* @param {int}                size                                     The blob size. \r\n* @param {object}             [options]                                The request options.\r\n* @param {string}             [options.blobTier]                       For page blobs on premium accounts only. Set the tier of the target blob. Refer to BlobUtilities.BlobTier.PremiumPageBlobTier.\r\n* @param {errorOrResult}      callback                                 The callback which operates on the specific blob.\r\n*/\r\nBlobService.prototype._createBlob = function (container, blob, blobType, size, options, creationCallback) {\r\n  if (blobType == BlobConstants.BlobTypes.APPEND) {\r\n    this.createOrReplaceAppendBlob(container, blob, options, function (createError, createResponse) {\r\n      creationCallback(createError, null, createResponse);\r\n    });\r\n  } else if (blobType == BlobConstants.BlobTypes.PAGE) {\r\n    this.createPageBlob(container, blob, size, options, function (createError) {\r\n      creationCallback(createError);\r\n    });\r\n  } else if (blobType == BlobConstants.BlobTypes.BLOCK) {\r\n    creationCallback();\r\n  }\r\n};\r\n\r\n/**\r\n* The callback for {BlobService~getBlobToText}.\r\n* @typedef {function} BlobService~blobToText\r\n* @param {object} error      If an error occurs, the error information.\r\n* @param {string} text       The text returned from the blob.\r\n* @param {object} blockBlob  Information about the blob.\r\n* @param {object} response   Information related to this operation.\r\n*/\r\n\r\nBlobService.SpeedSummary = SpeedSummary;\r\n\r\nmodule.exports = BlobService;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar Constants = require('./../../../common/util/constants');\r\nvar EventEmitter = require('events').EventEmitter;\r\nvar BlobUtilities = require('./../blobutilities');\r\n\r\n/**\r\n* BlockBlob block range stream\r\n*/\r\nfunction BlockRangeStream(blobServiceClient, container, blob, options) {\r\n  this.blobServiceClient = blobServiceClient;\r\n  this.container = container;\r\n  this.blob = blob;\r\n  this._emitter = new EventEmitter();\r\n  this._paused = false;\r\n  this._emittedAll = false;\r\n  this._emittedRangeType = null;\r\n  this._emittedRangeIndex = null;\r\n  this._offset = 0;\r\n  this._rangelist = [];\r\n  this._isEmitting = false;\r\n  if (options.rangeStart) {\r\n    this._startOffset = options.rangeStart;\r\n  } else {\r\n    this._startOffset = 0;\r\n  }\r\n  if (options.rangeEnd) {\r\n    this._endOffset = options.rangeEnd;\r\n  } else {\r\n    this._endOffset = Number.MAX_VALUE;\r\n  }\r\n}\r\n\r\n/**\r\n* Add event listener\r\n*/\r\nBlockRangeStream.prototype.on = function (event, listener) {\r\n  this._emitter.on(event, listener);\r\n};\r\n\r\n/**\r\n* Get block list\r\n*/\r\nBlockRangeStream.prototype.list = function (options, callback) {\r\n  if (!options) {\r\n    options = {};\r\n  }\r\n  \r\n  if (!options.blockListFilter) {\r\n    options.blockListFilter = BlobUtilities.BlockListFilter.ALL;\r\n  }\r\n  \r\n  var self = this;\r\n  this.blobServiceClient.listBlocks(this.container, this.blob, options.blockListFilter, options, function (error, blocklist, response) {\r\n    if (error) {\r\n      callback(error);\r\n    } else {\r\n      var totalSize = parseInt(response.headers[Constants.HeaderConstants.BLOB_CONTENT_LENGTH], 10);\r\n      if (!blocklist.CommittedBlocks) {\r\n        //Convert single block blob to block blob range\r\n        var name = 'NODESDK_BLOCKBLOB_RANGESTREAM';\r\n        blocklist.CommittedBlocks = [{ Name : name, Size : totalSize }];\r\n      }\r\n      \r\n      self._rangelist = blocklist;\r\n      self._emitBlockList();\r\n      self = blocklist = null;\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Emit block ranges\r\n*/\r\nBlockRangeStream.prototype._emitBlockList = function () {\r\n  if (this._paused || this._emittedAll || this._isEmitting) return;\r\n  \r\n  var self = this;\r\n  this._getTypeList(function () {\r\n    self._rangelist = null;\r\n    self._emittedAll = true;\r\n    self._emitter.emit('end');\r\n  });\r\n};\r\n\r\n/**\r\n* Get the block type list\r\n*/\r\nBlockRangeStream.prototype._getTypeList = function (callback) {\r\n  this._isEmitting = true;\r\n  try {\r\n    var typeStart = false;\r\n    if (this._rangelist) {\r\n      for (var blockType in this._rangelist) {\r\n        if (this._rangelist.hasOwnProperty(blockType)) {\r\n          if (this._emittedRangeType === null || typeStart || this._emittedRangeType == blockType) {\r\n            this._emittedRangeType = blockType;\r\n            typeStart = true;\r\n          } else if (this._emittedRangeType !== blockType) {\r\n            continue;\r\n          }\r\n          \r\n          if (this._paused) {\r\n            return;\r\n          }\r\n          \r\n          this._emitBlockRange (blockType, callback);\r\n        }\r\n      }\r\n    }\r\n  } finally {\r\n    this._isEmitting = false;\r\n  }\r\n};\r\n\r\n/**\r\n* Get the block list\r\n*/\r\nBlockRangeStream.prototype._emitBlockRange  = function (blockType, callback) {\r\n  var blockList = this._rangelist[blockType];\r\n  var indexStart = false;\r\n  for (var blockIndex = 0; blockIndex < blockList.length; blockIndex++) {\r\n    if (this._emittedRangeIndex === null || indexStart || this._emittedRangeIndex === blockIndex) {\r\n      this._emittedRangeIndex = blockIndex;\r\n      indexStart = true;\r\n    } else if (this._emittedRangeIndex !== blockIndex) {\r\n      continue;\r\n    }\r\n    \r\n    if (this._paused) {\r\n      return;\r\n    }\r\n    \r\n    var range = blockList[blockIndex];\r\n    // follow the same naming convention of page ranges and json\r\n    range.name = range.Name;\r\n    range.type = blockType;\r\n    range.start = this._offset;\r\n    this._offset += parseInt(range.Size, 10);\r\n    range.end = this._offset - 1;\r\n    delete range.Name;\r\n    delete range.Size;\r\n    \r\n    if (range.start > this._endOffset) {\r\n      break;\r\n    } else if (range.end < this._startOffset) {\r\n      continue;\r\n    } else {\r\n      range.start = Math.max(range.start, this._startOffset);\r\n      range.end = Math.min(range.end, this._endOffset);\r\n      range.size = range.end - range.start + 1;\r\n      range.dataSize = range.size;\r\n      this._emitter.emit('range', range);\r\n    }\r\n  }\r\n\r\n  // remove the used range and avoid memory leak\r\n  this._rangelist[blockType] = null;\r\n\r\n  callback();\r\n};\r\n\r\n/**\r\n* Pause the stream\r\n*/\r\nBlockRangeStream.prototype.pause = function () {\r\n  this._paused = true;\r\n};\r\n\r\n/**\r\n* Resume the stream\r\n*/\r\nBlockRangeStream.prototype.resume = function () {\r\n  this._paused = false;\r\n  if (!this._isEmitting) {\r\n    this._emitBlockList();\r\n  }\r\n};\r\n\r\n/**\r\n* Stop the stream\r\n*/\r\nBlockRangeStream.prototype.stop = function () {\r\n  this.pause();\r\n  this._emittedAll = true;\r\n  this._emitter.emit('end');\r\n};\r\n\r\nmodule.exports = BlockRangeStream;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar util = require('util');\r\nvar RangeStream = require('./../../../common/streams/rangestream');\r\nvar Constants = require('./../../../common/util/constants');\r\n\r\n/**\r\n* PageBlob page range stream\r\n*/\r\nfunction PageRangeStream(blobServiceClient, container, blob, options) {\r\n  PageRangeStream['super_'].call(this, blobServiceClient, container, blob, options);\r\n  \r\n  if (options.minRangeSize) {\r\n    this._minRangeSize = options.minRangeSize;\r\n  } else {\r\n    this._minRangeSize = Constants.BlobConstants.MIN_WRITE_PAGE_SIZE_IN_BYTES;\r\n  }\r\n  if (options.maxRangeSize) {\r\n    this._maxRangeSize = options.maxRangeSize;\r\n  } else {\r\n    this._maxRangeSize = Constants.BlobConstants.DEFAULT_WRITE_PAGE_SIZE_IN_BYTES;\r\n  }\r\n  this._lengthHeader = Constants.HeaderConstants.BLOB_CONTENT_LENGTH;\r\n  this._listFunc = blobServiceClient.listPageRanges;\r\n}\r\n\r\nutil.inherits(PageRangeStream, RangeStream);\r\n\r\nmodule.exports = PageRangeStream;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar Constants = require('../util/constants');\r\nvar HeaderConstants = Constants.HeaderConstants;\r\n\r\nexports.parse = function (headers) {\r\n  var accountPropertiesResult = {};\r\n\r\n  if (headers[HeaderConstants.SKU_NAME]) {\r\n    accountPropertiesResult.SkuName = headers[HeaderConstants.SKU_NAME];\r\n  }\r\n\r\n  if (headers[HeaderConstants.ACCOUNT_KIND]) {\r\n    accountPropertiesResult.AccountKind = headers[HeaderConstants.ACCOUNT_KIND];\r\n  }\r\n\r\n  return accountPropertiesResult;\r\n};","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar _ = require('underscore');\r\n\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar xmlbuilder = azureCommon.xmlbuilder;\r\nvar Constants = azureCommon.Constants;\r\n\r\n/**\r\n* Builds an XML representation for a block list.\r\n*\r\n* @param  {array}  The block list.\r\n* @return {string} The XML block list.\r\n*/\r\nexports.serialize = function (blockListJs) {\r\n  var blockListDoc = xmlbuilder.create();\r\n  blockListDoc = blockListDoc.begin(Constants.BlobConstants.BLOCK_LIST_ELEMENT, { version: '1.0', encoding: 'utf-8' });\r\n\r\n  if (_.isArray(blockListJs.LatestBlocks)) {\r\n    blockListJs.LatestBlocks.forEach(function (block) {\r\n      blockListDoc = blockListDoc.ele(Constants.BlobConstants.LATEST_ELEMENT)\r\n        .txt(new Buffer(block).toString('base64'))\r\n        .up();\r\n    });\r\n  }\r\n\r\n  if (_.isArray(blockListJs.CommittedBlocks)) {\r\n    blockListJs.CommittedBlocks.forEach(function (block) {\r\n      blockListDoc = blockListDoc.ele(Constants.BlobConstants.COMMITTED_ELEMENT)\r\n        .txt(new Buffer(block).toString('base64'))\r\n        .up();\r\n    });\r\n  }\r\n\r\n  if (_.isArray(blockListJs.UncommittedBlocks)) {\r\n    blockListJs.UncommittedBlocks.forEach(function (block) {\r\n      blockListDoc = blockListDoc.ele(Constants.BlobConstants.UNCOMMITTED_ELEMENT)\r\n        .txt(new Buffer(block).toString('base64'))\r\n        .up();\r\n    });\r\n  }\r\n\r\n  return blockListDoc.doc().toString();\r\n};\r\n\r\nexports.parse = function (blockListXml) {\r\n  var blockListResult = {};\r\n\r\n  if (blockListXml.CommittedBlocks && blockListXml.CommittedBlocks.Block) {\r\n    blockListResult.CommittedBlocks = blockListXml.CommittedBlocks.Block;\r\n    if (!_.isArray(blockListResult.CommittedBlocks)) {\r\n      blockListResult.CommittedBlocks = [blockListResult.CommittedBlocks];\r\n    }\r\n    blockListResult.CommittedBlocks.forEach(function(block) {\r\n      block.Name = new Buffer(block.Name, 'base64').toString();\r\n    });\r\n  }\r\n\r\n  if (blockListXml.UncommittedBlocks && blockListXml.UncommittedBlocks.Block) {\r\n    blockListResult.UncommittedBlocks = blockListXml.UncommittedBlocks.Block;\r\n    if (!_.isArray(blockListResult.UncommittedBlocks)) {\r\n      blockListResult.UncommittedBlocks = [blockListResult.UncommittedBlocks];\r\n    }\r\n    blockListResult.UncommittedBlocks.forEach(function(block) {\r\n      block.Name = new Buffer(block.Name, 'base64').toString();\r\n    });\r\n  }\r\n\r\n  return blockListResult;\r\n};","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar _ = require('underscore');\r\n\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar Constants = azureCommon.Constants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\n\r\n/**\r\n* Creates a new BlobResult object.\r\n* @class\r\n* The BlobResult class is used to store the blob information.\r\n* \r\n * @property  {string}                      container                             The container name.\r\n * @property  {string}                      name                                  The blob name.\r\n * @property  {object}                      metadata                              The metadata key/value pair.\r\n * @property  {string}                      etag                                  The etag.\r\n * @property  {string}                      lastModified                          The date/time that the blob was last modified.\r\n * @property  {string}                      contentLength                         The size of the blob in bytes.\r\n * @property  {string}                      blobType                              The blob type.\r\n * @property  {boolean}                     isIncrementalCopy                     If the blob is incremental copy blob.\r\n * @property  {string}                      requestId                             The request id.\r\n * @property  {string}                      sequenceNumber                        The current sequence number for a page blob.\r\n * @property  {string}                      contentRange                          The content range.\r\n * @property  {string}                      committedBlockCount                   The committed block count.\r\n * @property  {string}                      serverEncrypted                       If the blob data and application metadata are completely encrypted using the specified algorithm. true/false.\r\n * @property  {object}                      contentSettings                       The content settings.\r\n * @property  {string}                      contentSettings.contentType           The content type.\r\n * @property  {string}                      contentSettings.contentEncoding       The content encoding.\r\n * @property  {string}                      contentSettings.contentLanguage       The content language.\r\n * @property  {string}                      contentSettings.cacheControl          The cache control.\r\n * @property  {string}                      contentSettings.contentDisposition    The content disposition.\r\n * @property  {string}                      contentSettings.contentMD5            The content MD5 hash.\r\n * @property  {object}                      lease                                 The lease information.\r\n * @property  {string}                      lease.id                              The lease id.\r\n * @property  {string}                      lease.status                          The lease status.\r\n * @property  {string}                      lease.state                           The lease state.\r\n * @property  {string}                      lease.duration                        The lease duration.\r\n * @property  {object}                      copy                                  The copy information.\r\n * @property  {string}                      copy.id                               The copy id.\r\n * @property  {string}                      copy.status                           The copy status.\r\n * @property  {string}                      copy.completionTime                   The copy completion time. \r\n * @property  {string}                      copy.statusDescription                The copy status description.\r\n * @property  {string}                      copy.destinationSnapshot              The snapshot time of the last successful incremental copy snapshot for this blob.\r\n * @property  {string}                      copy.progress                         The copy progress.\r\n * @property  {string}                      copy.source                           The copy source.\r\n * \r\n* @constructor\r\n* @param {string} [container]  The container name.\r\n* @param {string} [name]       The blob name.\r\n*/\r\nfunction BlobResult(container, name) {\r\n  if (container) {\r\n    this.container = container;\r\n  }\r\n\r\n  if (name) {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nBlobResult.parse = function (blobXml) {\r\n  var blobResult = new BlobResult();\r\n  \r\n  for (var propertyName in blobXml) {\r\n    if (blobXml.hasOwnProperty(propertyName)) {\r\n      if (propertyName === 'Properties') {\r\n        //  Lift out the properties onto the main object to keep consistent across all APIs like: getBlobProperties\r\n        azureutil.setPropertyValueFromXML(blobResult, blobXml[propertyName], true);\r\n      } else if (propertyName === 'Metadata') {\r\n        var resultPropertyName = azureutil.normalizePropertyNameFromXML(propertyName);\r\n        blobResult[resultPropertyName] = {};\r\n        azureutil.setPropertyValueFromXML(blobResult[resultPropertyName], blobXml[propertyName], false);\r\n      } else {\r\n        blobResult[propertyName.toLowerCase()] = blobXml[propertyName];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (blobResult.isIncrementalCopy !== undefined) {\r\n    blobResult.isIncrementalCopy = (blobResult.isIncrementalCopy === 'true');\r\n  }\r\n\r\n  // convert accessTierInferred to boolean type\r\n  if (blobResult.accessTierInferred !== undefined) {\r\n    blobResult.accessTierInferred = (blobResult.accessTierInferred === 'true');\r\n  }\r\n\r\n  if (blobResult.deleted !== undefined) {\r\n    blobResult.deleted = (blobResult.deleted == 'true');\r\n  }\r\n\r\n  if (blobResult.remainingRetentionDays !== undefined) {\r\n    blobResult.remainingRetentionDays = parseInt(blobResult.remainingRetentionDays);\r\n  }\r\n\r\n  return blobResult;\r\n};\r\n\r\nvar headersForProperties = {\r\n  'lastModified': 'LAST_MODIFIED',\r\n  'creationTime': 'CREATION_TIME',\r\n  'etag': 'ETAG',\r\n  'sequenceNumber': 'SEQUENCE_NUMBER',\r\n  'blobType': 'BLOB_TYPE',\r\n  'contentLength': 'CONTENT_LENGTH',\r\n  'blobContentLength': 'BLOB_CONTENT_LENGTH',\r\n  'contentRange': 'CONTENT_RANGE',\r\n  'committedBlockCount': 'BLOB_COMMITTED_BLOCK_COUNT',\r\n  'serverEncrypted': 'SERVER_ENCRYPTED',\r\n  'requestId': 'REQUEST_ID',\r\n  \r\n  'range': 'RANGE',\r\n  'blobRange': 'STORAGE_RANGE',\r\n  'getContentMd5': 'RANGE_GET_CONTENT_MD5',\r\n  'acceptRanges': 'ACCEPT_RANGES',\r\n  'appendOffset': 'BLOB_APPEND_OFFSET',\r\n\r\n  'accessTier': 'ACCESS_TIER',\r\n  'accessTierChangeTime': 'ACCESS_TIER_CHANGE_TIME',  \r\n  'accessTierInferred': 'ACCESS_TIER_INFERRED',\r\n  'archiveStatus': 'ARCHIVE_STATUS',\r\n\r\n  'isIncrementalCopy': 'INCREMENTAL_COPY',\r\n  \r\n  // ContentSettings\r\n  'contentSettings.contentType': 'CONTENT_TYPE',\r\n  'contentSettings.contentEncoding': 'CONTENT_ENCODING',\r\n  'contentSettings.contentLanguage': 'CONTENT_LANGUAGE',\r\n  'contentSettings.cacheControl': 'CACHE_CONTROL',\r\n  'contentSettings.contentDisposition': 'CONTENT_DISPOSITION',\r\n  'contentSettings.contentMD5': 'CONTENT_MD5',\r\n\r\n  // Lease\r\n  'lease.id': 'LEASE_ID',\r\n  'lease.status': 'LEASE_STATUS',\r\n  'lease.duration': 'LEASE_DURATION',\r\n  'lease.state': 'LEASE_STATE',\r\n\r\n  // Copy\r\n  'copy.id': 'COPY_ID',\r\n  'copy.status': 'COPY_STATUS',\r\n  'copy.source': 'COPY_SOURCE',\r\n  'copy.progress': 'COPY_PROGRESS',\r\n  'copy.completionTime': 'COPY_COMPLETION_TIME',\r\n  'copy.statusDescription': 'COPY_STATUS_DESCRIPTION',\r\n  'copy.destinationSnapshot': 'COPY_DESTINATION_SNAPSHOT'\r\n};\r\n\r\nBlobResult.prototype.getPropertiesFromHeaders = function (headers) {\r\n  var self = this;\r\n\r\n  var setBlobPropertyFromHeaders = function (blobProperty, headerProperty) {\r\n    if (!azureutil.tryGetValueChain(self, blobProperty.split('.'), null) && headers[headerProperty.toLowerCase()]) {\r\n      azureutil.setObjectInnerPropertyValue(self, blobProperty.split('.'), headers[headerProperty.toLowerCase()]);\r\n      \r\n      if (blobProperty === 'copy.progress') {\r\n        var info = azureutil.parseCopyProgress(self.copy.progress);\r\n        self.copy.bytesCopied = parseInt(info.bytesCopied);\r\n        self.copy.totalBytes = parseInt(info.totalBytes);\r\n      }\r\n    }\r\n  };\r\n\r\n  // For range get, 'x-ms-blob-content-md5' indicate the overall MD5 of the blob. Try to set the contentMD5 using this header if it presents\r\n  setBlobPropertyFromHeaders('contentSettings.contentMD5', HeaderConstants.BLOB_CONTENT_MD5);\r\n  \r\n  _.chain(headersForProperties).pairs().each(function (pair) {\r\n    var property = pair[0];\r\n    var header = HeaderConstants[pair[1]];\r\n    setBlobPropertyFromHeaders(property, header);\r\n  });\r\n\r\n  // convert isIncrementalCopy to boolean type\r\n  if (self.isIncrementalCopy !== undefined) {\r\n    self.isIncrementalCopy = (self.isIncrementalCopy === 'true');\r\n  }\r\n\r\n  // convert accessTierInferred to boolean type  \r\n  if (self.accessTierInferred !== undefined) {\r\n    self.accessTierInferred = (self.accessTierInferred == 'true');\r\n  }\r\n};\r\n\r\n/**\r\n* This method sets the HTTP headers and is used by all methods except setBlobProperties and commitBlocks. Those 2 methods will set the x-ms-* headers using setPropertiesFromBlob.\r\n* @ignore\r\n*/\r\nBlobResult.setHeadersFromBlob = function (webResource, blob) {\r\n  var setHeaderPropertyFromBlob = function (headerProperty, blobProperty) {\r\n    var blobPropertyValue = azureutil.tryGetValueChain(blob, blobProperty.split('.'), null);\r\n    if (blobPropertyValue) {\r\n      webResource.withHeader(headerProperty, blobPropertyValue);\r\n    }\r\n  };\r\n\r\n  if (blob) {\r\n    // Content-Type\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CONTENT_TYPE, 'contentSettings.contentType');\r\n\r\n    // Content-Encoding\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CONTENT_ENCODING, 'contentSettings.contentEncoding');\r\n\r\n    // Content-Language\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CONTENT_LANGUAGE, 'contentSettings.contentLanguage');\r\n\r\n    // Content-Disposition\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CONTENT_DISPOSITION, 'contentSettings.contentDisposition');\r\n\r\n    // Cache-Control\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CACHE_CONTROL, 'contentSettings.cacheControl');\r\n\r\n    // Blob's Content-MD5\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CONTENT_MD5, 'contentSettings.contentMD5');\r\n\r\n    // Content-Length\r\n    setHeaderPropertyFromBlob(HeaderConstants.CONTENT_LENGTH, 'contentLength');\r\n\r\n    // transactional Content-MD5\r\n    setHeaderPropertyFromBlob(HeaderConstants.CONTENT_MD5, 'transactionalContentMD5');\r\n\r\n    // Range\r\n    if (!azureutil.objectIsNull(blob.rangeStart)) {\r\n      var range = 'bytes=' + blob.rangeStart + '-';\r\n\r\n      if (!azureutil.objectIsNull(blob.rangeEnd)) {\r\n        range += blob.rangeEnd;\r\n      }\r\n\r\n      webResource.withHeader(HeaderConstants.RANGE, range);\r\n    }\r\n\r\n    // Source Range\r\n    if (!azureutil.objectIsNull(blob.sourceRangeStart)) {\r\n      var sourceRange = 'bytes=' + blob.sourceRangeStart + '-';\r\n\r\n      if (!azureutil.objectIsNull(blob.sourceRangeEnd)) {\r\n        sourceRange += blob.sourceRangeEnd;\r\n      }\r\n\r\n      webResource.withHeader(HeaderConstants.SOURCE_RANGE, sourceRange);\r\n    }\r\n\r\n    // Blob Type\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_TYPE, 'blobType');\r\n\r\n    // Lease id\r\n    setHeaderPropertyFromBlob(HeaderConstants.LEASE_ID, 'leaseId');\r\n\r\n    // Sequence number\r\n    setHeaderPropertyFromBlob(HeaderConstants.SEQUENCE_NUMBER, 'sequenceNumber');\r\n    setHeaderPropertyFromBlob(HeaderConstants.SEQUENCE_NUMBER_ACTION, 'sequenceNumberAction');\r\n\r\n    if (blob.metadata) {\r\n      webResource.addOptionalMetadataHeaders(blob.metadata);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n* This method sets the x-ms-* headers and is used by setBlobProperties and commitBlocks. All other methods will set the regular HTTP headers using setHeadersFromBlob.\r\n* @ignore\r\n*/\r\nBlobResult.setPropertiesFromBlob = function (webResource, blob) {\r\n  var setHeaderPropertyFromBlob = function (headerProperty, blobProperty) {\r\n    var propertyValue = azureutil.tryGetValueChain(blob, blobProperty.split('.'), null);\r\n    if (propertyValue) {\r\n      webResource.withHeader(headerProperty, propertyValue);\r\n    }\r\n  };\r\n\r\n  if (blob) {\r\n    // Content-Type\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CONTENT_TYPE, 'contentSettings.contentType');\r\n\r\n    // Content-Encoding\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CONTENT_ENCODING, 'contentSettings.contentEncoding');\r\n\r\n    // Content-Language\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CONTENT_LANGUAGE, 'contentSettings.contentLanguage');\r\n\r\n    // Content-Disposition\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CONTENT_DISPOSITION, 'contentSettings.contentDisposition');\r\n\r\n    // Cache-Control\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CACHE_CONTROL, 'contentSettings.cacheControl');\r\n\r\n    // Content-MD5\r\n    setHeaderPropertyFromBlob(HeaderConstants.BLOB_CONTENT_MD5, 'contentSettings.contentMD5');\r\n\r\n    // Lease id\r\n    setHeaderPropertyFromBlob(HeaderConstants.LEASE_ID, 'leaseId');\r\n\r\n    if (blob.metadata) {\r\n      webResource.addOptionalMetadataHeaders(blob.metadata);\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = BlobResult;\r\n","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar Constants = azureCommon.Constants;\r\n\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar BlobUtilities = require('../blobutilities');\r\n\r\n/**\r\n* Creates a new ContainerResult object.\r\n* @class\r\n* The ContainerResult class is used to store the container information.\r\n* \r\n * @property  {string}                      name                                  The container name.\r\n * @property  {string}                      publicAccessLevel                     The public access level.\r\n * @property  {object}                      metadata                              The metadata key/value pair.\r\n * @property  {string}                      etag                                  The etag.\r\n * @property  {string}                      lastModified                          The date/time that the container was last modified.\r\n * @property  {string}                      requestId                             The request id.\r\n * @property  {object}                      lease                                 The lease information.\r\n * @property  {string}                      lease.status                          The lease status.\r\n * @property  {string}                      lease.state                           The lease state.\r\n * @property  {string}                      lease.duration                        The lease duration.\r\n * \r\n* @constructor\r\n* @param {string} [container]               The container name.\r\n* @param {string} [publicAccessLevel]       The public access level.\r\n*/\r\nfunction ContainerResult(name, publicAccessLevel) {\r\n  if (name) {\r\n    this.name = name;\r\n  }\r\n\r\n  if (publicAccessLevel) {\r\n    this.publicAccessLevel = publicAccessLevel;\r\n  }\r\n}\r\n\r\nContainerResult.parse = function (containerXml) {\r\n  var containerResult = new ContainerResult();\r\n  \r\n  for (var propertyName in containerXml) {\r\n    if (containerXml.hasOwnProperty(propertyName)) {\r\n      if (propertyName === 'Properties') {\r\n        //  Lift out the properties onto the main object to keep consistent across all APIs like: getContainerProperties\r\n        azureutil.setPropertyValueFromXML(containerResult, containerXml[propertyName], true);\r\n      } else if (propertyName === 'Metadata') {\r\n        var resultPropertyName = azureutil.normalizePropertyNameFromXML(propertyName);\r\n        containerResult[resultPropertyName] = {};\r\n        azureutil.setPropertyValueFromXML(containerResult[resultPropertyName], containerXml[propertyName], false);\r\n      } else {\r\n        containerResult[propertyName.toLowerCase()] = containerXml[propertyName];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!containerResult.publicAccessLevel) {\r\n    containerResult.publicAccessLevel = BlobUtilities.BlobContainerPublicAccessType.OFF;\r\n  }\r\n\r\n  // convert hasImmutabilityPolicy to boolean type\r\n  if (containerResult.hasImmutabilityPolicy !== undefined) {\r\n    containerResult.hasImmutabilityPolicy = (containerResult.hasImmutabilityPolicy === 'true');\r\n  }\r\n\r\n  // convert hasLegalHold to boolean type\r\n  if (containerResult.hasLegalHold !== undefined) {\r\n    containerResult.hasLegalHold = (containerResult.hasLegalHold === 'true');\r\n  }\r\n\r\n  return containerResult;\r\n};\r\n\r\nContainerResult.prototype.getPropertiesFromHeaders = function (headers) {\r\n  var self = this;\r\n  \r\n  var setContainerPropertyFromHeaders = function (containerProperty, headerProperty) {\r\n    if (!azureutil.tryGetValueChain(self, containerProperty.split('.'), null) && headers[headerProperty.toLowerCase()]) {\r\n      azureutil.setObjectInnerPropertyValue(self, containerProperty.split('.'), headers[headerProperty.toLowerCase()]);\r\n    }\r\n  };\r\n\r\n  setContainerPropertyFromHeaders('etag', HeaderConstants.ETAG);\r\n  setContainerPropertyFromHeaders('lastModified', HeaderConstants.LAST_MODIFIED);\r\n  setContainerPropertyFromHeaders('lease.status', HeaderConstants.LEASE_STATUS);\r\n  setContainerPropertyFromHeaders('lease.state', HeaderConstants.LEASE_STATE);\r\n  setContainerPropertyFromHeaders('lease.duration', HeaderConstants.LEASE_DURATION);\r\n  setContainerPropertyFromHeaders('requestId', HeaderConstants.REQUEST_ID);\r\n  setContainerPropertyFromHeaders('hasImmutabilityPolicy', HeaderConstants.HAS_IMMUTABILITY_POLICY);\r\n  setContainerPropertyFromHeaders('hasLegalHold', HeaderConstants.HAS_LEGAL_HOLD);\r\n\r\n  // convert hasImmutabilityPolicy to boolean type\r\n  if (self.hasImmutabilityPolicy !== undefined) {\r\n    self.hasImmutabilityPolicy = (self.hasImmutabilityPolicy === 'true');\r\n  }\r\n\r\n  // convert hasLegalHold to boolean type\r\n  if (self.hasLegalHold !== undefined) {\r\n    self.hasLegalHold = (self.hasLegalHold === 'true');\r\n  }\r\n\r\n  if (!self.publicAccessLevel) {\r\n    self.publicAccessLevel = BlobUtilities.BlobContainerPublicAccessType.OFF;\r\n    if (headers[HeaderConstants.BLOB_PUBLIC_ACCESS]) {\r\n      self.publicAccessLevel = headers[HeaderConstants.BLOB_PUBLIC_ACCESS];\r\n    }\r\n  }\r\n\r\n  if (self.publicAccessLevel === 'true') {\r\n    // The container was marked for full public read access using a version prior to 2009-09-19.\r\n    self.publicAccessLevel = BlobUtilities.BlobContainerPublicAccessType.CONTAINER;\r\n  }\r\n};\r\n\r\n/**\r\n* The container ACL settings.\r\n* @typedef    {object}                        ContainerAclResult\r\n* @extends    {ContainerResult}\r\n* @property   {Object.<string, AccessPolicy>}    signedIdentifiers   The container ACL settings. See `[AccessPolicy]{@link AccessPolicy}` for detailed information.\r\n*/\r\n\r\nmodule.exports = ContainerResult;","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar Constants = require('./../../../common/common.core').Constants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\n\r\n\r\n/**\r\n* Creates a new LeaseResult object.\r\n* @class\r\n* The LeaseResult class is used to store the lease information.\r\n* \r\n * @property  {string}                      container                         The container name.\r\n * @property  {string}                      blob                              The blob name.\r\n * @property  {string}                      id                                The lease id.\r\n * @property  {string}                      time                              Approximate time remaining in the lease period, in seconds.\r\n * @property  {string}                      etag                              The etag.\r\n * @property  {string}                      lastModified                      The date/time that the lease was last modified.\r\n * \r\n* @constructor\r\n* @param {string} [container]               The container name.\r\n* @param {string} [blob]                    The blob name.\r\n* @param {string} [id]                      The lease id.\r\n* @param {string} [time]                    Approximate time remaining in the lease period, in seconds.\r\n*/\r\nfunction LeaseResult(container, blob, id, time) {\r\n  if (container) {\r\n    this.container = container;\r\n  }\r\n\r\n  if (blob) {\r\n    this.blob = blob;\r\n  }\r\n\r\n  if (id) {\r\n    this.id = id;\r\n  }\r\n\r\n  if (time) {\r\n    this.time = time;\r\n  }\r\n}\r\n\r\nLeaseResult.prototype.getPropertiesFromHeaders = function (headers) {\r\n  var self = this;\r\n\r\n  if (!self['id'] && headers[HeaderConstants.LEASE_ID]) {\r\n    self['id'] = headers[HeaderConstants.LEASE_ID];\r\n  }\r\n\r\n  if (!self['time'] && headers[HeaderConstants.LEASE_TIME]) {\r\n    self['time'] = parseInt(headers[HeaderConstants.LEASE_TIME], 10);\r\n  }\r\n\r\n  self['etag'] = headers[HeaderConstants.ETAG];\r\n  self['lastModified'] = headers[HeaderConstants.LAST_MODIFIED.toLowerCase()];\r\n};\r\n\r\nmodule.exports = LeaseResult;","//this file was generated\n\"use strict\"\nvar mime = module.exports = {\n    lookup: function (path, fallback) {\n  var ext = path.replace(/.*[\\.\\/]/, '').toLowerCase();\n\n  return this.types[ext] || fallback || this.default_type;\n}\n  , default_type: \"application/octet-stream\"\n  , types: {\n  \"123\": \"application/vnd.lotus-1-2-3\",\n  \"ez\": \"application/andrew-inset\",\n  \"aw\": \"application/applixware\",\n  \"atom\": \"application/atom+xml\",\n  \"atomcat\": \"application/atomcat+xml\",\n  \"atomsvc\": \"application/atomsvc+xml\",\n  \"ccxml\": \"application/ccxml+xml\",\n  \"cdmia\": \"application/cdmi-capability\",\n  \"cdmic\": \"application/cdmi-container\",\n  \"cdmid\": \"application/cdmi-domain\",\n  \"cdmio\": \"application/cdmi-object\",\n  \"cdmiq\": \"application/cdmi-queue\",\n  \"cu\": \"application/cu-seeme\",\n  \"davmount\": \"application/davmount+xml\",\n  \"dbk\": \"application/docbook+xml\",\n  \"dssc\": \"application/dssc+der\",\n  \"xdssc\": \"application/dssc+xml\",\n  \"ecma\": \"application/ecmascript\",\n  \"emma\": \"application/emma+xml\",\n  \"epub\": \"application/epub+zip\",\n  \"exi\": \"application/exi\",\n  \"pfr\": \"application/font-tdpfr\",\n  \"gml\": \"application/gml+xml\",\n  \"gpx\": \"application/gpx+xml\",\n  \"gxf\": \"application/gxf\",\n  \"stk\": \"application/hyperstudio\",\n  \"ink\": \"application/inkml+xml\",\n  \"inkml\": \"application/inkml+xml\",\n  \"ipfix\": \"application/ipfix\",\n  \"jar\": \"application/java-archive\",\n  \"ser\": \"application/java-serialized-object\",\n  \"class\": \"application/java-vm\",\n  \"js\": \"application/javascript\",\n  \"json\": \"application/json\",\n  \"jsonml\": \"application/jsonml+json\",\n  \"lostxml\": \"application/lost+xml\",\n  \"hqx\": \"application/mac-binhex40\",\n  \"cpt\": \"application/mac-compactpro\",\n  \"mads\": \"application/mads+xml\",\n  \"mrc\": \"application/marc\",\n  \"mrcx\": \"application/marcxml+xml\",\n  \"ma\": \"application/mathematica\",\n  \"nb\": \"application/mathematica\",\n  \"mb\": \"application/mathematica\",\n  \"mathml\": \"application/mathml+xml\",\n  \"mbox\": \"application/mbox\",\n  \"mscml\": \"application/mediaservercontrol+xml\",\n  \"metalink\": \"application/metalink+xml\",\n  \"meta4\": \"application/metalink4+xml\",\n  \"mets\": \"application/mets+xml\",\n  \"mods\": \"application/mods+xml\",\n  \"m21\": \"application/mp21\",\n  \"mp21\": \"application/mp21\",\n  \"mp4s\": \"application/mp4\",\n  \"doc\": \"application/msword\",\n  \"dot\": \"application/msword\",\n  \"mxf\": \"application/mxf\",\n  \"bin\": \"application/octet-stream\",\n  \"dms\": \"application/octet-stream\",\n  \"lrf\": \"application/octet-stream\",\n  \"mar\": \"application/octet-stream\",\n  \"so\": \"application/octet-stream\",\n  \"dist\": \"application/octet-stream\",\n  \"distz\": \"application/octet-stream\",\n  \"pkg\": \"application/octet-stream\",\n  \"bpk\": \"application/octet-stream\",\n  \"dump\": \"application/octet-stream\",\n  \"elc\": \"application/octet-stream\",\n  \"deploy\": \"application/octet-stream\",\n  \"oda\": \"application/oda\",\n  \"opf\": \"application/oebps-package+xml\",\n  \"ogx\": \"application/ogg\",\n  \"omdoc\": \"application/omdoc+xml\",\n  \"onetoc\": \"application/onenote\",\n  \"onetoc2\": \"application/onenote\",\n  \"onetmp\": \"application/onenote\",\n  \"onepkg\": \"application/onenote\",\n  \"oxps\": \"application/oxps\",\n  \"xer\": \"application/patch-ops-error+xml\",\n  \"pdf\": \"application/pdf\",\n  \"pgp\": \"application/pgp-encrypted\",\n  \"asc\": \"application/pgp-signature\",\n  \"sig\": \"application/pgp-signature\",\n  \"prf\": \"application/pics-rules\",\n  \"p10\": \"application/pkcs10\",\n  \"p7m\": \"application/pkcs7-mime\",\n  \"p7c\": \"application/pkcs7-mime\",\n  \"p7s\": \"application/pkcs7-signature\",\n  \"p8\": \"application/pkcs8\",\n  \"ac\": \"application/pkix-attr-cert\",\n  \"cer\": \"application/pkix-cert\",\n  \"crl\": \"application/pkix-crl\",\n  \"pkipath\": \"application/pkix-pkipath\",\n  \"pki\": \"application/pkixcmp\",\n  \"pls\": \"application/pls+xml\",\n  \"ai\": \"application/postscript\",\n  \"eps\": \"application/postscript\",\n  \"ps\": \"application/postscript\",\n  \"cww\": \"application/prs.cww\",\n  \"pskcxml\": \"application/pskc+xml\",\n  \"rdf\": \"application/rdf+xml\",\n  \"rif\": \"application/reginfo+xml\",\n  \"rnc\": \"application/relax-ng-compact-syntax\",\n  \"rl\": \"application/resource-lists+xml\",\n  \"rld\": \"application/resource-lists-diff+xml\",\n  \"rs\": \"application/rls-services+xml\",\n  \"gbr\": \"application/rpki-ghostbusters\",\n  \"mft\": \"application/rpki-manifest\",\n  \"roa\": \"application/rpki-roa\",\n  \"rsd\": \"application/rsd+xml\",\n  \"rss\": \"application/rss+xml\",\n  \"rtf\": \"application/rtf\",\n  \"sbml\": \"application/sbml+xml\",\n  \"scq\": \"application/scvp-cv-request\",\n  \"scs\": \"application/scvp-cv-response\",\n  \"spq\": \"application/scvp-vp-request\",\n  \"spp\": \"application/scvp-vp-response\",\n  \"sdp\": \"application/sdp\",\n  \"setpay\": \"application/set-payment-initiation\",\n  \"setreg\": \"application/set-registration-initiation\",\n  \"shf\": \"application/shf+xml\",\n  \"smi\": \"application/smil+xml\",\n  \"smil\": \"application/smil+xml\",\n  \"rq\": \"application/sparql-query\",\n  \"srx\": \"application/sparql-results+xml\",\n  \"gram\": \"application/srgs\",\n  \"grxml\": \"application/srgs+xml\",\n  \"sru\": \"application/sru+xml\",\n  \"ssdl\": \"application/ssdl+xml\",\n  \"ssml\": \"application/ssml+xml\",\n  \"tei\": \"application/tei+xml\",\n  \"teicorpus\": \"application/tei+xml\",\n  \"tfi\": \"application/thraud+xml\",\n  \"tsd\": \"application/timestamped-data\",\n  \"plb\": \"application/vnd.3gpp.pic-bw-large\",\n  \"psb\": \"application/vnd.3gpp.pic-bw-small\",\n  \"pvb\": \"application/vnd.3gpp.pic-bw-var\",\n  \"tcap\": \"application/vnd.3gpp2.tcap\",\n  \"pwn\": \"application/vnd.3m.post-it-notes\",\n  \"aso\": \"application/vnd.accpac.simply.aso\",\n  \"imp\": \"application/vnd.accpac.simply.imp\",\n  \"acu\": \"application/vnd.acucobol\",\n  \"atc\": \"application/vnd.acucorp\",\n  \"acutc\": \"application/vnd.acucorp\",\n  \"air\": \"application/vnd.adobe.air-application-installer-package+zip\",\n  \"fcdt\": \"application/vnd.adobe.formscentral.fcdt\",\n  \"fxp\": \"application/vnd.adobe.fxp\",\n  \"fxpl\": \"application/vnd.adobe.fxp\",\n  \"xdp\": \"application/vnd.adobe.xdp+xml\",\n  \"xfdf\": \"application/vnd.adobe.xfdf\",\n  \"ahead\": \"application/vnd.ahead.space\",\n  \"azf\": \"application/vnd.airzip.filesecure.azf\",\n  \"azs\": \"application/vnd.airzip.filesecure.azs\",\n  \"azw\": \"application/vnd.amazon.ebook\",\n  \"acc\": \"application/vnd.americandynamics.acc\",\n  \"ami\": \"application/vnd.amiga.ami\",\n  \"apk\": \"application/vnd.android.package-archive\",\n  \"cii\": \"application/vnd.anser-web-certificate-issue-initiation\",\n  \"fti\": \"application/vnd.anser-web-funds-transfer-initiation\",\n  \"atx\": \"application/vnd.antix.game-component\",\n  \"mpkg\": \"application/vnd.apple.installer+xml\",\n  \"m3u8\": \"application/vnd.apple.mpegurl\",\n  \"swi\": \"application/vnd.aristanetworks.swi\",\n  \"iota\": \"application/vnd.astraea-software.iota\",\n  \"aep\": \"application/vnd.audiograph\",\n  \"mpm\": \"application/vnd.blueice.multipass\",\n  \"bmi\": \"application/vnd.bmi\",\n  \"rep\": \"application/vnd.businessobjects\",\n  \"cdxml\": \"application/vnd.chemdraw+xml\",\n  \"mmd\": \"application/vnd.chipnuts.karaoke-mmd\",\n  \"cdy\": \"application/vnd.cinderella\",\n  \"cla\": \"application/vnd.claymore\",\n  \"rp9\": \"application/vnd.cloanto.rp9\",\n  \"c4g\": \"application/vnd.clonk.c4group\",\n  \"c4d\": \"application/vnd.clonk.c4group\",\n  \"c4f\": \"application/vnd.clonk.c4group\",\n  \"c4p\": \"application/vnd.clonk.c4group\",\n  \"c4u\": \"application/vnd.clonk.c4group\",\n  \"c11amc\": \"application/vnd.cluetrust.cartomobile-config\",\n  \"c11amz\": \"application/vnd.cluetrust.cartomobile-config-pkg\",\n  \"csp\": \"application/vnd.commonspace\",\n  \"cdbcmsg\": \"application/vnd.contact.cmsg\",\n  \"cmc\": \"application/vnd.cosmocaller\",\n  \"clkx\": \"application/vnd.crick.clicker\",\n  \"clkk\": \"application/vnd.crick.clicker.keyboard\",\n  \"clkp\": \"application/vnd.crick.clicker.palette\",\n  \"clkt\": \"application/vnd.crick.clicker.template\",\n  \"clkw\": \"application/vnd.crick.clicker.wordbank\",\n  \"wbs\": \"application/vnd.criticaltools.wbs+xml\",\n  \"pml\": \"application/vnd.ctc-posml\",\n  \"ppd\": \"application/vnd.cups-ppd\",\n  \"car\": \"application/vnd.curl.car\",\n  \"pcurl\": \"application/vnd.curl.pcurl\",\n  \"dart\": \"application/vnd.dart\",\n  \"rdz\": \"application/vnd.data-vision.rdz\",\n  \"uvf\": \"application/vnd.dece.data\",\n  \"uvvf\": \"application/vnd.dece.data\",\n  \"uvd\": \"application/vnd.dece.data\",\n  \"uvvd\": \"application/vnd.dece.data\",\n  \"uvt\": \"application/vnd.dece.ttml+xml\",\n  \"uvvt\": \"application/vnd.dece.ttml+xml\",\n  \"uvx\": \"application/vnd.dece.unspecified\",\n  \"uvvx\": \"application/vnd.dece.unspecified\",\n  \"uvz\": \"application/vnd.dece.zip\",\n  \"uvvz\": \"application/vnd.dece.zip\",\n  \"fe_launch\": \"application/vnd.denovo.fcselayout-link\",\n  \"dna\": \"application/vnd.dna\",\n  \"mlp\": \"application/vnd.dolby.mlp\",\n  \"dpg\": \"application/vnd.dpgraph\",\n  \"dfac\": \"application/vnd.dreamfactory\",\n  \"kpxx\": \"application/vnd.ds-keypoint\",\n  \"ait\": \"application/vnd.dvb.ait\",\n  \"svc\": \"application/vnd.dvb.service\",\n  \"geo\": \"application/vnd.dynageo\",\n  \"mag\": \"application/vnd.ecowin.chart\",\n  \"nml\": \"application/vnd.enliven\",\n  \"esf\": \"application/vnd.epson.esf\",\n  \"msf\": \"application/vnd.epson.msf\",\n  \"qam\": \"application/vnd.epson.quickanime\",\n  \"slt\": \"application/vnd.epson.salt\",\n  \"ssf\": \"application/vnd.epson.ssf\",\n  \"es3\": \"application/vnd.eszigno3+xml\",\n  \"et3\": \"application/vnd.eszigno3+xml\",\n  \"ez2\": \"application/vnd.ezpix-album\",\n  \"ez3\": \"application/vnd.ezpix-package\",\n  \"fdf\": \"application/vnd.fdf\",\n  \"mseed\": \"application/vnd.fdsn.mseed\",\n  \"seed\": \"application/vnd.fdsn.seed\",\n  \"dataless\": \"application/vnd.fdsn.seed\",\n  \"gph\": \"application/vnd.flographit\",\n  \"ftc\": \"application/vnd.fluxtime.clip\",\n  \"fm\": \"application/vnd.framemaker\",\n  \"frame\": \"application/vnd.framemaker\",\n  \"maker\": \"application/vnd.framemaker\",\n  \"book\": \"application/vnd.framemaker\",\n  \"fnc\": \"application/vnd.frogans.fnc\",\n  \"ltf\": \"application/vnd.frogans.ltf\",\n  \"fsc\": \"application/vnd.fsc.weblaunch\",\n  \"oas\": \"application/vnd.fujitsu.oasys\",\n  \"oa2\": \"application/vnd.fujitsu.oasys2\",\n  \"oa3\": \"application/vnd.fujitsu.oasys3\",\n  \"fg5\": \"application/vnd.fujitsu.oasysgp\",\n  \"bh2\": \"application/vnd.fujitsu.oasysprs\",\n  \"ddd\": \"application/vnd.fujixerox.ddd\",\n  \"xdw\": \"application/vnd.fujixerox.docuworks\",\n  \"xbd\": \"application/vnd.fujixerox.docuworks.binder\",\n  \"fzs\": \"application/vnd.fuzzysheet\",\n  \"txd\": \"application/vnd.genomatix.tuxedo\",\n  \"ggb\": \"application/vnd.geogebra.file\",\n  \"ggt\": \"application/vnd.geogebra.tool\",\n  \"gex\": \"application/vnd.geometry-explorer\",\n  \"gre\": \"application/vnd.geometry-explorer\",\n  \"gxt\": \"application/vnd.geonext\",\n  \"g2w\": \"application/vnd.geoplan\",\n  \"g3w\": \"application/vnd.geospace\",\n  \"gmx\": \"application/vnd.gmx\",\n  \"kml\": \"application/vnd.google-earth.kml+xml\",\n  \"kmz\": \"application/vnd.google-earth.kmz\",\n  \"gqf\": \"application/vnd.grafeq\",\n  \"gqs\": \"application/vnd.grafeq\",\n  \"gac\": \"application/vnd.groove-account\",\n  \"ghf\": \"application/vnd.groove-help\",\n  \"gim\": \"application/vnd.groove-identity-message\",\n  \"grv\": \"application/vnd.groove-injector\",\n  \"gtm\": \"application/vnd.groove-tool-message\",\n  \"tpl\": \"application/vnd.groove-tool-template\",\n  \"vcg\": \"application/vnd.groove-vcard\",\n  \"hal\": \"application/vnd.hal+xml\",\n  \"zmm\": \"application/vnd.handheld-entertainment+xml\",\n  \"hbci\": \"application/vnd.hbci\",\n  \"les\": \"application/vnd.hhe.lesson-player\",\n  \"hpgl\": \"application/vnd.hp-hpgl\",\n  \"hpid\": \"application/vnd.hp-hpid\",\n  \"hps\": \"application/vnd.hp-hps\",\n  \"jlt\": \"application/vnd.hp-jlyt\",\n  \"pcl\": \"application/vnd.hp-pcl\",\n  \"pclxl\": \"application/vnd.hp-pclxl\",\n  \"sfd-hdstx\": \"application/vnd.hydrostatix.sof-data\",\n  \"mpy\": \"application/vnd.ibm.minipay\",\n  \"afp\": \"application/vnd.ibm.modcap\",\n  \"listafp\": \"application/vnd.ibm.modcap\",\n  \"list3820\": \"application/vnd.ibm.modcap\",\n  \"irm\": \"application/vnd.ibm.rights-management\",\n  \"sc\": \"application/vnd.ibm.secure-container\",\n  \"icc\": \"application/vnd.iccprofile\",\n  \"icm\": \"application/vnd.iccprofile\",\n  \"igl\": \"application/vnd.igloader\",\n  \"ivp\": \"application/vnd.immervision-ivp\",\n  \"ivu\": \"application/vnd.immervision-ivu\",\n  \"igm\": \"application/vnd.insors.igm\",\n  \"xpw\": \"application/vnd.intercon.formnet\",\n  \"xpx\": \"application/vnd.intercon.formnet\",\n  \"i2g\": \"application/vnd.intergeo\",\n  \"qbo\": \"application/vnd.intu.qbo\",\n  \"qfx\": \"application/vnd.intu.qfx\",\n  \"rcprofile\": \"application/vnd.ipunplugged.rcprofile\",\n  \"irp\": \"application/vnd.irepository.package+xml\",\n  \"xpr\": \"application/vnd.is-xpr\",\n  \"fcs\": \"application/vnd.isac.fcs\",\n  \"jam\": \"application/vnd.jam\",\n  \"rms\": \"application/vnd.jcp.javame.midlet-rms\",\n  \"jisp\": \"application/vnd.jisp\",\n  \"joda\": \"application/vnd.joost.joda-archive\",\n  \"ktz\": \"application/vnd.kahootz\",\n  \"ktr\": \"application/vnd.kahootz\",\n  \"karbon\": \"application/vnd.kde.karbon\",\n  \"chrt\": \"application/vnd.kde.kchart\",\n  \"kfo\": \"application/vnd.kde.kformula\",\n  \"flw\": \"application/vnd.kde.kivio\",\n  \"kon\": \"application/vnd.kde.kontour\",\n  \"kpr\": \"application/vnd.kde.kpresenter\",\n  \"kpt\": \"application/vnd.kde.kpresenter\",\n  \"ksp\": \"application/vnd.kde.kspread\",\n  \"kwd\": \"application/vnd.kde.kword\",\n  \"kwt\": \"application/vnd.kde.kword\",\n  \"htke\": \"application/vnd.kenameaapp\",\n  \"kia\": \"application/vnd.kidspiration\",\n  \"kne\": \"application/vnd.kinar\",\n  \"knp\": \"application/vnd.kinar\",\n  \"skp\": \"application/vnd.koan\",\n  \"skd\": \"application/vnd.koan\",\n  \"skt\": \"application/vnd.koan\",\n  \"skm\": \"application/vnd.koan\",\n  \"sse\": \"application/vnd.kodak-descriptor\",\n  \"lasxml\": \"application/vnd.las.las+xml\",\n  \"lbd\": \"application/vnd.llamagraphics.life-balance.desktop\",\n  \"lbe\": \"application/vnd.llamagraphics.life-balance.exchange+xml\",\n  \"apr\": \"application/vnd.lotus-approach\",\n  \"pre\": \"application/vnd.lotus-freelance\",\n  \"nsf\": \"application/vnd.lotus-notes\",\n  \"org\": \"application/vnd.lotus-organizer\",\n  \"scm\": \"application/vnd.lotus-screencam\",\n  \"lwp\": \"application/vnd.lotus-wordpro\",\n  \"portpkg\": \"application/vnd.macports.portpkg\",\n  \"mcd\": \"application/vnd.mcd\",\n  \"mc1\": \"application/vnd.medcalcdata\",\n  \"cdkey\": \"application/vnd.mediastation.cdkey\",\n  \"mwf\": \"application/vnd.mfer\",\n  \"mfm\": \"application/vnd.mfmp\",\n  \"flo\": \"application/vnd.micrografx.flo\",\n  \"igx\": \"application/vnd.micrografx.igx\",\n  \"mif\": \"application/vnd.mif\",\n  \"daf\": \"application/vnd.mobius.daf\",\n  \"dis\": \"application/vnd.mobius.dis\",\n  \"mbk\": \"application/vnd.mobius.mbk\",\n  \"mqy\": \"application/vnd.mobius.mqy\",\n  \"msl\": \"application/vnd.mobius.msl\",\n  \"plc\": \"application/vnd.mobius.plc\",\n  \"txf\": \"application/vnd.mobius.txf\",\n  \"mpn\": \"application/vnd.mophun.application\",\n  \"mpc\": \"application/vnd.mophun.certificate\",\n  \"xul\": \"application/vnd.mozilla.xul+xml\",\n  \"cil\": \"application/vnd.ms-artgalry\",\n  \"cab\": \"application/vnd.ms-cab-compressed\",\n  \"xls\": \"application/vnd.ms-excel\",\n  \"xlm\": \"application/vnd.ms-excel\",\n  \"xla\": \"application/vnd.ms-excel\",\n  \"xlc\": \"application/vnd.ms-excel\",\n  \"xlt\": \"application/vnd.ms-excel\",\n  \"xlw\": \"application/vnd.ms-excel\",\n  \"xlam\": \"application/vnd.ms-excel.addin.macroenabled.12\",\n  \"xlsb\": \"application/vnd.ms-excel.sheet.binary.macroenabled.12\",\n  \"xlsm\": \"application/vnd.ms-excel.sheet.macroenabled.12\",\n  \"xltm\": \"application/vnd.ms-excel.template.macroenabled.12\",\n  \"eot\": \"application/vnd.ms-fontobject\",\n  \"chm\": \"application/vnd.ms-htmlhelp\",\n  \"ims\": \"application/vnd.ms-ims\",\n  \"lrm\": \"application/vnd.ms-lrm\",\n  \"thmx\": \"application/vnd.ms-officetheme\",\n  \"cat\": \"application/vnd.ms-pki.seccat\",\n  \"stl\": \"application/vnd.ms-pki.stl\",\n  \"ppt\": \"application/vnd.ms-powerpoint\",\n  \"pps\": \"application/vnd.ms-powerpoint\",\n  \"pot\": \"application/vnd.ms-powerpoint\",\n  \"ppam\": \"application/vnd.ms-powerpoint.addin.macroenabled.12\",\n  \"pptm\": \"application/vnd.ms-powerpoint.presentation.macroenabled.12\",\n  \"sldm\": \"application/vnd.ms-powerpoint.slide.macroenabled.12\",\n  \"ppsm\": \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\",\n  \"potm\": \"application/vnd.ms-powerpoint.template.macroenabled.12\",\n  \"mpp\": \"application/vnd.ms-project\",\n  \"mpt\": \"application/vnd.ms-project\",\n  \"docm\": \"application/vnd.ms-word.document.macroenabled.12\",\n  \"dotm\": \"application/vnd.ms-word.template.macroenabled.12\",\n  \"wps\": \"application/vnd.ms-works\",\n  \"wks\": \"application/vnd.ms-works\",\n  \"wcm\": \"application/vnd.ms-works\",\n  \"wdb\": \"application/vnd.ms-works\",\n  \"wpl\": \"application/vnd.ms-wpl\",\n  \"xps\": \"application/vnd.ms-xpsdocument\",\n  \"mseq\": \"application/vnd.mseq\",\n  \"mus\": \"application/vnd.musician\",\n  \"msty\": \"application/vnd.muvee.style\",\n  \"taglet\": \"application/vnd.mynfc\",\n  \"nlu\": \"application/vnd.neurolanguage.nlu\",\n  \"ntf\": \"application/vnd.nitf\",\n  \"nitf\": \"application/vnd.nitf\",\n  \"nnd\": \"application/vnd.noblenet-directory\",\n  \"nns\": \"application/vnd.noblenet-sealer\",\n  \"nnw\": \"application/vnd.noblenet-web\",\n  \"ngdat\": \"application/vnd.nokia.n-gage.data\",\n  \"n-gage\": \"application/vnd.nokia.n-gage.symbian.install\",\n  \"rpst\": \"application/vnd.nokia.radio-preset\",\n  \"rpss\": \"application/vnd.nokia.radio-presets\",\n  \"edm\": \"application/vnd.novadigm.edm\",\n  \"edx\": \"application/vnd.novadigm.edx\",\n  \"ext\": \"application/vnd.novadigm.ext\",\n  \"odc\": \"application/vnd.oasis.opendocument.chart\",\n  \"otc\": \"application/vnd.oasis.opendocument.chart-template\",\n  \"odb\": \"application/vnd.oasis.opendocument.database\",\n  \"odf\": \"application/vnd.oasis.opendocument.formula\",\n  \"odft\": \"application/vnd.oasis.opendocument.formula-template\",\n  \"odg\": \"application/vnd.oasis.opendocument.graphics\",\n  \"otg\": \"application/vnd.oasis.opendocument.graphics-template\",\n  \"odi\": \"application/vnd.oasis.opendocument.image\",\n  \"oti\": \"application/vnd.oasis.opendocument.image-template\",\n  \"odp\": \"application/vnd.oasis.opendocument.presentation\",\n  \"otp\": \"application/vnd.oasis.opendocument.presentation-template\",\n  \"ods\": \"application/vnd.oasis.opendocument.spreadsheet\",\n  \"ots\": \"application/vnd.oasis.opendocument.spreadsheet-template\",\n  \"odt\": \"application/vnd.oasis.opendocument.text\",\n  \"odm\": \"application/vnd.oasis.opendocument.text-master\",\n  \"ott\": \"application/vnd.oasis.opendocument.text-template\",\n  \"oth\": \"application/vnd.oasis.opendocument.text-web\",\n  \"xo\": \"application/vnd.olpc-sugar\",\n  \"dd2\": \"application/vnd.oma.dd2+xml\",\n  \"oxt\": \"application/vnd.openofficeorg.extension\",\n  \"pptx\": \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n  \"sldx\": \"application/vnd.openxmlformats-officedocument.presentationml.slide\",\n  \"ppsx\": \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\",\n  \"potx\": \"application/vnd.openxmlformats-officedocument.presentationml.template\",\n  \"xlsx\": \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n  \"xltx\": \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\",\n  \"docx\": \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n  \"dotx\": \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\",\n  \"mgp\": \"application/vnd.osgeo.mapguide.package\",\n  \"dp\": \"application/vnd.osgi.dp\",\n  \"esa\": \"application/vnd.osgi.subsystem\",\n  \"pdb\": \"application/vnd.palm\",\n  \"pqa\": \"application/vnd.palm\",\n  \"oprc\": \"application/vnd.palm\",\n  \"paw\": \"application/vnd.pawaafile\",\n  \"str\": \"application/vnd.pg.format\",\n  \"ei6\": \"application/vnd.pg.osasli\",\n  \"efif\": \"application/vnd.picsel\",\n  \"wg\": \"application/vnd.pmi.widget\",\n  \"plf\": \"application/vnd.pocketlearn\",\n  \"pbd\": \"application/vnd.powerbuilder6\",\n  \"box\": \"application/vnd.previewsystems.box\",\n  \"mgz\": \"application/vnd.proteus.magazine\",\n  \"qps\": \"application/vnd.publishare-delta-tree\",\n  \"ptid\": \"application/vnd.pvi.ptid1\",\n  \"qxd\": \"application/vnd.quark.quarkxpress\",\n  \"qxt\": \"application/vnd.quark.quarkxpress\",\n  \"qwd\": \"application/vnd.quark.quarkxpress\",\n  \"qwt\": \"application/vnd.quark.quarkxpress\",\n  \"qxl\": \"application/vnd.quark.quarkxpress\",\n  \"qxb\": \"application/vnd.quark.quarkxpress\",\n  \"bed\": \"application/vnd.realvnc.bed\",\n  \"mxl\": \"application/vnd.recordare.musicxml\",\n  \"musicxml\": \"application/vnd.recordare.musicxml+xml\",\n  \"cryptonote\": \"application/vnd.rig.cryptonote\",\n  \"cod\": \"application/vnd.rim.cod\",\n  \"rm\": \"application/vnd.rn-realmedia\",\n  \"rmvb\": \"application/vnd.rn-realmedia-vbr\",\n  \"link66\": \"application/vnd.route66.link66+xml\",\n  \"st\": \"application/vnd.sailingtracker.track\",\n  \"see\": \"application/vnd.seemail\",\n  \"sema\": \"application/vnd.sema\",\n  \"semd\": \"application/vnd.semd\",\n  \"semf\": \"application/vnd.semf\",\n  \"ifm\": \"application/vnd.shana.informed.formdata\",\n  \"itp\": \"application/vnd.shana.informed.formtemplate\",\n  \"iif\": \"application/vnd.shana.informed.interchange\",\n  \"ipk\": \"application/vnd.shana.informed.package\",\n  \"twd\": \"application/vnd.simtech-mindmapper\",\n  \"twds\": \"application/vnd.simtech-mindmapper\",\n  \"mmf\": \"application/vnd.smaf\",\n  \"teacher\": \"application/vnd.smart.teacher\",\n  \"sdkm\": \"application/vnd.solent.sdkm+xml\",\n  \"sdkd\": \"application/vnd.solent.sdkm+xml\",\n  \"dxp\": \"application/vnd.spotfire.dxp\",\n  \"sfs\": \"application/vnd.spotfire.sfs\",\n  \"sdc\": \"application/vnd.stardivision.calc\",\n  \"sda\": \"application/vnd.stardivision.draw\",\n  \"sdd\": \"application/vnd.stardivision.impress\",\n  \"smf\": \"application/vnd.stardivision.math\",\n  \"sdw\": \"application/vnd.stardivision.writer\",\n  \"vor\": \"application/vnd.stardivision.writer\",\n  \"sgl\": \"application/vnd.stardivision.writer-global\",\n  \"smzip\": \"application/vnd.stepmania.package\",\n  \"sm\": \"application/vnd.stepmania.stepchart\",\n  \"sxc\": \"application/vnd.sun.xml.calc\",\n  \"stc\": \"application/vnd.sun.xml.calc.template\",\n  \"sxd\": \"application/vnd.sun.xml.draw\",\n  \"std\": \"application/vnd.sun.xml.draw.template\",\n  \"sxi\": \"application/vnd.sun.xml.impress\",\n  \"sti\": \"application/vnd.sun.xml.impress.template\",\n  \"sxm\": \"application/vnd.sun.xml.math\",\n  \"sxw\": \"application/vnd.sun.xml.writer\",\n  \"sxg\": \"application/vnd.sun.xml.writer.global\",\n  \"stw\": \"application/vnd.sun.xml.writer.template\",\n  \"sus\": \"application/vnd.sus-calendar\",\n  \"susp\": \"application/vnd.sus-calendar\",\n  \"svd\": \"application/vnd.svd\",\n  \"sis\": \"application/vnd.symbian.install\",\n  \"sisx\": \"application/vnd.symbian.install\",\n  \"xsm\": \"application/vnd.syncml+xml\",\n  \"bdm\": \"application/vnd.syncml.dm+wbxml\",\n  \"xdm\": \"application/vnd.syncml.dm+xml\",\n  \"tao\": \"application/vnd.tao.intent-module-archive\",\n  \"pcap\": \"application/vnd.tcpdump.pcap\",\n  \"cap\": \"application/vnd.tcpdump.pcap\",\n  \"dmp\": \"application/vnd.tcpdump.pcap\",\n  \"tmo\": \"application/vnd.tmobile-livetv\",\n  \"tpt\": \"application/vnd.trid.tpt\",\n  \"mxs\": \"application/vnd.triscape.mxs\",\n  \"tra\": \"application/vnd.trueapp\",\n  \"ufd\": \"application/vnd.ufdl\",\n  \"ufdl\": \"application/vnd.ufdl\",\n  \"utz\": \"application/vnd.uiq.theme\",\n  \"umj\": \"application/vnd.umajin\",\n  \"unityweb\": \"application/vnd.unity\",\n  \"uoml\": \"application/vnd.uoml+xml\",\n  \"vcx\": \"application/vnd.vcx\",\n  \"vsd\": \"application/vnd.visio\",\n  \"vst\": \"application/vnd.visio\",\n  \"vss\": \"application/vnd.visio\",\n  \"vsw\": \"application/vnd.visio\",\n  \"vis\": \"application/vnd.visionary\",\n  \"vsf\": \"application/vnd.vsf\",\n  \"wbxml\": \"application/vnd.wap.wbxml\",\n  \"wmlc\": \"application/vnd.wap.wmlc\",\n  \"wmlsc\": \"application/vnd.wap.wmlscriptc\",\n  \"wtb\": \"application/vnd.webturbo\",\n  \"nbp\": \"application/vnd.wolfram.player\",\n  \"wpd\": \"application/vnd.wordperfect\",\n  \"wqd\": \"application/vnd.wqd\",\n  \"stf\": \"application/vnd.wt.stf\",\n  \"xar\": \"application/vnd.xara\",\n  \"xfdl\": \"application/vnd.xfdl\",\n  \"hvd\": \"application/vnd.yamaha.hv-dic\",\n  \"hvs\": \"application/vnd.yamaha.hv-script\",\n  \"hvp\": \"application/vnd.yamaha.hv-voice\",\n  \"osf\": \"application/vnd.yamaha.openscoreformat\",\n  \"osfpvg\": \"application/vnd.yamaha.openscoreformat.osfpvg+xml\",\n  \"saf\": \"application/vnd.yamaha.smaf-audio\",\n  \"spf\": \"application/vnd.yamaha.smaf-phrase\",\n  \"cmp\": \"application/vnd.yellowriver-custom-menu\",\n  \"zir\": \"application/vnd.zul\",\n  \"zirz\": \"application/vnd.zul\",\n  \"zaz\": \"application/vnd.zzazz.deck+xml\",\n  \"vxml\": \"application/voicexml+xml\",\n  \"wgt\": \"application/widget\",\n  \"hlp\": \"application/winhlp\",\n  \"wsdl\": \"application/wsdl+xml\",\n  \"wspolicy\": \"application/wspolicy+xml\",\n  \"7z\": \"application/x-7z-compressed\",\n  \"abw\": \"application/x-abiword\",\n  \"ace\": \"application/x-ace-compressed\",\n  \"dmg\": \"application/x-apple-diskimage\",\n  \"aab\": \"application/x-authorware-bin\",\n  \"x32\": \"application/x-authorware-bin\",\n  \"u32\": \"application/x-authorware-bin\",\n  \"vox\": \"application/x-authorware-bin\",\n  \"aam\": \"application/x-authorware-map\",\n  \"aas\": \"application/x-authorware-seg\",\n  \"bcpio\": \"application/x-bcpio\",\n  \"torrent\": \"application/x-bittorrent\",\n  \"blb\": \"application/x-blorb\",\n  \"blorb\": \"application/x-blorb\",\n  \"bz\": \"application/x-bzip\",\n  \"bz2\": \"application/x-bzip2\",\n  \"boz\": \"application/x-bzip2\",\n  \"cbr\": \"application/x-cbr\",\n  \"cba\": \"application/x-cbr\",\n  \"cbt\": \"application/x-cbr\",\n  \"cbz\": \"application/x-cbr\",\n  \"cb7\": \"application/x-cbr\",\n  \"vcd\": \"application/x-cdlink\",\n  \"cfs\": \"application/x-cfs-compressed\",\n  \"chat\": \"application/x-chat\",\n  \"pgn\": \"application/x-chess-pgn\",\n  \"nsc\": \"application/x-conference\",\n  \"cpio\": \"application/x-cpio\",\n  \"csh\": \"application/x-csh\",\n  \"deb\": \"application/x-debian-package\",\n  \"udeb\": \"application/x-debian-package\",\n  \"dgc\": \"application/x-dgc-compressed\",\n  \"dir\": \"application/x-director\",\n  \"dcr\": \"application/x-director\",\n  \"dxr\": \"application/x-director\",\n  \"cst\": \"application/x-director\",\n  \"cct\": \"application/x-director\",\n  \"cxt\": \"application/x-director\",\n  \"w3d\": \"application/x-director\",\n  \"fgd\": \"application/x-director\",\n  \"swa\": \"application/x-director\",\n  \"wad\": \"application/x-doom\",\n  \"ncx\": \"application/x-dtbncx+xml\",\n  \"dtb\": \"application/x-dtbook+xml\",\n  \"res\": \"application/x-dtbresource+xml\",\n  \"dvi\": \"application/x-dvi\",\n  \"evy\": \"application/x-envoy\",\n  \"eva\": \"application/x-eva\",\n  \"bdf\": \"application/x-font-bdf\",\n  \"gsf\": \"application/x-font-ghostscript\",\n  \"psf\": \"application/x-font-linux-psf\",\n  \"otf\": \"application/x-font-otf\",\n  \"pcf\": \"application/x-font-pcf\",\n  \"snf\": \"application/x-font-snf\",\n  \"ttf\": \"application/x-font-ttf\",\n  \"ttc\": \"application/x-font-ttf\",\n  \"pfa\": \"application/x-font-type1\",\n  \"pfb\": \"application/x-font-type1\",\n  \"pfm\": \"application/x-font-type1\",\n  \"afm\": \"application/x-font-type1\",\n  \"woff\": \"application/x-font-woff\",\n  \"arc\": \"application/x-freearc\",\n  \"spl\": \"application/x-futuresplash\",\n  \"gca\": \"application/x-gca-compressed\",\n  \"ulx\": \"application/x-glulx\",\n  \"gnumeric\": \"application/x-gnumeric\",\n  \"gramps\": \"application/x-gramps-xml\",\n  \"gtar\": \"application/x-gtar\",\n  \"hdf\": \"application/x-hdf\",\n  \"install\": \"application/x-install-instructions\",\n  \"iso\": \"application/x-iso9660-image\",\n  \"jnlp\": \"application/x-java-jnlp-file\",\n  \"latex\": \"application/x-latex\",\n  \"lzh\": \"application/x-lzh-compressed\",\n  \"lha\": \"application/x-lzh-compressed\",\n  \"mie\": \"application/x-mie\",\n  \"prc\": \"application/x-mobipocket-ebook\",\n  \"mobi\": \"application/x-mobipocket-ebook\",\n  \"application\": \"application/x-ms-application\",\n  \"lnk\": \"application/x-ms-shortcut\",\n  \"wmd\": \"application/x-ms-wmd\",\n  \"wmz\": \"application/x-msmetafile\",\n  \"xbap\": \"application/x-ms-xbap\",\n  \"mdb\": \"application/x-msaccess\",\n  \"obd\": \"application/x-msbinder\",\n  \"crd\": \"application/x-mscardfile\",\n  \"clp\": \"application/x-msclip\",\n  \"exe\": \"application/x-msdownload\",\n  \"dll\": \"application/x-msdownload\",\n  \"com\": \"application/x-msdownload\",\n  \"bat\": \"application/x-msdownload\",\n  \"msi\": \"application/x-msdownload\",\n  \"mvb\": \"application/x-msmediaview\",\n  \"m13\": \"application/x-msmediaview\",\n  \"m14\": \"application/x-msmediaview\",\n  \"wmf\": \"application/x-msmetafile\",\n  \"emf\": \"application/x-msmetafile\",\n  \"emz\": \"application/x-msmetafile\",\n  \"mny\": \"application/x-msmoney\",\n  \"pub\": \"application/x-mspublisher\",\n  \"scd\": \"application/x-msschedule\",\n  \"trm\": \"application/x-msterminal\",\n  \"wri\": \"application/x-mswrite\",\n  \"nc\": \"application/x-netcdf\",\n  \"cdf\": \"application/x-netcdf\",\n  \"nzb\": \"application/x-nzb\",\n  \"p12\": \"application/x-pkcs12\",\n  \"pfx\": \"application/x-pkcs12\",\n  \"p7b\": \"application/x-pkcs7-certificates\",\n  \"spc\": \"application/x-pkcs7-certificates\",\n  \"p7r\": \"application/x-pkcs7-certreqresp\",\n  \"rar\": \"application/x-rar-compressed\",\n  \"ris\": \"application/x-research-info-systems\",\n  \"sh\": \"application/x-sh\",\n  \"shar\": \"application/x-shar\",\n  \"swf\": \"application/x-shockwave-flash\",\n  \"xap\": \"application/x-silverlight-app\",\n  \"sql\": \"application/x-sql\",\n  \"sit\": \"application/x-stuffit\",\n  \"sitx\": \"application/x-stuffitx\",\n  \"srt\": \"application/x-subrip\",\n  \"sv4cpio\": \"application/x-sv4cpio\",\n  \"sv4crc\": \"application/x-sv4crc\",\n  \"t3\": \"application/x-t3vm-image\",\n  \"gam\": \"application/x-tads\",\n  \"tar\": \"application/x-tar\",\n  \"tcl\": \"application/x-tcl\",\n  \"tex\": \"application/x-tex\",\n  \"tfm\": \"application/x-tex-tfm\",\n  \"texinfo\": \"application/x-texinfo\",\n  \"texi\": \"application/x-texinfo\",\n  \"obj\": \"application/x-tgif\",\n  \"ustar\": \"application/x-ustar\",\n  \"src\": \"application/x-wais-source\",\n  \"der\": \"application/x-x509-ca-cert\",\n  \"crt\": \"application/x-x509-ca-cert\",\n  \"fig\": \"application/x-xfig\",\n  \"xlf\": \"application/x-xliff+xml\",\n  \"xpi\": \"application/x-xpinstall\",\n  \"xz\": \"application/x-xz\",\n  \"z1\": \"application/x-zmachine\",\n  \"z2\": \"application/x-zmachine\",\n  \"z3\": \"application/x-zmachine\",\n  \"z4\": \"application/x-zmachine\",\n  \"z5\": \"application/x-zmachine\",\n  \"z6\": \"application/x-zmachine\",\n  \"z7\": \"application/x-zmachine\",\n  \"z8\": \"application/x-zmachine\",\n  \"xaml\": \"application/xaml+xml\",\n  \"xdf\": \"application/xcap-diff+xml\",\n  \"xenc\": \"application/xenc+xml\",\n  \"xhtml\": \"application/xhtml+xml\",\n  \"xht\": \"application/xhtml+xml\",\n  \"xml\": \"application/xml\",\n  \"xsl\": \"application/xml\",\n  \"dtd\": \"application/xml-dtd\",\n  \"xop\": \"application/xop+xml\",\n  \"xpl\": \"application/xproc+xml\",\n  \"xslt\": \"application/xslt+xml\",\n  \"xspf\": \"application/xspf+xml\",\n  \"mxml\": \"application/xv+xml\",\n  \"xhvml\": \"application/xv+xml\",\n  \"xvml\": \"application/xv+xml\",\n  \"xvm\": \"application/xv+xml\",\n  \"yang\": \"application/yang\",\n  \"yin\": \"application/yin+xml\",\n  \"zip\": \"application/zip\",\n  \"adp\": \"audio/adpcm\",\n  \"au\": \"audio/basic\",\n  \"snd\": \"audio/basic\",\n  \"mid\": \"audio/midi\",\n  \"midi\": \"audio/midi\",\n  \"kar\": \"audio/midi\",\n  \"rmi\": \"audio/midi\",\n  \"mp4a\": \"audio/mp4\",\n  \"mpga\": \"audio/mpeg\",\n  \"mp2\": \"audio/mpeg\",\n  \"mp2a\": \"audio/mpeg\",\n  \"mp3\": \"audio/mpeg\",\n  \"m2a\": \"audio/mpeg\",\n  \"m3a\": \"audio/mpeg\",\n  \"oga\": \"audio/ogg\",\n  \"ogg\": \"audio/ogg\",\n  \"spx\": \"audio/ogg\",\n  \"s3m\": \"audio/s3m\",\n  \"sil\": \"audio/silk\",\n  \"uva\": \"audio/vnd.dece.audio\",\n  \"uvva\": \"audio/vnd.dece.audio\",\n  \"eol\": \"audio/vnd.digital-winds\",\n  \"dra\": \"audio/vnd.dra\",\n  \"dts\": \"audio/vnd.dts\",\n  \"dtshd\": \"audio/vnd.dts.hd\",\n  \"lvp\": \"audio/vnd.lucent.voice\",\n  \"pya\": \"audio/vnd.ms-playready.media.pya\",\n  \"ecelp4800\": \"audio/vnd.nuera.ecelp4800\",\n  \"ecelp7470\": \"audio/vnd.nuera.ecelp7470\",\n  \"ecelp9600\": \"audio/vnd.nuera.ecelp9600\",\n  \"rip\": \"audio/vnd.rip\",\n  \"weba\": \"audio/webm\",\n  \"aac\": \"audio/x-aac\",\n  \"aif\": \"audio/x-aiff\",\n  \"aiff\": \"audio/x-aiff\",\n  \"aifc\": \"audio/x-aiff\",\n  \"caf\": \"audio/x-caf\",\n  \"flac\": \"audio/x-flac\",\n  \"mka\": \"audio/x-matroska\",\n  \"m3u\": \"audio/x-mpegurl\",\n  \"wax\": \"audio/x-ms-wax\",\n  \"wma\": \"audio/x-ms-wma\",\n  \"ram\": \"audio/x-pn-realaudio\",\n  \"ra\": \"audio/x-pn-realaudio\",\n  \"rmp\": \"audio/x-pn-realaudio-plugin\",\n  \"wav\": \"audio/x-wav\",\n  \"xm\": \"audio/xm\",\n  \"cdx\": \"chemical/x-cdx\",\n  \"cif\": \"chemical/x-cif\",\n  \"cmdf\": \"chemical/x-cmdf\",\n  \"cml\": \"chemical/x-cml\",\n  \"csml\": \"chemical/x-csml\",\n  \"xyz\": \"chemical/x-xyz\",\n  \"bmp\": \"image/bmp\",\n  \"cgm\": \"image/cgm\",\n  \"g3\": \"image/g3fax\",\n  \"gif\": \"image/gif\",\n  \"ief\": \"image/ief\",\n  \"jpeg\": \"image/jpeg\",\n  \"jpg\": \"image/jpeg\",\n  \"jpe\": \"image/jpeg\",\n  \"ktx\": \"image/ktx\",\n  \"png\": \"image/png\",\n  \"btif\": \"image/prs.btif\",\n  \"sgi\": \"image/sgi\",\n  \"svg\": \"image/svg+xml\",\n  \"svgz\": \"image/svg+xml\",\n  \"tiff\": \"image/tiff\",\n  \"tif\": \"image/tiff\",\n  \"psd\": \"image/vnd.adobe.photoshop\",\n  \"uvi\": \"image/vnd.dece.graphic\",\n  \"uvvi\": \"image/vnd.dece.graphic\",\n  \"uvg\": \"image/vnd.dece.graphic\",\n  \"uvvg\": \"image/vnd.dece.graphic\",\n  \"sub\": \"text/vnd.dvb.subtitle\",\n  \"djvu\": \"image/vnd.djvu\",\n  \"djv\": \"image/vnd.djvu\",\n  \"dwg\": \"image/vnd.dwg\",\n  \"dxf\": \"image/vnd.dxf\",\n  \"fbs\": \"image/vnd.fastbidsheet\",\n  \"fpx\": \"image/vnd.fpx\",\n  \"fst\": \"image/vnd.fst\",\n  \"mmr\": \"image/vnd.fujixerox.edmics-mmr\",\n  \"rlc\": \"image/vnd.fujixerox.edmics-rlc\",\n  \"mdi\": \"image/vnd.ms-modi\",\n  \"wdp\": \"image/vnd.ms-photo\",\n  \"npx\": \"image/vnd.net-fpx\",\n  \"wbmp\": \"image/vnd.wap.wbmp\",\n  \"xif\": \"image/vnd.xiff\",\n  \"webp\": \"image/webp\",\n  \"3ds\": \"image/x-3ds\",\n  \"ras\": \"image/x-cmu-raster\",\n  \"cmx\": \"image/x-cmx\",\n  \"fh\": \"image/x-freehand\",\n  \"fhc\": \"image/x-freehand\",\n  \"fh4\": \"image/x-freehand\",\n  \"fh5\": \"image/x-freehand\",\n  \"fh7\": \"image/x-freehand\",\n  \"ico\": \"image/x-icon\",\n  \"sid\": \"image/x-mrsid-image\",\n  \"pcx\": \"image/x-pcx\",\n  \"pic\": \"image/x-pict\",\n  \"pct\": \"image/x-pict\",\n  \"pnm\": \"image/x-portable-anymap\",\n  \"pbm\": \"image/x-portable-bitmap\",\n  \"pgm\": \"image/x-portable-graymap\",\n  \"ppm\": \"image/x-portable-pixmap\",\n  \"rgb\": \"image/x-rgb\",\n  \"tga\": \"image/x-tga\",\n  \"xbm\": \"image/x-xbitmap\",\n  \"xpm\": \"image/x-xpixmap\",\n  \"xwd\": \"image/x-xwindowdump\",\n  \"eml\": \"message/rfc822\",\n  \"mime\": \"message/rfc822\",\n  \"igs\": \"model/iges\",\n  \"iges\": \"model/iges\",\n  \"msh\": \"model/mesh\",\n  \"mesh\": \"model/mesh\",\n  \"silo\": \"model/mesh\",\n  \"dae\": \"model/vnd.collada+xml\",\n  \"dwf\": \"model/vnd.dwf\",\n  \"gdl\": \"model/vnd.gdl\",\n  \"gtw\": \"model/vnd.gtw\",\n  \"mts\": \"model/vnd.mts\",\n  \"vtu\": \"model/vnd.vtu\",\n  \"wrl\": \"model/vrml\",\n  \"vrml\": \"model/vrml\",\n  \"x3db\": \"model/x3d+binary\",\n  \"x3dbz\": \"model/x3d+binary\",\n  \"x3dv\": \"model/x3d+vrml\",\n  \"x3dvz\": \"model/x3d+vrml\",\n  \"x3d\": \"model/x3d+xml\",\n  \"x3dz\": \"model/x3d+xml\",\n  \"appcache\": \"text/cache-manifest\",\n  \"ics\": \"text/calendar\",\n  \"ifb\": \"text/calendar\",\n  \"css\": \"text/css\",\n  \"csv\": \"text/csv\",\n  \"html\": \"text/html\",\n  \"htm\": \"text/html\",\n  \"n3\": \"text/n3\",\n  \"txt\": \"text/plain\",\n  \"text\": \"text/plain\",\n  \"conf\": \"text/plain\",\n  \"def\": \"text/plain\",\n  \"list\": \"text/plain\",\n  \"log\": \"text/plain\",\n  \"in\": \"text/plain\",\n  \"dsc\": \"text/prs.lines.tag\",\n  \"rtx\": \"text/richtext\",\n  \"sgml\": \"text/sgml\",\n  \"sgm\": \"text/sgml\",\n  \"tsv\": \"text/tab-separated-values\",\n  \"t\": \"text/troff\",\n  \"tr\": \"text/troff\",\n  \"roff\": \"text/troff\",\n  \"man\": \"text/troff\",\n  \"me\": \"text/troff\",\n  \"ms\": \"text/troff\",\n  \"ttl\": \"text/turtle\",\n  \"uri\": \"text/uri-list\",\n  \"uris\": \"text/uri-list\",\n  \"urls\": \"text/uri-list\",\n  \"vcard\": \"text/vcard\",\n  \"curl\": \"text/vnd.curl\",\n  \"dcurl\": \"text/vnd.curl.dcurl\",\n  \"scurl\": \"text/vnd.curl.scurl\",\n  \"mcurl\": \"text/vnd.curl.mcurl\",\n  \"fly\": \"text/vnd.fly\",\n  \"flx\": \"text/vnd.fmi.flexstor\",\n  \"gv\": \"text/vnd.graphviz\",\n  \"3dml\": \"text/vnd.in3d.3dml\",\n  \"spot\": \"text/vnd.in3d.spot\",\n  \"jad\": \"text/vnd.sun.j2me.app-descriptor\",\n  \"wml\": \"text/vnd.wap.wml\",\n  \"wmls\": \"text/vnd.wap.wmlscript\",\n  \"s\": \"text/x-asm\",\n  \"asm\": \"text/x-asm\",\n  \"c\": \"text/x-c\",\n  \"cc\": \"text/x-c\",\n  \"cxx\": \"text/x-c\",\n  \"cpp\": \"text/x-c\",\n  \"h\": \"text/x-c\",\n  \"hh\": \"text/x-c\",\n  \"dic\": \"text/x-c\",\n  \"f\": \"text/x-fortran\",\n  \"for\": \"text/x-fortran\",\n  \"f77\": \"text/x-fortran\",\n  \"f90\": \"text/x-fortran\",\n  \"java\": \"text/x-java-source\",\n  \"opml\": \"text/x-opml\",\n  \"p\": \"text/x-pascal\",\n  \"pas\": \"text/x-pascal\",\n  \"nfo\": \"text/x-nfo\",\n  \"etx\": \"text/x-setext\",\n  \"sfv\": \"text/x-sfv\",\n  \"uu\": \"text/x-uuencode\",\n  \"vcs\": \"text/x-vcalendar\",\n  \"vcf\": \"text/x-vcard\",\n  \"3gp\": \"video/3gpp\",\n  \"3g2\": \"video/3gpp2\",\n  \"h261\": \"video/h261\",\n  \"h263\": \"video/h263\",\n  \"h264\": \"video/h264\",\n  \"jpgv\": \"video/jpeg\",\n  \"jpm\": \"video/jpm\",\n  \"jpgm\": \"video/jpm\",\n  \"mj2\": \"video/mj2\",\n  \"mjp2\": \"video/mj2\",\n  \"mp4\": \"video/mp4\",\n  \"mp4v\": \"video/mp4\",\n  \"mpg4\": \"video/mp4\",\n  \"mpeg\": \"video/mpeg\",\n  \"mpg\": \"video/mpeg\",\n  \"mpe\": \"video/mpeg\",\n  \"m1v\": \"video/mpeg\",\n  \"m2v\": \"video/mpeg\",\n  \"ogv\": \"video/ogg\",\n  \"qt\": \"video/quicktime\",\n  \"mov\": \"video/quicktime\",\n  \"uvh\": \"video/vnd.dece.hd\",\n  \"uvvh\": \"video/vnd.dece.hd\",\n  \"uvm\": \"video/vnd.dece.mobile\",\n  \"uvvm\": \"video/vnd.dece.mobile\",\n  \"uvp\": \"video/vnd.dece.pd\",\n  \"uvvp\": \"video/vnd.dece.pd\",\n  \"uvs\": \"video/vnd.dece.sd\",\n  \"uvvs\": \"video/vnd.dece.sd\",\n  \"uvv\": \"video/vnd.dece.video\",\n  \"uvvv\": \"video/vnd.dece.video\",\n  \"dvb\": \"video/vnd.dvb.file\",\n  \"fvt\": \"video/vnd.fvt\",\n  \"mxu\": \"video/vnd.mpegurl\",\n  \"m4u\": \"video/vnd.mpegurl\",\n  \"pyv\": \"video/vnd.ms-playready.media.pyv\",\n  \"uvu\": \"video/vnd.uvvu.mp4\",\n  \"uvvu\": \"video/vnd.uvvu.mp4\",\n  \"viv\": \"video/vnd.vivo\",\n  \"webm\": \"video/webm\",\n  \"f4v\": \"video/x-f4v\",\n  \"fli\": \"video/x-fli\",\n  \"flv\": \"video/x-flv\",\n  \"m4v\": \"video/x-m4v\",\n  \"mkv\": \"video/x-matroska\",\n  \"mk3d\": \"video/x-matroska\",\n  \"mks\": \"video/x-matroska\",\n  \"mng\": \"video/x-mng\",\n  \"asf\": \"video/x-ms-asf\",\n  \"asx\": \"video/x-ms-asf\",\n  \"vob\": \"video/x-ms-vob\",\n  \"wm\": \"video/x-ms-wm\",\n  \"wmv\": \"video/x-ms-wmv\",\n  \"wmx\": \"video/x-ms-wmx\",\n  \"wvx\": \"video/x-ms-wvx\",\n  \"avi\": \"video/x-msvideo\",\n  \"movie\": \"video/x-sgi-movie\",\n  \"smv\": \"video/x-smv\",\n  \"ice\": \"x-conference/x-cooltalk\",\n  \"vtt\": \"text/vtt\",\n  \"crx\": \"application/x-chrome-extension\",\n  \"htc\": \"text/x-component\",\n  \"manifest\": \"text/cache-manifest\",\n  \"buffer\": \"application/octet-stream\",\n  \"m4p\": \"application/mp4\",\n  \"m4a\": \"audio/mp4\",\n  \"ts\": \"video/MP2T\",\n  \"event-stream\": \"text/event-stream\",\n  \"webapp\": \"application/x-web-app-manifest+json\",\n  \"lua\": \"text/x-lua\",\n  \"luac\": \"application/x-lua-bytecode\",\n  \"markdown\": \"text/x-markdown\",\n  \"md\": \"text/x-markdown\",\n  \"mkd\": \"text/x-markdown\"\n}\n  , extensions: {\n  \"application/andrew-inset\": \"ez\",\n  \"application/applixware\": \"aw\",\n  \"application/atom+xml\": \"atom\",\n  \"application/atomcat+xml\": \"atomcat\",\n  \"application/atomsvc+xml\": \"atomsvc\",\n  \"application/ccxml+xml\": \"ccxml\",\n  \"application/cdmi-capability\": \"cdmia\",\n  \"application/cdmi-container\": \"cdmic\",\n  \"application/cdmi-domain\": \"cdmid\",\n  \"application/cdmi-object\": \"cdmio\",\n  \"application/cdmi-queue\": \"cdmiq\",\n  \"application/cu-seeme\": \"cu\",\n  \"application/davmount+xml\": \"davmount\",\n  \"application/docbook+xml\": \"dbk\",\n  \"application/dssc+der\": \"dssc\",\n  \"application/dssc+xml\": \"xdssc\",\n  \"application/ecmascript\": \"ecma\",\n  \"application/emma+xml\": \"emma\",\n  \"application/epub+zip\": \"epub\",\n  \"application/exi\": \"exi\",\n  \"application/font-tdpfr\": \"pfr\",\n  \"application/gml+xml\": \"gml\",\n  \"application/gpx+xml\": \"gpx\",\n  \"application/gxf\": \"gxf\",\n  \"application/hyperstudio\": \"stk\",\n  \"application/inkml+xml\": \"ink\",\n  \"application/ipfix\": \"ipfix\",\n  \"application/java-archive\": \"jar\",\n  \"application/java-serialized-object\": \"ser\",\n  \"application/java-vm\": \"class\",\n  \"application/javascript\": \"js\",\n  \"application/json\": \"json\",\n  \"application/jsonml+json\": \"jsonml\",\n  \"application/lost+xml\": \"lostxml\",\n  \"application/mac-binhex40\": \"hqx\",\n  \"application/mac-compactpro\": \"cpt\",\n  \"application/mads+xml\": \"mads\",\n  \"application/marc\": \"mrc\",\n  \"application/marcxml+xml\": \"mrcx\",\n  \"application/mathematica\": \"ma\",\n  \"application/mathml+xml\": \"mathml\",\n  \"application/mbox\": \"mbox\",\n  \"application/mediaservercontrol+xml\": \"mscml\",\n  \"application/metalink+xml\": \"metalink\",\n  \"application/metalink4+xml\": \"meta4\",\n  \"application/mets+xml\": \"mets\",\n  \"application/mods+xml\": \"mods\",\n  \"application/mp21\": \"m21\",\n  \"application/mp4\": \"mp4s\",\n  \"application/msword\": \"doc\",\n  \"application/mxf\": \"mxf\",\n  \"application/octet-stream\": \"bin\",\n  \"application/oda\": \"oda\",\n  \"application/oebps-package+xml\": \"opf\",\n  \"application/ogg\": \"ogx\",\n  \"application/omdoc+xml\": \"omdoc\",\n  \"application/onenote\": \"onetoc\",\n  \"application/oxps\": \"oxps\",\n  \"application/patch-ops-error+xml\": \"xer\",\n  \"application/pdf\": \"pdf\",\n  \"application/pgp-encrypted\": \"pgp\",\n  \"application/pgp-signature\": \"asc\",\n  \"application/pics-rules\": \"prf\",\n  \"application/pkcs10\": \"p10\",\n  \"application/pkcs7-mime\": \"p7m\",\n  \"application/pkcs7-signature\": \"p7s\",\n  \"application/pkcs8\": \"p8\",\n  \"application/pkix-attr-cert\": \"ac\",\n  \"application/pkix-cert\": \"cer\",\n  \"application/pkix-crl\": \"crl\",\n  \"application/pkix-pkipath\": \"pkipath\",\n  \"application/pkixcmp\": \"pki\",\n  \"application/pls+xml\": \"pls\",\n  \"application/postscript\": \"ai\",\n  \"application/prs.cww\": \"cww\",\n  \"application/pskc+xml\": \"pskcxml\",\n  \"application/rdf+xml\": \"rdf\",\n  \"application/reginfo+xml\": \"rif\",\n  \"application/relax-ng-compact-syntax\": \"rnc\",\n  \"application/resource-lists+xml\": \"rl\",\n  \"application/resource-lists-diff+xml\": \"rld\",\n  \"application/rls-services+xml\": \"rs\",\n  \"application/rpki-ghostbusters\": \"gbr\",\n  \"application/rpki-manifest\": \"mft\",\n  \"application/rpki-roa\": \"roa\",\n  \"application/rsd+xml\": \"rsd\",\n  \"application/rss+xml\": \"rss\",\n  \"application/rtf\": \"rtf\",\n  \"application/sbml+xml\": \"sbml\",\n  \"application/scvp-cv-request\": \"scq\",\n  \"application/scvp-cv-response\": \"scs\",\n  \"application/scvp-vp-request\": \"spq\",\n  \"application/scvp-vp-response\": \"spp\",\n  \"application/sdp\": \"sdp\",\n  \"application/set-payment-initiation\": \"setpay\",\n  \"application/set-registration-initiation\": \"setreg\",\n  \"application/shf+xml\": \"shf\",\n  \"application/smil+xml\": \"smi\",\n  \"application/sparql-query\": \"rq\",\n  \"application/sparql-results+xml\": \"srx\",\n  \"application/srgs\": \"gram\",\n  \"application/srgs+xml\": \"grxml\",\n  \"application/sru+xml\": \"sru\",\n  \"application/ssdl+xml\": \"ssdl\",\n  \"application/ssml+xml\": \"ssml\",\n  \"application/tei+xml\": \"tei\",\n  \"application/thraud+xml\": \"tfi\",\n  \"application/timestamped-data\": \"tsd\",\n  \"application/vnd.3gpp.pic-bw-large\": \"plb\",\n  \"application/vnd.3gpp.pic-bw-small\": \"psb\",\n  \"application/vnd.3gpp.pic-bw-var\": \"pvb\",\n  \"application/vnd.3gpp2.tcap\": \"tcap\",\n  \"application/vnd.3m.post-it-notes\": \"pwn\",\n  \"application/vnd.accpac.simply.aso\": \"aso\",\n  \"application/vnd.accpac.simply.imp\": \"imp\",\n  \"application/vnd.acucobol\": \"acu\",\n  \"application/vnd.acucorp\": \"atc\",\n  \"application/vnd.adobe.air-application-installer-package+zip\": \"air\",\n  \"application/vnd.adobe.formscentral.fcdt\": \"fcdt\",\n  \"application/vnd.adobe.fxp\": \"fxp\",\n  \"application/vnd.adobe.xdp+xml\": \"xdp\",\n  \"application/vnd.adobe.xfdf\": \"xfdf\",\n  \"application/vnd.ahead.space\": \"ahead\",\n  \"application/vnd.airzip.filesecure.azf\": \"azf\",\n  \"application/vnd.airzip.filesecure.azs\": \"azs\",\n  \"application/vnd.amazon.ebook\": \"azw\",\n  \"application/vnd.americandynamics.acc\": \"acc\",\n  \"application/vnd.amiga.ami\": \"ami\",\n  \"application/vnd.android.package-archive\": \"apk\",\n  \"application/vnd.anser-web-certificate-issue-initiation\": \"cii\",\n  \"application/vnd.anser-web-funds-transfer-initiation\": \"fti\",\n  \"application/vnd.antix.game-component\": \"atx\",\n  \"application/vnd.apple.installer+xml\": \"mpkg\",\n  \"application/vnd.apple.mpegurl\": \"m3u8\",\n  \"application/vnd.aristanetworks.swi\": \"swi\",\n  \"application/vnd.astraea-software.iota\": \"iota\",\n  \"application/vnd.audiograph\": \"aep\",\n  \"application/vnd.blueice.multipass\": \"mpm\",\n  \"application/vnd.bmi\": \"bmi\",\n  \"application/vnd.businessobjects\": \"rep\",\n  \"application/vnd.chemdraw+xml\": \"cdxml\",\n  \"application/vnd.chipnuts.karaoke-mmd\": \"mmd\",\n  \"application/vnd.cinderella\": \"cdy\",\n  \"application/vnd.claymore\": \"cla\",\n  \"application/vnd.cloanto.rp9\": \"rp9\",\n  \"application/vnd.clonk.c4group\": \"c4g\",\n  \"application/vnd.cluetrust.cartomobile-config\": \"c11amc\",\n  \"application/vnd.cluetrust.cartomobile-config-pkg\": \"c11amz\",\n  \"application/vnd.commonspace\": \"csp\",\n  \"application/vnd.contact.cmsg\": \"cdbcmsg\",\n  \"application/vnd.cosmocaller\": \"cmc\",\n  \"application/vnd.crick.clicker\": \"clkx\",\n  \"application/vnd.crick.clicker.keyboard\": \"clkk\",\n  \"application/vnd.crick.clicker.palette\": \"clkp\",\n  \"application/vnd.crick.clicker.template\": \"clkt\",\n  \"application/vnd.crick.clicker.wordbank\": \"clkw\",\n  \"application/vnd.criticaltools.wbs+xml\": \"wbs\",\n  \"application/vnd.ctc-posml\": \"pml\",\n  \"application/vnd.cups-ppd\": \"ppd\",\n  \"application/vnd.curl.car\": \"car\",\n  \"application/vnd.curl.pcurl\": \"pcurl\",\n  \"application/vnd.dart\": \"dart\",\n  \"application/vnd.data-vision.rdz\": \"rdz\",\n  \"application/vnd.dece.data\": \"uvf\",\n  \"application/vnd.dece.ttml+xml\": \"uvt\",\n  \"application/vnd.dece.unspecified\": \"uvx\",\n  \"application/vnd.dece.zip\": \"uvz\",\n  \"application/vnd.denovo.fcselayout-link\": \"fe_launch\",\n  \"application/vnd.dna\": \"dna\",\n  \"application/vnd.dolby.mlp\": \"mlp\",\n  \"application/vnd.dpgraph\": \"dpg\",\n  \"application/vnd.dreamfactory\": \"dfac\",\n  \"application/vnd.ds-keypoint\": \"kpxx\",\n  \"application/vnd.dvb.ait\": \"ait\",\n  \"application/vnd.dvb.service\": \"svc\",\n  \"application/vnd.dynageo\": \"geo\",\n  \"application/vnd.ecowin.chart\": \"mag\",\n  \"application/vnd.enliven\": \"nml\",\n  \"application/vnd.epson.esf\": \"esf\",\n  \"application/vnd.epson.msf\": \"msf\",\n  \"application/vnd.epson.quickanime\": \"qam\",\n  \"application/vnd.epson.salt\": \"slt\",\n  \"application/vnd.epson.ssf\": \"ssf\",\n  \"application/vnd.eszigno3+xml\": \"es3\",\n  \"application/vnd.ezpix-album\": \"ez2\",\n  \"application/vnd.ezpix-package\": \"ez3\",\n  \"application/vnd.fdf\": \"fdf\",\n  \"application/vnd.fdsn.mseed\": \"mseed\",\n  \"application/vnd.fdsn.seed\": \"seed\",\n  \"application/vnd.flographit\": \"gph\",\n  \"application/vnd.fluxtime.clip\": \"ftc\",\n  \"application/vnd.framemaker\": \"fm\",\n  \"application/vnd.frogans.fnc\": \"fnc\",\n  \"application/vnd.frogans.ltf\": \"ltf\",\n  \"application/vnd.fsc.weblaunch\": \"fsc\",\n  \"application/vnd.fujitsu.oasys\": \"oas\",\n  \"application/vnd.fujitsu.oasys2\": \"oa2\",\n  \"application/vnd.fujitsu.oasys3\": \"oa3\",\n  \"application/vnd.fujitsu.oasysgp\": \"fg5\",\n  \"application/vnd.fujitsu.oasysprs\": \"bh2\",\n  \"application/vnd.fujixerox.ddd\": \"ddd\",\n  \"application/vnd.fujixerox.docuworks\": \"xdw\",\n  \"application/vnd.fujixerox.docuworks.binder\": \"xbd\",\n  \"application/vnd.fuzzysheet\": \"fzs\",\n  \"application/vnd.genomatix.tuxedo\": \"txd\",\n  \"application/vnd.geogebra.file\": \"ggb\",\n  \"application/vnd.geogebra.tool\": \"ggt\",\n  \"application/vnd.geometry-explorer\": \"gex\",\n  \"application/vnd.geonext\": \"gxt\",\n  \"application/vnd.geoplan\": \"g2w\",\n  \"application/vnd.geospace\": \"g3w\",\n  \"application/vnd.gmx\": \"gmx\",\n  \"application/vnd.google-earth.kml+xml\": \"kml\",\n  \"application/vnd.google-earth.kmz\": \"kmz\",\n  \"application/vnd.grafeq\": \"gqf\",\n  \"application/vnd.groove-account\": \"gac\",\n  \"application/vnd.groove-help\": \"ghf\",\n  \"application/vnd.groove-identity-message\": \"gim\",\n  \"application/vnd.groove-injector\": \"grv\",\n  \"application/vnd.groove-tool-message\": \"gtm\",\n  \"application/vnd.groove-tool-template\": \"tpl\",\n  \"application/vnd.groove-vcard\": \"vcg\",\n  \"application/vnd.hal+xml\": \"hal\",\n  \"application/vnd.handheld-entertainment+xml\": \"zmm\",\n  \"application/vnd.hbci\": \"hbci\",\n  \"application/vnd.hhe.lesson-player\": \"les\",\n  \"application/vnd.hp-hpgl\": \"hpgl\",\n  \"application/vnd.hp-hpid\": \"hpid\",\n  \"application/vnd.hp-hps\": \"hps\",\n  \"application/vnd.hp-jlyt\": \"jlt\",\n  \"application/vnd.hp-pcl\": \"pcl\",\n  \"application/vnd.hp-pclxl\": \"pclxl\",\n  \"application/vnd.hydrostatix.sof-data\": \"sfd-hdstx\",\n  \"application/vnd.ibm.minipay\": \"mpy\",\n  \"application/vnd.ibm.modcap\": \"afp\",\n  \"application/vnd.ibm.rights-management\": \"irm\",\n  \"application/vnd.ibm.secure-container\": \"sc\",\n  \"application/vnd.iccprofile\": \"icc\",\n  \"application/vnd.igloader\": \"igl\",\n  \"application/vnd.immervision-ivp\": \"ivp\",\n  \"application/vnd.immervision-ivu\": \"ivu\",\n  \"application/vnd.insors.igm\": \"igm\",\n  \"application/vnd.intercon.formnet\": \"xpw\",\n  \"application/vnd.intergeo\": \"i2g\",\n  \"application/vnd.intu.qbo\": \"qbo\",\n  \"application/vnd.intu.qfx\": \"qfx\",\n  \"application/vnd.ipunplugged.rcprofile\": \"rcprofile\",\n  \"application/vnd.irepository.package+xml\": \"irp\",\n  \"application/vnd.is-xpr\": \"xpr\",\n  \"application/vnd.isac.fcs\": \"fcs\",\n  \"application/vnd.jam\": \"jam\",\n  \"application/vnd.jcp.javame.midlet-rms\": \"rms\",\n  \"application/vnd.jisp\": \"jisp\",\n  \"application/vnd.joost.joda-archive\": \"joda\",\n  \"application/vnd.kahootz\": \"ktz\",\n  \"application/vnd.kde.karbon\": \"karbon\",\n  \"application/vnd.kde.kchart\": \"chrt\",\n  \"application/vnd.kde.kformula\": \"kfo\",\n  \"application/vnd.kde.kivio\": \"flw\",\n  \"application/vnd.kde.kontour\": \"kon\",\n  \"application/vnd.kde.kpresenter\": \"kpr\",\n  \"application/vnd.kde.kspread\": \"ksp\",\n  \"application/vnd.kde.kword\": \"kwd\",\n  \"application/vnd.kenameaapp\": \"htke\",\n  \"application/vnd.kidspiration\": \"kia\",\n  \"application/vnd.kinar\": \"kne\",\n  \"application/vnd.koan\": \"skp\",\n  \"application/vnd.kodak-descriptor\": \"sse\",\n  \"application/vnd.las.las+xml\": \"lasxml\",\n  \"application/vnd.llamagraphics.life-balance.desktop\": \"lbd\",\n  \"application/vnd.llamagraphics.life-balance.exchange+xml\": \"lbe\",\n  \"application/vnd.lotus-1-2-3\": \"123\",\n  \"application/vnd.lotus-approach\": \"apr\",\n  \"application/vnd.lotus-freelance\": \"pre\",\n  \"application/vnd.lotus-notes\": \"nsf\",\n  \"application/vnd.lotus-organizer\": \"org\",\n  \"application/vnd.lotus-screencam\": \"scm\",\n  \"application/vnd.lotus-wordpro\": \"lwp\",\n  \"application/vnd.macports.portpkg\": \"portpkg\",\n  \"application/vnd.mcd\": \"mcd\",\n  \"application/vnd.medcalcdata\": \"mc1\",\n  \"application/vnd.mediastation.cdkey\": \"cdkey\",\n  \"application/vnd.mfer\": \"mwf\",\n  \"application/vnd.mfmp\": \"mfm\",\n  \"application/vnd.micrografx.flo\": \"flo\",\n  \"application/vnd.micrografx.igx\": \"igx\",\n  \"application/vnd.mif\": \"mif\",\n  \"application/vnd.mobius.daf\": \"daf\",\n  \"application/vnd.mobius.dis\": \"dis\",\n  \"application/vnd.mobius.mbk\": \"mbk\",\n  \"application/vnd.mobius.mqy\": \"mqy\",\n  \"application/vnd.mobius.msl\": \"msl\",\n  \"application/vnd.mobius.plc\": \"plc\",\n  \"application/vnd.mobius.txf\": \"txf\",\n  \"application/vnd.mophun.application\": \"mpn\",\n  \"application/vnd.mophun.certificate\": \"mpc\",\n  \"application/vnd.mozilla.xul+xml\": \"xul\",\n  \"application/vnd.ms-artgalry\": \"cil\",\n  \"application/vnd.ms-cab-compressed\": \"cab\",\n  \"application/vnd.ms-excel\": \"xls\",\n  \"application/vnd.ms-excel.addin.macroenabled.12\": \"xlam\",\n  \"application/vnd.ms-excel.sheet.binary.macroenabled.12\": \"xlsb\",\n  \"application/vnd.ms-excel.sheet.macroenabled.12\": \"xlsm\",\n  \"application/vnd.ms-excel.template.macroenabled.12\": \"xltm\",\n  \"application/vnd.ms-fontobject\": \"eot\",\n  \"application/vnd.ms-htmlhelp\": \"chm\",\n  \"application/vnd.ms-ims\": \"ims\",\n  \"application/vnd.ms-lrm\": \"lrm\",\n  \"application/vnd.ms-officetheme\": \"thmx\",\n  \"application/vnd.ms-pki.seccat\": \"cat\",\n  \"application/vnd.ms-pki.stl\": \"stl\",\n  \"application/vnd.ms-powerpoint\": \"ppt\",\n  \"application/vnd.ms-powerpoint.addin.macroenabled.12\": \"ppam\",\n  \"application/vnd.ms-powerpoint.presentation.macroenabled.12\": \"pptm\",\n  \"application/vnd.ms-powerpoint.slide.macroenabled.12\": \"sldm\",\n  \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\": \"ppsm\",\n  \"application/vnd.ms-powerpoint.template.macroenabled.12\": \"potm\",\n  \"application/vnd.ms-project\": \"mpp\",\n  \"application/vnd.ms-word.document.macroenabled.12\": \"docm\",\n  \"application/vnd.ms-word.template.macroenabled.12\": \"dotm\",\n  \"application/vnd.ms-works\": \"wps\",\n  \"application/vnd.ms-wpl\": \"wpl\",\n  \"application/vnd.ms-xpsdocument\": \"xps\",\n  \"application/vnd.mseq\": \"mseq\",\n  \"application/vnd.musician\": \"mus\",\n  \"application/vnd.muvee.style\": \"msty\",\n  \"application/vnd.mynfc\": \"taglet\",\n  \"application/vnd.neurolanguage.nlu\": \"nlu\",\n  \"application/vnd.nitf\": \"ntf\",\n  \"application/vnd.noblenet-directory\": \"nnd\",\n  \"application/vnd.noblenet-sealer\": \"nns\",\n  \"application/vnd.noblenet-web\": \"nnw\",\n  \"application/vnd.nokia.n-gage.data\": \"ngdat\",\n  \"application/vnd.nokia.n-gage.symbian.install\": \"n-gage\",\n  \"application/vnd.nokia.radio-preset\": \"rpst\",\n  \"application/vnd.nokia.radio-presets\": \"rpss\",\n  \"application/vnd.novadigm.edm\": \"edm\",\n  \"application/vnd.novadigm.edx\": \"edx\",\n  \"application/vnd.novadigm.ext\": \"ext\",\n  \"application/vnd.oasis.opendocument.chart\": \"odc\",\n  \"application/vnd.oasis.opendocument.chart-template\": \"otc\",\n  \"application/vnd.oasis.opendocument.database\": \"odb\",\n  \"application/vnd.oasis.opendocument.formula\": \"odf\",\n  \"application/vnd.oasis.opendocument.formula-template\": \"odft\",\n  \"application/vnd.oasis.opendocument.graphics\": \"odg\",\n  \"application/vnd.oasis.opendocument.graphics-template\": \"otg\",\n  \"application/vnd.oasis.opendocument.image\": \"odi\",\n  \"application/vnd.oasis.opendocument.image-template\": \"oti\",\n  \"application/vnd.oasis.opendocument.presentation\": \"odp\",\n  \"application/vnd.oasis.opendocument.presentation-template\": \"otp\",\n  \"application/vnd.oasis.opendocument.spreadsheet\": \"ods\",\n  \"application/vnd.oasis.opendocument.spreadsheet-template\": \"ots\",\n  \"application/vnd.oasis.opendocument.text\": \"odt\",\n  \"application/vnd.oasis.opendocument.text-master\": \"odm\",\n  \"application/vnd.oasis.opendocument.text-template\": \"ott\",\n  \"application/vnd.oasis.opendocument.text-web\": \"oth\",\n  \"application/vnd.olpc-sugar\": \"xo\",\n  \"application/vnd.oma.dd2+xml\": \"dd2\",\n  \"application/vnd.openofficeorg.extension\": \"oxt\",\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\": \"pptx\",\n  \"application/vnd.openxmlformats-officedocument.presentationml.slide\": \"sldx\",\n  \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\": \"ppsx\",\n  \"application/vnd.openxmlformats-officedocument.presentationml.template\": \"potx\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": \"xlsx\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\": \"xltx\",\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": \"docx\",\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\": \"dotx\",\n  \"application/vnd.osgeo.mapguide.package\": \"mgp\",\n  \"application/vnd.osgi.dp\": \"dp\",\n  \"application/vnd.osgi.subsystem\": \"esa\",\n  \"application/vnd.palm\": \"pdb\",\n  \"application/vnd.pawaafile\": \"paw\",\n  \"application/vnd.pg.format\": \"str\",\n  \"application/vnd.pg.osasli\": \"ei6\",\n  \"application/vnd.picsel\": \"efif\",\n  \"application/vnd.pmi.widget\": \"wg\",\n  \"application/vnd.pocketlearn\": \"plf\",\n  \"application/vnd.powerbuilder6\": \"pbd\",\n  \"application/vnd.previewsystems.box\": \"box\",\n  \"application/vnd.proteus.magazine\": \"mgz\",\n  \"application/vnd.publishare-delta-tree\": \"qps\",\n  \"application/vnd.pvi.ptid1\": \"ptid\",\n  \"application/vnd.quark.quarkxpress\": \"qxd\",\n  \"application/vnd.realvnc.bed\": \"bed\",\n  \"application/vnd.recordare.musicxml\": \"mxl\",\n  \"application/vnd.recordare.musicxml+xml\": \"musicxml\",\n  \"application/vnd.rig.cryptonote\": \"cryptonote\",\n  \"application/vnd.rim.cod\": \"cod\",\n  \"application/vnd.rn-realmedia\": \"rm\",\n  \"application/vnd.rn-realmedia-vbr\": \"rmvb\",\n  \"application/vnd.route66.link66+xml\": \"link66\",\n  \"application/vnd.sailingtracker.track\": \"st\",\n  \"application/vnd.seemail\": \"see\",\n  \"application/vnd.sema\": \"sema\",\n  \"application/vnd.semd\": \"semd\",\n  \"application/vnd.semf\": \"semf\",\n  \"application/vnd.shana.informed.formdata\": \"ifm\",\n  \"application/vnd.shana.informed.formtemplate\": \"itp\",\n  \"application/vnd.shana.informed.interchange\": \"iif\",\n  \"application/vnd.shana.informed.package\": \"ipk\",\n  \"application/vnd.simtech-mindmapper\": \"twd\",\n  \"application/vnd.smaf\": \"mmf\",\n  \"application/vnd.smart.teacher\": \"teacher\",\n  \"application/vnd.solent.sdkm+xml\": \"sdkm\",\n  \"application/vnd.spotfire.dxp\": \"dxp\",\n  \"application/vnd.spotfire.sfs\": \"sfs\",\n  \"application/vnd.stardivision.calc\": \"sdc\",\n  \"application/vnd.stardivision.draw\": \"sda\",\n  \"application/vnd.stardivision.impress\": \"sdd\",\n  \"application/vnd.stardivision.math\": \"smf\",\n  \"application/vnd.stardivision.writer\": \"sdw\",\n  \"application/vnd.stardivision.writer-global\": \"sgl\",\n  \"application/vnd.stepmania.package\": \"smzip\",\n  \"application/vnd.stepmania.stepchart\": \"sm\",\n  \"application/vnd.sun.xml.calc\": \"sxc\",\n  \"application/vnd.sun.xml.calc.template\": \"stc\",\n  \"application/vnd.sun.xml.draw\": \"sxd\",\n  \"application/vnd.sun.xml.draw.template\": \"std\",\n  \"application/vnd.sun.xml.impress\": \"sxi\",\n  \"application/vnd.sun.xml.impress.template\": \"sti\",\n  \"application/vnd.sun.xml.math\": \"sxm\",\n  \"application/vnd.sun.xml.writer\": \"sxw\",\n  \"application/vnd.sun.xml.writer.global\": \"sxg\",\n  \"application/vnd.sun.xml.writer.template\": \"stw\",\n  \"application/vnd.sus-calendar\": \"sus\",\n  \"application/vnd.svd\": \"svd\",\n  \"application/vnd.symbian.install\": \"sis\",\n  \"application/vnd.syncml+xml\": \"xsm\",\n  \"application/vnd.syncml.dm+wbxml\": \"bdm\",\n  \"application/vnd.syncml.dm+xml\": \"xdm\",\n  \"application/vnd.tao.intent-module-archive\": \"tao\",\n  \"application/vnd.tcpdump.pcap\": \"pcap\",\n  \"application/vnd.tmobile-livetv\": \"tmo\",\n  \"application/vnd.trid.tpt\": \"tpt\",\n  \"application/vnd.triscape.mxs\": \"mxs\",\n  \"application/vnd.trueapp\": \"tra\",\n  \"application/vnd.ufdl\": \"ufd\",\n  \"application/vnd.uiq.theme\": \"utz\",\n  \"application/vnd.umajin\": \"umj\",\n  \"application/vnd.unity\": \"unityweb\",\n  \"application/vnd.uoml+xml\": \"uoml\",\n  \"application/vnd.vcx\": \"vcx\",\n  \"application/vnd.visio\": \"vsd\",\n  \"application/vnd.visionary\": \"vis\",\n  \"application/vnd.vsf\": \"vsf\",\n  \"application/vnd.wap.wbxml\": \"wbxml\",\n  \"application/vnd.wap.wmlc\": \"wmlc\",\n  \"application/vnd.wap.wmlscriptc\": \"wmlsc\",\n  \"application/vnd.webturbo\": \"wtb\",\n  \"application/vnd.wolfram.player\": \"nbp\",\n  \"application/vnd.wordperfect\": \"wpd\",\n  \"application/vnd.wqd\": \"wqd\",\n  \"application/vnd.wt.stf\": \"stf\",\n  \"application/vnd.xara\": \"xar\",\n  \"application/vnd.xfdl\": \"xfdl\",\n  \"application/vnd.yamaha.hv-dic\": \"hvd\",\n  \"application/vnd.yamaha.hv-script\": \"hvs\",\n  \"application/vnd.yamaha.hv-voice\": \"hvp\",\n  \"application/vnd.yamaha.openscoreformat\": \"osf\",\n  \"application/vnd.yamaha.openscoreformat.osfpvg+xml\": \"osfpvg\",\n  \"application/vnd.yamaha.smaf-audio\": \"saf\",\n  \"application/vnd.yamaha.smaf-phrase\": \"spf\",\n  \"application/vnd.yellowriver-custom-menu\": \"cmp\",\n  \"application/vnd.zul\": \"zir\",\n  \"application/vnd.zzazz.deck+xml\": \"zaz\",\n  \"application/voicexml+xml\": \"vxml\",\n  \"application/widget\": \"wgt\",\n  \"application/winhlp\": \"hlp\",\n  \"application/wsdl+xml\": \"wsdl\",\n  \"application/wspolicy+xml\": \"wspolicy\",\n  \"application/x-7z-compressed\": \"7z\",\n  \"application/x-abiword\": \"abw\",\n  \"application/x-ace-compressed\": \"ace\",\n  \"application/x-apple-diskimage\": \"dmg\",\n  \"application/x-authorware-bin\": \"aab\",\n  \"application/x-authorware-map\": \"aam\",\n  \"application/x-authorware-seg\": \"aas\",\n  \"application/x-bcpio\": \"bcpio\",\n  \"application/x-bittorrent\": \"torrent\",\n  \"application/x-blorb\": \"blb\",\n  \"application/x-bzip\": \"bz\",\n  \"application/x-bzip2\": \"bz2\",\n  \"application/x-cbr\": \"cbr\",\n  \"application/x-cdlink\": \"vcd\",\n  \"application/x-cfs-compressed\": \"cfs\",\n  \"application/x-chat\": \"chat\",\n  \"application/x-chess-pgn\": \"pgn\",\n  \"application/x-conference\": \"nsc\",\n  \"application/x-cpio\": \"cpio\",\n  \"application/x-csh\": \"csh\",\n  \"application/x-debian-package\": \"deb\",\n  \"application/x-dgc-compressed\": \"dgc\",\n  \"application/x-director\": \"dir\",\n  \"application/x-doom\": \"wad\",\n  \"application/x-dtbncx+xml\": \"ncx\",\n  \"application/x-dtbook+xml\": \"dtb\",\n  \"application/x-dtbresource+xml\": \"res\",\n  \"application/x-dvi\": \"dvi\",\n  \"application/x-envoy\": \"evy\",\n  \"application/x-eva\": \"eva\",\n  \"application/x-font-bdf\": \"bdf\",\n  \"application/x-font-ghostscript\": \"gsf\",\n  \"application/x-font-linux-psf\": \"psf\",\n  \"application/x-font-otf\": \"otf\",\n  \"application/x-font-pcf\": \"pcf\",\n  \"application/x-font-snf\": \"snf\",\n  \"application/x-font-ttf\": \"ttf\",\n  \"application/x-font-type1\": \"pfa\",\n  \"application/x-font-woff\": \"woff\",\n  \"application/x-freearc\": \"arc\",\n  \"application/x-futuresplash\": \"spl\",\n  \"application/x-gca-compressed\": \"gca\",\n  \"application/x-glulx\": \"ulx\",\n  \"application/x-gnumeric\": \"gnumeric\",\n  \"application/x-gramps-xml\": \"gramps\",\n  \"application/x-gtar\": \"gtar\",\n  \"application/x-hdf\": \"hdf\",\n  \"application/x-install-instructions\": \"install\",\n  \"application/x-iso9660-image\": \"iso\",\n  \"application/x-java-jnlp-file\": \"jnlp\",\n  \"application/x-latex\": \"latex\",\n  \"application/x-lzh-compressed\": \"lzh\",\n  \"application/x-mie\": \"mie\",\n  \"application/x-mobipocket-ebook\": \"prc\",\n  \"application/x-ms-application\": \"application\",\n  \"application/x-ms-shortcut\": \"lnk\",\n  \"application/x-ms-wmd\": \"wmd\",\n  \"application/x-ms-wmz\": \"wmz\",\n  \"application/x-ms-xbap\": \"xbap\",\n  \"application/x-msaccess\": \"mdb\",\n  \"application/x-msbinder\": \"obd\",\n  \"application/x-mscardfile\": \"crd\",\n  \"application/x-msclip\": \"clp\",\n  \"application/x-msdownload\": \"exe\",\n  \"application/x-msmediaview\": \"mvb\",\n  \"application/x-msmetafile\": \"wmf\",\n  \"application/x-msmoney\": \"mny\",\n  \"application/x-mspublisher\": \"pub\",\n  \"application/x-msschedule\": \"scd\",\n  \"application/x-msterminal\": \"trm\",\n  \"application/x-mswrite\": \"wri\",\n  \"application/x-netcdf\": \"nc\",\n  \"application/x-nzb\": \"nzb\",\n  \"application/x-pkcs12\": \"p12\",\n  \"application/x-pkcs7-certificates\": \"p7b\",\n  \"application/x-pkcs7-certreqresp\": \"p7r\",\n  \"application/x-rar-compressed\": \"rar\",\n  \"application/x-research-info-systems\": \"ris\",\n  \"application/x-sh\": \"sh\",\n  \"application/x-shar\": \"shar\",\n  \"application/x-shockwave-flash\": \"swf\",\n  \"application/x-silverlight-app\": \"xap\",\n  \"application/x-sql\": \"sql\",\n  \"application/x-stuffit\": \"sit\",\n  \"application/x-stuffitx\": \"sitx\",\n  \"application/x-subrip\": \"srt\",\n  \"application/x-sv4cpio\": \"sv4cpio\",\n  \"application/x-sv4crc\": \"sv4crc\",\n  \"application/x-t3vm-image\": \"t3\",\n  \"application/x-tads\": \"gam\",\n  \"application/x-tar\": \"tar\",\n  \"application/x-tcl\": \"tcl\",\n  \"application/x-tex\": \"tex\",\n  \"application/x-tex-tfm\": \"tfm\",\n  \"application/x-texinfo\": \"texinfo\",\n  \"application/x-tgif\": \"obj\",\n  \"application/x-ustar\": \"ustar\",\n  \"application/x-wais-source\": \"src\",\n  \"application/x-x509-ca-cert\": \"der\",\n  \"application/x-xfig\": \"fig\",\n  \"application/x-xliff+xml\": \"xlf\",\n  \"application/x-xpinstall\": \"xpi\",\n  \"application/x-xz\": \"xz\",\n  \"application/x-zmachine\": \"z1\",\n  \"application/xaml+xml\": \"xaml\",\n  \"application/xcap-diff+xml\": \"xdf\",\n  \"application/xenc+xml\": \"xenc\",\n  \"application/xhtml+xml\": \"xhtml\",\n  \"application/xml\": \"xml\",\n  \"application/xml-dtd\": \"dtd\",\n  \"application/xop+xml\": \"xop\",\n  \"application/xproc+xml\": \"xpl\",\n  \"application/xslt+xml\": \"xslt\",\n  \"application/xspf+xml\": \"xspf\",\n  \"application/xv+xml\": \"mxml\",\n  \"application/yang\": \"yang\",\n  \"application/yin+xml\": \"yin\",\n  \"application/zip\": \"zip\",\n  \"audio/adpcm\": \"adp\",\n  \"audio/basic\": \"au\",\n  \"audio/midi\": \"mid\",\n  \"audio/mp4\": \"mp4a\",\n  \"audio/mpeg\": \"mpga\",\n  \"audio/ogg\": \"oga\",\n  \"audio/s3m\": \"s3m\",\n  \"audio/silk\": \"sil\",\n  \"audio/vnd.dece.audio\": \"uva\",\n  \"audio/vnd.digital-winds\": \"eol\",\n  \"audio/vnd.dra\": \"dra\",\n  \"audio/vnd.dts\": \"dts\",\n  \"audio/vnd.dts.hd\": \"dtshd\",\n  \"audio/vnd.lucent.voice\": \"lvp\",\n  \"audio/vnd.ms-playready.media.pya\": \"pya\",\n  \"audio/vnd.nuera.ecelp4800\": \"ecelp4800\",\n  \"audio/vnd.nuera.ecelp7470\": \"ecelp7470\",\n  \"audio/vnd.nuera.ecelp9600\": \"ecelp9600\",\n  \"audio/vnd.rip\": \"rip\",\n  \"audio/webm\": \"weba\",\n  \"audio/x-aac\": \"aac\",\n  \"audio/x-aiff\": \"aif\",\n  \"audio/x-caf\": \"caf\",\n  \"audio/x-flac\": \"flac\",\n  \"audio/x-matroska\": \"mka\",\n  \"audio/x-mpegurl\": \"m3u\",\n  \"audio/x-ms-wax\": \"wax\",\n  \"audio/x-ms-wma\": \"wma\",\n  \"audio/x-pn-realaudio\": \"ram\",\n  \"audio/x-pn-realaudio-plugin\": \"rmp\",\n  \"audio/x-wav\": \"wav\",\n  \"audio/xm\": \"xm\",\n  \"chemical/x-cdx\": \"cdx\",\n  \"chemical/x-cif\": \"cif\",\n  \"chemical/x-cmdf\": \"cmdf\",\n  \"chemical/x-cml\": \"cml\",\n  \"chemical/x-csml\": \"csml\",\n  \"chemical/x-xyz\": \"xyz\",\n  \"image/bmp\": \"bmp\",\n  \"image/cgm\": \"cgm\",\n  \"image/g3fax\": \"g3\",\n  \"image/gif\": \"gif\",\n  \"image/ief\": \"ief\",\n  \"image/jpeg\": \"jpeg\",\n  \"image/ktx\": \"ktx\",\n  \"image/png\": \"png\",\n  \"image/prs.btif\": \"btif\",\n  \"image/sgi\": \"sgi\",\n  \"image/svg+xml\": \"svg\",\n  \"image/tiff\": \"tiff\",\n  \"image/vnd.adobe.photoshop\": \"psd\",\n  \"image/vnd.dece.graphic\": \"uvi\",\n  \"image/vnd.dvb.subtitle\": \"sub\",\n  \"image/vnd.djvu\": \"djvu\",\n  \"image/vnd.dwg\": \"dwg\",\n  \"image/vnd.dxf\": \"dxf\",\n  \"image/vnd.fastbidsheet\": \"fbs\",\n  \"image/vnd.fpx\": \"fpx\",\n  \"image/vnd.fst\": \"fst\",\n  \"image/vnd.fujixerox.edmics-mmr\": \"mmr\",\n  \"image/vnd.fujixerox.edmics-rlc\": \"rlc\",\n  \"image/vnd.ms-modi\": \"mdi\",\n  \"image/vnd.ms-photo\": \"wdp\",\n  \"image/vnd.net-fpx\": \"npx\",\n  \"image/vnd.wap.wbmp\": \"wbmp\",\n  \"image/vnd.xiff\": \"xif\",\n  \"image/webp\": \"webp\",\n  \"image/x-3ds\": \"3ds\",\n  \"image/x-cmu-raster\": \"ras\",\n  \"image/x-cmx\": \"cmx\",\n  \"image/x-freehand\": \"fh\",\n  \"image/x-icon\": \"ico\",\n  \"image/x-mrsid-image\": \"sid\",\n  \"image/x-pcx\": \"pcx\",\n  \"image/x-pict\": \"pic\",\n  \"image/x-portable-anymap\": \"pnm\",\n  \"image/x-portable-bitmap\": \"pbm\",\n  \"image/x-portable-graymap\": \"pgm\",\n  \"image/x-portable-pixmap\": \"ppm\",\n  \"image/x-rgb\": \"rgb\",\n  \"image/x-tga\": \"tga\",\n  \"image/x-xbitmap\": \"xbm\",\n  \"image/x-xpixmap\": \"xpm\",\n  \"image/x-xwindowdump\": \"xwd\",\n  \"message/rfc822\": \"eml\",\n  \"model/iges\": \"igs\",\n  \"model/mesh\": \"msh\",\n  \"model/vnd.collada+xml\": \"dae\",\n  \"model/vnd.dwf\": \"dwf\",\n  \"model/vnd.gdl\": \"gdl\",\n  \"model/vnd.gtw\": \"gtw\",\n  \"model/vnd.mts\": \"mts\",\n  \"model/vnd.vtu\": \"vtu\",\n  \"model/vrml\": \"wrl\",\n  \"model/x3d+binary\": \"x3db\",\n  \"model/x3d+vrml\": \"x3dv\",\n  \"model/x3d+xml\": \"x3d\",\n  \"text/cache-manifest\": \"appcache\",\n  \"text/calendar\": \"ics\",\n  \"text/css\": \"css\",\n  \"text/csv\": \"csv\",\n  \"text/html\": \"html\",\n  \"text/n3\": \"n3\",\n  \"text/plain\": \"txt\",\n  \"text/prs.lines.tag\": \"dsc\",\n  \"text/richtext\": \"rtx\",\n  \"text/sgml\": \"sgml\",\n  \"text/tab-separated-values\": \"tsv\",\n  \"text/troff\": \"t\",\n  \"text/turtle\": \"ttl\",\n  \"text/uri-list\": \"uri\",\n  \"text/vcard\": \"vcard\",\n  \"text/vnd.curl\": \"curl\",\n  \"text/vnd.curl.dcurl\": \"dcurl\",\n  \"text/vnd.curl.scurl\": \"scurl\",\n  \"text/vnd.curl.mcurl\": \"mcurl\",\n  \"text/vnd.dvb.subtitle\": \"sub\",\n  \"text/vnd.fly\": \"fly\",\n  \"text/vnd.fmi.flexstor\": \"flx\",\n  \"text/vnd.graphviz\": \"gv\",\n  \"text/vnd.in3d.3dml\": \"3dml\",\n  \"text/vnd.in3d.spot\": \"spot\",\n  \"text/vnd.sun.j2me.app-descriptor\": \"jad\",\n  \"text/vnd.wap.wml\": \"wml\",\n  \"text/vnd.wap.wmlscript\": \"wmls\",\n  \"text/x-asm\": \"s\",\n  \"text/x-c\": \"c\",\n  \"text/x-fortran\": \"f\",\n  \"text/x-java-source\": \"java\",\n  \"text/x-opml\": \"opml\",\n  \"text/x-pascal\": \"p\",\n  \"text/x-nfo\": \"nfo\",\n  \"text/x-setext\": \"etx\",\n  \"text/x-sfv\": \"sfv\",\n  \"text/x-uuencode\": \"uu\",\n  \"text/x-vcalendar\": \"vcs\",\n  \"text/x-vcard\": \"vcf\",\n  \"video/3gpp\": \"3gp\",\n  \"video/3gpp2\": \"3g2\",\n  \"video/h261\": \"h261\",\n  \"video/h263\": \"h263\",\n  \"video/h264\": \"h264\",\n  \"video/jpeg\": \"jpgv\",\n  \"video/jpm\": \"jpm\",\n  \"video/mj2\": \"mj2\",\n  \"video/mp4\": \"mp4\",\n  \"video/mpeg\": \"mpeg\",\n  \"video/ogg\": \"ogv\",\n  \"video/quicktime\": \"qt\",\n  \"video/vnd.dece.hd\": \"uvh\",\n  \"video/vnd.dece.mobile\": \"uvm\",\n  \"video/vnd.dece.pd\": \"uvp\",\n  \"video/vnd.dece.sd\": \"uvs\",\n  \"video/vnd.dece.video\": \"uvv\",\n  \"video/vnd.dvb.file\": \"dvb\",\n  \"video/vnd.fvt\": \"fvt\",\n  \"video/vnd.mpegurl\": \"mxu\",\n  \"video/vnd.ms-playready.media.pyv\": \"pyv\",\n  \"video/vnd.uvvu.mp4\": \"uvu\",\n  \"video/vnd.vivo\": \"viv\",\n  \"video/webm\": \"webm\",\n  \"video/x-f4v\": \"f4v\",\n  \"video/x-fli\": \"fli\",\n  \"video/x-flv\": \"flv\",\n  \"video/x-m4v\": \"m4v\",\n  \"video/x-matroska\": \"mkv\",\n  \"video/x-mng\": \"mng\",\n  \"video/x-ms-asf\": \"asf\",\n  \"video/x-ms-vob\": \"vob\",\n  \"video/x-ms-wm\": \"wm\",\n  \"video/x-ms-wmv\": \"wmv\",\n  \"video/x-ms-wmx\": \"wmx\",\n  \"video/x-ms-wvx\": \"wvx\",\n  \"video/x-msvideo\": \"avi\",\n  \"video/x-sgi-movie\": \"movie\",\n  \"video/x-smv\": \"smv\",\n  \"x-conference/x-cooltalk\": \"ice\",\n  \"text/vtt\": \"vtt\",\n  \"application/x-chrome-extension\": \"crx\",\n  \"text/x-component\": \"htc\",\n  \"video/MP2T\": \"ts\",\n  \"text/event-stream\": \"event-stream\",\n  \"application/x-web-app-manifest+json\": \"webapp\",\n  \"text/x-lua\": \"lua\",\n  \"application/x-lua-bytecode\": \"luac\",\n  \"text/x-markdown\": \"markdown\"\n}\n  , extension: function (mimeType) {\n  var type = mimeType.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)[1].toLowerCase();\n  return this.extensions[type];\n}\n  , define: function (map) {\n  for (var type in map) {\n    var exts = map[type];\n\n    for (var i = 0; i < exts.length; i++) {\n      if (false && this.types[exts]) {\n        console.warn(this._loading.replace(/.*\\//, ''), 'changes \"' + exts[i] + '\" extension type from ' +\n          this.types[exts] + ' to ' + type);\n      }\n\n      this.types[exts[i]] = type;\n    }\n\n    // Default extension is the first one we encounter\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n}\n  , charsets: {lookup: function (mimeType, fallback) {\n    // Assume text types are utf8\n    return (/^text\\//).test(mimeType) ? 'UTF-8' : fallback;\n  }}\n}\nmime.types.constructor = undefined\nmime.extensions.constructor = undefined","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar azureCommon = require('./../../common/common.node');\r\nvar extend = require('extend');\r\nvar fs = require('fs');\r\nvar FileService = require('./fileservice.core');\r\n\r\nvar azureutil = azureCommon.util;\r\nvar FileReadStream = azureCommon.FileReadStream;\r\nvar SpeedSummary = azureCommon.SpeedSummary;\r\nvar validate = azureCommon.validate;\r\n\r\n/**\r\n* Downloads an Azure file into a file.\r\n* (Not available in the JavaScript Client Library for Browsers)\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {string}             localFileName                               The local path to the file to be downloaded.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.shareSnapshotId]                   The snapshot identifier of the share.\r\n* @param {boolean}            [options.skipSizeCheck]                     Skip the size check to perform direct download.\r\n*                                                                         Set the option to true for small files.\r\n*                                                                         Parallel download and speed summary won't work with this option on.\r\n* @param {SpeedSummary}       [options.speedSummary]                      The download tracker objects.\r\n* @param {int}                [options.parallelOperationThreadCount]      The number of parallel operations that may be performed when uploading.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the file in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the file in the specified range.\r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading files.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `[result]{@link FileResult}` will contain the file information.\r\n*                                                                         `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n* \r\n* @example\r\n* var azure = require('azure-storage');\r\n* var FileService = azure.createFileService();\r\n* FileService.getFileToLocalFile('taskshare', taskdirectory', 'task1', 'task1-download.txt', function(error, serverFile) {\r\n*   if(!error) {\r\n*     // file available in serverFile.file variable\r\n*   }\r\n*/\r\nFileService.prototype.getFileToLocalFile = function (share, directory, file, localFileName, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  userOptions.speedSummary = userOptions.speedSummary || new SpeedSummary(file);\r\n\r\n  validate.validateArgs('getFileToLocalFile', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.string(localFileName, 'localFileName');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var writeStream = fs.createWriteStream(localFileName);\r\n  writeStream.on('error', function (error) {\r\n    callback(error);\r\n  });\r\n\r\n  this.getFileToStream(share, directory, file, writeStream, options, function (error, responseFile, response) {\r\n    if (error) {\r\n      writeStream.end(function () {\r\n        // If the download failed from the beginning, remove the file.\r\n        if (fs.existsSync(localFileName) && writeStream.bytesWritten === 0) {\r\n          fs.unlinkSync(localFileName);\r\n        }\r\n        callback(error, responseFile, response);\r\n      });\r\n    } else {\r\n      callback(error, responseFile, response);\r\n    }\r\n  });\r\n  \r\n  return options.speedSummary;\r\n};\r\n\r\n\r\n/**\r\n* Uploads a file to storage from a local file. If the file already exists on the service, it will be overwritten.\r\n* (Not available in the JavaScript Client Library for Browsers)\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                         The share name.\r\n* @param {string}             directory                                     The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                          The file name. File names may not start or end with the delimiter '/'.\r\n* @param (string)             localFileName                                 The local path to the file to be uploaded.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The download tracker objects;\r\n* @param {bool}               [options.storeFileContentMD5]                 Specifies whether the file's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for files.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The file's content settings.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the file. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the file.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The file service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The file's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The file's MD5 hash.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information if an error occurs; \r\n*                                                                           otherwise `[result]{@link FileResult}` will contain the file information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n*/\r\nFileService.prototype.createFileFromLocalFile = function (share, directory, file, localFileName, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createFileFromLocalFile', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.string(localFileName, 'localFileName');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  options.speedSummary = options.speedSummary || new SpeedSummary(file);\r\n\r\n  var self = this;\r\n  fs.stat(localFileName, function(error, stat) {\r\n    if (error) {\r\n      callback(error);\r\n    } else {\r\n      self.createFile(share, directory, file, stat.size, options, function(error) {\r\n        if(error) {\r\n          callback(error);\r\n        } else {\r\n          var stream = new FileReadStream(localFileName, {calcContentMd5: options.storeFileContentMD5});\r\n          self._createFileFromChunkStream(share, directory, file, stream, stat.size, options, callback);\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return options.speedSummary;\r\n};\r\n\r\nmodule.exports = FileService;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar qs = require('querystring');\r\nvar url = require('url');\r\nvar util = require('util');\r\nvar _ = require('underscore');\r\nvar extend = require('extend');\r\nvar path = require('path');\r\n\r\nvar azureCommon = require('./../../common/common.core');\r\nvar Md5Wrapper = require('./../../common/md5-wrapper');\r\nvar azureutil = azureCommon.util;\r\nvar SR = azureCommon.SR;\r\nvar validate = azureCommon.validate;\r\nvar SpeedSummary = azureCommon.SpeedSummary;\r\nvar StorageServiceClient = azureCommon.StorageServiceClient;\r\nvar WebResource = azureCommon.WebResource;\r\n\r\n// Constants\r\nvar Constants = azureCommon.Constants;\r\nvar FileConstants = Constants.FileConstants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar HttpConstants = Constants.HttpConstants;\r\nvar QueryStringConstants = Constants.QueryStringConstants;\r\n\r\n// Streams\r\nvar BatchOperation = azureCommon.BatchOperation;\r\nvar SpeedSummary = azureCommon.SpeedSummary;\r\nvar ChunkAllocator = azureCommon.ChunkAllocator;\r\nvar ChunkStream = azureCommon.ChunkStream;\r\nvar ChunkStreamWithStream = azureCommon.ChunkStreamWithStream;\r\nvar FileRangeStream = require('./internal/filerangestream');\r\n\r\n// Models requires\r\nvar ShareResult = require('./models/shareresult');\r\nvar DirectoryResult = require('./models/directoryresult');\r\nvar FileResult = require('./models/fileresult');\r\nvar AclResult = azureCommon.AclResult;\r\n\r\n// Errors requires\r\nvar errors = require('../../common/errors/errors');\r\nvar ArgumentNullError = errors.ArgumentNullError;\r\nvar ArgumentError = errors.ArgumentError;\r\n\r\n/**\r\n* Creates a new FileService object.\r\n* If no connection string or storageaccount and storageaccesskey are provided,\r\n* the AZURE_STORAGE_CONNECTION_STRING or AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY environment variables will be used.\r\n* @class\r\n* The FileService class is used to perform operations on the Microsoft Azure File Service.\r\n* The File Service provides storage for binary large objects, and provides functions for working with data stored in files.\r\n* \r\n* For more information on the File Service, as well as task focused information on using it in a Node.js application, see\r\n* [How to Use the File Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-file-storage/).\r\n* The following defaults can be set on the file service.\r\n* defaultTimeoutIntervalInMs                          The default timeout interval, in milliseconds, to use for request made via the file service.\r\n* defaultEnableReuseSocket                            The default boolean value to enable socket reuse when uploading local files or streams.\r\n*                                                     If the Node.js version is lower than 0.10.x, socket reuse will always be turned off.\r\n* defaultClientRequestTimeoutInMs                     The default timeout of client requests, in milliseconds, to use for the request made via the file service.\r\n* defaultMaximumExecutionTimeInMs                     The default maximum execution time across all potential retries, for requests made via the file service.\r\n* defaultLocationMode                                 The default location mode for requests made via the file service.\r\n* parallelOperationThreadCount                        The number of parallel operations that may be performed when uploading a file.\r\n* useNagleAlgorithm                                   Determines whether the Nagle algorithm is used for requests made via the file service; true to use the  \r\n*                                                     Nagle algorithm; otherwise, false. The default value is false.\r\n* enableGlobalHttpAgent                               Determines whether global HTTP(s) agent is enabled; true to use Global HTTP(s) agent; otherwise, false to use\r\n*                                                     http(s).Agent({keepAlive:true}).\r\n* @constructor\r\n* @extends {StorageServiceClient}\r\n*\r\n* @param {string} [storageAccountOrConnectionString]  The storage account or the connection string.\r\n* @param {string} [storageAccessKey]                  The storage access key.\r\n* @param {string|object} [host]                       The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @param {string} [sasToken]                          The Shared Access Signature token.\r\n* @param {string} [endpointSuffix]                    The endpoint suffix.\r\n*/\r\nfunction FileService(storageAccountOrConnectionString, storageAccessKey, host, sasToken, endpointSuffix) {\r\n  var storageServiceSettings = StorageServiceClient.getStorageSettings(storageAccountOrConnectionString, storageAccessKey, host, sasToken, endpointSuffix);\r\n\r\n  FileService['super_'].call(this,\r\n    storageServiceSettings._name,\r\n    storageServiceSettings._key,\r\n    storageServiceSettings._fileEndpoint,\r\n    storageServiceSettings._usePathStyleUri,\r\n    storageServiceSettings._sasToken);\r\n\r\n  this.defaultEnableReuseSocket = Constants.DEFAULT_ENABLE_REUSE_SOCKET;\r\n  this.singleFileThresholdInBytes = FileConstants.DEFAULT_SINGLE_FILE_GET_THRESHOLD_IN_BYTES;\r\n  this.parallelOperationThreadCount = Constants.DEFAULT_PARALLEL_OPERATION_THREAD_COUNT;\r\n}\r\n\r\nutil.inherits(FileService, StorageServiceClient);\r\n\r\n// Utility methods\r\n\r\n/**\r\n* Create resource name\r\n* @ignore\r\n*\r\n* @param {string} share          Share name\r\n* @param {string} [directory]    Directory name\r\n* @param {string} [file]         File name\r\n* @return {string} The encoded resource name.\r\n*/\r\nfunction createResourceName(share, directory, file, forSAS) {\r\n  var encode = function(name) {\r\n    if (name && !forSAS) {\r\n      name = encodeURIComponent(name);\r\n      name = name.replace(/%2F/g, '/');\r\n      name = name.replace(/%5C/g, '/');\r\n      name = name.replace(/\\+/g, '%20');\r\n    }\r\n    return name;\r\n  };\r\n\r\n  var name = share;\r\n\r\n  if (directory) {\r\n    // if directory does not start with '/', add it\r\n    if (directory[0] !== '/') {\r\n      name += ('/');\r\n    }\r\n\r\n    name += encode(directory);\r\n  } \r\n\r\n  if (file) {\r\n    // if the current path does not end with '/', add it\r\n    if (name[name.length - 1] !== '/') {\r\n      name += ('/');\r\n    }\r\n    \r\n    name += encode(file);\r\n  }\r\n\r\n  return path.normalize(name).replace(/\\\\/g, '/');\r\n}\r\n\r\n// File service methods\r\n\r\n/**\r\n* Gets the properties of a storage account's File service, including Azure Storage Analytics.\r\n*\r\n* @this {FileService}\r\n* @param {object}       [options]                               The request options.\r\n* @param {LocationMode} [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}          [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}          [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}          [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}       [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}         [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                               The default value is false.\r\n* @param {errorOrResult}  callback                              `error` will contain information if an error occurs; otherwise, `[result]{@link ServiceProperties}` will contain the properties \r\n*                                                               and `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.getServiceProperties = function (optionsOrCallback, callback) {\r\n  return this.getAccountServiceProperties(optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Sets the properties of a storage account's File service, including Azure Storage Analytics.\r\n* You can also use this operation to set the default request version for all incoming requests that do not have a version specified.\r\n*\r\n* @this {FileService}\r\n* @param {object}             serviceProperties                        The service properties.\r\n* @param {object}             [options]                                The request options.\r\n* @param {LocationMode}       [options.locationMode]                   Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                      Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]            The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]       The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]       The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                      The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                      execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]              Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                      The default value is false.\r\n* @param {errorOrResponse}    callback                                 `error` will contain information\r\n*                                                                      if an error occurs; otherwise, `response`\r\n*                                                                      will contain information related to this operation.\r\n*/\r\nFileService.prototype.setServiceProperties = function (serviceProperties, optionsOrCallback, callback) {\r\n  return this.setAccountServiceProperties(serviceProperties, optionsOrCallback, callback);\r\n};\r\n\r\n// Share methods\r\n\r\n/**\r\n* Lists a segment containing a collection of share items under the specified account.\r\n*\r\n* @this {FileService}\r\n* @param {object}             currentToken                                A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.maxResults]                        Specifies the maximum number of shares to return per call to Azure storage.\r\n* @param {string}             [options.include]                           Include this parameter to specify that the share's metadata be returned as part of the response body. (allowed values: '', 'metadata', 'snapshots' or any combination of them)\r\n*                                                                         **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                         `entries`  gives a list of `[shares]{@link ShareResult}` and the `continuationToken` is used for the next listing operation.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.listSharesSegmented = function (currentToken, optionsOrCallback, callback) {\r\n  this.listSharesSegmentedWithPrefix(null /* prefix */, currentToken, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of share items whose names begin with the specified prefix under the specified account.\r\n*\r\n* @this {FileService}\r\n* @param {string}             prefix                                      The prefix of the share name.\r\n* @param {object}             currentToken                                A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {string}             [options.prefix]                            Filters the results to return only shares whose name begins with the specified prefix.\r\n* @param {int}                [options.maxResults]                        Specifies the maximum number of shares to return per call to Azure storage.\r\n* @param {string}             [options.include]                           Include this parameter to specify that the share's metadata be returned as part of the response body. (allowed values: '', 'metadata', 'snapshots' or any combination of them)\r\n*                                                                         **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                         `entries`  gives a list of `[shares]{@link ShareResult}` and the `continuationToken` is used for the next listing operation.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.listSharesSegmentedWithPrefix = function (prefix, currentToken, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('listShares', function (v) {\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get()\r\n    .withQueryOption(QueryStringConstants.COMP, 'list')\r\n    .withQueryOption(QueryStringConstants.MAX_RESULTS, options.maxResults)\r\n    .withQueryOption(QueryStringConstants.INCLUDE, options.include);\r\n  \r\n  if (!azureutil.objectIsNull(currentToken)) {\r\n    webResource.withQueryOption(QueryStringConstants.MARKER, currentToken.nextMarker);\r\n  }\r\n  \r\n  webResource.withQueryOption(QueryStringConstants.PREFIX, prefix);\r\n  \r\n  //options.requestLocationMode = azureutil.getNextListingLocationMode(currentToken);\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.listSharesResult = null;\r\n    \r\n    if (!responseObject.error) {\r\n      responseObject.listSharesResult = {\r\n        entries: null,\r\n        continuationToken: null\r\n      };\r\n      responseObject.listSharesResult.entries = [];\r\n      \r\n      var shares = [];\r\n      \r\n      if (responseObject.response.body.EnumerationResults.Shares && responseObject.response.body.EnumerationResults.Shares.Share) {\r\n        shares = responseObject.response.body.EnumerationResults.Shares.Share;\r\n        if (!_.isArray(shares)) {\r\n          shares = [shares];\r\n        }\r\n      }\r\n      \r\n      shares.forEach(function (currentShare) {\r\n        var shareResult = ShareResult.parse(currentShare);\r\n        responseObject.listSharesResult.entries.push(shareResult);\r\n      });\r\n      \r\n      if (responseObject.response.body.EnumerationResults.NextMarker) {\r\n        responseObject.listSharesResult.continuationToken = {\r\n          nextMarker: null,\r\n          targetLocation: null\r\n        };\r\n        \r\n        responseObject.listSharesResult.continuationToken.nextMarker = responseObject.response.body.EnumerationResults.NextMarker;\r\n        responseObject.listSharesResult.continuationToken.targetLocation = responseObject.targetLocation;\r\n      }\r\n    }\r\n    \r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.listSharesResult, returnObject.response);\r\n    };\r\n    \r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Checks whether or not a share exists on the service.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                   The share name.\r\n* @param {object}             [options]                               The request options.\r\n* @param {string}             [options.shareSnapshotId]               The snapshot identifier of the share.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}      callback                                `error` will contain information\r\n*                                                                     if an error occurs; otherwise `[result]{@link ShareResult}` will contain\r\n*                                                                     the share information including `exists` boolean member. \r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.doesShareExist = function (share, optionsOrCallback, callback) {\r\n  this._doesShareExist(share, false, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Creates a new share under the specified account.\r\n* If a share with the same name already exists, the operation fails.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {int}                [options.quota]                     Specifies the maximum size of the share, in gigabytes.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {object}             [options.metadata]                  The metadata key/value pairs.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.   \r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `[result]{@link ShareResult}` will contain\r\n*                                                                 the share information.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.createShare = function (share, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createShare', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.shareQuotaIsValid(userOptions.quota);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(share)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withHeader(HeaderConstants.SHARE_QUOTA, options.quota);\r\n\r\n  webResource.addOptionalMetadataHeaders(options.metadata);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.shareResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.shareResult = new ShareResult(share);\r\n      responseObject.shareResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n\r\n      if (options.metadata) {\r\n        responseObject.shareResult.metadata = options.metadata;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.shareResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Creates a share snapshot.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {object}             [options.metadata]                  The metadata key/value pairs.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.   \r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will contain\r\n*                                                                 the ID of the snapshot.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.createShareSnapshot = function (share, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createShareSnapshot', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(share)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withQueryOption(QueryStringConstants.COMP, QueryStringConstants.SNAPSHOT);\r\n  webResource.addOptionalMetadataHeaders(options.metadata);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.snapshotId = null;\r\n    if (!responseObject.error) {\r\n      responseObject.snapshotId = responseObject.response.headers[HeaderConstants.SNAPSHOT];\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.snapshotId, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Creates a new share under the specified account if the share does not exists.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                     The share name.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {object}             [options.metadata]                        The metadata key/value pairs.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResult}      callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise `[result]{@link ShareResult}` will contain\r\n*                                                                       the share information including `created` boolean member.\r\n*                                                                       `response` will contain information related to this operation.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var FileService = azure.createFileService();\r\n* FileService.createShareIfNotExists('taskshare', function(error) {\r\n*   if(!error) {\r\n*     // Share created or already existed\r\n*   }\r\n* }); \r\n*/\r\nFileService.prototype.createShareIfNotExists = function (share, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createShareIfNotExists', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  delete options.shareSnapshotId;\r\n\r\n  var self = this;\r\n  self._doesShareExist(share, true, options, function(error, result, response) {\r\n    var exists = result.exists;\r\n    result.created = false;\r\n    delete result.exists;\r\n    \r\n    if(error){\r\n      callback(error, result, response);\r\n    } else if (exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, result, response);\r\n    } else {\r\n      self.createShare(share, options, function (createError, responseShare, createResponse) {\r\n        if(!createError){\r\n          responseShare.created = true;\r\n        }\r\n        else if (createError && createError.statusCode === HttpConstants.HttpResponseCodes.Conflict && createError.code === Constants.FileErrorCodeStrings.SHARE_ALREADY_EXISTS) {\r\n          // If it was created before, there was no actual error.\r\n          createError = null;\r\n          createResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(createError, responseShare, createResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Retrieves a share and its properties from a specified account.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n\r\n\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.shareSnapshotId]           The snapshot identifier of the share.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `[result]{@link ShareResult}` will contain\r\n*                                                                 information for the share.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.getShareProperties = function (share, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getShareProperties', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.head(share)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n\r\n  //options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.shareResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.shareResult = new ShareResult(share);\r\n      responseObject.shareResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.shareResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.shareResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Sets the properties for the specified share.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {object}             [properties]                                The share properties to set.\r\n* @param {string|int}         [properties.quota]                          Specifies the maximum size of the share, in gigabytes.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[share]{@link ShareResult}` will contain\r\n*                                                                         information about the share.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.setShareProperties = function (share, properties, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('setShareProperties', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.shareQuotaIsValid(userOptions.quota);\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, properties, userOptions);\r\n  var resourceName = createResourceName(share);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withQueryOption(QueryStringConstants.COMP, 'properties')\r\n    .withHeader(HeaderConstants.SHARE_QUOTA, options.quota);\r\n  \r\n  FileResult.setProperties(webResource, options);\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.shareResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.shareResult = new ShareResult(share);\r\n      responseObject.shareResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n    \r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.shareResult, returnObject.response);\r\n    };\r\n    \r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Gets the share statistics for a share.\r\n*\r\n* @this {FileService}\r\n* @param {string}           share                                   The share name.\r\n* @param {object}           [options]                               The request options.\r\n* @param {LocationMode}     [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                   Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}              [options.timeoutIntervalInMs]           The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]    The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}              [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                   The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                   execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}           [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}             [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                   The default value is false.\r\n* @param {errorOrResult}    callback                                `error` will contain information if an error occurs; otherwise, `[result]{@link ServiceStats}` will contain the stats and \r\n*                                                                   `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.getShareStats = function (share, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('getShareStats', function (v) {\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(share);\r\n  var webResource = WebResource.get(resourceName)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withQueryOption(QueryStringConstants.COMP, 'stats');\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.shareResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.shareResult = ShareResult.parse(responseObject.response.body, share);\r\n      responseObject.shareResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n    \r\n    // function to be called after all filters\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.shareResult, returnObject.response);\r\n    };\r\n    \r\n    // call the first filter\r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n\r\n/**\r\n* Returns all user-defined metadata for the share.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                     The share name.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {string}             [options.shareSnapshotId]                 The snapshot identifier of the share.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResult}      callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise `[result]{@link ShareResult}` will contain\r\n*                                                                       information for the share.\r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.getShareMetadata = function (share, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getShareMetadata', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.head(share)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata')\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.shareResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.shareResult = new ShareResult(share);\r\n      responseObject.shareResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.shareResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.shareResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Sets the share's metadata.\r\n*\r\n* Calling the Set Share Metadata operation overwrites all existing metadata that is associated with the share.\r\n* It's not possible to modify an individual name/value pair.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {object}             metadata                            The metadata key/value pairs.\r\n* @param {object}             [options]                           The request options.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResponse}  callback                              `error` will contain information\r\n*                                                                 if an error occurs; otherwise \r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.setShareMetadata = function (share, metadata, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setShareMetadata', function (v) {\r\n    v.string(share, 'share');\r\n    v.object(metadata, 'metadata');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(share)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata');\r\n\r\n  webResource.addOptionalMetadataHeaders(metadata);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.shareResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.shareResult = new ShareResult(share);\r\n      responseObject.shareResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.shareResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Gets the share's ACL.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `[result]{@link ShareAclResult}` will contain\r\n*                                                                 information for the share.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.getShareAcl = function (share, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('getShareAcl', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get(share)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withQueryOption(QueryStringConstants.COMP, 'acl');\r\n  \r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.shareResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.shareResult = new ShareResult(share);\r\n      responseObject.shareResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      responseObject.shareResult.signedIdentifiers = AclResult.parse(responseObject.response.body);\r\n    }\r\n    \r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.shareResult, returnObject.response);\r\n    };\r\n    \r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Updates the share's ACL.\r\n*\r\n* @this {FileService}\r\n* @param {string}                         share                               The share name.\r\n* @param {Object.<string, AccessPolicy>}  signedIdentifiers                   The share ACL settings. See `[AccessPolicy]{@link AccessPolicy}` for detailed information.\r\n* @param {object}                         [options]                           The request options.\r\n* @param {int}                            [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                            [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                            [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                             The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                             execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}                         [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}                           [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                             The default value is false.\r\n* @param {errorOrResult}                  callback                            `error` will contain information\r\n*                                                                             if an error occurs; otherwise `[result]{@link ShareAclResult}` will contain\r\n*                                                                             information for the share.\r\n*                                                                             `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.setShareAcl = function (share, signedIdentifiers, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('setShareAcl', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  \r\n  var policies = null;\r\n  if (signedIdentifiers) {\r\n    if(_.isArray(signedIdentifiers)) {\r\n      throw new TypeError(SR.INVALID_SIGNED_IDENTIFIERS);\r\n    }\r\n    policies = AclResult.serialize(signedIdentifiers);\r\n  }\r\n  \r\n  var webResource = WebResource.put(share)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withQueryOption(QueryStringConstants.COMP, 'acl')\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, !azureutil.objectIsNull(policies) ? Buffer.byteLength(policies) : 0)\r\n    .withBody(policies);\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.shareResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.shareResult = new ShareResult(share);\r\n      responseObject.shareResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      if (signedIdentifiers) {\r\n        responseObject.shareResult.signedIdentifiers = signedIdentifiers;\r\n      }\r\n    }\r\n    \r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.shareResult, returnObject.response);\r\n    };\r\n    \r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Marks the specified share for deletion.\r\n* The share and any files contained within it are later deleted during garbage collection.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.deleteSnapshots]           The snapshot delete option. See azure.FileUtilities.ShareSnapshotDeleteOptions.*. \r\n* @param {string}             [options.shareSnapshotId]           The share snapshot identifier.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResponse}  callback                              `error` will contain information\r\n*                                                                 if an error occurs; otherwise\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.deleteShare = function (share, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteShare', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  if (!azureutil.objectIsNull(options.shareSnapshotId) && !azureutil.objectIsNull(options.deleteSnapshots)) {\r\n    throw new ArgumentError('options', SR.INVALID_DELETE_SNAPSHOT_OPTION);\r\n  }\r\n\r\n  var webResource = WebResource.del(share)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId)\r\n    .withHeader(HeaderConstants.DELETE_SNAPSHOT, options.deleteSnapshots);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Marks the specified share for deletion if it exists.\r\n* The share and any files contained within it are later deleted during garbage collection.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.deleteSnapshots]           The snapshot delete option. See azure.FileUtilities.ShareSnapshotDeleteOptions.*. \r\n* @param {string}             [options.shareSnapshotId]           The share snapshot identifier.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will \r\n*                                                                 be true if the share exists and was deleted, or false if the share\r\n*                                                                 did not exist.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.deleteShareIfExists = function (share, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteShareIfExists', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var self = this;\r\n  self._doesShareExist(share, true, options, function (error, result, response) {\r\n    if(error){\r\n      callback(error, result.exists, response);\r\n    } else if (!result.exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, false, response);\r\n    } else {\r\n      self.deleteShare(share, options, function (deleteError, deleteResponse) {\r\n        var deleted;\r\n        if (!deleteError){\r\n          deleted = true;\r\n        } else if (deleteError && deleteError.statuscode === HttpConstants.HttpResponseCodes.NotFound && deleteError.code === Constants.FileErrorCodeStrings.SHARE_NOT_FOUND) {\r\n          // If it was deleted already, there was no actual error.\r\n          deleted = false;\r\n          deleteError = null;\r\n          deleteResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(deleteError, deleted, deleteResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n// Directory methods\r\n\r\n/**\r\n* Checks whether or not a directory exists on the service.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                   The share name.\r\n* @param {string}             directory                               The directory name. Use '' to refer to the base directory.\r\n* @param {object}             [options]                               The request options.\r\n* @param {string}             [options.shareSnapshotId]               The share snapshot identifier.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {errorOrResult}      callback                                `error` will contain information\r\n*                                                                     if an error occurs; otherwise `[result]{@link DirectoryResult}` will contain\r\n*                                                                     the directory information including `exists` boolean member.\r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.doesDirectoryExist = function (share, directory, optionsOrCallback, callback) {\r\n  this._doesDirectoryExist(share, directory, false, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Creates a new directory under the specified account.\r\n* If a directory with the same name already exists, the operation fails.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {string}             directory                           The directory name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {object}             [options.metadata]                  The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.    \r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `[result]{@link DirectoryResult}` will contain\r\n*                                                                 the directory information.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.createDirectory = function (share, directory, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createDirectory', function (v) {\r\n    v.string(share, 'share');\r\n    v.string(directory, 'directory');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(createResourceName(share, directory))\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'directory');\r\n\r\n  webResource.addOptionalMetadataHeaders(options.metadata);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.directoryResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.directoryResult = new DirectoryResult(directory);\r\n      responseObject.directoryResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.directoryResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Creates a new directory under the specified account if the directory does not exists.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                     The share name.\r\n* @param {string}             directory                                 The directory name.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {object}             [options.metadata]                        The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResult}      callback                                  `error` will contain information\r\n*                                                                       if an error occurs; otherwise `[result]{@link DirectoryResult}` will contain\r\n*                                                                       the directory information including `created` boolean member.\r\n*                                                                       already exists.\r\n*                                                                       `response` will contain information related to this operation.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var FileService = azure.createFileService();\r\n* FileService.createDirectoryIfNotExists('taskshare', taskdirectory', function(error) {\r\n*   if(!error) {\r\n*     // Directory created or already existed\r\n*   }\r\n* }); \r\n*/\r\nFileService.prototype.createDirectoryIfNotExists = function (share, directory, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createDirectoryIfNotExists', function (v) {\r\n    v.string(share, 'share');\r\n    v.string(directory, 'directory');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  delete options.shareSnapshotId;\r\n  \r\n  var self = this;\r\n  self._doesDirectoryExist(share, directory, true, options, function(error, result, response) {\r\n    var exists = result.exists;\r\n    result.created = false;\r\n    delete result.exists;\r\n    \r\n    if(error){\r\n      callback(error, result, response);\r\n    } else if (exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, result, response);\r\n    } else {\r\n      self.createDirectory(share, directory, options, function (createError, responseDirectory, createResponse) {\r\n        if(!createError){\r\n          responseDirectory.created = true;\r\n        }\r\n        else if (createError && createError.statusCode === HttpConstants.HttpResponseCodes.Conflict && createError.code === Constants.StorageErrorCodeStrings.RESOURCE_ALREADY_EXISTS) {\r\n          // If it was created before, there was no actual error.\r\n          createError = null;\r\n          createResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(createError, responseDirectory, createResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Retrieves a directory and its properties from a specified account.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {string}             directory                           The directory name. Use '' to refer to the base directory.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.shareSnapshotId]           The snapshot identifier of the share.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `[result]{@link DirectoryResult}` will contain\r\n*                                                                 information for the directory.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.getDirectoryProperties = function (share, directory, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getDirectoryProperties', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.head(createResourceName(share, directory))\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'directory')\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n    \r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.directoryResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.directoryResult = new DirectoryResult(directory);\r\n      responseObject.directoryResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.directoryResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.directoryResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Marks the specified directory for deletion. The directory must be empty before it can be deleted.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {string}             directory                           The directory name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResponse}  callback                              `error` will contain information\r\n*                                                                 if an error occurs; otherwise\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.deleteDirectory = function (share, directory, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteDirectory', function (v) {\r\n    v.string(share, 'share');\r\n    v.string(directory, 'directory');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.del(createResourceName(share, directory))\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'directory');\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Marks the specified directory for deletion if it exists. The directory must be empty before it can be deleted.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {string}             directory                           The directory name.\r\n* @param {object}             [options]                           The request options.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will \r\n*                                                                 be true if the directory exists and was deleted, or false if the directory\r\n*                                                                 did not exist.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.deleteDirectoryIfExists = function (share, directory, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteDirectoryIfExists', function (v) {\r\n    v.string(share, 'share');\r\n    v.string(directory, 'directory');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  delete options.shareSnapshotId;\r\n\r\n  var self = this;\r\n  self._doesDirectoryExist(share, directory, true, options, function(error, result, response) {\r\n    if(error){\r\n      callback(error, result.exists, response);\r\n    } else if (!result.exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, false, response);\r\n    } else {\r\n      self.deleteDirectory(share, directory, options, function (deleteError, deleteResponse) {\r\n        var deleted;\r\n        if (!deleteError){\r\n          deleted = true;\r\n        } else if (deleteError && deleteError.statuscode === HttpConstants.HttpResponseCodes.NotFound && deleteError.code === Constants.StorageErrorCodeStrings.RESOURCE_NOT_FOUND) {\r\n          // If it was deleted already, there was no actual error.\r\n          deleted = false;\r\n          deleteError = null;\r\n          deleteResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(deleteError, deleted, deleteResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of file items in the directory.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {string}             directory                           The directory name. Use '' to refer to the base directory.\r\n* @param {object}             currentToken                        A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.shareSnapshotId]           The snapshot identifier of the share.\r\n* @param {int}                [options.maxResults]                Specifies the maximum number of files to return per call to Azure ServiceClient. This does NOT affect list size returned by this function. (maximum: 5000)\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will contain\r\n*                                                                 entries.files which contains a list of `[files]{@link FileResult}`, entries.directories which contains a list of `[directories]{@link DirectoryResult}` and the continuationToken for the next listing operation.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.listFilesAndDirectoriesSegmented = function (share, directory, currentToken, optionsOrCallback, callback) {\r\n  this.listFilesAndDirectoriesSegmentedWithPrefix(share, directory, null /*prefix*/, currentToken, optionsOrCallback, callback);\r\n};\r\n\r\n\r\n/**\r\n* Lists a segment containing a collection of file items in the directory.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {string}             directory                           The directory name. Use '' to refer to the base directory.\r\n* @param {string}             prefix                              The prefix of the directory/files name.\r\n* @param {object}             currentToken                        A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                           The request options.\r\n* @param {string}             [options.shareSnapshotId]           The snapshot identifier of the share.\r\n* @param {int}                [options.maxResults]                Specifies the maximum number of files to return per call to Azure ServiceClient. This does NOT affect list size returned by this function. (maximum: 5000)\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will contain\r\n*                                                                 entries.files which contains a list of `[files]{@link FileResult}`, entries.directories which contains a list of `[directories]{@link DirectoryResult}` and the continuationToken for the next listing operation.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.listFilesAndDirectoriesSegmentedWithPrefix = function (share, directory, prefix, currentToken, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('listFilesSegmented', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get(createResourceName(share, directory))\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'directory')\r\n    .withQueryOption(QueryStringConstants.COMP, 'list')\r\n    .withQueryOption(QueryStringConstants.MAX_RESULTS, options.maxResults)\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n\r\n  if (!azureutil.objectIsNull(currentToken)) {\r\n    webResource.withQueryOption(QueryStringConstants.MARKER, currentToken.nextMarker);\r\n  }\r\n\r\n  webResource.withQueryOption(QueryStringConstants.PREFIX, prefix);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.listResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.listResult = {\r\n        entries: null,\r\n        continuationToken: null\r\n      };\r\n\r\n      responseObject.listResult.entries = {};\r\n      responseObject.listResult.entries.files = [];\r\n      responseObject.listResult.entries.directories = [];\r\n      var files = [];\r\n      var directories = [];\r\n\r\n      // parse files\r\n      if (responseObject.response.body.EnumerationResults.Entries.File) {\r\n        files = responseObject.response.body.EnumerationResults.Entries.File;\r\n        if (!_.isArray(files)) {\r\n          files = [ files ];\r\n        }\r\n      }\r\n\r\n      files.forEach(function (currentFile) {\r\n        var fileResult = FileResult.parse(currentFile);\r\n        responseObject.listResult.entries.files.push(fileResult);\r\n      });\r\n\r\n      // parse directories\r\n      if (responseObject.response.body.EnumerationResults.Entries.Directory) {\r\n        directories = responseObject.response.body.EnumerationResults.Entries.Directory;\r\n        if (!_.isArray(directories)) {\r\n          directories = [ directories ];\r\n        }\r\n      }\r\n\r\n      directories.forEach(function (currentDirectory) {\r\n        var directoryResult = DirectoryResult.parse(currentDirectory);\r\n        responseObject.listResult.entries.directories.push(directoryResult);\r\n      });\r\n\r\n      // parse continuation token\r\n      if(responseObject.response.body.EnumerationResults.NextMarker) {\r\n        responseObject.listResult.continuationToken = {\r\n          nextMarker: null,\r\n          targetLocation: null\r\n        };\r\n\r\n        responseObject.listResult.continuationToken.nextMarker = responseObject.response.body.EnumerationResults.NextMarker;\r\n        responseObject.listResult.continuationToken.targetLocation = responseObject.targetLocation;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.listResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Returns all user-defined metadata for the specified directory.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.shareSnapshotId]                   The snapshot identifier of the share.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link DirectoryResult}` will contain\r\n*                                                                         information about the directory.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.getDirectoryMetadata = function (share, directory, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('getDirectoryMetadata', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(share, directory);\r\n  var webResource = WebResource.head(resourceName)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'directory')\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata')\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.directoryResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.directoryResult = new DirectoryResult(directory);\r\n      responseObject.directoryResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.directoryResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n    \r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.directoryResult, returnObject.response);\r\n    };\r\n    \r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Sets user-defined metadata for the specified directory as one or more name-value pairs \r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {object}             metadata                                    The metadata key/value pairs.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link DirectoryResult}` will contain\r\n*                                                                         information on the directory.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.setDirectoryMetadata = function (share, directory, metadata, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('setDirectoryMetadata', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.shareNameIsValid(share);\r\n    v.object(metadata, 'metadata');\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(share, directory);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'directory')\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata');\r\n  \r\n  webResource.addOptionalMetadataHeaders(metadata);\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.directoryResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.directoryResult = new DirectoryResult(directory);\r\n      responseObject.directoryResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n    \r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.directoryResult, returnObject.response);\r\n    };\r\n    \r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n// File methods\r\n\r\n/**\r\n* Retrieves a shared access signature token.\r\n*\r\n* @this {FileService}\r\n* @param {string}                   share                                               The share name.\r\n* @param {string}                   [directory]                                         The directory name. Use '' to refer to the base directory.\r\n* @param {string}                   [file]                                              The file name.\r\n* @param {object}                   sharedAccessPolicy                                  The shared access policy.\r\n* @param {string}                   [sharedAccessPolicy.Id]                             The signed identifier.\r\n* @param {object}                   [sharedAccessPolicy.AccessPolicy.Permissions]       The permission type.\r\n* @param {date|string}              [sharedAccessPolicy.AccessPolicy.Start]             The time at which the Shared Access Signature becomes valid (The UTC value will be used).\r\n* @param {date|string}              [sharedAccessPolicy.AccessPolicy.Expiry]            The time at which the Shared Access Signature becomes expired (The UTC value will be used).\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.IPAddressOrRange]  An IP address or a range of IP addresses from which to accept requests. When specifying a range, note that the range is inclusive.\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.Protocols]         The protocols permitted for a request made with the account SAS. \r\n*                                                                                       Possible values are both HTTPS and HTTP (https,http) or HTTPS only (https). The default value is https,http.\r\n* @param {object}                   [headers]                                           The optional header values to set for a file returned wth this SAS.\r\n* @param {string}                   [headers.cacheControl]                              The optional value of the Cache-Control response header to be returned when this SAS is used.\r\n* @param {string}                   [headers.contentType]                               The optional value of the Content-Type response header to be returned when this SAS is used.\r\n* @param {string}                   [headers.contentEncoding]                           The optional value of the Content-Encoding response header to be returned when this SAS is used.\r\n* @param {string}                   [headers.contentLanguage]                           The optional value of the Content-Language response header to be returned when this SAS is used.\r\n* @param {string}                   [headers.contentDisposition]                        The optional value of the Content-Disposition response header to be returned when this SAS is used.\r\n* @return {string}                                                                      The shared access signature query string. Note this string does not contain the leading \"?\".\r\n*/\r\nFileService.prototype.generateSharedAccessSignature = function (share, directory, file, sharedAccessPolicy, headers) {\r\n  // check if the FileService is able to generate a shared access signature\r\n  if (!this.storageCredentials || !this.storageCredentials.generateSignedQueryString) {\r\n    throw new Error(SR.CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY);\r\n  }\r\n\r\n  // Validate share name. File name is optional.\r\n  validate.validateArgs('generateSharedAccessSignature', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.object(sharedAccessPolicy, 'sharedAccessPolicy');\r\n  });\r\n\r\n  var resourceType = FileConstants.ResourceTypes.SHARE;\r\n  if (file) {\r\n    validate.validateArgs('generateSharedAccessSignature', function (v) {\r\n      v.stringAllowEmpty(directory, 'directory');\r\n      v.string(file, 'file');\r\n    });\r\n    resourceType = FileConstants.ResourceTypes.FILE;\r\n  } else {\r\n    directory = ''; // If file is not set, directory is not a part of the string to sign.\r\n  }\r\n\r\n  if (sharedAccessPolicy.AccessPolicy) {\r\n    if (!azureutil.objectIsNull(sharedAccessPolicy.AccessPolicy.Start)) {\r\n      if (!_.isDate(sharedAccessPolicy.AccessPolicy.Start)) {\r\n        sharedAccessPolicy.AccessPolicy.Start = new Date(sharedAccessPolicy.AccessPolicy.Start);\r\n      }\r\n \r\n      sharedAccessPolicy.AccessPolicy.Start = azureutil.truncatedISO8061Date(sharedAccessPolicy.AccessPolicy.Start);\r\n    }\r\n\r\n    if (!azureutil.objectIsNull(sharedAccessPolicy.AccessPolicy.Expiry)) {\r\n      if (!_.isDate(sharedAccessPolicy.AccessPolicy.Expiry)) {\r\n        sharedAccessPolicy.AccessPolicy.Expiry = new Date(sharedAccessPolicy.AccessPolicy.Expiry);\r\n      }\r\n\r\n      sharedAccessPolicy.AccessPolicy.Expiry = azureutil.truncatedISO8061Date(sharedAccessPolicy.AccessPolicy.Expiry);\r\n    }\r\n  }\r\n\r\n  var resourceName = createResourceName(share, directory, file, true);\r\n  return this.storageCredentials.generateSignedQueryString(Constants.ServiceType.File, resourceName, sharedAccessPolicy, null, { headers: headers, resourceType: resourceType });\r\n};\r\n\r\n/**\r\n* Retrieves a file or directory URL.\r\n*\r\n* @param {string}                   share                    The share name.\r\n* @param {string}                   directory                The directory name. Use '' to refer to the base directory.\r\n* @param {string}                   [file]                   The file name. File names may not start or end with the delimiter '/'.\r\n* @param {string}                   [sasToken]               The Shared Access Signature token.\r\n* @param {boolean}                  [primary]                A boolean representing whether to use the primary or the secondary endpoint.\r\n* @param {string}                   [shareSnapshotId]        The snapshot identifier of the share.\r\n* @return {string}                                           The formatted URL string.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var fileService = azure.createFileService();\r\n* var sharedAccessPolicy = {\r\n*   AccessPolicy: {\r\n*     Permissions: azure.FileUtilities.SharedAccessPermissions.READ,\r\n*     Start: startDate,\r\n*     Expiry: expiryDate\r\n*   },\r\n* };\r\n* \r\n* var sasToken = fileService.generateSharedAccessSignature(shareName, directoryName, fileName, sharedAccessPolicy);\r\n* var url = fileService.getUrl(shareName, directoryName, fileName, sasToken, true);\r\n*/\r\nFileService.prototype.getUrl = function (share, directory, file, sasToken, primary, shareSnapshotId) {\r\n  validate.validateArgs('getUrl', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.shareNameIsValid(share);\r\n  });\r\n\r\n  var host;\r\n  if(!azureutil.objectIsNull(primary) && primary === false) {\r\n    host = this.host.secondaryHost;\r\n  } else {\r\n    host = this.host.primaryHost;\r\n  }\r\n  host = azureutil.trimPortFromUri(host);\r\n  if(host && host.lastIndexOf('/') !== (host.length - 1)){\r\n    host = host + '/';\r\n  }\r\n\r\n  var name = createResourceName(share, directory, file);\r\n  var query = qs.parse(sasToken);\r\n  if(shareSnapshotId) {\r\n    query[QueryStringConstants.SHARE_SNAPSHOT] = shareSnapshotId;\r\n  }\r\n  return url.resolve(host, url.format({pathname: this._getPath(name), query: query}));\r\n};\r\n\r\n/**\r\n* Returns all user-defined metadata, standard HTTP properties, and system properties for the file.\r\n* It does not return or modify the content of the file.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.shareSnapshotId]                   The snapshot identifier of the share.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link FileResult}` will contain\r\n*                                                                         information about the file.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.getFileProperties = function (share, directory, file, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getFileProperties', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var webResource = WebResource.head(resourceName)\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.fileResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(share, directory, file);\r\n      responseObject.fileResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers, true);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Returns all user-defined metadata for the specified file.\r\n* It does not modify or return the content of the file.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.shareSnapshotId]                   The snapshot identifier of the share.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link FileResult}` will contain\r\n*                                                                         information about the file.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.getFileMetadata = function (share, directory, file, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getFileMetadata', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var webResource = WebResource.head(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata')\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.fileResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(share, directory, file);\r\n      responseObject.fileResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Sets user-defined properties for the specified file.\r\n* It does not modify or return the content of the file.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {object}             [properties]                                The file properties to set.\r\n* @param {string}             [properties.contentType]                    The MIME content type of the file. The default type is application/octet-stream.\r\n* @param {string}             [properties.contentEncoding]                The content encodings that have been applied to the file.\r\n* @param {string}             [properties.contentLanguage]                The natural languages used by this resource.\r\n* @param {string}             [properties.cacheControl]                   The file's cache control.\r\n* @param {string}             [properties.contentDisposition]             The file's content disposition.\r\n* @param {string}             [properties.contentLength]                  Resizes a file to the specified size. If the specified byte value is less than the current size of the file, \r\n*                                                                         then all ranges above the specified byte value are cleared.\r\n* @param {string}             [properties.contentMD5]                     The file's MD5 hash.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link FileResult}` will contain\r\n*                                                                         information about the file.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.setFileProperties = function (share, directory, file, properties, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setFileProperties', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {contentSettings: properties, contentLength: properties.contentLength }, userOptions);\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'properties');\r\n\r\n  FileResult.setProperties(webResource, options);\r\n\r\n  var processResponseCallback = function(responseObject, next) {\r\n    responseObject.fileResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(share, directory, file);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n    \r\n    var finalCallback = function(returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Sets user-defined metadata for the specified file as one or more name-value pairs \r\n* It does not modify or return the content of the file.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {object}             metadata                                    The metadata key/value pairs.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link FileResult}` will contain\r\n*                                                                         information on the file.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.setFileMetadata = function (share, directory, file, metadata, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setFileMetadata', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.object(metadata, 'metadata');\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata');\r\n\r\n  webResource.addOptionalMetadataHeaders(metadata);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.fileResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(share, directory, file);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Resizes a file.\r\n*\r\n* @this {FileService}\r\n* @param {string}               share                                       The share name.\r\n* @param {string}               directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}               file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {String}               size                                        The size of the file, in bytes.\r\n* @param {object}               [options]                                   The request options.\r\n* @param {int}                  [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                  [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                  [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}               [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}                 [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}        callback                                    `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link FileResult}` will contain\r\n*                                                                           information about the file.\r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.resizeFile = function (share, directory, file, size, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('resizeFile', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.value(size);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'properties');\r\n\r\n  webResource.withHeader(HeaderConstants.FILE_CONTENT_LENGTH, size);\r\n\r\n  var processResponseCallback = function(responseObject, next) {\r\n    responseObject.fileResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(share, directory, file);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n    \r\n    var finalCallback = function(returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);  \r\n};\r\n\r\n/**\r\n* Checks whether or not a file exists on the service.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                   The share name.\r\n* @param {string}             directory                               The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                    The file name. File names may not start or end with the delimiter '/'.\r\n* @param {object}             [options]                               The request options.\r\n* @param {string}             [options.shareSnapshotId]               The snapshot identifier of the share.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {Function(error, result, response)}  callback                `error` will contain information\r\n*                                                                     if an error occurs; otherwise `[result]{@link FileResult}` will contain\r\n*                                                                     the file information including the `exists` boolean member. \r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.doesFileExist = function (share, directory, file, optionsOrCallback, callback) {\r\n  this._doesFileExist(share, directory, file, false, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Creates a file of the specified length. If the file already exists on the service, it will be overwritten.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                         The share name.\r\n* @param {string}             directory                                     The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                          The file name. File names may not start or end with the delimiter '/'.\r\n* @param {int}                length                                        The length of the file in bytes.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {object}             [options.contentSettings]                     The file's content settings.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the file. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the file.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The file service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The file's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The file's MD5 hash.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information\r\n*                                                                           if an error occurs; otherwise `[result]{@link FileResult}` will contain\r\n*                                                                           the file information.\r\n*                                                                           `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.createFile = function (share, directory, file, length, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  validate.validateArgs('createFile', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.value(length);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withHeader(HeaderConstants.TYPE, 'file')\r\n    .withHeader(HeaderConstants.FILE_CONTENT_LENGTH, length);\r\n\r\n  FileResult.setProperties(webResource, options);\r\n\r\n  var processResponseCallback = function(responseObject, next) {\r\n    responseObject.fileResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(share, directory, file);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n    \r\n    var finalCallback = function(returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Marks the specified file for deletion. The file is later deleted during garbage collection.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResponse}  callback                                      `error` will contain information\r\n*                                                                         if an error occurs; `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.deleteFile = function (share, directory, file, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteFile', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var webResource = WebResource.del(resourceName);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Marks the specified file for deletion if it exists. The file is later deleted during garbage collection.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                               The share name.\r\n* @param {string}             directory                           The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                The file name. File names may not start or end with the delimiter '/'. \r\n* @param {object}             [options]                           The request options.\r\n* @param {LocationMode}       [options.locationMode]              Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                 Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]       The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]  The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]  The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                 The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                 execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]           A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]         Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                 The default value is false.\r\n* @param {errorOrResult}      callback                            `error` will contain information\r\n*                                                                 if an error occurs; otherwise `result` will\r\n*                                                                 be true if the file was deleted, or false if the file\r\n*                                                                 does not exist.\r\n*                                                                 `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.deleteFileIfExists = function (share, directory, file, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteFileIfExists', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  delete options.shareSnapshotId;\r\n\r\n  var self = this;\r\n  self._doesFileExist(share, directory, file, true, options, function(error, result, response) {\r\n    if(error){\r\n      callback(error, result.exists, response);\r\n    } else if (!result.exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, false, response);\r\n    } else {\r\n      self.deleteFile(share, directory, file, options, function (deleteError, deleteResponse) {\r\n        var deleted;\r\n        if (!deleteError){\r\n          deleted = true;\r\n        } else if (deleteError && deleteError.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound && deleteError.code === Constants.FileErrorCodeStrings.FILE_NOT_FOUND) {\r\n          // If it was deleted already, there was no actual error.\r\n          deleted = false;\r\n          deleteError = null;\r\n          deleteResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(deleteError, deleted, deleteResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Downloads a file into a text string.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.shareSnapshotId]                   The snapshot identifier of the share.\r\n* @param {int}                [options.rangeStart]                        The range start.\r\n* @param {int}                [options.rangeEnd]                          The range end.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading files.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {FileService~FileToText}  callback                               `error` will contain information\r\n*                                                                         if an error occurs; otherwise `text` will contain the file contents,\r\n*                                                                         and `[file]{@link FileResult}` will contain the file information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.getFileToText = function (share, directory, file, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getFileToText', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var webResource = WebResource.get(resourceName)\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId)\r\n    .withRawResponse();\r\n\r\n  FileResult.setHeaders(webResource, options);\r\n  this._setRangeContentMD5Header(webResource, options);\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.text = null;\r\n    responseObject.fileResult = null;\r\n\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(share, directory, file);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers, true);\r\n      responseObject.fileResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.text = responseObject.response.body;\r\n\r\n      self._validateLengthAndMD5(options, responseObject);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.text, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Provides a stream to read from a file.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.shareSnapshotId]                   The snapshot identifier of the share.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the file in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the file in the specified range.\r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading files.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `[result]{@link FileResult}` will contain the file information.\r\n*                                                                         `response` will contain information related to this operation.\r\n* @return {Readable}                                                      A Node.js Readable stream.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var fileService = azure.createFileService();\r\n* var writable = fs.createWriteStream(destinationFileNameTarget);\r\n* fileService.createReadStream(shareName, directoryName, fileName).pipe(writable);\r\n*/\r\nFileService.prototype.createReadStream = function (share, directory, file, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createReadStream', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var readStream = new ChunkStream(options);\r\n  this.getFileToStream(share, directory, file, readStream, options, function (error, fileResponse, response) {\r\n    if(error) {\r\n      readStream.emit('error', error);\r\n    }\r\n\r\n    if(callback) {\r\n      callback(error, fileResponse, response);\r\n    }\r\n  });\r\n\r\n  return readStream;\r\n};\r\n\r\n/**\r\n* Downloads a file into a stream.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {Writable}           writeStream                                 The Node.js Writable stream.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.shareSnapshotId]                   The snapshot identifier of the share.\r\n* @param {boolean}            [options.skipSizeCheck]                     Skip the size check to perform direct download.\r\n*                                                                         Set the option to true for small files.\r\n*                                                                         Parallel download and speed summary won't work with this option on.\r\n* @param {SpeedSummary}       [options.speedSummary]                      The download tracker objects.\r\n* @param {int}                [options.parallelOperationThreadCount]      The number of parallel operations that may be performed when uploading.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the file in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the file in the specified range. \r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading files.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `[result]{@link FileResult}` will contain the file information.\r\n*                                                                         `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n* \r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var FileService = azure.createFileService();\r\n* FileService.getFileToStream('taskshare', taskdirectory', 'task1', fs.createWriteStream('task1-download.txt'), function(error, serverFile) {\r\n*   if(!error) {\r\n*     // file available in serverFile.file variable\r\n*   }\r\n* }); \r\n*/\r\nFileService.prototype.getFileToStream = function (share, directory, file, writeStream, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  userOptions.speedSummary = userOptions.speedSummary || new SpeedSummary(file);  \r\n  \r\n  validate.validateArgs('getFileToStream', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.object(writeStream, 'writeStream');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var propertiesRequestOptions = {\r\n    timeoutIntervalInMs : options.timeoutIntervalInMs,\r\n    clientRequestTimeoutInMs : options.clientRequestTimeoutInMs,\r\n    accessConditions : options.accessConditions,\r\n    shareSnapshotId : options.shareSnapshotId\r\n  };\r\n  \r\n  if (options.skipSizeCheck) {\r\n    this._getFileToStream(share, directory, file, writeStream, options, callback);\r\n  } else {\r\n    var self = this;\r\n    this.getFileProperties(share, directory, file, propertiesRequestOptions, function (error, properties) {\r\n      if (error) {\r\n        callback(error);\r\n      } else {\r\n        var size;\r\n        if (options.rangeStart) {\r\n          var endOffset = properties.contentLength - 1;\r\n          var end = options.rangeEnd ? Math.min(options.rangeEnd, endOffset) : endOffset;\r\n          size = end - options.rangeStart + 1;\r\n        } else {\r\n          size = properties.contentLength;\r\n        }\r\n        options.speedSummary.totalSize = size;\r\n        \r\n        if (size > self.singleFileThresholdInBytes) {\r\n          azureutil.setObjectInnerPropertyValue(options, ['contentSettings', 'contentMD5'], azureutil.tryGetValueChain(properties, ['contentSettings', 'contentMD5'], null));\r\n          self._getFileToRangeStream(share, directory, file, writeStream, options, callback);\r\n        } else {\r\n          self._getFileToStream(share, directory, file, writeStream, options, callback);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  \r\n  return options.speedSummary;\r\n};\r\n\r\n/**\r\n* Lists file ranges. Lists all of the ranges by default, or only the ranges over a specific range of bytes if rangeStart and rangeEnd are specified.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.shareSnapshotId]                   The snapshot identifier of the share.\r\n* @param {int}                [options.rangeStart]                        The range start.\r\n* @param {int}                [options.rangeEnd]                          The range end.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link FileResult}` will contain\r\n*                                                                         the range information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.listRanges = function (share, directory, file, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('listRanges', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'rangelist')\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n\r\n  FileResult.setHeaders(webResource, options);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.ranges = null;\r\n    if (!responseObject.error) {\r\n      responseObject.ranges = [];\r\n\r\n      var ranges = [];\r\n      if (responseObject.response.body.Ranges.Range) {\r\n        ranges = responseObject.response.body.Ranges.Range;\r\n\r\n        if (!_.isArray(ranges)) {\r\n          ranges = [ ranges ];\r\n        }\r\n      }\r\n\r\n      ranges.forEach(function (fileRange) {\r\n        var range = {\r\n          start: parseInt(fileRange.Start, 10),\r\n          end: parseInt(fileRange.End, 10)\r\n        };\r\n\r\n        responseObject.ranges.push(range);\r\n      });\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.ranges, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Clears a range. Clears all of the ranges by default, or only the ranges over a specific range of bytes if rangeStart and rangeEnd are specified.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {int}                rangeStart                                  The range start.\r\n* @param {int}                rangeEnd                                    The range end.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link FileResult}` will contain\r\n*                                                                         the directory information.\r\n*                                                                        `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.clearRange = function (share, directory, file, rangeStart, rangeEnd, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('clearRange', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.value(rangeStart);\r\n    v.value(rangeEnd);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var request = this._updateFilesImpl(share, directory, file, rangeStart, rangeEnd, FileConstants.RangeWriteOptions.CLEAR, options);\r\n\r\n  var processResponseCallback = function(responseObject, next) {\r\n    responseObject.fileResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(share, directory, file);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n    \r\n    var finalCallback = function(returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(request, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Updates a range from a stream.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {Readable}           readStream                                  The Node.js Readable stream.\r\n* @param {int}                rangeStart                                  The range start.\r\n* @param {int}                rangeEnd                                    The range end.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {bool}               [options.useTransactionalMD5]               Calculate and send/validate content MD5 for transactions.\r\n* @param {string}             [options.transactionalContentMD5]           An optional hash value used to ensure transactional integrity for the page. \r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link FileResult}` will contain\r\n*                                                                         the file information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.createRangesFromStream = function (share, directory, file, readStream, rangeStart, rangeEnd, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createRangesFromStream', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.object(readStream, 'readStream');\r\n    v.shareNameIsValid(share);\r\n    v.value(rangeStart);\r\n    v.value(rangeEnd);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var requiresContentMD5 = azureutil.objectIsNull(options.transactionalContentMD5) && options.useTransactionalMD5 === true;\r\n\r\n  var length = (rangeEnd - rangeStart) + 1;\r\n  if(length > FileConstants.MAX_UPDATE_FILE_SIZE) {\r\n    throw new Error(SR.INVALID_FILE_RANGE_FOR_UPDATE);\r\n  }\r\n\r\n  var self = this;\r\n  if (requiresContentMD5) {\r\n    azureutil.calculateMD5(readStream, length, options, function(internalBuff, contentMD5) {\r\n      options.transactionalContentMD5 = contentMD5;\r\n      self._createRanges(share, directory, file, internalBuff, null /* stream */, rangeStart, rangeEnd, options, callback);\r\n    });\r\n  } else {\r\n    self._createRanges(share, directory, file, null /* text */, readStream, rangeStart, rangeEnd, options, callback);\r\n  }\r\n};\r\n\r\n/**\r\n* Uploads a file from a text string. If the file already exists on the service, it will be overwritten.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                         The share name.\r\n* @param {string}             directory                                     The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                          The file name. File names may not start or end with the delimiter '/'.\r\n* @param {string|object}      text                                          The file text, as a string or in a Buffer.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The upload tracker objects;\r\n* @param {bool}               [options.storeFileContentMD5]                 Specifies whether the file's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for files.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The file's content settings.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the file. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the file.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The file service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The file's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The file's MD5 hash.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {FileService~FileToText}  callback                                 `error` will contain information\r\n*                                                                           if an error occurs; otherwise `text` will contain the file contents,\r\n*                                                                           and `[file]{@link FileResult}` will contain the file information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var fileService = azure.createFileService();\r\n*\r\n* var text = 'Hello World!';\r\n*\r\n* fileService.createFileFromText('taskshare', 'taskdirectory', 'taskfile', text, function(error, result, response) {\r\n*   if (!error) {\r\n*     // file created\r\n*   }\r\n* });\r\n*/\r\nFileService.prototype.createFileFromText = function (share, directory, file, text, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createFileFromText', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.exists(text, 'text');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var length = Buffer.isBuffer(text) ? text.length : Buffer.byteLength(text);\r\n  if (length > FileConstants.MAX_UPDATE_FILE_SIZE) {\r\n    throw new Error(SR.INVALID_FILE_LENGTH);\r\n  }\r\n\r\n  if(options.storeFileContentMD5 && azureutil.objectIsNull(azureutil.tryGetValueChain(options, ['contentSettings', 'contentMD5'], null))) {\r\n     azureutil.setObjectInnerPropertyValue(options, ['contentSettings', 'contentMD5'], azureutil.getContentMd5(text));\r\n  }\r\n\r\n  var self = this;\r\n  this.createFile(share, directory, file, length, options, function(error) {\r\n    if(error) {\r\n      callback(error);\r\n    }\r\n    else {\r\n      self._createRanges(share, directory, file, text, null, 0, length - 1, options, callback);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Uploads a file from a stream. If the file already exists on the service, it will be overwritten.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                         The share name.\r\n* @param {string}             directory                                     The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                          The file name. File names may not start or end with the delimiter '/'. \r\n* @param (Stream)             stream                                        Stream to the data to store.\r\n* @param {int}                streamLength                                  The length of the stream to upload.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The download tracker objects;\r\n* @param {bool}               [options.storeFileContentMD5]                 Specifies whether the file's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for files.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The file's content settings.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the file. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the file.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The file service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The file's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The file's MD5 hash.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information if an error occurs; \r\n*                                                                           otherwise `[result]{@link FileResult}` will contain the file information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {SpeedSummary}\r\n* @example\r\n* var stream = require('stream');\r\n* var azure = require('azure-storage');\r\n* var fileService = azure.createFileService();\r\n*\r\n* var fileStream = new stream.Readable();\r\n* fileStream.push(myFileBuffer);\r\n* fileStream.push(null);\r\n*\r\n* fileService.createFileFromStream('taskshare', 'taskdirectory', 'taskfile', fileStream, myFileBuffer.length, function(error, result, response) {\r\n*   if (!error) {\r\n*     // file uploaded\r\n*   }\r\n* });\r\n*/\r\nFileService.prototype.createFileFromStream = function(share, directory, file, stream, streamLength, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createFileFromStream', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.object(stream, 'stream');\r\n    v.value(streamLength, 'streamLength');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  options.speedSummary = options.speedSummary || new SpeedSummary(file);\r\n\r\n  stream.pause(); // Immediately pause the stream in order to compatible with Node v0.8\r\n\r\n  var self = this;\r\n  this.createFile(share, directory, file, streamLength, options, function(error) {\r\n    if(error) {\r\n      callback(error);\r\n    } else {\r\n      var chunkStream = new ChunkStreamWithStream(stream, {calcContentMd5: options.storeFileContentMD5});\r\n      self._createFileFromChunkStream(share, directory, file, chunkStream, streamLength, options, callback);\r\n    }\r\n  });\r\n\r\n  return options.speedSummary;\r\n};\r\n\r\n/**\r\n* Provides a stream to write to a file. Assumes that the file exists. \r\n* If it does not, please create the file using createFile before calling this method or use createWriteStreamNewFile.\r\n* Please note the `Stream` returned by this API should be used with piping.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                         The share name.\r\n* @param {string}             directory                                     The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                          The file name. File names may not start or end with the delimiter '/'.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The download tracker objects;\r\n* @param {bool}               [options.storeFileContentMD5]                 Specifies whether the file's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for files.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The file's content settings.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the file. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the file.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The file service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The file's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The file's MD5 hash.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information if an error occurs; \r\n*                                                                           otherwise `[result]{@link FileResult}` will contain the file information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {Writable}                                                        A Node.js Writable stream.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var FileService = azure.createFileService();\r\n* FileService.createFile(shareName, directoryName, fileName, 1024, function (err) {\r\n*   // Pipe file to a file\r\n*   var stream = fs.createReadStream(fileNameTarget).pipe(FileService.createWriteStreamToExistingFile(shareName, directoryName, fileName));\r\n* });\r\n*/\r\nFileService.prototype.createWriteStreamToExistingFile = function (share, directory, file, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createWriteStreamToExistingFile', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var stream = new ChunkStream({calcContentMd5: options.storeFileContentMD5});\r\n  this._createFileFromChunkStream(share, directory, file, stream, null, options, function (error, file, response) {\r\n    if(error) {\r\n      stream.emit('error', error);\r\n    }\r\n\r\n    if (callback) {\r\n      callback(error, file, response);\r\n    }\r\n  });\r\n\r\n  return stream;\r\n};\r\n\r\n/**\r\n* Provides a stream to write to a file. Creates the file before writing data.\r\n* Please note the `Stream` returned by this API should be used with piping.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                         The share name.\r\n* @param {string}             directory                                     The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                          The file name. File names may not start or end with the delimiter '/'.\r\n* @param {string}             length                                        The file length.\r\n* @param {object}             [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The download tracker objects;\r\n* @param {bool}               [options.storeFileContentMD5]                 Specifies whether the file's ContentMD5 header should be set on uploads. \r\n*                                                                           The default value is false for files.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {object}             [options.contentSettings]                     The file's content settings.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the file. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the file.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The file service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The file's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The file's MD5 hash.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {errorOrResult}      callback                                      `error` will contain information if an error occurs; \r\n*                                                                           otherwise `[result]{@link FileResult}` will contain the file information.\r\n*                                                                           `response` will contain information related to this operation.\r\n* @return {Writable}                                                        A Node.js Writable stream.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var FileService = azure.createFileService();\r\n* var stream = fs.createReadStream(fileNameTarget).pipe(FileService.createWriteStreamToNewFile(shareName, directoryName, fileName));\r\n*/\r\nFileService.prototype.createWriteStreamToNewFile = function (share, directory, file, length, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createWriteStreamToNewFile', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.value(length, 'length');\r\n    v.shareNameIsValid(share);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var stream = new ChunkStream({calcContentMd5: options.storeFileContentMD5});\r\n  stream.pause();\r\n  \r\n  var self = this;\r\n  this.createFile(share, directory, file, length, options, function(error) {\r\n    if(error) {\r\n      stream.emit('error', error);\r\n      callback(error);\r\n    }\r\n    else {\r\n      stream.resume();\r\n      self._createFileFromChunkStream(share, directory, file, stream, null, options, function (error, file, response) {\r\n        if(error) {\r\n          stream.emit('error', error);\r\n        }\r\n\r\n        if (callback) {\r\n          callback(error, file, response);\r\n        }\r\n      });\r\n    }\r\n  });\r\n  \r\n  return stream;\r\n};\r\n\r\n/**\r\n* Starts to copy a file to a destination within the storage account.\r\n*\r\n* @this {FileService}\r\n* @param {string}             sourceUri                                 The source file or blob URI.\r\n* @param {string}             targetShare                               The target share name.\r\n* @param {string}             targetDirectory                           The target directory name.\r\n* @param {string}             targetFile                                The target file name.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {object}             [options.metadata]                        The target file metadata key/value pairs.\r\n* @param {AccessConditions}   [options.accessConditions]                The access conditions.\r\n* @param {AccessConditions}   [options.sourceAccessConditions]          The source access conditions.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResult}      callback                                  `error` will contain information if an error occurs; \r\n*                                                                       otherwise `[result]{@link FileResult}` will contain the file information.\r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.startCopyFile = function (sourceUri, targetShare, targetDirectory, targetFile, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('startCopyFile', function (v) {\r\n    v.string(targetShare, 'targetShare');\r\n    v.stringAllowEmpty(targetDirectory, 'targetDirectory');\r\n    v.string(targetFile, 'targetFile');\r\n    v.shareNameIsValid(targetShare);\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var targetResourceName = createResourceName(targetShare, targetDirectory, targetFile);\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  \r\n  var webResource = WebResource.put(targetResourceName)\r\n    .withHeader(HeaderConstants.COPY_SOURCE, sourceUri)\r\n    .addOptionalMetadataHeaders(options.metadata);\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.fileResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(targetShare, targetDirectory, targetFile);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers, true);\r\n      \r\n      if (options.metadata) {\r\n        responseObject.fileResult.metadata = options.metadata;\r\n      }\r\n    }\r\n    \r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n    \r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Abort a file copy operation.\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                     The destination share name.\r\n* @param {string}             directory                                 The destination directory name.\r\n* @param {string}             file                                      The destination file name.\r\n* @param {string}             copyId                                    The copy operation identifier.\r\n* @param {object}             [options]                                 The request options.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResult}      callback                                  `error` will contain information if an error occurs; \r\n*                                                                       otherwise `[result]{@link FileResult}` will contain the file information.\r\n*                                                                       `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype.abortCopyFile = function (share, directory, file, copyId, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n  \r\n  validate.validateArgs('abortCopyFile', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var resourceName = createResourceName(share, directory, file);\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COPY_ID, copyId)\r\n    .withQueryOption(QueryStringConstants.COMP, 'copy')\r\n    .withHeader(HeaderConstants.COPY_ACTION, 'abort');\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n    \r\n    next(responseObject, finalCallback);\r\n  };\r\n  \r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n// Internal Methods\r\n\r\n/**\r\n* Updates a file from text.\r\n* @ignore\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {string}             text                                        The text string.\r\n* @param {Readable}           readStream                                  The Node.js Readable stream.\r\n* @param {int}                rangeStart                                  The range start.\r\n* @param {int}                rangeEnd                                    The range end.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {bool}               [options.useTransactionalMD5]               Calculate and send/validate content MD5 for transactions.\r\n* @param {bool}               [options.transactionalContentMD5]           An MD5 hash of the content. This hash is used to verify the integrity of the data during transport.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {Function(error, file, response)}  callback                      `error` will contain information\r\n*                                                                         if an error occurs; otherwise `file` will contain\r\n*                                                                         the file information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype._createRanges = function (share, directory, file, text, readStream, rangeStart, rangeEnd, options, callback) {\r\nvar request = this._updateFilesImpl(share, directory, file, rangeStart, rangeEnd, FileConstants.RangeWriteOptions.UPDATE, options);\r\n\r\n  // At this point, we have already validated that the range is less than 4MB. Therefore, we just need to calculate the contentMD5 if required.\r\n  if(!azureutil.objectIsNull(text) && azureutil.objectIsNull(options.transactionalContentMD5) && options.useTransactionalMD5 === true) {\r\n    request.withHeader(HeaderConstants.CONTENT_MD5, azureutil.getContentMd5(text));\r\n  }\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.fileResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(share, directory, file);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  if(!azureutil.objectIsNull(text)) {\r\n    this.performRequest(request, text, options, processResponseCallback);\r\n  } else {\r\n    this.performRequestOutputStream(request, readStream, options, processResponseCallback);\r\n  }\r\n};\r\n\r\n/**\r\n* Uploads a file from a stream.\r\n* @ignore\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                         The share name.\r\n* @param {string}             directory                                     The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                          The file name. File names may not start or end with the delimiter '/'.\r\n* @param (Stream)             stream                                        Stream to the data to store.\r\n* @param {int}                streamLength                                  The length of the stream to upload.\r\n* @param {object|function}    [options]                                     The request options.\r\n* @param {SpeedSummary}       [options.speedSummary]                        The download tracker objects;\r\n* @param {int}                [options.parallelOperationThreadCount]        The number of parallel operations that may be performed when uploading.\r\n* @param {bool}               [options.useTransactionalMD5]                 Calculate and send/validate content MD5 for transactions.\r\n* @param {bool}               [options.storeFileContentMD5]                 Specifies whether the file's ContentMD5 header should be set on uploads.\r\n* @param {string}             [options.contentSettings.contentType]         The MIME content type of the file. The default type is application/octet-stream.\r\n* @param {string}             [options.contentSettings.contentEncoding]     The content encodings that have been applied to the file.\r\n* @param {string}             [options.contentSettings.contentLanguage]     The natural languages used by this resource.\r\n* @param {string}             [options.contentSettings.cacheControl]        The file service stores this value but does not use or modify it.\r\n* @param {string}             [options.contentSettings.contentDisposition]  The file's content disposition.\r\n* @param {string}             [options.contentSettings.contentMD5]          The MD5 hash of the file content.\r\n* @param {object}             [options.metadata]                            The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]                        Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                           Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                 The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]            The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]            The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                           The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                           execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                     A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                   Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                           The default value is false.\r\n* @param {function(error, null)}  callback                                  The callback function.\r\n* @return {SpeedSummary}\r\n*/\r\nFileService.prototype._createFileFromChunkStream = function(share, directory, file, chunkStream, streamLength, options, callback) {\r\n  this.logger.debug(util.format('_createFileFromChunkStream for file %s', file));\r\n\r\n  var apiName = '_createRanges';\r\n  var sizeLimitation = FileConstants.DEFAULT_WRITE_SIZE_IN_BYTES;\r\n  var originalContentMD5 = azureutil.tryGetValueChain(options, ['contentSettings', 'contentMD5'], null);\r\n\r\n  this._setOperationExpiryTime(options);\r\n\r\n  // initialize the speed summary\r\n  var speedSummary = options.speedSummary || new SpeedSummary();\r\n  speedSummary.totalSize = streamLength;\r\n\r\n  var parallelOperationThreadCount = options.parallelOperationThreadCount || this.parallelOperationThreadCount;\r\n\r\n  // initialize chunk allocator\r\n  var allocator = new ChunkAllocator(sizeLimitation, parallelOperationThreadCount, { logger: this.logger });\r\n\r\n  // if this is a FileReadStream, set the allocator on that stream\r\n  if (chunkStream._stream && chunkStream._stream.setMemoryAllocator) {\r\n    chunkStream._stream.setMemoryAllocator(allocator);\r\n  }\r\n\r\n  // initialize batch operations\r\n  var batchOperations = new BatchOperation(apiName, { logger : this.logger, enableReuseSocket : this.defaultEnableReuseSocket});\r\n  batchOperations.setConcurrency(parallelOperationThreadCount);\r\n\r\n  // initialize options\r\n  var rangeOptions = {\r\n    timeoutIntervalInMs: options.timeoutIntervalInMs,\r\n    clientRequestTimeoutInMs: options.clientRequestTimeoutInMs,\r\n    operationExpiryTime: options.operationExpiryTime\r\n  };\r\n\r\n  var self = this;\r\n  chunkStream.on('data', function (data, range) {\r\n    var operation = null;\r\n    var full = false;\r\n    var autoIncrement = speedSummary.getAutoIncrementFunction(data.length);\r\n\r\n    if(data.length > sizeLimitation) {\r\n      throw new Error(util.format(SR.EXCEEDED_SIZE_LIMITATION, sizeLimitation, data.length));\r\n    }\r\n\r\n    if (options.useTransactionalMD5) {\r\n      //calculate content md5 for the current uploading block data\r\n      var contentMD5 = azureutil.getContentMd5(data);\r\n      rangeOptions.transactionalContentMD5 = contentMD5;\r\n    }\r\n\r\n    if (azureutil.isBufferAllZero(data)) {\r\n      self.logger.debug(util.format('Skip upload data from %s bytes to %s bytes to file %s', range.start, range.end, file));\r\n      speedSummary.increment(data.length);\r\n    } else {\r\n      operation = new BatchOperation.RestOperation(self, apiName, share, directory, file, data, null, range.start, range.end, rangeOptions, function (error) {\r\n        if(!error) {\r\n          autoIncrement();\r\n        } else {\r\n          self.logger.debug(util.format('Stop downloading data as error happens. Error: %s', util.inspect(error)));\r\n          chunkStream.stop();\r\n        }\r\n\r\n        allocator.releaseBuffer(data);\r\n        data = null;\r\n      });\r\n    }\r\n\r\n    if (operation) {\r\n      full = batchOperations.addOperation(operation);\r\n      operation = null;\r\n\r\n      if(full) {\r\n        self.logger.debug('file stream paused');\r\n        chunkStream.pause();\r\n      }\r\n    }\r\n  });\r\n\r\n  chunkStream.on('end', function () {\r\n    self.logger.debug(util.format('File read stream ended for file %s', file));\r\n    batchOperations.enableComplete();\r\n  });\r\n\r\n  batchOperations.on('drain', function () {\r\n    self.logger.debug('File stream resume');\r\n    chunkStream.resume();\r\n  });\r\n\r\n  batchOperations.on('end', function (error) {\r\n    self.logger.debug('batch operations commited');\r\n \r\n    if (error) {\r\n      callback(error);\r\n      return;\r\n    }\r\n\r\n    if (originalContentMD5) {\r\n      options.contentSettings.contentMD5 = originalContentMD5;\r\n    } else if (options.storeFileContentMD5) {\r\n      azureutil.setObjectInnerPropertyValue(options, ['contentSettings', 'contentMD5'], chunkStream.getContentMd5('base64'));\r\n    }\r\n\r\n    // upload file completely\r\n    var fileProperties = extend(false, options.contentSettings, { contentLength: options.streamLength });\r\n    self.setFileProperties(share, directory, file, fileProperties, function (error, file, response) {\r\n      chunkStream.finish();\r\n      callback(error, file, response);\r\n    });\r\n  });\r\n\r\n  return speedSummary;\r\n};\r\n\r\n/**\r\n* Downloads a file into a stream.\r\n* @ignore\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {Writable}           writeStream                                 The Node.js Writable stream.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.shareSnapshotId]                   The snapshot identifier of the share.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the file in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the file in the specified range. \r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading files.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `result` will contain the file information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*\r\n* @return {SpeedSummary}\r\n*/\r\nFileService.prototype._getFileToStream = function (share, directory, file, writeStream, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('_getFileToStream', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.object(writeStream, 'writeStream');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var webResource = WebResource.get(resourceName)\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId)\r\n    .withRawResponse();\r\n\r\n  FileResult.setHeaders(webResource, options);\r\n  this._setRangeContentMD5Header(webResource, options);\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.fileResult = null;\r\n\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult = new FileResult(share, directory, file);\r\n      responseObject.fileResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers, true);\r\n\r\n      self._validateLengthAndMD5(options, responseObject);\r\n            \r\n      if (options.speedSummary) {\r\n        options.speedSummary.increment(responseObject.length);\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequestInputStream(webResource, null, writeStream, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Downloads a file into a range stream.\r\n* @ignore\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                       The share name.\r\n* @param {string}             directory                                   The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                        The file name. File names may not start or end with the delimiter '/'.\r\n* @param {Writable}           writeStream                                 The Node.js Writable stream.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {int}                [options.parallelOperationThreadCount]      The number of parallel operations that may be performed when uploading.\r\n* @param {string}             [options.rangeStart]                        Return only the bytes of the file in the specified range.\r\n* @param {string}             [options.rangeEnd]                          Return only the bytes of the file in the specified range. \r\n* @param {boolean}            [options.useTransactionalMD5]               When set to true, Calculate and send/validate content MD5 for transactions.\r\n* @param {boolean}            [options.disableContentMD5Validation]       When set to true, MD5 validation will be disabled when downloading files.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information if an error occurs; \r\n*                                                                         otherwise `result` will contain the file information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*\r\n* @return {SpeedSummary}\r\n*/\r\nFileService.prototype._getFileToRangeStream = function (share, directory, file, writeStream, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('_getFileToRangeStream', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.object(writeStream, 'writeStream');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var speedSummary = userOptions.speedSummary || new SpeedSummary(file);\r\n  var parallelOperationThreadCount = userOptions.parallelOperationThreadCount || this.parallelOperationThreadCount;\r\n  var batchOperations = new BatchOperation('getfile', { callbackInOrder: true, logger : this.logger, enableReuseSocket : this.defaultEnableReuseSocket });\r\n  batchOperations.setConcurrency(parallelOperationThreadCount);\r\n\r\n  var rangeStream = new FileRangeStream(this, share, directory, file, userOptions);\r\n\r\n  var self = this;\r\n  var checkMD5sum = !userOptions.disableContentMD5Validation;\r\n  var md5Hash = null;\r\n  if (checkMD5sum) {\r\n    md5Hash = new Md5Wrapper().createMd5Hash();\r\n  }\r\n\r\n  var savedFileResult = null;\r\n  var savedFileResponse = null;\r\n\r\n  rangeStream.on('range', function (range) {\r\n    if (!speedSummary.totalSize) {\r\n      speedSummary.totalSize = rangeStream.rangeSize;\r\n    }\r\n\r\n    var requestOptions = {\r\n      rangeStart : range.start,\r\n      rangeEnd : range.end,\r\n      responseEncoding : null //Use Buffer to store the response data\r\n    };\r\n\r\n    var rangeSize = range.size;\r\n    requestOptions.shareSnapshotId = userOptions.shareSnapshotId;\r\n    requestOptions.timeoutIntervalInMs = userOptions.timeoutIntervalInMs;\r\n    requestOptions.clientRequestTimeoutInMs = userOptions.clientRequestTimeoutInMs;\r\n    requestOptions.useTransactionalMD5 = userOptions.useTransactionalMD5;\r\n\r\n    if (range.dataSize === 0) {\r\n      var autoIncrement = speedSummary.getAutoIncrementFunction(rangeSize);\r\n      //No operation to do and only wait for write zero to file in callback\r\n      var writeZeroOperation = new BatchOperation.CommonOperation(BatchOperation.noOperation, function (error) {\r\n        if (error) return;\r\n        var bufferAvailable = azureutil.writeZerosToStream(writeStream, rangeSize, md5Hash, autoIncrement);\r\n        //There is no need to pause the rangestream since we can perform http request and write disk at the same time\r\n        self.logger.debug(util.format('Write %s bytes Zero from %s to %s', rangeSize, range.start, range.end));\r\n        if (!bufferAvailable) {\r\n          self.logger.debug('Write stream is full and pause batch operation');\r\n          batchOperations.pause();\r\n        }\r\n      });\r\n      batchOperations.addOperation(writeZeroOperation);\r\n      return;\r\n    }\r\n      \r\n    if (range.start > range.end) {\r\n      return;\r\n    }\r\n      \r\n    var operation = new BatchOperation.RestOperation(self, 'getFileToText', share, directory, file, requestOptions, function (error, content, fileResult, response) {\r\n      if (!error) {\r\n        if (rangeSize !== content.length) {\r\n          self.logger.warn(util.format('Request %s bytes, but server returns %s bytes', rangeSize, content.length));\r\n        }\r\n        //Save one of the succeeded callback parameters and use them at the final callback\r\n        if (!savedFileResult) {\r\n          savedFileResult = fileResult;\r\n        }\r\n        if (!savedFileResponse) {\r\n          savedFileResponse = response;\r\n        }\r\n        var autoIncrement = speedSummary.getAutoIncrementFunction(content.length);\r\n        var bufferAvailable = writeStream.write(content, autoIncrement);\r\n        if (!bufferAvailable) {\r\n          self.logger.debug('Write stream is full and pause batch operation');\r\n          batchOperations.pause();\r\n        }\r\n        if (md5Hash) {\r\n          md5Hash.update(content);\r\n        }\r\n        content = null;\r\n      } else {\r\n        self.logger.debug(util.format('Stop downloading data as error happens. Error: %s', util.inspect(error)));\r\n        rangeStream.stop();\r\n      }\r\n    });\r\n\r\n    var full = batchOperations.addOperation(operation);\r\n    if (full) {\r\n      self.logger.debug('Pause range stream');\r\n      rangeStream.pause();\r\n    }    \r\n  });\r\n  \r\n  rangeStream.on('end', function () {\r\n    self.logger.debug('Range stream has ended.');\r\n    batchOperations.enableComplete();\r\n  });\r\n  \r\n  batchOperations.on('drain', function () {\r\n    self.logger.debug('Resume range stream');\r\n    rangeStream.resume();\r\n  });\r\n  \r\n  writeStream.on('drain', function () {\r\n    self.logger.debug('Resume batch operations');\r\n    batchOperations.resume();\r\n  });\r\n  \r\n  batchOperations.on('end', function (error) {\r\n    self.logger.debug('Download completed!');\r\n    if (error) {\r\n      callback(error);\r\n    } else {\r\n      writeStream.end(function () {\r\n        self.logger.debug('Write stream has ended');\r\n        if (!savedFileResult) {\r\n          savedFileResult = {};\r\n        }\r\n        azureutil.setObjectInnerPropertyValue(savedFileResult, ['contentSettings', 'contentMD5'], azureutil.tryGetValueChain(userOptions, ['contentSettings', 'contentMD5'], null));\r\n        savedFileResult.clientSideContentMD5 = null;\r\n        if (md5Hash) {\r\n          savedFileResult.clientSideContentMD5 = md5Hash.digest('base64');\r\n        }\r\n        callback(error, savedFileResult, savedFileResponse);\r\n      });\r\n    }\r\n  });\r\n  \r\n  var listOptions = {\r\n    timeoutIntervalInMs : userOptions.timeoutIntervalInMs,\r\n    clientRequestTimeoutInMs : userOptions.clientRequestTimeoutInMs,\r\n  };\r\n  \r\n  rangeStream.list(listOptions);\r\n  return speedSummary;\r\n};\r\n\r\n/**\r\n* @ignore\r\n*/\r\nFileService.prototype._setRangeContentMD5Header = function (webResource, options) {\r\n  if(!azureutil.objectIsNull(options.rangeStart) && options.useTransactionalMD5) {\r\n    if(azureutil.objectIsNull(options.rangeEnd)) {\r\n      throw new ArgumentNullError(util.format(SR.ARGUMENT_NULL_OR_EMPTY, options.rangeEndHeader));\r\n    }\r\n\r\n    var size = parseInt(options.rangeEnd, 10) - parseInt(options.rangeStart, 10) + 1;\r\n    if (size > FileConstants.MAX_RANGE_GET_SIZE_WITH_MD5) {\r\n      throw new Error(SR.INVALID_RANGE_FOR_MD5);\r\n    } else {\r\n      webResource.withHeader(HeaderConstants.RANGE_GET_CONTENT_MD5, 'true');\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n* @ignore\r\n*/\r\nFileService.prototype._updateFilesImpl = function (share, directory, file, rangeStart, rangeEnd, writeMethod, options) {\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var webResource = WebResource.put(resourceName)\r\n    .withQueryOption(QueryStringConstants.COMP, 'range')\r\n    .withHeader(HeaderConstants.CONTENT_TYPE, 'application/octet-stream')\r\n    .withHeader(HeaderConstants.FILE_WRITE, writeMethod);\r\n\r\n  options.rangeStart = rangeStart;\r\n  options.rangeEnd = rangeEnd;\r\n\r\n  FileResult.setHeaders(webResource, options); \r\n\r\n  if(writeMethod === FileConstants.RangeWriteOptions.UPDATE) {\r\n    var size = (rangeEnd - rangeStart) + 1;\r\n    webResource.withHeader(HeaderConstants.CONTENT_LENGTH, size);\r\n  } else {\r\n    webResource.withHeader(HeaderConstants.CONTENT_LENGTH, 0);\r\n  }\r\n\r\n  return webResource;\r\n};\r\n\r\n/**\r\n* @ignore\r\n*/\r\nFileService.prototype._validateLengthAndMD5 = function (options, responseObject) {\r\n  var storedMD5 = responseObject.response.headers[Constants.HeaderConstants.CONTENT_MD5];\r\n  var contentLength;\r\n\r\n  if (!azureutil.objectIsNull(responseObject.response.headers[Constants.HeaderConstants.CONTENT_LENGTH])) {\r\n    contentLength = parseInt(responseObject.response.headers[Constants.HeaderConstants.CONTENT_LENGTH], 10);\r\n  }\r\n\r\n  // If the user has not specified this option, the default value should be false.\r\n  if(azureutil.objectIsNull(options.disableContentMD5Validation)) {\r\n    options.disableContentMD5Validation = false;\r\n  }\r\n\r\n  // None of the below cases should be retried. So set the error in every case so the retry policy filter handle knows that it shouldn't be retried.\r\n  if (options.disableContentMD5Validation === false && options.useTransactionalMD5 === true && azureutil.objectIsNull(storedMD5)) {\r\n    responseObject.error = new Error(SR.MD5_NOT_PRESENT_ERROR);\r\n    responseObject.retryable = false;\r\n  }\r\n\r\n  // Validate length and if required, MD5.\r\n  // If getFileToText called this method, then the responseObject.length and responseObject.contentMD5 are not set. Calculate them first using responseObject.response.body and then validate.\r\n  if(azureutil.objectIsNull(responseObject.length)) {\r\n    if (typeof responseObject.response.body == 'string') {\r\n      responseObject.length = Buffer.byteLength(responseObject.response.body);\r\n    } else if (Buffer.isBuffer(responseObject.response.body)) {\r\n      responseObject.length = responseObject.response.body.length;\r\n    }\r\n  }\r\n\r\n  if(!azureutil.objectIsNull(contentLength) && responseObject.length !== contentLength) {\r\n    responseObject.error = new Error(SR.CONTENT_LENGTH_MISMATCH);\r\n    responseObject.retryable = false;\r\n  }\r\n\r\n  if(options.disableContentMD5Validation === false && azureutil.objectIsNull(responseObject.contentMD5)) {\r\n    responseObject.contentMD5 = azureutil.getContentMd5(responseObject.response.body);\r\n  }\r\n\r\n  if (options.disableContentMD5Validation === false && !azureutil.objectIsNull(storedMD5) && storedMD5 !== responseObject.contentMD5) {\r\n    responseObject.error = new Error(util.format(SR.HASH_MISMATCH, storedMD5, responseObject.contentMD5));\r\n    responseObject.retryable = false;\r\n  }\r\n};\r\n\r\n/**\r\n* Checks whether or not a file exists on the service.\r\n* @ignore\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                             The share name.\r\n* @param {string}             directory                                         The directory name. Use '' to refer to the base directory.\r\n* @param {string}             file                                              The file name. File names may not start or end with the delimiter '/'.\r\n* @param {string}             primaryOnly                                       If true, the request will be executed against the primary storage location.\r\n* @param {object}             [options]                                         The request options.\r\n* @param {string}             [options.shareSnapshotId]                         The snapshot identifier of the share.\r\n* @param {LocationMode}       [options.locationMode]                            Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                     The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]                The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]                The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                         A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                       Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                               The default value is false.\r\n* @param {Function(error, result, response)}  callback                          `error` will contain information\r\n*                                                                               if an error occurs; otherwise `result` will contain\r\n*                                                                               the file information including the `exists` boolean member.\r\n*                                                                               `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype._doesFileExist = function (share, directory, file, primaryOnly, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('FileExists', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.string(file, 'file');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var resourceName = createResourceName(share, directory, file);\r\n  var webResource = WebResource.head(resourceName)\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n\r\n  /*if(primaryOnly === false) {\r\n    options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  }*/\r\n  \r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.fileResult = new FileResult(share, directory, file);\r\n    if (!responseObject.error) {\r\n      responseObject.fileResult.exists = true;\r\n      responseObject.fileResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      \r\n    } else if (responseObject.error && responseObject.error.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound) {\r\n      responseObject.error = null;\r\n      responseObject.fileResult.exists = false;\r\n      responseObject.response.isSuccessful = true;\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.fileResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Checks whether or not a directory exists on the service.\r\n* @ignore\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                             The share name.\r\n* @param {string}             directory                                         The directory name. Use '' to refer to the base directory.\r\n* @param {string}             primaryOnly                                       If true, the request will be executed against the primary storage location.\r\n* @param {object}             [options]                                         The request options.\r\n* @param {string}             [options.shareSnapshotId]                         The share snapshot identifier.\r\n* @param {LocationMode}       [options.locationMode]                            Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                               Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]                     The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]                The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]                The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                               The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                               execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                         A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                       Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                               The default value is false.\r\n* @param {Function(error, result, response)}  callback                          `error` will contain information\r\n*                                                                               if an error occurs; otherwise `result` will contain\r\n*                                                                               the directory information including `exists` boolean member. \r\n*                                                                               `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype._doesDirectoryExist = function (share, directory, primaryOnly, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('directoryExists', function (v) {\r\n    v.string(share, 'share');\r\n    v.stringAllowEmpty(directory, 'directory');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.head(createResourceName(share, directory))\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'directory')\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n\r\n  /*if(primaryOnly === false) {\r\n    options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  }*/\r\n    \r\n  var self = this;\r\n  var processResponseCallback = function(responseObject, next){\r\n    responseObject.directoryResult = new DirectoryResult(directory);\r\n    responseObject.directoryResult.exists = false;\r\n    \r\n    if (!responseObject.error) {\r\n      responseObject.directoryResult.exists = true;\r\n      responseObject.directoryResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.directoryResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      \r\n    } else if (responseObject.error && responseObject.error.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound) {\r\n      responseObject.error = null;\r\n      responseObject.response.isSuccessful = true;\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.directoryResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Checks whether or not a share exists on the service.\r\n* @ignore\r\n*\r\n* @this {FileService}\r\n* @param {string}             share                                   The share name.\r\n* @param {string}             [options.shareSnapshotId]               The share snapshot identifier.\r\n* @param {string}             primaryOnly                             If true, the request will be executed against the primary storage location.\r\n* @param {object}             [options]                               The request options.\r\n* @param {LocationMode}       [options.locationMode]                  Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                     Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]           The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]      The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]      The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                     The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                     execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]               A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]             Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                     The default value is false.\r\n* @param {Function(error, result, response)}      callback            `error` will contain information\r\n*                                                                     if an error occurs; otherwise `result` will contain\r\n*                                                                     the share information including `exists` boolean member.\r\n*                                                                     `response` will contain information related to this operation.\r\n*/\r\nFileService.prototype._doesShareExist = function (share, primaryOnly, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('shareExists', function (v) {\r\n    v.string(share, 'share');\r\n    v.shareNameIsValid(share);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.head(share)\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'share')\r\n    .withQueryOption(QueryStringConstants.SHARE_SNAPSHOT, options.shareSnapshotId);\r\n\r\n  /*if(primaryOnly === false) {\r\n    options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  }*/\r\n  \r\n  var processResponseCallback = function(responseObject, next){\r\n    responseObject.shareResult = new ShareResult(share);\r\n    responseObject.shareResult.exists = false;\r\n    \r\n    if (!responseObject.error) {\r\n      responseObject.shareResult.exists = true;\r\n      responseObject.shareResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      \r\n    } else if (responseObject.error && responseObject.error.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound) {\r\n      responseObject.error = null;\r\n      responseObject.response.isSuccessful = true;\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.shareResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* The callback for {FileService~getFileToText}.\r\n* @typedef {function} FileService~FileToText\r\n* @param {object} error      If an error occurs, the error information.\r\n* @param {string} text       The text returned from the file.\r\n* @param {object} file       Information about the file.\r\n* @param {object} response   Information related to this operation.\r\n*/\r\n\r\nFileService.SpeedSummary = SpeedSummary;\r\n\r\nmodule.exports = FileService;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\nvar util = require('util');\r\nvar RangeStream = require('./../../../common/streams/rangestream');\r\nvar Constants = require('./../../../common/util/constants');\r\n\r\n/**\r\n* File range stream\r\n*/\r\nfunction FileRangeStream(fileServiceClient, share, directory, file, options) {\r\n  FileRangeStream['super_'].call(this, fileServiceClient, null, null, options);\r\n    \r\n  this._lengthHeader = Constants.HeaderConstants.FILE_CONTENT_LENGTH;\r\n  if (options.minRangeSize) {\r\n    this._minRangeSize = options.minRangeSize;\r\n  } else {\r\n    this._minRangeSize = Constants.FileConstants.MIN_WRITE_FILE_SIZE_IN_BYTES;\r\n  }\r\n  if (options.maxRangeSize) {\r\n    this._maxRangeSize = options.maxRangeSize;\r\n  } else {\r\n    this._maxRangeSize = Constants.FileConstants.DEFAULT_WRITE_SIZE_IN_BYTES;\r\n  }\r\n  this._listFunc = fileServiceClient.listRanges;\r\n  this._resourcePath.push(share);\r\n  this._resourcePath.push(directory);\r\n  this._resourcePath.push(file);\r\n}\r\n\r\nutil.inherits(FileRangeStream, RangeStream);\r\n\r\nmodule.exports = FileRangeStream;\r\n","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar Constants = azureCommon.Constants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\n\r\n/**\r\n* Creates a new ShareResult object.\r\n* @class\r\n* The ShareResult class is used to store the share information.\r\n* \r\n * @property  {string}                      name                                  The share name.\r\n * @property  {object}                      metadata                              The metadata key/value pair.\r\n * @property  {string}                      etag                                  The etag.\r\n * @property  {string}                      lastModified                          The date/time that the share was last modified.\r\n * @property  {string}                      requestId                             The request id.\r\n * @property  {string}                      quota                                 The share quota.\r\n * \r\n* @constructor\r\n* @param {string} [name]                    The share name.\r\n*/\r\nfunction ShareResult(name) {\r\n  this.name = name;\r\n}\r\n\r\nShareResult.parse = function (shareXml, name) {\r\n  var shareResult = new ShareResult(name);\r\n  for (var propertyName in shareXml) {\r\n    if (shareXml.hasOwnProperty(propertyName)) {\r\n      if (propertyName === 'Properties') {\r\n        //  Lift out the properties onto the main object to keep consistent across all APIs like: getShareProperties\r\n        azureutil.setPropertyValueFromXML(shareResult, shareXml[propertyName], true);\r\n      } else if (propertyName === 'Metadata' || propertyName === 'ShareStats') {\r\n        var resultPropertyName = azureutil.normalizePropertyNameFromXML(propertyName);\r\n        shareResult[resultPropertyName] = {};\r\n        azureutil.setPropertyValueFromXML(shareResult[resultPropertyName], shareXml[propertyName], propertyName === 'ShareStats');\r\n      } else {\r\n        shareResult[propertyName.toLowerCase()] = shareXml[propertyName];\r\n      }\r\n    }\r\n  }\r\n\r\n  return shareResult;\r\n};\r\n\r\nShareResult.prototype.getPropertiesFromHeaders = function (headers) {\r\n  var self = this;\r\n\r\n  var setSharePropertyFromHeaders = function (shareProperty, headerProperty) {\r\n    if (!self[shareProperty] && headers[headerProperty.toLowerCase()]) {\r\n      self[shareProperty] = headers[headerProperty.toLowerCase()];\r\n    }\r\n  };\r\n\r\n  setSharePropertyFromHeaders('etag', HeaderConstants.ETAG);\r\n  setSharePropertyFromHeaders('lastModified', HeaderConstants.LAST_MODIFIED);\r\n  setSharePropertyFromHeaders('requestId', HeaderConstants.REQUEST_ID);\r\n  setSharePropertyFromHeaders('quota', HeaderConstants.SHARE_QUOTA);\r\n};\r\n\r\n/**\r\n* The share ACL settings.\r\n* @typedef    {object}                ShareAclResult\r\n* @extends    {ShareAclResult}\r\n* @property   {Object.<string, AccessPolicy>}    signedIdentifiers   The container ACL settings. See `[AccessPolicy]{@link AccessPolicy}` for detailed information.\r\n*/\r\n\r\nmodule.exports = ShareResult;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar HeaderConstants = require('./../../../common/common.core').Constants.HeaderConstants;\r\n\r\n/**\r\n* Creates a new DirectoryResult object.\r\n* @class\r\n* The DirectoryResult class is used to store the directory information.\r\n* \r\n * @property  {string}                      name                                  The container name.\r\n * @property  {object}                      metadata                              The metadata key/value pair.\r\n * @property  {string}                      etag                                  The etag.\r\n * @property  {string}                      lastModified                          The date/time that the directory was last modified.\r\n * @property  {string}                      requestId                             The request id.\r\n * @property  {string}                      serverEncrypted                       If the directory metadata is completely encrypted using the specified algorithm. true/false.\r\n *\r\n* @constructor\r\n* @param {string} [name]                    The directory name.\r\n*/\r\nfunction DirectoryResult(name) {\r\n  this.name = name;\r\n}\r\n\r\nDirectoryResult.parse = function (dirXml) {\r\n  return new DirectoryResult(dirXml.Name);\r\n};\r\n\r\nDirectoryResult.prototype.getPropertiesFromHeaders = function (headers) {\r\n  var self = this;\r\n\r\n  var setDirectoryPropertyFromHeaders = function (directoryProperty, headerProperty) {\r\n    if (!self[directoryProperty] && headers[headerProperty.toLowerCase()]) {\r\n      self[directoryProperty] = headers[headerProperty.toLowerCase()];\r\n    }\r\n  };\r\n\r\n  setDirectoryPropertyFromHeaders('etag', HeaderConstants.ETAG);\r\n  setDirectoryPropertyFromHeaders('lastModified', HeaderConstants.LAST_MODIFIED);\r\n  setDirectoryPropertyFromHeaders('requestId', HeaderConstants.REQUEST_ID);\r\n  setDirectoryPropertyFromHeaders('serverEncrypted', HeaderConstants.SERVER_ENCRYPTED);\r\n};\r\n\r\nmodule.exports = DirectoryResult;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar _ = require('underscore');\r\n\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar Constants = azureCommon.Constants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\n\r\n/**\r\n* Creates a new FileResult object.\r\n* @class\r\n* The FileResult class is used to store the file information.\r\n* \r\n * @property  {string}                      share                                 The share name.\r\n * @property  {string}                      directory                             The directory name.\r\n * @property  {string}                      name                                  The file name.\r\n * @property  {object}                      metadata                              The metadata key/value pair.\r\n * @property  {string}                      etag                                  The etag.\r\n * @property  {string}                      lastModified                          The date/time that the file was last modified.\r\n * @property  {string}                      requestId                             The request id.\r\n * @property  {string}                      acceptRanges                          The accept ranges.\r\n * @property  {string}                      serverEncrypted                       If the file data and application metadata are completely encrypted using the specified algorithm. true/false.\r\n * @property  {string}                      contentRange                          The content range\r\n * @property  {string}                      contentLength                         The size of the file in bytes.\r\n * @property  {object}                      contentSettings                       The content settings.\r\n * @property  {string}                      contentSettings.contentType           The content type.\r\n * @property  {string}                      contentSettings.contentEncoding       The content encoding.\r\n * @property  {string}                      contentSettings.contentLanguage       The content language.\r\n * @property  {string}                      contentSettings.cacheControl          The cache control.\r\n * @property  {string}                      contentSettings.contentDisposition    The content disposition.\r\n * @property  {string}                      contentSettings.contentMD5            The content MD5 hash.\r\n * @property  {object}                      copy                                  The copy information.\r\n * @property  {string}                      copy.id                               The copy id.\r\n * @property  {string}                      copy.status                           The copy status.\r\n * @property  {string}                      copy.completionTime                   The copy completion time. \r\n * @property  {string}                      copy.statusDescription                The copy status description.\r\n * @property  {string}                      copy.progress                         The copy progress.\r\n * @property  {string}                      copy.source                           The copy source.\r\n * \r\n* @constructor\r\n* @param {string} [share]      The share name.\r\n* @param {string} [directory]  The directory name.\r\n* @param {string} [name]       The file name.\r\n*/\r\nfunction FileResult(share, directory, name) {\r\n  this.share = share;\r\n  this.directory = directory;\r\n  this.name = name;\r\n}\r\n\r\nFileResult.parse = function (entryXml) {\r\n  var listResult = new FileResult();\r\n  for (var propertyName in entryXml) {\r\n    if (propertyName === 'Properties') {\r\n      //  Lift out the properties onto the main object to keep consistent across all APIs like: getFileProperties\r\n        azureutil.setPropertyValueFromXML(listResult, entryXml[propertyName], true);\r\n    } else {\r\n      listResult[propertyName.toLowerCase()] = entryXml[propertyName];\r\n    }\r\n  }\r\n\r\n  return listResult;\r\n};\r\n\r\nvar responseHeaders = {\r\n  'acceptRanges': 'ACCEPT_RANGES',\r\n  'contentLength': 'CONTENT_LENGTH',\r\n  'contentRange': 'CONTENT_RANGE',\r\n\r\n  'contentSettings.contentType': 'CONTENT_TYPE',\r\n  'contentSettings.contentEncoding': 'CONTENT_ENCODING',\r\n  'contentSettings.contentLanguage': 'CONTENT_LANGUAGE',\r\n  'contentSettings.cacheControl': 'CACHE_CONTROL',\r\n  'contentSettings.contentDisposition': 'CONTENT_DISPOSITION',\r\n  'contentSettings.contentMD5': 'CONTENT_MD5',\r\n  'contentSettings.fileContentMD5': 'FILE_CONTENT_MD5',\r\n  \r\n  'copy.id': 'COPY_ID',\r\n  'copy.status': 'COPY_STATUS',\r\n  'copy.source': 'COPY_SOURCE',\r\n  'copy.progress': 'COPY_PROGRESS',\r\n  'copy.completionTime': 'COPY_COMPLETION_TIME',\r\n  'copy.statusDescription': 'COPY_STATUS_DESCRIPTION'\r\n};\r\n\r\nFileResult.prototype.getPropertiesFromHeaders = function (headers, content) {\r\n  var self = this;\r\n  \r\n  var setFilePropertyFromHeaders = function (fileProperty, headerProperty) {\r\n    if (!azureutil.tryGetValueChain(self, fileProperty.split('.'), null) && headers[headerProperty.toLowerCase()]) {\r\n      azureutil.setObjectInnerPropertyValue(self, fileProperty.split('.'), headers[headerProperty.toLowerCase()]);\r\n      \r\n      if (fileProperty === 'copy.progress') {\r\n        var info = azureutil.parseCopyProgress(self.copy.progress);\r\n        self.copy.bytesCopied = parseInt(info.bytesCopied);\r\n        self.copy.totalBytes = parseInt(info.totalBytes);\r\n      }\r\n    }\r\n  };\r\n   \r\n  // For range get, 'x-ms-content-md5' indicate the overall MD5 of the file. Try to set the contentMD5 using this header if it presents\r\n  setFilePropertyFromHeaders('contentSettings.contentMD5', HeaderConstants.FILE_CONTENT_MD5);\r\n\r\n  setFilePropertyFromHeaders('etag', HeaderConstants.ETAG);\r\n  setFilePropertyFromHeaders('lastModified', HeaderConstants.LAST_MODIFIED);\r\n  setFilePropertyFromHeaders('requestId', HeaderConstants.REQUEST_ID);\r\n  setFilePropertyFromHeaders('serverEncrypted', HeaderConstants.SERVER_ENCRYPTED);\r\n\r\n  if (content) {\r\n     _.chain(responseHeaders).pairs().each(function (pair) {\r\n      var property = pair[0];\r\n      var header = HeaderConstants[pair[1]];\r\n      setFilePropertyFromHeaders(property, header);\r\n    });\r\n\r\n   }\r\n};\r\n\r\n/**\r\n* This method sets the HTTP headers and is used by all methods except setFileProperties and createFile. \r\n* Those methods will set the x-ms-* headers using setProperties.\r\n*/\r\nFileResult.setHeaders = function (webResource, options) {\r\n  var setHeaderProperty = function (headerProperty, fileProperty) {\r\n    var propertyValue = azureutil.tryGetValueChain(options, fileProperty.split('.'), null);\r\n    if (propertyValue) {\r\n      webResource.withHeader(headerProperty, propertyValue);\r\n    }\r\n  };\r\n\r\n  if (options) {\r\n    // Content-MD5\r\n    setHeaderProperty(HeaderConstants.CONTENT_MD5, 'transactionalContentMD5');\r\n\r\n    // Content-Length\r\n    setHeaderProperty(HeaderConstants.CONTENT_LENGTH, 'contentLength');\r\n\r\n    // Range\r\n    if (!azureutil.objectIsNull(options.rangeStart)) {\r\n      var range = 'bytes=' + options.rangeStart + '-';\r\n\r\n      if (!azureutil.objectIsNull(options.rangeEnd)) {\r\n        range += options.rangeEnd;\r\n      }\r\n\r\n      webResource.withHeader(HeaderConstants.STORAGE_RANGE, range);\r\n    }   \r\n  }\r\n};\r\n\r\n/**\r\n* This method sets the x-ms-* headers and is used by setFileProperties and createFile. \r\n* All other methods will set the regular HTTP headers using setHeaders.\r\n*/\r\nFileResult.setProperties = function (webResource, options) {\r\n  var setHeaderProperty = function (headerProperty, fileProperty) {\r\n    var propertyValue = azureutil.tryGetValueChain(options, fileProperty.split('.'), null);\r\n    if (propertyValue) {\r\n      webResource.withHeader(headerProperty, propertyValue);\r\n    }\r\n  };\r\n\r\n  if (options) {\r\n    // Content-Length\r\n    setHeaderProperty(HeaderConstants.FILE_CONTENT_LENGTH, 'contentLength');\r\n    \r\n    // Content-Type\r\n    setHeaderProperty(HeaderConstants.FILE_CONTENT_TYPE, 'contentSettings.contentType');\r\n\r\n    // Content-Encoding\r\n    setHeaderProperty(HeaderConstants.FILE_CONTENT_ENCODING, 'contentSettings.contentEncoding');\r\n\r\n    // Content-Language\r\n    setHeaderProperty(HeaderConstants.FILE_CONTENT_LANGUAGE, 'contentSettings.contentLanguage');\r\n\r\n    // Content-Disposition\r\n    setHeaderProperty(HeaderConstants.FILE_CONTENT_DISPOSITION, 'contentSettings.contentDisposition');\r\n\r\n    // Cache-Control\r\n    setHeaderProperty(HeaderConstants.FILE_CACHE_CONTROL, 'contentSettings.cacheControl');\r\n\r\n    // Content-MD5\r\n    setHeaderProperty(HeaderConstants.FILE_CONTENT_MD5, 'contentSettings.contentMD5');\r\n\r\n    if (options.metadata) {\r\n      webResource.addOptionalMetadataHeaders(options.metadata);\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = FileResult;","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar util = require('util');\r\nvar _ = require('underscore');\r\nvar extend = require('extend');\r\n\r\nvar azureCommon = require('./../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar SR = azureCommon.SR;\r\nvar validate = azureCommon.validate;\r\n\r\nvar StorageServiceClient = azureCommon.StorageServiceClient;\r\nvar WebResource = azureCommon.WebResource;\r\nvar Constants = azureCommon.Constants;\r\nvar QueryStringConstants = Constants.QueryStringConstants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\nvar RequestLocationMode = Constants.RequestLocationMode;\r\n\r\n// Models requires\r\nvar QueueResult = require('./models/queueresult');\r\nvar AclResult = azureCommon.AclResult;\r\nvar QueueMessageResult = require('./models/queuemessageresult');\r\nvar QueueMessageEncoder = require('./queuemessageencoder');\r\nvar ServiceStatsParser = azureCommon.ServiceStatsParser;\r\n\r\n/**\r\n* Creates a new QueueService object.\r\n* If no connection string or storageaccount and storageaccesskey are provided,\r\n* the AZURE_STORAGE_CONNECTION_STRING or AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY environment variables will be used.\r\n* @class\r\n* The QueueService class is used to perform operations on the Microsoft Azure Queue Service.\r\n* \r\n* For more information on using the Queue Service, as well as task focused information on using it from a Node.js application, see\r\n* [How to Use the Queue Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-queues/).\r\n* The following defaults can be set on the Queue service.\r\n* messageEncoder                                      The message encoder to specify how QueueService encodes and decodes the queue message. Default is `[TextXmlQueueMessageEncoder]{@link TextXmlQueueMessageEncoder}`.\r\n* defaultTimeoutIntervalInMs                          The default timeout interval, in milliseconds, to use for request made via the Queue service.\r\n* defaultClientRequestTimeoutInMs                     The default timeout of client requests, in milliseconds, to use for the request made via the Queue service.\r\n* defaultMaximumExecutionTimeInMs                     The default maximum execution time across all potential retries, for requests made via the Queue service.\r\n* defaultLocationMode                                 The default location mode for requests made via the Queue service.\r\n* useNagleAlgorithm                                   Determines whether the Nagle algorithm is used for requests made via the Queue service; true to use the  \r\n*                                                     Nagle algorithm; otherwise, false. The default value is false.\r\n* enableGlobalHttpAgent                               Determines whether global HTTP(s) agent is enabled; true to use Global HTTP(s) agent; otherwise, false to use\r\n*                                                     http(s).Agent({keepAlive:true}).\r\n* @constructor\r\n* @augments {StorageServiceClient}\r\n*\r\n* @param {string} [storageAccountOrConnectionString]  The storage account or the connection string.\r\n* @param {string} [storageAccessKey]                  The storage access key.\r\n* @param {string|object} [host]                       The host address. To define primary only, pass a string. \r\n*                                                     Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host.\r\n* @param {string} [sas]                               The Shared Access Signature string.\r\n* @param {string} [endpointSuffix]                    The endpoint suffix.\r\n* @param {TokenCredential} [token]                    The {@link TokenCredential} object.\r\n*/\r\nfunction QueueService(storageAccountOrConnectionString, storageAccessKey, host, sas, endpointSuffix, token) {\r\n  var storageServiceSettings = StorageServiceClient.getStorageSettings(storageAccountOrConnectionString, storageAccessKey, host, sas, endpointSuffix, token);\r\n\r\n  QueueService['super_'].call(this,\r\n    storageServiceSettings._name,\r\n    storageServiceSettings._key,\r\n    storageServiceSettings._queueEndpoint,\r\n    storageServiceSettings._usePathStyleUri,\r\n    storageServiceSettings._sasToken,\r\n    token);\r\n\r\n  if (this.anonymous) {\r\n    throw new Error(SR.ANONYMOUS_ACCESS_BLOBSERVICE_ONLY);\r\n  }\r\n  \r\n  /**\r\n   * @property {boolean} QueueService#messageEncoder\r\n   * @defaultvalue      {QueueMessageEncoder}     `[TextXmlQueueMessageEncoder]{@link TextXmlQueueMessageEncoder}`.\r\n   * The message encoder to specify how QueueService encodes and decodes the queue message. Default is `[TextXmlQueueMessageEncoder]{@link TextXmlQueueMessageEncoder}`.\r\n   */\r\n  this.messageEncoder = new QueueMessageEncoder.TextXmlQueueMessageEncoder();\r\n}\r\n\r\nutil.inherits(QueueService, StorageServiceClient);\r\n\r\n/**\r\n* Gets the service stats for a storage account’s Queue service.\r\n*\r\n* @this {QueueService}\r\n* @param {object}       [options]                                         The request options.\r\n* @param {LocationMode} [options.locationMode]                            Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}          [options.timeoutIntervalInMs]                     The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}          [options.clientRequestTimeoutInMs]                The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}          [options.maximumExecutionTimeInMs]                The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}       [options.clientRequestId]                         A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}         [options.useNagleAlgorithm]                       Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise, `[result]{@link ServiceStats}`\r\n*                                                                         will contain the stats and `response`\r\n*                                                                         will contain information related to this operation.\r\n*/\r\nQueueService.prototype.getServiceStats = function (optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getServiceStats', function (v) {\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get()\r\n    .withQueryOption(QueryStringConstants.COMP, 'stats')\r\n    .withQueryOption(QueryStringConstants.RESTYPE, 'service');\r\n\r\n  options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.serviceStatsResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.serviceStatsResult = ServiceStatsParser.parse(responseObject.response.body.StorageServiceStats);\r\n    }\r\n\r\n    // function to be called after all filters\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.serviceStatsResult, returnObject.response);\r\n    };\r\n\r\n    // call the first filter\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Gets the properties of a storage account’s Queue service, including Microsoft Azure Storage Analytics.\r\n*\r\n* @this {QueueService}\r\n* @param {object}             [options]                                 The request options.\r\n* @param {LocationMode}       [options.locationMode]                    Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                       Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]             The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]        The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]        The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                       The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                       execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                 A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]               Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                       The default value is false.\r\n* @param {errorOrResult}  callback                                      `error` will contain information\r\n*                                                                       if an error occurs; otherwise, `[result]{@link ServiceProperties}`\r\n*                                                                       will contain the properties and `response`\r\n*                                                                       will contain information related to this operation.\r\n*/\r\nQueueService.prototype.getServiceProperties = function (optionsOrCallback, callback) {\r\n  return this.getAccountServiceProperties(optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Sets the properties of a storage account’s Queue service, including Microsoft Azure Storage Analytics.\r\n* You can also use this operation to set the default request version for all incoming requests that do not have a version specified.\r\n*\r\n* @this {QueueService}\r\n* @param {object}             serviceProperties                        The service properties.\r\n* @param {object}             [options]                                The request options.\r\n* @param {LocationMode}       [options.locationMode]                   Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                      Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]            The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]       The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]       The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                      The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                      execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]              Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                      The default value is false.\r\n* @param {errorOrResponse}  callback                                   `error` will contain information\r\n*                                                                      if an error occurs; otherwise, `response`\r\n*                                                                      will contain information related to this operation.\r\n*/\r\nQueueService.prototype.setServiceProperties = function (serviceProperties, optionsOrCallback, callback) {\r\n  return this.setAccountServiceProperties(serviceProperties, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of queue items whose names begin with the specified prefix under the given account.\r\n*\r\n* @this {QueueService}\r\n* @param {object}             currentToken                                A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {int}                [options.maxResults]                        Specifies the maximum number of queues to return per call to Azure storage. This does NOT affect list size returned by this function. (maximum: 5000)\r\n* @param {string}             [options.include]                           Include this parameter to specify that the queue's metadata be returned as part of the response body. (allowed values: '', 'metadata')\r\n*                                                                         **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                         `entries`  gives a list of `[queues]{@link QueueResult}` and the `continuationToken` is used for the next listing operation.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.listQueuesSegmented = function (currentToken, optionsOrCallback, callback) {\r\n  this.listQueuesSegmentedWithPrefix(null /* prefix */, currentToken, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Lists a segment containing a collection of queue items  under the given account.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             prefix                                      The prefix of the queue name.\r\n* @param {object}             currentToken                                A continuation token returned by a previous listing operation. Please use 'null' or 'undefined' if this is the first operation.* @param {string}             [options.prefix]                  Filters the results to return only queues whose name begins with the specified prefix.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {string}             [options.marker]                            String value that identifies the portion of the list to be returned with the next list operation.\r\n* @param {int}                [options.maxResults]                        Specifies the maximum number of queues to return per call to Azure storage. This does NOT affect list size returned by this function. (maximum: 5000)\r\n* @param {string}             [options.include]                           Include this parameter to specify that the queue's metadata be returned as part of the response body. (allowed values: '', 'metadata')\r\n*                                                                         **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain `entries` and `continuationToken`. \r\n*                                                                         `entries`  gives a list of `[queues]{@link QueueResult}` and the `continuationToken` is used for the next listing operation.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.listQueuesSegmentedWithPrefix = function (prefix, currentToken, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('listQueuesSegmentedWithPrefix', function (v) {\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get();\r\n  webResource.withQueryOption(QueryStringConstants.COMP, 'list')\r\n    .withQueryOption(QueryStringConstants.MAX_RESULTS, options.maxResults)\r\n    .withQueryOption(QueryStringConstants.INCLUDE, options.include)\r\n    .withQueryOption(QueryStringConstants.PREFIX, prefix);\r\n\r\n  if(!azureutil.objectIsNull(currentToken)) {\r\n    webResource.withQueryOption(QueryStringConstants.MARKER, currentToken.nextMarker);\r\n  }\r\n\r\n  options.requestLocationMode = azureutil.getNextListingLocationMode(currentToken);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.listQueuesResult = null;\r\n\r\n    if (!responseObject.error) {\r\n      responseObject.listQueuesResult = {\r\n        entries: null,\r\n        continuationToken: null\r\n      };\r\n      responseObject.listQueuesResult.entries = [];\r\n      var queues = [];\r\n\r\n      if (responseObject.response.body.EnumerationResults.Queues && responseObject.response.body.EnumerationResults.Queues.Queue) {\r\n        queues = responseObject.response.body.EnumerationResults.Queues.Queue;\r\n\r\n        if (!_.isArray(queues)) {\r\n          queues = [ queues ];\r\n        }\r\n\r\n        queues.forEach(function (currentQueue) {\r\n          var queueResult = QueueResult.parse(currentQueue);\r\n          responseObject.listQueuesResult.entries.push(queueResult);\r\n        });\r\n\r\n        if(responseObject.response.body.EnumerationResults.NextMarker) {\r\n          responseObject.listQueuesResult.continuationToken = {\r\n            nextMarker: null,\r\n            targetLocation: null\r\n          };\r\n\r\n          responseObject.listQueuesResult.continuationToken.nextMarker = responseObject.response.body.EnumerationResults.NextMarker;\r\n          responseObject.listQueuesResult.continuationToken.targetLocation = responseObject.targetLocation;\r\n        }\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.listQueuesResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Checks to see if a queue exists.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {Function(error, result, response)}  callback                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise, `[result]{@link QueueResult}` will contain\r\n*                                                                         the queue information including `exists` boolean member.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.doesQueueExist = function (queue, optionsOrCallback, callback) {\r\n  this._doesQueueExist(queue, false, optionsOrCallback, callback);\r\n};\r\n\r\n/**\r\n* Creates a new queue under the given account.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {object}             [options.metadata]                          The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link QueueResult}` will contain\r\n*                                                                         the queue information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.createQueue = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createQueue', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(queue);\r\n  if (options) {\r\n    webResource.addOptionalMetadataHeaders(options.metadata);\r\n  }\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.queueResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.queueResult = new QueueResult(queue);\r\n      if (options && options.metadata) {\r\n        responseObject.queueResult.metadata = options.metadata;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.queueResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Creates a new queue under the given account if it doesn't exist.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {object}             [options.metadata]                          The metadata key/value pairs.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                       `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link QueueResult}` will contain \r\n*                                                                         the queue information including `created` boolean member and \r\n*                                                                         `response` will contain information related to this operation.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var queueService = azure.createQueueService();\r\n* queueService.createQueueIfNotExists('taskqueue', function(error) {\r\n*   if(!error) {\r\n*     // Queue created or exists\r\n*   }\r\n* }); \r\n*/\r\nQueueService.prototype.createQueueIfNotExists = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createQueueIfNotExists', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var self = this;\r\n  self._doesQueueExist(queue, true, options, function(error, result, response) {\r\n    var exists = result.exists;\r\n    result.created = false;\r\n    delete result.exists;\r\n    \r\n    if (error) {\r\n      callback(error, result, response);\r\n    } else if (exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, result, response);\r\n    } else {\r\n      self.createQueue(queue, options, function(createError, responseQueue, createResponse) {\r\n        if (!createError) {\r\n          responseQueue.created = true;\r\n        }\r\n        else if (createError && createError.statusCode === Constants.HttpConstants.HttpResponseCodes.Conflict && createError.code === Constants.QueueErrorCodeStrings.QUEUE_ALREADY_EXISTS) {\r\n          createError = null;\r\n          responseQueue.created = false;\r\n          createResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(createError, responseQueue, createResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Permanently deletes the specified queue.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResponse}  callback                                      `error` will contain information if an error occurs; \r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.deleteQueue = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteQueue', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.del(queue);\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Permanently deletes the specified queue if it exists.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain\r\n*                                                                         'true' if the queue was deleted and 'false' if the queue did not exist.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.deleteQueueIfExists = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteQueueIfExists', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var self = this;\r\n  self._doesQueueExist(queue, true, options, function existsCallback(error, existsResult, response) {\r\n    if (error) {\r\n      callback(error, existsResult.exists, response);\r\n    } else if (!existsResult.exists) {\r\n      response.isSuccessful = true;\r\n      callback(error, false, response);\r\n    } else {\r\n      self.deleteQueue(queue, options, function(deleteError, deleteResponse) {\r\n        var deleted;\r\n        if (!deleteError) {\r\n          deleted = true;\r\n        } else if (deleteError && deleteError.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound && deleteError.code === Constants.QueueErrorCodeStrings.QUEUE_NOT_FOUND) {\r\n          deleted = false;\r\n          deleteError = null;\r\n          deleteResponse.isSuccessful = true;\r\n        }\r\n\r\n        callback(deleteError, deleted, deleteResponse);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n* Returns queue properties, including user-defined metadata.\r\n* **Note** that all metadata names returned from the server will be converted to lower case by NodeJS itself as metadata is set via HTTP headers and HTTP header names are case insensitive.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link QueueResult}` will contain\r\n*                                                                         the queue information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.getQueueMetadata = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getQueueMetadata', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get(queue)\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata');\r\n\r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var self = this;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.queueResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.queueResult = new QueueResult(queue);\r\n      responseObject.queueResult.metadata = self.parseMetadataHeaders(responseObject.response.headers);\r\n      responseObject.queueResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.queueResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Sets user-defined metadata on the specified queue. Metadata is associated with the queue as name-value pairs.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             metadata                                    The metadata key/value pairs.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link QueueResult}` will contain\r\n*                                                                         the queue information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.setQueueMetadata = function (queue, metadata, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setQueueMetadata', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.put(queue)\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata')\r\n    .addOptionalMetadataHeaders(metadata);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.queueResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.queueResult = new QueueResult(queue, metadata);\r\n      responseObject.queueResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.queueResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Adds a new message to the back of the message queue. \r\n* The encoded message can be up to 64KB in size for versions 2011-08-18 and newer, or 8KB in size for previous versions. \r\n* Unencoded messages must be in a format that can be included in an XML request with UTF-8 encoding. \r\n* Queue messages are encoded using the `[TextXmlQueueMessageEncoder]{@link TextXmlQueueMessageEncoder}`. See queueService.messageEncoder to set encoder defaults. \r\n* \r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {string|Buffer}      messageText                                 The message text.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {int}                [options.messageTimeToLive]                 The time-to-live interval for the message, in seconds. The maximum time-to-live allowed is 7 days. If this parameter is omitted, the default time-to-live is 7 days\r\n* @param {int}                [options.visibilityTimeout]                 Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message cannot be set to a value later than the expiry time. visibilitytimeout should be set to a value smaller than the time-to-live value.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}      callback                                    `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link QueueMessageResult}` will contain\r\n*                                                                         the message.\r\n*                                                                         `response` will contain information related to this operation.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var queueService = azure.createQueueService();\r\n* queueService.createMessage('taskqueue', 'Hello world!', function(error) {\r\n*   if(!error) {\r\n*     // Message inserted\r\n*   }\r\n* });\r\n*/\r\nQueueService.prototype.createMessage = function (queue, messageText, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('createMessage', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var xmlMessageDescriptor = QueueMessageResult.serialize(messageText, this.messageEncoder);\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.post(queue + '/messages')\r\n    .withHeader(HeaderConstants.CONTENT_TYPE, 'application/atom+xml;charset=\"utf-8\"')\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(xmlMessageDescriptor, 'utf8'))\r\n    .withQueryOption(QueryStringConstants.MESSAGE_TTL, options.messageTimeToLive)\r\n    .withQueryOption(QueryStringConstants.VISIBILITY_TIMEOUT, options.visibilityTimeout)\r\n    .withBody(xmlMessageDescriptor);\r\n\r\n  var messageEncoder = this.messageEncoder;\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.queueMessageResults = [];\r\n\r\n    if (responseObject.response && responseObject.response.body && responseObject.response.body.QueueMessagesList && responseObject.response.body.QueueMessagesList.QueueMessage) {\r\n      var messages = responseObject.response.body.QueueMessagesList.QueueMessage;\r\n\r\n      if (!_.isArray(messages)) {\r\n        messages = [ messages ];\r\n      }\r\n\r\n      messages.forEach(function (message) {\r\n        var queueMessageResult = QueueMessageResult.parse(message, messageEncoder);\r\n        responseObject.queueMessageResults.push(queueMessageResult);\r\n      });\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, responseObject.queueMessageResults[0], returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Retrieve messages from the queue and makes them invisible to other consumers.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {int}                [options.numOfMessages]                     A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32. By default, a single message is retrieved from the queue with this operation.\r\n* @param {int}                [options.visibilityTimeout]                 Required if not peek only. Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message can be set to a value later than the expiry time.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain\r\n*                                                                         a list of `[messages]{@link QueueMessageResult}`.\r\n*                                                                         `response` will contain information related to this operation.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var queueService = azure.createQueueService();\r\n* var queueName = 'taskqueue';\r\n* queueService.getMessages(queueName, function(error, serverMessages) {\r\n*   if(!error) {\r\n*     // Process the message in less than 30 seconds, the message\r\n*     // text is available in serverMessages[0].messagetext\r\n*     queueService.deleteMessage(queueName, serverMessages[0].messageId, serverMessages[0].popReceipt, function(error) {\r\n*       if(!error){\r\n*           // Message deleted\r\n*       }\r\n*     });\r\n*   }\r\n* });\r\n*/\r\nQueueService.prototype.getMessages = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getMessages', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  delete options.peekOnly;\r\n  \r\n  this._getOrPeekMessages(queue, options, callback);\r\n};\r\n\r\n/**\r\n* Retrieves a message from the queue and makes it invisible to other consumers.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {int}                [options.visibilityTimeout]                 Required if not peek only. Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message can be set to a value later than the expiry time.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link QueueMessageResult}` will contain\r\n*                                                                         the message.\r\n*                                                                         `response` will contain information related to this operation.\r\n*\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var queueService = azure.createQueueService();\r\n* var queueName = 'taskqueue';\r\n* queueService.getMessage(queueName, function(error, serverMessage) {\r\n*   if(!error) {\r\n*     // Process the message in less than 30 seconds, the message\r\n*     // text is available in serverMessage.messagetext\r\n*     queueService.deleteMessage(queueName, serverMessage.messageId, serverMessage.popReceipt, function(error) {\r\n*       if(!error){\r\n*           // Message deleted\r\n*       }\r\n*     });\r\n*   }\r\n* });\r\n*/\r\nQueueService.prototype.getMessage = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getMessage', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  options.numOfMessages = 1;\r\n  \r\n  var finalCallback = function(error, messages, response){\r\n    var message;\r\n    if(messages && messages.length > 0){\r\n      message = messages[0];\r\n    }\r\n    \r\n    callback(error, message, response);\r\n  };\r\n  \r\n  this.getMessages(queue, options, finalCallback);\r\n};\r\n\r\n/**\r\n* Retrieves messages from the front of the queue, without changing the messages visibility.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {int}                [options.numOfMessages]                     A nonzero integer value that specifies the number of messages to retrieve from the queue, up to a maximum of 32. By default, a single message is retrieved from the queue with this operation.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `result` will contain\r\n*                                                                         `[messages]{@link QueueMessageResult}`.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.peekMessages = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('peekMessages', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  options.peekOnly = true;\r\n  delete options.visibilityTimeout;\r\n  \r\n  this._getOrPeekMessages(queue, options, callback);\r\n};\r\n\r\n/**\r\n* Retrieves a message from the front of the queue, without changing the message visibility.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link QueueMessageResult}` will contain\r\n*                                                                         the message.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.peekMessage = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('peekMessage', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  options.numOfMessages = 1;\r\n  \r\n  var finalCallback = function(error, messages, response){\r\n    var message;\r\n    if(messages && messages.length > 0){\r\n      message = messages[0];\r\n    }\r\n    \r\n    callback(error, message, response);\r\n  };\r\n  \r\n  this.peekMessages(queue, options, finalCallback);\r\n};\r\n\r\n/**\r\n* Deletes a specified message from the queue.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {string}             messageId                                   The message identifier of the message to delete.\r\n* @param {string}             popReceipt                                  A valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResponse}  callback                                      `error` will contain information if an error occurs; \r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.deleteMessage = function (queue, messageId, popReceipt, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('deleteMessage', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  if (azureutil.objectIsNull(popReceipt)) {\r\n    throw new Error(SR.INVALID_POP_RECEIPT);\r\n  }\r\n\r\n  if (azureutil.objectIsNull(messageId)) {\r\n    throw new Error(SR.INVALID_MESSAGE_ID);\r\n  }\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.del(queue + '/messages/' + messageId)\r\n    .withQueryOption(QueryStringConstants.POP_RECEIPT, popReceipt, null, true);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Clears all messages from the queue.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResponse}  callback                                      `error` will contain information\r\n*                                                                         if an error occurs; otherwise \r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.clearMessages = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('clearMessages', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.del(queue + '/messages');\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Updates the visibility timeout of a message. You can also use this operation to update the contents of a message.\r\n* A message must be in a format that can be included in an XML request with UTF-8 encoding, and the encoded message can be up to 64KB in size.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {string}             messageId                                   The message identifier of the message to update.\r\n* @param {string}             popReceipt                                  A valid pop receipt value returned from an earlier call to the Get Messages or Update Message operation\r\n* @param {int}                visibilityTimeout                           Specifies the new visibility timeout value, in seconds, relative to server time. The new value must be larger than or equal to 0, and cannot be larger than 7 days. The visibility timeout of a message can be set to a value later than the expiry time.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {object}             [options.messageText]                       The new message text.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link QueueMessageResult}` will contain\r\n*                                                                         the message result information.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.updateMessage = function (queue, messageId, popReceipt, visibilityTimeout, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('updateMessage', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  if (azureutil.objectIsNull(popReceipt)) {\r\n    throw new Error(SR.INVALID_POP_RECEIPT);\r\n  }\r\n\r\n  if (azureutil.objectIsNull(messageId)) {\r\n    throw new Error(SR.INVALID_MESSAGE_ID);\r\n  }\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var content = null;\r\n  if (options.messageText) {\r\n    content = QueueMessageResult.serialize(options.messageText, this.messageEncoder);\r\n  }\r\n\r\n  var contentLength = content ? Buffer.byteLength(content, 'utf8') : 0;\r\n\r\n  var webResource = WebResource.put(queue + '/messages/' + messageId)\r\n    .withHeader(HeaderConstants.CONTENT_TYPE, 'application/atom+xml;charset=\"utf-8\"')\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, contentLength)\r\n    .withQueryOption(QueryStringConstants.POP_RECEIPT, popReceipt, null, true)\r\n    .withQueryOption(QueryStringConstants.VISIBILITY_TIMEOUT, visibilityTimeout)\r\n    .withBody(content);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.queueMessageResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.queueMessageResult = new QueueMessageResult(queue, messageId);\r\n      responseObject.queueMessageResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.queueMessageResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Gets the queue's ACL.\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                        `error` will contain information\r\n*                                                                         if an error occurs; otherwise `[result]{@link QueueResult}` will contain\r\n*                                                                         information for the queue.\r\n*                                                                         `response` will contain information related to this operation.\r\n*/\r\nQueueService.prototype.getQueueAcl = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('getQueueAcl', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.get(queue)\r\n    .withQueryOption(QueryStringConstants.COMP, 'acl');\r\n\r\n  options.requestLocationMode = Constants.RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.queueResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.queueResult = new QueueResult(queue);\r\n      responseObject.queueResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      responseObject.queueResult.signedIdentifiers = AclResult.parse(responseObject.response.body);\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.queueResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Updates the queue's ACL.\r\n*\r\n* @this {QueueService}\r\n* @param {string}                             queue                                       The queue name.\r\n* @property   {Object.<string, AccessPolicy>}    signedIdentifiers                           The container ACL settings. See `[AccessPolicy]{@link AccessPolicy}` for detailed information.\r\n* @param {object}                             [options]                                   The request options.\r\n* @param {LocationMode}                       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}                             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}                               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                                         The default value is false.\r\n* @param {errorOrResult}  callback                                                        `error` will contain information\r\n*                                                                                         if an error occurs; otherwise `[result]{@link QueueResult}` will contain\r\n*                                                                                         information for the queue.\r\n*                                                                                         `response` will contain information related to this operation.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var SharedAccessPermissions = azure.QueueUtilities.SharedAccessPermissions;\r\n* var queueService = azure.createQueueService();\r\n* var sharedAccessPolicies = [\r\n* {AccessPolicy: {\r\n*     Permissions: PROCESS,\r\n*     Start: startDate,\r\n*     Expiry: expiryDate\r\n*   },\r\n*   Id: processOnly,\r\n* },\r\n* {AccessPolicy: {\r\n*     Permissions: SharedAccessPermissions.PROCESS + SharedAccessPermissions.DELETE,\r\n*     Start: startDate,\r\n*     Expiry: expiryDate\r\n*   },\r\n*   Id: processAndDelete,\r\n* }];\r\n* \r\n* queueService.setQueueAcl(queueName, sharedAccessPolicies, function(error, queueResult, response) {\r\n*     // do whatever\r\n* });\r\n*/\r\nQueueService.prototype.setQueueAcl = function (queue, signedIdentifiers, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('setQueueAcl', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n  \r\n  var options = extend(true, {}, userOptions);\r\n\r\n  var policies = null;\r\n  if (signedIdentifiers) {\r\n    if(_.isArray(signedIdentifiers)) {\r\n      throw new TypeError(SR.INVALID_SIGNED_IDENTIFIERS);\r\n    }\r\n    policies = AclResult.serialize(signedIdentifiers);\r\n  }\r\n\r\n  var webResource = WebResource.put(queue)\r\n    .withQueryOption(QueryStringConstants.COMP, 'acl')\r\n    .withHeader(HeaderConstants.CONTENT_LENGTH, !azureutil.objectIsNull(policies) ? Buffer.byteLength(policies) : 0)\r\n    .withBody(policies);\r\n\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.containerResult = null;\r\n    if (!responseObject.error) {\r\n      responseObject.queueResult = new QueueResult(queue);\r\n      responseObject.queueResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      if (signedIdentifiers) {\r\n        responseObject.queueResult.signedIdentifiers = signedIdentifiers;\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.queueResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, webResource.body, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Retrieves a shared access signature token.\r\n*\r\n* @this {QueueService}\r\n* @param {string}                   queue                                               The queue name.\r\n* @param {object}                   sharedAccessPolicy                                  The shared access policy.\r\n* @param {string}                   [sharedAccessPolicy.Id]                             The signed identifier.\r\n* @param {object}                   [sharedAccessPolicy.AccessPolicy.Permissions]       The permission type.\r\n* @param {date|string}              [sharedAccessPolicy.AccessPolicy.Start]             The time at which the Shared Access Signature becomes valid (The UTC value will be used).\r\n* @param {date|string}              [sharedAccessPolicy.AccessPolicy.Expiry]            The time at which the Shared Access Signature becomes expired (The UTC value will be used).\r\n* @param {string}                   [sharedAccessPolicy.AccessPolicy.IPAddressOrRange]  An IP address or a range of IP addresses from which to accept requests. When specifying a range, note that the range is inclusive.\r\n* @param {string}                   sharedAccessPolicy.AccessPolicy.Protocols           The protocols permitted for a request made with the account SAS. \r\n*                                                                                       Possible values are both HTTPS and HTTP (https,http) or HTTPS only (https). The default value is https,http.\r\n* @return {string}                                                                      The shared access signature query string. Note this string does not contain the leading \"?\".\r\n*/\r\nQueueService.prototype.generateSharedAccessSignature = function (queue, sharedAccessPolicy) {\r\n  // check if the QueueService is able to generate a shared access signature\r\n  if (!this.storageCredentials || !this.storageCredentials.generateSignedQueryString) {\r\n    throw new Error(SR.CANNOT_CREATE_SAS_WITHOUT_ACCOUNT_KEY);\r\n  }\r\n\r\n  validate.validateArgs('generateSharedAccessSignature', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.object(sharedAccessPolicy, 'sharedAccessPolicy');\r\n  });\r\n\r\n  return this.storageCredentials.generateSignedQueryString(Constants.ServiceType.Queue, queue, sharedAccessPolicy, null);\r\n};\r\n\r\n/**\r\n* Checks to see if a queue exists.\r\n* @ignore\r\n*\r\n* @this {QueueService}\r\n* @param {string}             queue                                       The queue name.\r\n* @param {string}             primaryOnly                                 If true, the request will be executed against the primary storage location.\r\n* @param {object}             [options]                                   The request options.\r\n* @param {LocationMode}       [options.locationMode]                      Specifies the location mode used to decide which location the request should be sent to. \r\n*                                                                         Please see StorageUtilities.LocationMode for the possible values.\r\n* @param {int}                [options.timeoutIntervalInMs]               The server timeout interval, in milliseconds, to use for the request.\r\n* @param {int}                [options.clientRequestTimeoutInMs]          The timeout of client requests, in milliseconds, to use for the request.\r\n* @param {int}                [options.maximumExecutionTimeInMs]          The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r\n*                                                                         The maximum execution time interval begins at the time that the client begins building the request. The maximum\r\n*                                                                         execution time is checked intermittently while performing requests, and before executing retries.\r\n* @param {string}             [options.clientRequestId]                   A string that represents the client request ID with a 1KB character limit.\r\n* @param {bool}               [options.useNagleAlgorithm]                 Determines whether the Nagle algorithm is used; true to use the Nagle algorithm; otherwise, false.\r\n*                                                                         The default value is false.\r\n* @param {Function(error, result, response)}         callback             `error` will contain information\r\n*                                                                         if an error occurs; otherwise, `result` will contain\r\n*                                                                         the queue information including `exists` boolean member\r\n*                                                                         and `response` will contain information related to this operation.\r\n*\r\n*/\r\nQueueService.prototype._doesQueueExist = function (queue, primaryOnly, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('doesQueueExist', function(v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n  var webResource = WebResource.head(queue)\r\n    .withQueryOption(QueryStringConstants.COMP, 'metadata');\r\n\r\n  if(primaryOnly === false) {\r\n    options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  }\r\n\r\n  var processResponseCallback = function(responseObject, next) {\r\n    responseObject.queueResult = new QueueResult(queue);\r\n    responseObject.queueResult.exists = false;\r\n    \r\n    if (!responseObject.error) {\r\n      responseObject.queueResult.exists = true;\r\n      responseObject.queueResult.getPropertiesFromHeaders(responseObject.response.headers);\r\n      \r\n    } else if (responseObject.error && responseObject.error.statusCode === Constants.HttpConstants.HttpResponseCodes.NotFound) {\r\n      responseObject.error = null;\r\n      responseObject.queueResult.exists = false;\r\n      responseObject.response.isSuccessful = true;\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.queueResult, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n * @ignore\r\n */\r\nQueueService.prototype._getOrPeekMessages = function (queue, optionsOrCallback, callback) {\r\n  var userOptions;\r\n  azureutil.normalizeArgs(optionsOrCallback, callback, function (o, c) { userOptions = o; callback = c; });\r\n\r\n  validate.validateArgs('_getOrPeekMessages', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n    v.callback(callback);\r\n  });\r\n\r\n  var options = extend(true, {}, userOptions);\r\n\r\n  if (!options.numOfMessages) {\r\n    options.numOfMessages = 1;\r\n  }\r\n\r\n  var webResource = WebResource.get(queue + '/messages')\r\n    .withQueryOption(QueryStringConstants.NUM_OF_MESSAGES, options.numOfMessages)\r\n    .withQueryOption(QueryStringConstants.VISIBILITY_TIMEOUT, options.visibilityTimeout)\r\n    .withQueryOption(QueryStringConstants.PEEK_ONLY, options.peekOnly);\r\n\r\n  if (options.peekOnly) {\r\n    // For peek message, it's a read-only action and can be performed against secondary endpoint.\r\n    options.requestLocationMode = RequestLocationMode.PRIMARY_OR_SECONDARY;\r\n  }\r\n\r\n\r\n  var messageEncoder = this.messageEncoder;\r\n  var processResponseCallback = function (responseObject, next) {\r\n    responseObject.queueMessageResults = null;\r\n\r\n    if (!responseObject.error) {\r\n      responseObject.queueMessageResults = [];\r\n\r\n      if (responseObject.response.body.QueueMessagesList && responseObject.response.body.QueueMessagesList.QueueMessage) {\r\n        var messages = responseObject.response.body.QueueMessagesList.QueueMessage;\r\n\r\n        if (!_.isArray(messages)) {\r\n          messages = [ messages ];\r\n        }\r\n\r\n        messages.forEach(function (message) {\r\n          var queueMessageResult = QueueMessageResult.parse(message, messageEncoder);\r\n          responseObject.queueMessageResults.push(queueMessageResult);\r\n        });\r\n      }\r\n    }\r\n\r\n    var finalCallback = function (returnObject) {\r\n      callback(returnObject.error, returnObject.queueMessageResults, returnObject.response);\r\n    };\r\n\r\n    next(responseObject, finalCallback);\r\n  };\r\n\r\n  this.performRequest(webResource, null, options, processResponseCallback);\r\n};\r\n\r\n/**\r\n* Retrieves a queue URL.\r\n*\r\n* @param {string}                   queue                    The queue name.\r\n* @param {string}                   [sasToken]               The Shared Access Signature token.\r\n* @param {boolean}                  [primary]                A boolean representing whether to use the primary or the secondary endpoint.\r\n* @return {string}                                           The formatted URL string.\r\n* @example\r\n* var azure = require('azure-storage');\r\n* var queueService = azure.createQueueService();\r\n* var sharedAccessPolicy = {\r\n*   AccessPolicy: {\r\n*     Permissions: azure.QueueUtilities.SharedAccessPermissions.READ,\r\n*     Start: startDate,\r\n*     Expiry: expiryDate\r\n*   },\r\n* };\r\n* \r\n* var sasToken = queueService.generateSharedAccessSignature(queue, sharedAccessPolicy);\r\n* var sasUrl = queueService.getUrl(queue, sasToken);\r\n*/\r\nQueueService.prototype.getUrl = function (queue, sasToken, primary) {\r\n  validate.validateArgs('getUrl', function (v) {\r\n    v.string(queue, 'queue');\r\n    v.queueNameIsValid(queue);\r\n  });\r\n\r\n  return this._getUrl(queue, sasToken, primary);\r\n};\r\n\r\nmodule.exports = QueueService;\r\n","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar Constants = require('./../../../common/common.core').Constants;\r\nvar HeaderConstants = Constants.HeaderConstants;\r\n\r\n/**\r\n* Creates a new QueueResult object.\r\n* @class\r\n* The QueueResult class is used to store the queue information.\r\n* \r\n* @property   {string}                      name                                  The queue name.\r\n* @property   {object}                      metadata                              The metadata key/value pair.\r\n* @property   {number}                      approximateMessageCount               The approximate number of messages in the queue. This number is not lower than the actual number of messages in the queue, but could be higher.\r\n* @property   {Object.<string, AccessPolicy>}  signedIdentifiers                     The container ACL settings. See `[AccessPolicy]{@link AccessPolicy}` for detailed information.\r\n * \r\n* @constructor\r\n* @param {string} [name]                    The queue name.\r\n* @param {string} [metadata]                The metadata key/value pair.\r\n*/\r\nfunction QueueResult(name, metadata) {\r\n  if (name) {\r\n    this.name = name;\r\n  }\r\n\r\n  if (metadata) {\r\n    this.metadata = metadata;\r\n  }\r\n}\r\n\r\nQueueResult.parse = function (messageXml) {\r\n  var queueResult = new QueueResult();\r\n  for (var property in messageXml) {\r\n    if (messageXml.hasOwnProperty(property)) {\r\n      queueResult[property.toLowerCase()] = messageXml[property];\r\n    }\r\n  }\r\n\r\n  return queueResult;\r\n};\r\n\r\nQueueResult.prototype.getPropertiesFromHeaders = function (headers) {\r\n  var self = this;\r\n\r\n  var setPropertyFromHeaders = function (queueProperty, headerProperty, typeConverterFunc) {\r\n    if (!self[queueProperty] && headers[headerProperty.toLowerCase()]) {\r\n      if(typeConverterFunc) {\r\n        self[queueProperty] = typeConverterFunc(headers[headerProperty.toLowerCase()]);\r\n      } else{\r\n        self[queueProperty] = headers[headerProperty.toLowerCase()];\r\n      }\r\n    }\r\n  };\r\n\r\n  setPropertyFromHeaders('approximateMessageCount', HeaderConstants.APPROXIMATE_MESSAGES_COUNT, parseInt);\r\n};\r\n\r\nmodule.exports = QueueResult;","﻿// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Module dependencies.\r\nvar azureCommon = require('./../../../common/common.core');\r\nvar azureutil = azureCommon.util;\r\nvar xmlbuilder = azureCommon.xmlbuilder;\r\nvar Constants = azureCommon.Constants;\r\n\r\nvar HeaderConstants = Constants.HeaderConstants;\r\n\r\n/**\r\n* Creates a new QueueMessageResult object.\r\n* @class\r\n* The QueueMessageResult class is used to store the queue message information.\r\n* \r\n* @property   {string}                      queue                           The queue name.\r\n* @property   {string}                      messageId                       The message id.\r\n* @property   {string}                      popReceipt                      The pop receipt.\r\n* @property   {string}                      messageText                     The message text.\r\n* @property   {string}                      timeNextVisible                 The time next visible.\r\n* @property   {string}                      insertionTime                   The insertion time.\r\n* @property   {string}                      expirationTime                  The expiration time.\r\n* @property   {number}                      dequeueCount                    The dequeue count.\r\n * \r\n* @constructor\r\n* @param {string} [queue]                   The queue name.\r\n* @param {string} [messageId]               The message id.\r\n* @param {string} [popReceipt]              The pop receipt.\r\n*/\r\nfunction QueueMessageResult(queue, messageId, popReceipt) {\r\n  if (queue) {\r\n    this.queue = queue;\r\n  }\r\n\r\n  if (messageId) {\r\n    this.messageId = messageId;\r\n  }\r\n\r\n  if (popReceipt) {\r\n    this.popReceipt = popReceipt;\r\n  }\r\n}\r\n\r\n/**\r\n* Builds an XML representation for a queue message\r\n*\r\n* @param  {string}  messageJs    The queue message.\r\n* @param  {QueueMessageEncoder}  The message encoder.\r\n* @return {string} The XML queue message.\r\n*/\r\nQueueMessageResult.serialize = function (messageJs, encoder) {\r\n  var doc = xmlbuilder.create();\r\n  doc = doc.begin(Constants.QueueConstants.QUEUE_MESSAGE_ELEMENT, { version: '1.0', encoding: 'utf-8' });\r\n\r\n  if (messageJs) {\r\n    var message;\r\n    if (encoder !== null && encoder !== undefined) {\r\n      message = encoder.encode(messageJs);\r\n    } else {\r\n      message = messageJs;\r\n    }\r\n    \r\n    doc.ele(Constants.QueueConstants.MESSAGE_TEXT_ELEMENT)\r\n        .txt(message)\r\n      .up();\r\n  } else {\r\n    doc.ele(Constants.QueueConstants.MESSAGE_TEXT_ELEMENT).up();\r\n  }\r\n\r\n  return doc.doc().toString();\r\n};\r\n\r\n\r\n/**\r\n* Pase the XML representation of a queue message to a QueueMessageResult object.\r\n*\r\n* @param  {Object}  messageXml   The XML representation of the queue message.\r\n* @param  {QueueMessageEncoder}  The message encoder.\r\n* @return {QueueMessageResult}   The QueueMessageResult object.\r\n*/\r\nQueueMessageResult.parse = function (messageXml, encoder) {\r\n  var queueMessageResult = new QueueMessageResult();\r\n  for (var property in messageXml) {\r\n    if (property === Constants.QueueConstants.MESSAGE_TEXT_ELEMENT) {\r\n      if (encoder !== null && encoder !== undefined) {\r\n        queueMessageResult.messageText = encoder.decode(messageXml[property]);\r\n      } else {\r\n        queueMessageResult.messageText = messageXml[property];\r\n      }\r\n    } else {\r\n      var resultPropertyName = azureutil.normalizePropertyNameFromXML(property);\r\n      queueMessageResult[resultPropertyName] = messageXml[property];\r\n    }\r\n  }\r\n\r\n  // Convert dequeueCount to number\r\n  if (queueMessageResult.dequeueCount) {\r\n    queueMessageResult.dequeueCount = parseInt(queueMessageResult.dequeueCount);\r\n  }\r\n\r\n  return queueMessageResult;\r\n};\r\n\r\nQueueMessageResult.prototype.getPropertiesFromHeaders = function (headers) {\r\n  var self = this;\r\n\r\n  var setmessagePropertyFromHeaders = function (messageProperty, headerProperty) {\r\n    if (!self[messageProperty] && headers[headerProperty.toLowerCase()]) {\r\n      self[messageProperty] = headers[headerProperty.toLowerCase()];\r\n    }\r\n  };\r\n\r\n  setmessagePropertyFromHeaders('popReceipt', HeaderConstants.POP_RECEIPT);\r\n  setmessagePropertyFromHeaders('timeNextVisible', HeaderConstants.TIME_NEXT_VISIBLE);\r\n};\r\n\r\nmodule.exports = QueueMessageResult;","// \r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// \r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n// \r\n\r\n// Expose 'QueueUtilities'.\r\nexports = module.exports;\r\n\r\n/**\r\n* Defines enums for use with the Queue service.\r\n* @namespace QueueUtilities\r\n*/\r\nvar QueueUtilities = {\r\n\t/**\r\n  * Permission types.\r\n  *\r\n  * @const\r\n  * @enum {string}\r\n  */\r\n  SharedAccessPermissions: {\r\n    READ: 'r',\r\n    ADD: 'a',\r\n    UPDATE: 'u',\r\n    PROCESS: 'p'\r\n  }\r\n};\r\n\r\nmodule.exports = QueueUtilities;"],"sourceRoot":""}